
STM32H735_Disco_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f000  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029d0  0800f2d0  0800f2d0  000102d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011ca0  08011ca0  00012ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011ca8  08011ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011cac  08011cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  24000000  08011cb0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000150f4  24000090  08011d3c  00013090  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24015184  08011d3c  00013184  2**0
                  ALLOC
  9 .lwip_sec     00000160  30000000  30000000  00014000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001308c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00046fd8  00000000  00000000  000130ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00009bc1  00000000  00000000  0005a092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020e0  00000000  00000000  00063c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00003283  00000000  00000000  00065d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00044246  00000000  00000000  00068fbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00045e0a  00000000  00000000  000ad201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001719ce  00000000  00000000  000f300b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002649d9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006e30  00000000  00000000  00264a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 0001eaf9  00000000  00000000  0026b84c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0028a345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f2b8 	.word	0x0800f2b8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	0800f2b8 	.word	0x0800f2b8

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
	 /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	    * Useful for debugging issues.
	    */
	   __BKPT(0);
 80003b0:	be00      	bkpt	0x0000
}
 80003b2:	4770      	bx	lr

080003b4 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003b4:	4a40      	ldr	r2, [pc, #256]	@ (80004b8 <lwiperf_tcp_close+0x104>)
 80003b6:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80003b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80003bc:	4604      	mov	r4, r0
 80003be:	b087      	sub	sp, #28
 80003c0:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003c2:	b14b      	cbz	r3, 80003d8 <lwiperf_tcp_close+0x24>
    if (iter == item) {
 80003c4:	4298      	cmp	r0, r3
        lwiperf_all_connections = iter->next;
 80003c6:	681d      	ldr	r5, [r3, #0]
    if (iter == item) {
 80003c8:	d102      	bne.n	80003d0 <lwiperf_tcp_close+0x1c>
 80003ca:	e054      	b.n	8000476 <lwiperf_tcp_close+0xc2>
 80003cc:	429c      	cmp	r4, r3
 80003ce:	d051      	beq.n	8000474 <lwiperf_tcp_close+0xc0>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003d0:	461a      	mov	r2, r3
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d1f9      	bne.n	80003cc <lwiperf_tcp_close+0x18>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80003d8:	bb0c      	cbnz	r4, 800041e <lwiperf_tcp_close+0x6a>
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 80003da:	6920      	ldr	r0, [r4, #16]
 80003dc:	2800      	cmp	r0, #0
 80003de:	d03c      	beq.n	800045a <lwiperf_tcp_close+0xa6>
    tcp_arg(conn->conn_pcb, NULL);
 80003e0:	2100      	movs	r1, #0
 80003e2:	f008 f9a5 	bl	8008730 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	6920      	ldr	r0, [r4, #16]
 80003ea:	4611      	mov	r1, r2
 80003ec:	f008 fa02 	bl	80087f4 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 80003f0:	2100      	movs	r1, #0
 80003f2:	6920      	ldr	r0, [r4, #16]
 80003f4:	f008 f9be 	bl	8008774 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 80003f8:	2100      	movs	r1, #0
 80003fa:	6920      	ldr	r0, [r4, #16]
 80003fc:	f008 f9a0 	bl	8008740 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000400:	6920      	ldr	r0, [r4, #16]
 8000402:	2100      	movs	r1, #0
 8000404:	f008 f9d0 	bl	80087a8 <tcp_err>
    err = tcp_close(conn->conn_pcb);
 8000408:	6920      	ldr	r0, [r4, #16]
 800040a:	f009 f839 	bl	8009480 <tcp_close>
    if (err != ERR_OK) {
 800040e:	2800      	cmp	r0, #0
 8000410:	d147      	bne.n	80004a2 <lwiperf_tcp_close+0xee>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000412:	4620      	mov	r0, r4
}
 8000414:	b007      	add	sp, #28
 8000416:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800041a:	f006 bd13 	b.w	8006e44 <mem_free>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 800041e:	69a3      	ldr	r3, [r4, #24]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0da      	beq.n	80003da <lwiperf_tcp_close+0x26>
    now = sys_now();
 8000424:	f003 fde6 	bl	8003ff4 <sys_now>
    duration_ms = now - conn->time_started;
 8000428:	6963      	ldr	r3, [r4, #20]
    if (duration_ms == 0) {
 800042a:	1ac5      	subs	r5, r0, r3
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 800042c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (duration_ms == 0) {
 800042e:	d041      	beq.n	80004b4 <lwiperf_tcp_close+0x100>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 8000430:	fbb3 f7f5 	udiv	r7, r3, r5
 8000434:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 8000436:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 8000438:	4631      	mov	r1, r6
 800043a:	f8b2 c016 	ldrh.w	ip, [r2, #22]
 800043e:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 8000442:	9302      	str	r3, [sp, #8]
 8000444:	4663      	mov	r3, ip
 8000446:	e9cd 5703 	strd	r5, r7, [sp, #12]
 800044a:	8b15      	ldrh	r5, [r2, #24]
 800044c:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 800044e:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 8000450:	9500      	str	r5, [sp, #0]
 8000452:	47b0      	blx	r6
  if (conn->conn_pcb != NULL) {
 8000454:	6920      	ldr	r0, [r4, #16]
 8000456:	2800      	cmp	r0, #0
 8000458:	d1c2      	bne.n	80003e0 <lwiperf_tcp_close+0x2c>
    err = tcp_close(conn->server_pcb);
 800045a:	68e0      	ldr	r0, [r4, #12]
 800045c:	f009 f810 	bl	8009480 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8000460:	2800      	cmp	r0, #0
 8000462:	d0d6      	beq.n	8000412 <lwiperf_tcp_close+0x5e>
 8000464:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <lwiperf_tcp_close+0x108>)
 8000466:	f240 120d 	movw	r2, #269	@ 0x10d
 800046a:	4915      	ldr	r1, [pc, #84]	@ (80004c0 <lwiperf_tcp_close+0x10c>)
 800046c:	4815      	ldr	r0, [pc, #84]	@ (80004c4 <lwiperf_tcp_close+0x110>)
 800046e:	f00d ffbd 	bl	800e3ec <iprintf>
 8000472:	e7ce      	b.n	8000412 <lwiperf_tcp_close+0x5e>
        prev->next = iter->next;
 8000474:	6825      	ldr	r5, [r4, #0]
 8000476:	6015      	str	r5, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000478:	2d00      	cmp	r5, #0
 800047a:	d0d0      	beq.n	800041e <lwiperf_tcp_close+0x6a>
        LWIP_ASSERT("duplicate entry", iter != item);
 800047c:	42ac      	cmp	r4, r5
 800047e:	f8df 903c 	ldr.w	r9, [pc, #60]	@ 80004bc <lwiperf_tcp_close+0x108>
 8000482:	f8df 8044 	ldr.w	r8, [pc, #68]	@ 80004c8 <lwiperf_tcp_close+0x114>
 8000486:	4f0f      	ldr	r7, [pc, #60]	@ (80004c4 <lwiperf_tcp_close+0x110>)
 8000488:	d004      	beq.n	8000494 <lwiperf_tcp_close+0xe0>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 800048a:	682d      	ldr	r5, [r5, #0]
 800048c:	2d00      	cmp	r5, #0
 800048e:	d0c6      	beq.n	800041e <lwiperf_tcp_close+0x6a>
        LWIP_ASSERT("duplicate entry", iter != item);
 8000490:	42ac      	cmp	r4, r5
 8000492:	d1fa      	bne.n	800048a <lwiperf_tcp_close+0xd6>
 8000494:	464b      	mov	r3, r9
 8000496:	22d0      	movs	r2, #208	@ 0xd0
 8000498:	4641      	mov	r1, r8
 800049a:	4638      	mov	r0, r7
 800049c:	f00d ffa6 	bl	800e3ec <iprintf>
 80004a0:	e7f3      	b.n	800048a <lwiperf_tcp_close+0xd6>
      tcp_abort(conn->conn_pcb);
 80004a2:	6920      	ldr	r0, [r4, #16]
 80004a4:	f008 fe0c 	bl	80090c0 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80004a8:	4620      	mov	r0, r4
}
 80004aa:	b007      	add	sp, #28
 80004ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 80004b0:	f006 bcc8 	b.w	8006e44 <mem_free>
      bandwidth_kbitpsec = 0;
 80004b4:	462f      	mov	r7, r5
 80004b6:	e7be      	b.n	8000436 <lwiperf_tcp_close+0x82>
 80004b8:	240000ac 	.word	0x240000ac
 80004bc:	0800f2d0 	.word	0x0800f2d0
 80004c0:	0800f320 	.word	0x0800f320
 80004c4:	0800f2f8 	.word	0x0800f2f8
 80004c8:	0800f2e8 	.word	0x0800f2e8

080004cc <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80004cc:	2800      	cmp	r0, #0
 80004ce:	bf18      	it	ne
 80004d0:	2900      	cmpne	r1, #0
 80004d2:	f000 8091 	beq.w	80005f8 <lwiperf_tcp_accept+0x12c>
 80004d6:	2a00      	cmp	r2, #0
 80004d8:	f040 808e 	bne.w	80005f8 <lwiperf_tcp_accept+0x12c>
{
 80004dc:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 80004de:	7943      	ldrb	r3, [r0, #5]
 80004e0:	460e      	mov	r6, r1
 80004e2:	4604      	mov	r4, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d06a      	beq.n	80005be <lwiperf_tcp_accept+0xf2>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80004e8:	68e3      	ldr	r3, [r4, #12]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d071      	beq.n	80005d2 <lwiperf_tcp_accept+0x106>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80004ee:	6923      	ldr	r3, [r4, #16]
 80004f0:	b133      	cbz	r3, 8000500 <lwiperf_tcp_accept+0x34>
 80004f2:	4b43      	ldr	r3, [pc, #268]	@ (8000600 <lwiperf_tcp_accept+0x134>)
 80004f4:	f240 225a 	movw	r2, #602	@ 0x25a
 80004f8:	4942      	ldr	r1, [pc, #264]	@ (8000604 <lwiperf_tcp_accept+0x138>)
 80004fa:	4843      	ldr	r0, [pc, #268]	@ (8000608 <lwiperf_tcp_accept+0x13c>)
 80004fc:	f00d ff76 	bl	800e3ec <iprintf>
  if (s->specific_remote) {
 8000500:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000504:	68a2      	ldr	r2, [r4, #8]
  if (s->specific_remote) {
 8000506:	2b00      	cmp	r3, #0
 8000508:	d137      	bne.n	800057a <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 800050a:	b132      	cbz	r2, 800051a <lwiperf_tcp_accept+0x4e>
 800050c:	4b3c      	ldr	r3, [pc, #240]	@ (8000600 <lwiperf_tcp_accept+0x134>)
 800050e:	f240 2262 	movw	r2, #610	@ 0x262
 8000512:	493e      	ldr	r1, [pc, #248]	@ (800060c <lwiperf_tcp_accept+0x140>)
 8000514:	483c      	ldr	r0, [pc, #240]	@ (8000608 <lwiperf_tcp_accept+0x13c>)
 8000516:	f00d ff69 	bl	800e3ec <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 800051a:	2048      	movs	r0, #72	@ 0x48
 800051c:	f006 fe3a 	bl	8007194 <mem_malloc>
  if (conn == NULL) {
 8000520:	4605      	mov	r5, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d065      	beq.n	80005f2 <lwiperf_tcp_accept+0x126>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8000526:	2248      	movs	r2, #72	@ 0x48
 8000528:	2100      	movs	r1, #0
 800052a:	f00d ff81 	bl	800e430 <memset>
  conn->base.tcp = 1;
 800052e:	f240 1301 	movw	r3, #257	@ 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 8000532:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 8000534:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 8000536:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 8000538:	f003 fd5c 	bl	8003ff4 <sys_now>
  conn->report_fn = s->report_fn;
 800053c:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800053e:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 8000540:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 8000544:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 8000546:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 8000548:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 800054a:	f008 f8f1 	bl	8008730 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800054e:	4930      	ldr	r1, [pc, #192]	@ (8000610 <lwiperf_tcp_accept+0x144>)
 8000550:	4630      	mov	r0, r6
 8000552:	f008 f8f5 	bl	8008740 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000556:	2202      	movs	r2, #2
 8000558:	492e      	ldr	r1, [pc, #184]	@ (8000614 <lwiperf_tcp_accept+0x148>)
 800055a:	4630      	mov	r0, r6
 800055c:	f008 f94a 	bl	80087f4 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 8000560:	492d      	ldr	r1, [pc, #180]	@ (8000618 <lwiperf_tcp_accept+0x14c>)
 8000562:	6928      	ldr	r0, [r5, #16]
 8000564:	f008 f920 	bl	80087a8 <tcp_err>

  if (s->specific_remote) {
 8000568:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800056c:	b973      	cbnz	r3, 800058c <lwiperf_tcp_accept+0xc0>
  item->next = lwiperf_all_connections;
 800056e:	4e2b      	ldr	r6, [pc, #172]	@ (800061c <lwiperf_tcp_accept+0x150>)
 8000570:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 8000572:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000574:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 8000576:	6035      	str	r5, [r6, #0]
}
 8000578:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 800057a:	2a00      	cmp	r2, #0
 800057c:	d031      	beq.n	80005e2 <lwiperf_tcp_accept+0x116>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800057e:	6872      	ldr	r2, [r6, #4]
 8000580:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8000582:	429a      	cmp	r2, r3
 8000584:	d0c9      	beq.n	800051a <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8000586:	f06f 0005 	mvn.w	r0, #5
}
 800058a:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 800058c:	68a2      	ldr	r2, [r4, #8]
 800058e:	4e23      	ldr	r6, [pc, #140]	@ (800061c <lwiperf_tcp_accept+0x150>)
 8000590:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000592:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8000596:	b153      	cbz	r3, 80005ae <lwiperf_tcp_accept+0xe2>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000598:	6831      	ldr	r1, [r6, #0]
 800059a:	b141      	cbz	r1, 80005ae <lwiperf_tcp_accept+0xe2>
    if (iter == item) {
 800059c:	428a      	cmp	r2, r1
 800059e:	d0e8      	beq.n	8000572 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80005a0:	460b      	mov	r3, r1
 80005a2:	e001      	b.n	80005a8 <lwiperf_tcp_accept+0xdc>
    if (iter == item) {
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d0e4      	beq.n	8000572 <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1fa      	bne.n	80005a4 <lwiperf_tcp_accept+0xd8>
      s->report_fn = NULL;
 80005ae:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005b0:	2102      	movs	r1, #2
 80005b2:	4620      	mov	r0, r4
      s->report_fn = NULL;
 80005b4:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005b6:	f7ff fefd 	bl	80003b4 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 80005ba:	6831      	ldr	r1, [r6, #0]
 80005bc:	e7d9      	b.n	8000572 <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 80005be:	4b10      	ldr	r3, [pc, #64]	@ (8000600 <lwiperf_tcp_accept+0x134>)
 80005c0:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80005c4:	4916      	ldr	r1, [pc, #88]	@ (8000620 <lwiperf_tcp_accept+0x154>)
 80005c6:	4810      	ldr	r0, [pc, #64]	@ (8000608 <lwiperf_tcp_accept+0x13c>)
 80005c8:	f00d ff10 	bl	800e3ec <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80005cc:	68e3      	ldr	r3, [r4, #12]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d18d      	bne.n	80004ee <lwiperf_tcp_accept+0x22>
 80005d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000600 <lwiperf_tcp_accept+0x134>)
 80005d4:	f240 2259 	movw	r2, #601	@ 0x259
 80005d8:	4912      	ldr	r1, [pc, #72]	@ (8000624 <lwiperf_tcp_accept+0x158>)
 80005da:	480b      	ldr	r0, [pc, #44]	@ (8000608 <lwiperf_tcp_accept+0x13c>)
 80005dc:	f00d ff06 	bl	800e3ec <iprintf>
 80005e0:	e785      	b.n	80004ee <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80005e2:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <lwiperf_tcp_accept+0x134>)
 80005e4:	f44f 7217 	mov.w	r2, #604	@ 0x25c
 80005e8:	490f      	ldr	r1, [pc, #60]	@ (8000628 <lwiperf_tcp_accept+0x15c>)
 80005ea:	4807      	ldr	r0, [pc, #28]	@ (8000608 <lwiperf_tcp_accept+0x13c>)
 80005ec:	f00d fefe 	bl	800e3ec <iprintf>
 80005f0:	e7c5      	b.n	800057e <lwiperf_tcp_accept+0xb2>
    return ERR_MEM;
 80005f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80005f8:	f06f 0005 	mvn.w	r0, #5
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	0800f2d0 	.word	0x0800f2d0
 8000604:	0800f34c 	.word	0x0800f34c
 8000608:	0800f2f8 	.word	0x0800f2f8
 800060c:	0800f388 	.word	0x0800f388
 8000610:	08000939 	.word	0x08000939
 8000614:	08000771 	.word	0x08000771
 8000618:	0800062d 	.word	0x0800062d
 800061c:	240000ac 	.word	0x240000ac
 8000620:	0800f328 	.word	0x0800f328
 8000624:	0800f338 	.word	0x0800f338
 8000628:	0800f360 	.word	0x0800f360

0800062c <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 800062c:	2105      	movs	r1, #5
 800062e:	f7ff bec1 	b.w	80003b4 <lwiperf_tcp_close>
 8000632:	bf00      	nop

08000634 <lwiperf_tcp_client_send_more>:
{
 8000634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000638:	4604      	mov	r4, r0
 800063a:	b110      	cbz	r0, 8000642 <lwiperf_tcp_client_send_more+0xe>
 800063c:	7903      	ldrb	r3, [r0, #4]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d16e      	bne.n	8000720 <lwiperf_tcp_client_send_more+0xec>
 8000642:	4b39      	ldr	r3, [pc, #228]	@ (8000728 <lwiperf_tcp_client_send_more+0xf4>)
 8000644:	f240 121d 	movw	r2, #285	@ 0x11d
 8000648:	4938      	ldr	r1, [pc, #224]	@ (800072c <lwiperf_tcp_client_send_more+0xf8>)
 800064a:	4839      	ldr	r0, [pc, #228]	@ (8000730 <lwiperf_tcp_client_send_more+0xfc>)
 800064c:	f00d fece 	bl	800e3ec <iprintf>
      u32_t time_ms = time * 10;
 8000650:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000654:	f8df b0e0 	ldr.w	fp, [pc, #224]	@ 8000738 <lwiperf_tcp_client_send_more+0x104>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000658:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800065a:	0602      	lsls	r2, r0, #24
 800065c:	d534      	bpl.n	80006c8 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 800065e:	f003 fcc9 	bl	8003ff4 <sys_now>
      u32_t diff_ms = now - conn->time_started;
 8000662:	6963      	ldr	r3, [r4, #20]
      u32_t now = sys_now();
 8000664:	4605      	mov	r5, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000666:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      u32_t diff_ms = now - conn->time_started;
 8000668:	1aed      	subs	r5, r5, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 800066a:	f006 fb2d 	bl	8006cc8 <lwip_htonl>
      u32_t time_ms = time * 10;
 800066e:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 8000672:	4285      	cmp	r5, r0
 8000674:	d22d      	bcs.n	80006d2 <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 8000676:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000678:	2b17      	cmp	r3, #23
 800067a:	d831      	bhi.n	80006e0 <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800067c:	f104 0528 	add.w	r5, r4, #40	@ 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000680:	f1c3 0a18 	rsb	sl, r3, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 8000684:	2601      	movs	r6, #1
    send_more = 0;
 8000686:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 800068a:	441d      	add	r5, r3
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800068c:	fa1f fa8a 	uxth.w	sl, sl
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 8000690:	f240 27d9 	movw	r7, #729	@ 0x2d9
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 8000694:	4633      	mov	r3, r6
 8000696:	4652      	mov	r2, sl
 8000698:	4629      	mov	r1, r5
 800069a:	6920      	ldr	r0, [r4, #16]
 800069c:	f00a fdc6 	bl	800b22c <tcp_write>
      if (err ==  ERR_MEM) {
 80006a0:	1c43      	adds	r3, r0, #1
 80006a2:	d00c      	beq.n	80006be <lwiperf_tcp_client_send_more+0x8a>
    if (err == ERR_OK) {
 80006a4:	b928      	cbnz	r0, 80006b2 <lwiperf_tcp_client_send_more+0x7e>
      conn->bytes_transferred += txlen;
 80006a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006a8:	4453      	add	r3, sl
 80006aa:	6263      	str	r3, [r4, #36]	@ 0x24
  } while (send_more);
 80006ac:	f1b8 0f00 	cmp.w	r8, #0
 80006b0:	d1d2      	bne.n	8000658 <lwiperf_tcp_client_send_more+0x24>
  tcp_output(conn->conn_pcb);
 80006b2:	6920      	ldr	r0, [r4, #16]
 80006b4:	f00b fc42 	bl	800bf3c <tcp_output>
}
 80006b8:	2000      	movs	r0, #0
 80006ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txlen /= 2;
 80006be:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 80006c2:	45ba      	cmp	sl, r7
 80006c4:	d8e6      	bhi.n	8000694 <lwiperf_tcp_client_send_more+0x60>
 80006c6:	e7f4      	b.n	80006b2 <lwiperf_tcp_client_send_more+0x7e>
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 80006c8:	f006 fafe 	bl	8006cc8 <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 80006cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80006ce:	4283      	cmp	r3, r0
 80006d0:	d8d2      	bhi.n	8000678 <lwiperf_tcp_client_send_more+0x44>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 80006d2:	4620      	mov	r0, r4
 80006d4:	2101      	movs	r1, #1
 80006d6:	f7ff fe6d 	bl	80003b4 <lwiperf_tcp_close>
}
 80006da:	2000      	movs	r0, #0
 80006dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (conn->bytes_transferred < 48) {
 80006e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80006e2:	d809      	bhi.n	80006f8 <lwiperf_tcp_client_send_more+0xc4>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006e4:	18e5      	adds	r5, r4, r3
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006e6:	f1c3 0330 	rsb	r3, r3, #48	@ 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 80006ea:	2603      	movs	r6, #3
      send_more = 1;
 80006ec:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 80006f0:	3510      	adds	r5, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 80006f2:	fa1f fa83 	uxth.w	sl, r3
      send_more = 1;
 80006f6:	e7cb      	b.n	8000690 <lwiperf_tcp_client_send_more+0x5c>
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006f8:	fbab 1203 	umull	r1, r2, fp, r3
      apiflags = 0; /* no copying needed */
 80006fc:	f240 5a9c 	movw	sl, #1436	@ 0x59c
 8000700:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 8000704:	2600      	movs	r6, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000706:	08d2      	lsrs	r2, r2, #3
      apiflags = 0; /* no copying needed */
 8000708:	f04f 0801 	mov.w	r8, #1
 800070c:	2b30      	cmp	r3, #48	@ 0x30
 800070e:	bf18      	it	ne
 8000710:	468a      	movne	sl, r1
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000712:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000716:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800071a:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <lwiperf_tcp_client_send_more+0x100>)
 800071c:	189d      	adds	r5, r3, r2
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 800071e:	e7b7      	b.n	8000690 <lwiperf_tcp_client_send_more+0x5c>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000720:	7943      	ldrb	r3, [r0, #5]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d094      	beq.n	8000650 <lwiperf_tcp_client_send_more+0x1c>
 8000726:	e78c      	b.n	8000642 <lwiperf_tcp_client_send_more+0xe>
 8000728:	0800f2d0 	.word	0x0800f2d0
 800072c:	0800f3b0 	.word	0x0800f3b0
 8000730:	0800f2f8 	.word	0x0800f2f8
 8000734:	080113e8 	.word	0x080113e8
 8000738:	cccccccd 	.word	0xcccccccd

0800073c <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 800073c:	6903      	ldr	r3, [r0, #16]
 800073e:	428b      	cmp	r3, r1
{
 8000740:	b510      	push	{r4, lr}
 8000742:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000744:	d006      	beq.n	8000754 <lwiperf_tcp_client_sent+0x18>
 8000746:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <lwiperf_tcp_client_sent+0x28>)
 8000748:	f44f 72b3 	mov.w	r2, #358	@ 0x166
 800074c:	4906      	ldr	r1, [pc, #24]	@ (8000768 <lwiperf_tcp_client_sent+0x2c>)
 800074e:	4807      	ldr	r0, [pc, #28]	@ (800076c <lwiperf_tcp_client_sent+0x30>)
 8000750:	f00d fe4c 	bl	800e3ec <iprintf>
  conn->poll_count = 0;
 8000754:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000756:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000758:	f884 3020 	strb.w	r3, [r4, #32]
}
 800075c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000760:	f7ff bf68 	b.w	8000634 <lwiperf_tcp_client_send_more>
 8000764:	0800f2d0 	.word	0x0800f2d0
 8000768:	0800f3c0 	.word	0x0800f3c0
 800076c:	0800f2f8 	.word	0x0800f2f8

08000770 <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000770:	6903      	ldr	r3, [r0, #16]
 8000772:	428b      	cmp	r3, r1
{
 8000774:	b510      	push	{r4, lr}
 8000776:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000778:	d006      	beq.n	8000788 <lwiperf_tcp_poll+0x18>
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <lwiperf_tcp_poll+0x48>)
 800077c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8000780:	490e      	ldr	r1, [pc, #56]	@ (80007bc <lwiperf_tcp_poll+0x4c>)
 8000782:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <lwiperf_tcp_poll+0x50>)
 8000784:	f00d fe32 	bl	800e3ec <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000788:	f894 3020 	ldrb.w	r3, [r4, #32]
 800078c:	3301      	adds	r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b09      	cmp	r3, #9
 8000792:	f884 3020 	strb.w	r3, [r4, #32]
 8000796:	d808      	bhi.n	80007aa <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000798:	7963      	ldrb	r3, [r4, #5]
 800079a:	b10b      	cbz	r3, 80007a0 <lwiperf_tcp_poll+0x30>
}
 800079c:	2000      	movs	r0, #0
 800079e:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 80007a0:	4620      	mov	r0, r4
 80007a2:	f7ff ff47 	bl	8000634 <lwiperf_tcp_client_send_more>
}
 80007a6:	2000      	movs	r0, #0
 80007a8:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80007aa:	4620      	mov	r0, r4
 80007ac:	2102      	movs	r1, #2
 80007ae:	f7ff fe01 	bl	80003b4 <lwiperf_tcp_close>
}
 80007b2:	2000      	movs	r0, #0
 80007b4:	bd10      	pop	{r4, pc}
 80007b6:	bf00      	nop
 80007b8:	0800f2d0 	.word	0x0800f2d0
 80007bc:	0800f3d0 	.word	0x0800f3d0
 80007c0:	0800f2f8 	.word	0x0800f2f8

080007c4 <lwiperf_tx_start_impl>:
{
 80007c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c8:	468a      	mov	sl, r1
 80007ca:	b083      	sub	sp, #12
 80007cc:	4616      	mov	r6, r2
 80007ce:	469b      	mov	fp, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 80007d0:	4607      	mov	r7, r0
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d065      	beq.n	80008a2 <lwiperf_tx_start_impl+0xde>
  *new_conn = NULL;
 80007d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80007d8:	f04f 0800 	mov.w	r8, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007dc:	2048      	movs	r0, #72	@ 0x48
  *new_conn = NULL;
 80007de:	f8c3 8000 	str.w	r8, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007e2:	f006 fcd7 	bl	8007194 <mem_malloc>
  if (client_conn == NULL) {
 80007e6:	4604      	mov	r4, r0
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d065      	beq.n	80008b8 <lwiperf_tx_start_impl+0xf4>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80007ec:	4640      	mov	r0, r8
 80007ee:	f008 fd75 	bl	80092dc <tcp_new_ip_type>
  if (newpcb == NULL) {
 80007f2:	4605      	mov	r5, r0
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d05c      	beq.n	80008b2 <lwiperf_tx_start_impl+0xee>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80007f8:	2248      	movs	r2, #72	@ 0x48
 80007fa:	4641      	mov	r1, r8
 80007fc:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 80007fe:	f04f 0901 	mov.w	r9, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 8000802:	f00d fe15 	bl	800e430 <memset>
  client_conn->base.related_master_state = related_master_state;
 8000806:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  client_conn->conn_pcb = newpcb;
 8000808:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 800080a:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 800080c:	f884 9004 	strb.w	r9, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000810:	f003 fbf0 	bl	8003ff4 <sys_now>
  client_conn->report_arg = report_arg;
 8000814:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  client_conn->report_fn = report_fn;
 8000816:	f8c4 b018 	str.w	fp, [r4, #24]
  tcp_arg(newpcb, client_conn);
 800081a:	4621      	mov	r1, r4
  client_conn->report_arg = report_arg;
 800081c:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 800081e:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 8000820:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 8000824:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000826:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800082a:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800082e:	6832      	ldr	r2, [r6, #0]
 8000830:	6873      	ldr	r3, [r6, #4]
 8000832:	68f0      	ldr	r0, [r6, #12]
 8000834:	f8c4 c030 	str.w	ip, [r4, #48]	@ 0x30
 8000838:	6360      	str	r0, [r4, #52]	@ 0x34
  tcp_arg(newpcb, client_conn);
 800083a:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 800083c:	62a2      	str	r2, [r4, #40]	@ 0x28
 800083e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000840:	6973      	ldr	r3, [r6, #20]
 8000842:	6932      	ldr	r2, [r6, #16]
 8000844:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8000846:	63a2      	str	r2, [r4, #56]	@ 0x38
  client_conn->have_settings_buf = 1;
 8000848:	f884 9040 	strb.w	r9, [r4, #64]	@ 0x40
  tcp_arg(newpcb, client_conn);
 800084c:	f007 ff70 	bl	8008730 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000850:	4628      	mov	r0, r5
 8000852:	491b      	ldr	r1, [pc, #108]	@ (80008c0 <lwiperf_tx_start_impl+0xfc>)
 8000854:	f007 ff8e 	bl	8008774 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000858:	2202      	movs	r2, #2
 800085a:	4628      	mov	r0, r5
 800085c:	4919      	ldr	r1, [pc, #100]	@ (80008c4 <lwiperf_tx_start_impl+0x100>)
 800085e:	f007 ffc9 	bl	80087f4 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 8000862:	4628      	mov	r0, r5
 8000864:	4918      	ldr	r1, [pc, #96]	@ (80008c8 <lwiperf_tx_start_impl+0x104>)
 8000866:	f007 ff9f 	bl	80087a8 <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 800086a:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800086c:	4628      	mov	r0, r5
 800086e:	4652      	mov	r2, sl
  ip_addr_copy(remote_addr, *remote_ip);
 8000870:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000872:	a901      	add	r1, sp, #4
 8000874:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <lwiperf_tx_start_impl+0x108>)
 8000876:	f007 fe65 	bl	8008544 <tcp_connect>
  if (err != ERR_OK) {
 800087a:	4605      	mov	r5, r0
 800087c:	b948      	cbnz	r0, 8000892 <lwiperf_tx_start_impl+0xce>
  item->next = lwiperf_all_connections;
 800087e:	4b14      	ldr	r3, [pc, #80]	@ (80008d0 <lwiperf_tx_start_impl+0x10c>)
 8000880:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000882:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 8000884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  item->next = lwiperf_all_connections;
 8000886:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000888:	601c      	str	r4, [r3, #0]
}
 800088a:	4628      	mov	r0, r5
 800088c:	b003      	add	sp, #12
 800088e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000892:	4620      	mov	r0, r4
 8000894:	2102      	movs	r1, #2
 8000896:	f7ff fd8d 	bl	80003b4 <lwiperf_tcp_close>
}
 800089a:	4628      	mov	r0, r5
 800089c:	b003      	add	sp, #12
 800089e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <lwiperf_tx_start_impl+0x110>)
 80008a4:	f240 128b 	movw	r2, #395	@ 0x18b
 80008a8:	490b      	ldr	r1, [pc, #44]	@ (80008d8 <lwiperf_tx_start_impl+0x114>)
 80008aa:	480c      	ldr	r0, [pc, #48]	@ (80008dc <lwiperf_tx_start_impl+0x118>)
 80008ac:	f00d fd9e 	bl	800e3ec <iprintf>
  LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 80008b0:	e791      	b.n	80007d6 <lwiperf_tx_start_impl+0x12>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80008b2:	4620      	mov	r0, r4
 80008b4:	f006 fac6 	bl	8006e44 <mem_free>
    return ERR_MEM;
 80008b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80008bc:	e7e5      	b.n	800088a <lwiperf_tx_start_impl+0xc6>
 80008be:	bf00      	nop
 80008c0:	0800073d 	.word	0x0800073d
 80008c4:	08000771 	.word	0x08000771
 80008c8:	0800062d 	.word	0x0800062d
 80008cc:	08000b0d 	.word	0x08000b0d
 80008d0:	240000ac 	.word	0x240000ac
 80008d4:	0800f2d0 	.word	0x0800f2d0
 80008d8:	0800f3e0 	.word	0x0800f3e0
 80008dc:	0800f2f8 	.word	0x0800f2f8

080008e0 <lwiperf_tx_start_passive>:
{
 80008e0:	b530      	push	{r4, r5, lr}
 80008e2:	4604      	mov	r4, r0
 80008e4:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80008e6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80008e8:	f006 f9ee 	bl	8006cc8 <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80008ec:	6925      	ldr	r5, [r4, #16]
 80008ee:	68a3      	ldr	r3, [r4, #8]
 80008f0:	aa05      	add	r2, sp, #20
 80008f2:	b281      	uxth	r1, r0
 80008f4:	1d28      	adds	r0, r5, #4
 80008f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80008fa:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 80008fe:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000902:	9500      	str	r5, [sp, #0]
 8000904:	f7ff ff5e 	bl	80007c4 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 8000908:	4604      	mov	r4, r0
 800090a:	b918      	cbnz	r0, 8000914 <lwiperf_tx_start_passive+0x34>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800090c:	9d05      	ldr	r5, [sp, #20]
 800090e:	b125      	cbz	r5, 800091a <lwiperf_tx_start_passive+0x3a>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000910:	2300      	movs	r3, #0
 8000912:	62ab      	str	r3, [r5, #40]	@ 0x28
}
 8000914:	4620      	mov	r0, r4
 8000916:	b007      	add	sp, #28
 8000918:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <lwiperf_tx_start_passive+0x4c>)
 800091c:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8000920:	4903      	ldr	r1, [pc, #12]	@ (8000930 <lwiperf_tx_start_passive+0x50>)
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <lwiperf_tx_start_passive+0x54>)
 8000924:	f00d fd62 	bl	800e3ec <iprintf>
 8000928:	e7f2      	b.n	8000910 <lwiperf_tx_start_passive+0x30>
 800092a:	bf00      	nop
 800092c:	0800f2d0 	.word	0x0800f2d0
 8000930:	0800f3f4 	.word	0x0800f3f4
 8000934:	0800f2f8 	.word	0x0800f2f8

08000938 <lwiperf_tcp_recv>:
{
 8000938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800093c:	4698      	mov	r8, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800093e:	6903      	ldr	r3, [r0, #16]
{
 8000940:	4604      	mov	r4, r0
 8000942:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000944:	428b      	cmp	r3, r1
{
 8000946:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000948:	d006      	beq.n	8000958 <lwiperf_tcp_recv+0x20>
 800094a:	4b6a      	ldr	r3, [pc, #424]	@ (8000af4 <lwiperf_tcp_recv+0x1bc>)
 800094c:	f44f 72e8 	mov.w	r2, #464	@ 0x1d0
 8000950:	4969      	ldr	r1, [pc, #420]	@ (8000af8 <lwiperf_tcp_recv+0x1c0>)
 8000952:	486a      	ldr	r0, [pc, #424]	@ (8000afc <lwiperf_tcp_recv+0x1c4>)
 8000954:	f00d fd4a 	bl	800e3ec <iprintf>
  if (err != ERR_OK) {
 8000958:	f1b8 0f00 	cmp.w	r8, #0
 800095c:	f040 8092 	bne.w	8000a84 <lwiperf_tcp_recv+0x14c>
  if (p == NULL) {
 8000960:	2d00      	cmp	r5, #0
 8000962:	f000 8096 	beq.w	8000a92 <lwiperf_tcp_recv+0x15a>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000966:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  tot_len = p->tot_len;
 800096a:	892f      	ldrh	r7, [r5, #8]
  conn->poll_count = 0;
 800096c:	f884 8020 	strb.w	r8, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000970:	bb33      	cbnz	r3, 80009c0 <lwiperf_tcp_recv+0x88>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000972:	2f17      	cmp	r7, #23
 8000974:	d961      	bls.n	8000a3a <lwiperf_tcp_recv+0x102>
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000976:	4643      	mov	r3, r8
 8000978:	2218      	movs	r2, #24
 800097a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800097e:	4628      	mov	r0, r5
 8000980:	f007 fb40 	bl	8008004 <pbuf_copy_partial>
 8000984:	2818      	cmp	r0, #24
 8000986:	f040 809b 	bne.w	8000ac0 <lwiperf_tcp_recv+0x188>
      conn->have_settings_buf = 1;
 800098a:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 800098c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
      conn->have_settings_buf = 1;
 800098e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000992:	4b5b      	ldr	r3, [pc, #364]	@ (8000b00 <lwiperf_tcp_recv+0x1c8>)
 8000994:	4393      	bics	r3, r2
 8000996:	f000 809f 	beq.w	8000ad8 <lwiperf_tcp_recv+0x1a0>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 800099a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800099c:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 800099e:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80009a0:	6263      	str	r3, [r4, #36]	@ 0x24
    if (conn->bytes_transferred <= 24) {
 80009a2:	d819      	bhi.n	80009d8 <lwiperf_tcp_recv+0xa0>
      conn->time_started = sys_now();
 80009a4:	f003 fb26 	bl	8003ff4 <sys_now>
 80009a8:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 80009aa:	8929      	ldrh	r1, [r5, #8]
 80009ac:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 80009ae:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 80009b0:	f007 fd88 	bl	80084c4 <tcp_recved>
      pbuf_free(p);
 80009b4:	4628      	mov	r0, r5
 80009b6:	f007 f873 	bl	8007aa0 <pbuf_free>
}
 80009ba:	2000      	movs	r0, #0
 80009bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 80009c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80009c2:	03da      	lsls	r2, r3, #15
 80009c4:	f5b2 2f40 	cmp.w	r2, #786432	@ 0xc0000
 80009c8:	d115      	bne.n	80009f6 <lwiperf_tcp_recv+0xbe>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 80009ca:	2f17      	cmp	r7, #23
 80009cc:	d935      	bls.n	8000a3a <lwiperf_tcp_recv+0x102>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 80009ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80009d0:	0612      	lsls	r2, r2, #24
 80009d2:	d46a      	bmi.n	8000aaa <lwiperf_tcp_recv+0x172>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80009d4:	3318      	adds	r3, #24
 80009d6:	6263      	str	r3, [r4, #36]	@ 0x24
    conn->next_num = 4; /* 24 bytes received... */
 80009d8:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 80009da:	2118      	movs	r1, #24
 80009dc:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 80009de:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    tmp = pbuf_remove_header(p, 24);
 80009e2:	f006 fffb 	bl	80079dc <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 80009e6:	b130      	cbz	r0, 80009f6 <lwiperf_tcp_recv+0xbe>
 80009e8:	4b42      	ldr	r3, [pc, #264]	@ (8000af4 <lwiperf_tcp_recv+0x1bc>)
 80009ea:	f240 2211 	movw	r2, #529	@ 0x211
 80009ee:	4945      	ldr	r1, [pc, #276]	@ (8000b04 <lwiperf_tcp_recv+0x1cc>)
 80009f0:	4842      	ldr	r0, [pc, #264]	@ (8000afc <lwiperf_tcp_recv+0x1c4>)
 80009f2:	f00d fcfb 	bl	800e3ec <iprintf>
{
 80009f6:	46ae      	mov	lr, r5
 80009f8:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < q->len; i++) {
 80009fc:	f8be 300a 	ldrh.w	r3, [lr, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 8000a00:	f8de 1004 	ldr.w	r1, [lr, #4]
    for (i = 0; i < q->len; i++) {
 8000a04:	b323      	cbz	r3, 8000a50 <lwiperf_tcp_recv+0x118>
 8000a06:	3901      	subs	r1, #1
      if (num == conn->next_num) {
 8000a08:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
    for (i = 0; i < q->len; i++) {
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	e008      	b.n	8000a22 <lwiperf_tcp_recv+0xea>
          conn->next_num = 0;
 8000a10:	2b0a      	cmp	r3, #10
 8000a12:	bf08      	it	eq
 8000a14:	2300      	moveq	r3, #0
 8000a16:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
    for (i = 0; i < q->len; i++) {
 8000a1a:	f8be 000a 	ldrh.w	r0, [lr, #10]
 8000a1e:	4290      	cmp	r0, r2
 8000a20:	d915      	bls.n	8000a4e <lwiperf_tcp_recv+0x116>
      u8_t num = val - '0';
 8000a22:	f811 cf01 	ldrb.w	ip, [r1, #1]!
        conn->next_num++;
 8000a26:	1c58      	adds	r0, r3, #1
    for (i = 0; i < q->len; i++) {
 8000a28:	3201      	adds	r2, #1
      u8_t num = val - '0';
 8000a2a:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
    for (i = 0; i < q->len; i++) {
 8000a2e:	b292      	uxth	r2, r2
      if (num == conn->next_num) {
 8000a30:	fa5f fc8c 	uxtb.w	ip, ip
 8000a34:	459c      	cmp	ip, r3
        conn->next_num++;
 8000a36:	b2c3      	uxtb	r3, r0
      if (num == conn->next_num) {
 8000a38:	d0ea      	beq.n	8000a10 <lwiperf_tcp_recv+0xd8>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	f7ff fcb9 	bl	80003b4 <lwiperf_tcp_close>
      pbuf_free(p);
 8000a42:	4628      	mov	r0, r5
 8000a44:	f007 f82c 	bl	8007aa0 <pbuf_free>
}
 8000a48:	2000      	movs	r0, #0
 8000a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    packet_idx += q->len;
 8000a4e:	4480      	add	r8, r0
  for (q = p; q != NULL; q = q->next) {
 8000a50:	f8de e000 	ldr.w	lr, [lr]
 8000a54:	f1be 0f00 	cmp.w	lr, #0
 8000a58:	d1d0      	bne.n	80009fc <lwiperf_tcp_recv+0xc4>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000a5a:	892b      	ldrh	r3, [r5, #8]
 8000a5c:	4543      	cmp	r3, r8
 8000a5e:	d006      	beq.n	8000a6e <lwiperf_tcp_recv+0x136>
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <lwiperf_tcp_recv+0x1bc>)
 8000a62:	f240 222b 	movw	r2, #555	@ 0x22b
 8000a66:	4928      	ldr	r1, [pc, #160]	@ (8000b08 <lwiperf_tcp_recv+0x1d0>)
 8000a68:	4824      	ldr	r0, [pc, #144]	@ (8000afc <lwiperf_tcp_recv+0x1c4>)
 8000a6a:	f00d fcbf 	bl	800e3ec <iprintf>
  conn->bytes_transferred += packet_idx;
 8000a6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000a70:	4630      	mov	r0, r6
 8000a72:	4639      	mov	r1, r7
  conn->bytes_transferred += packet_idx;
 8000a74:	4443      	add	r3, r8
 8000a76:	6263      	str	r3, [r4, #36]	@ 0x24
  tcp_recved(tpcb, tot_len);
 8000a78:	f007 fd24 	bl	80084c4 <tcp_recved>
  pbuf_free(p);
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	f007 f80f 	bl	8007aa0 <pbuf_free>
  return ERR_OK;
 8000a82:	e7e1      	b.n	8000a48 <lwiperf_tcp_recv+0x110>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000a84:	4620      	mov	r0, r4
 8000a86:	2105      	movs	r1, #5
 8000a88:	f7ff fc94 	bl	80003b4 <lwiperf_tcp_close>
}
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000a92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000a94:	0618      	lsls	r0, r3, #24
 8000a96:	d501      	bpl.n	8000a9c <lwiperf_tcp_recv+0x164>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000a98:	01d9      	lsls	r1, r3, #7
 8000a9a:	d519      	bpl.n	8000ad0 <lwiperf_tcp_recv+0x198>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f7ff fc88 	bl	80003b4 <lwiperf_tcp_close>
}
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000aaa:	4641      	mov	r1, r8
 8000aac:	2318      	movs	r3, #24
 8000aae:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f007 fb18 	bl	80080e8 <pbuf_memcmp>
 8000ab8:	2800      	cmp	r0, #0
 8000aba:	f43f af6e 	beq.w	800099a <lwiperf_tcp_recv+0x62>
 8000abe:	e7bc      	b.n	8000a3a <lwiperf_tcp_recv+0x102>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	f7ff fc76 	bl	80003b4 <lwiperf_tcp_close>
        pbuf_free(p);
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f006 ffe9 	bl	8007aa0 <pbuf_free>
        return ERR_OK;
 8000ace:	e7bb      	b.n	8000a48 <lwiperf_tcp_recv+0x110>
        lwiperf_tx_start_passive(conn);
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	f7ff ff05 	bl	80008e0 <lwiperf_tx_start_passive>
 8000ad6:	e7e1      	b.n	8000a9c <lwiperf_tcp_recv+0x164>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000ad8:	4620      	mov	r0, r4
 8000ada:	f7ff ff01 	bl	80008e0 <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	f43f af5b 	beq.w	800099a <lwiperf_tcp_recv+0x62>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	f7ff fc64 	bl	80003b4 <lwiperf_tcp_close>
            pbuf_free(p);
 8000aec:	4628      	mov	r0, r5
 8000aee:	f006 ffd7 	bl	8007aa0 <pbuf_free>
            return ERR_OK;
 8000af2:	e7a9      	b.n	8000a48 <lwiperf_tcp_recv+0x110>
 8000af4:	0800f2d0 	.word	0x0800f2d0
 8000af8:	0800f3d0 	.word	0x0800f3d0
 8000afc:	0800f2f8 	.word	0x0800f2f8
 8000b00:	01000080 	.word	0x01000080
 8000b04:	0800f408 	.word	0x0800f408
 8000b08:	0800f424 	.word	0x0800f424

08000b0c <lwiperf_tcp_client_connected>:
{
 8000b0c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000b0e:	6903      	ldr	r3, [r0, #16]
{
 8000b10:	4604      	mov	r4, r0
 8000b12:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000b14:	428b      	cmp	r3, r1
 8000b16:	d006      	beq.n	8000b26 <lwiperf_tcp_client_connected+0x1a>
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <lwiperf_tcp_client_connected+0x40>)
 8000b1a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8000b1e:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <lwiperf_tcp_client_connected+0x44>)
 8000b20:	480c      	ldr	r0, [pc, #48]	@ (8000b54 <lwiperf_tcp_client_connected+0x48>)
 8000b22:	f00d fc63 	bl	800e3ec <iprintf>
  if (err != ERR_OK) {
 8000b26:	b955      	cbnz	r5, 8000b3e <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 8000b28:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 8000b2c:	f003 fa62 	bl	8003ff4 <sys_now>
 8000b30:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 8000b32:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 8000b34:	6163      	str	r3, [r4, #20]
}
 8000b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000b3a:	f7ff bd7b 	b.w	8000634 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b3e:	4620      	mov	r0, r4
 8000b40:	2105      	movs	r1, #5
 8000b42:	f7ff fc37 	bl	80003b4 <lwiperf_tcp_close>
}
 8000b46:	2000      	movs	r0, #0
 8000b48:	bd38      	pop	{r3, r4, r5, pc}
 8000b4a:	bf00      	nop
 8000b4c:	0800f2d0 	.word	0x0800f2d0
 8000b50:	0800f3c0 	.word	0x0800f3c0
 8000b54:	0800f2f8 	.word	0x0800f2f8

08000b58 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8000b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b5c:	4605      	mov	r5, r0
 8000b5e:	460f      	mov	r7, r1
 8000b60:	4690      	mov	r8, r2
 8000b62:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000b64:	f003 fbc0 	bl	80042e8 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d035      	beq.n	8000bd8 <lwiperf_start_tcp_server_impl.constprop.0+0x80>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b6c:	2048      	movs	r0, #72	@ 0x48
 8000b6e:	f006 fb11 	bl	8007194 <mem_malloc>
  if (s == NULL) {
 8000b72:	4604      	mov	r4, r0
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d038      	beq.n	8000bea <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000b78:	2248      	movs	r2, #72	@ 0x48
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	f00d fc58 	bl	800e430 <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 8000b80:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 8000b82:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b84:	202e      	movs	r0, #46	@ 0x2e
  s->base.related_master_state = related_master_state;
 8000b86:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000b88:	f240 1301 	movw	r3, #257	@ 0x101
  s->report_fn = report_fn;
 8000b8c:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000b90:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b92:	f008 fba3 	bl	80092dc <tcp_new_ip_type>
  if (pcb == NULL) {
 8000b96:	4606      	mov	r6, r0
 8000b98:	b338      	cbz	r0, 8000bea <lwiperf_start_tcp_server_impl.constprop.0+0x92>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000b9a:	4629      	mov	r1, r5
 8000b9c:	463a      	mov	r2, r7
 8000b9e:	f007 fb5f 	bl	8008260 <tcp_bind>
  if (err != ERR_OK) {
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	b110      	cbz	r0, 8000bac <lwiperf_start_tcp_server_impl.constprop.0+0x54>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8000ba6:	4628      	mov	r0, r5
 8000ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000bac:	2101      	movs	r1, #1
 8000bae:	4630      	mov	r0, r6
 8000bb0:	f007 fc3e 	bl	8008430 <tcp_listen_with_backlog>
 8000bb4:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8000bb6:	b190      	cbz	r0, 8000bde <lwiperf_start_tcp_server_impl.constprop.0+0x86>
  tcp_arg(s->server_pcb, s);
 8000bb8:	4621      	mov	r1, r4
 8000bba:	f007 fdb9 	bl	8008730 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000bbe:	68e0      	ldr	r0, [r4, #12]
 8000bc0:	490b      	ldr	r1, [pc, #44]	@ (8000bf0 <lwiperf_start_tcp_server_impl.constprop.0+0x98>)
 8000bc2:	f007 fe0b 	bl	80087dc <tcp_accept>
  item->next = lwiperf_all_connections;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
}
 8000bc8:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000bca:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000bcc:	601c      	str	r4, [r3, #0]
  *state = s;
 8000bce:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000bd0:	6022      	str	r2, [r4, #0]
  *state = s;
 8000bd2:	601c      	str	r4, [r3, #0]
}
 8000bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_ARG;
 8000bd8:	f06f 050f 	mvn.w	r5, #15
 8000bdc:	e7e3      	b.n	8000ba6 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
      tcp_close(pcb);
 8000bde:	4630      	mov	r0, r6
 8000be0:	f008 fc4e 	bl	8009480 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8000be4:	4620      	mov	r0, r4
 8000be6:	f006 f92d 	bl	8006e44 <mem_free>
    return ERR_MEM;
 8000bea:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000bee:	e7da      	b.n	8000ba6 <lwiperf_start_tcp_server_impl.constprop.0+0x4e>
 8000bf0:	080004cd 	.word	0x080004cd
 8000bf4:	240000ac 	.word	0x240000ac

08000bf8 <lwiperf_start_tcp_server_default>:
{
 8000bf8:	b530      	push	{r4, r5, lr}
 8000bfa:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000bfc:	2400      	movs	r4, #0
{
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c02:	ad03      	add	r5, sp, #12
 8000c04:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000c08:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000c0a:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c0c:	e9cd 4500 	strd	r4, r5, [sp]
 8000c10:	f7ff ffa2 	bl	8000b58 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000c14:	b910      	cbnz	r0, 8000c1c <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000c16:	9803      	ldr	r0, [sp, #12]
}
 8000c18:	b005      	add	sp, #20
 8000c1a:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000c1c:	4620      	mov	r0, r4
}
 8000c1e:	b005      	add	sp, #20
 8000c20:	bd30      	pop	{r4, r5, pc}
 8000c22:	bf00      	nop
 8000c24:	08011bb0 	.word	0x08011bb0

08000c28 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000c28:	b5f0      	push	{r4, r5, r6, r7, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000c2a:	2a01      	cmp	r2, #1
  lwiperf_state_tcp_t *state = NULL;
 8000c2c:	f04f 0400 	mov.w	r4, #0
{
 8000c30:	b08d      	sub	sp, #52	@ 0x34
 8000c32:	4615      	mov	r5, r2
 8000c34:	4607      	mov	r7, r0
 8000c36:	460e      	mov	r6, r1
  lwiperf_state_tcp_t *state = NULL;
 8000c38:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000c3a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c3e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c42:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
{
 8000c46:	461c      	mov	r4, r3
  switch (type) {
 8000c48:	d042      	beq.n	8000cd0 <lwiperf_start_tcp_client+0xa8>
 8000c4a:	2a02      	cmp	r2, #2
 8000c4c:	d002      	beq.n	8000c54 <lwiperf_start_tcp_client+0x2c>
 8000c4e:	b132      	cbz	r2, 8000c5e <lwiperf_start_tcp_client+0x36>
    /* Do a bidirectional test individually */
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
    break;
  default:
    /* invalid argument */
    return NULL;
 8000c50:	2600      	movs	r6, #0
 8000c52:	e03a      	b.n	8000cca <lwiperf_start_tcp_client+0xa2>
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000c54:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8000c58:	f006 f836 	bl	8006cc8 <lwip_htonl>
 8000c5c:	9006      	str	r0, [sp, #24]
  }
  settings.num_threads = htonl(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f006 f832 	bl	8006cc8 <lwip_htonl>
 8000c64:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000c66:	f241 3089 	movw	r0, #5001	@ 0x1389
 8000c6a:	f006 f82d 	bl	8006cc8 <lwip_htonl>
 8000c6e:	9008      	str	r0, [sp, #32]
  /* TODO: implement passing duration/amount of bytes to transfer */
  settings.amount = htonl((u32_t)-1000);
 8000c70:	483a      	ldr	r0, [pc, #232]	@ (8000d5c <lwiperf_start_tcp_client+0x134>)
 8000c72:	f006 f829 	bl	8006cc8 <lwip_htonl>

  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c76:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  settings.amount = htonl((u32_t)-1000);
 8000c78:	900b      	str	r0, [sp, #44]	@ 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c7a:	aa06      	add	r2, sp, #24
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	ab04      	add	r3, sp, #16
 8000c80:	4631      	mov	r1, r6
 8000c82:	4638      	mov	r0, r7
 8000c84:	9302      	str	r3, [sp, #8]
 8000c86:	2300      	movs	r3, #0
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	4623      	mov	r3, r4
 8000c8c:	f7ff fd9a 	bl	80007c4 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d1dd      	bne.n	8000c50 <lwiperf_start_tcp_client+0x28>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000c94:	9e04      	ldr	r6, [sp, #16]
 8000c96:	b306      	cbz	r6, 8000cda <lwiperf_start_tcp_client+0xb2>
    if (type != LWIPERF_CLIENT) {
 8000c98:	b1bd      	cbz	r5, 8000cca <lwiperf_start_tcp_client+0xa2>
      /* start corresponding server now */
      lwiperf_state_tcp_t *server = NULL;
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c9a:	aa05      	add	r2, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000c9c:	2300      	movs	r3, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000c9e:	6930      	ldr	r0, [r6, #16]
 8000ca0:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000ca4:	9201      	str	r2, [sp, #4]
 8000ca6:	4622      	mov	r2, r4
      lwiperf_state_tcp_t *server = NULL;
 8000ca8:	9305      	str	r3, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000caa:	9600      	str	r6, [sp, #0]
 8000cac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8000cae:	f7ff ff53 	bl	8000b58 <lwiperf_start_tcp_server_impl.constprop.0>
        report_fn, report_arg, (lwiperf_state_base_t *)state, &server);
      if (ret != ERR_OK) {
 8000cb2:	b9d0      	cbnz	r0, 8000cea <lwiperf_start_tcp_client+0xc2>
        /* starting server failed, abort client */
        lwiperf_abort(state);
        return NULL;
      }
      /* make this server accept one connection only */
      server->specific_remote = 1;
 8000cb4:	9b05      	ldr	r3, [sp, #20]
 8000cb6:	2201      	movs	r2, #1
      server->remote_addr = state->conn_pcb->remote_ip;
      if (type == LWIPERF_TRADEOFF) {
 8000cb8:	2d02      	cmp	r5, #2
      server->specific_remote = 1;
 8000cba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000cbe:	6931      	ldr	r1, [r6, #16]
 8000cc0:	6849      	ldr	r1, [r1, #4]
        /* tradeoff means that the remote host connects only after the client is done,
           so keep the listen pcb open until the client is done */
        server->client_tradeoff_mode = 1;
 8000cc2:	bf08      	it	eq
 8000cc4:	f883 2022 	strbeq.w	r2, [r3, #34]	@ 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000cc8:	6459      	str	r1, [r3, #68]	@ 0x44
      }
    }
    return state;
  }
  return NULL;
}
 8000cca:	4630      	mov	r0, r6
 8000ccc:	b00d      	add	sp, #52	@ 0x34
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000cd0:	4823      	ldr	r0, [pc, #140]	@ (8000d60 <lwiperf_start_tcp_client+0x138>)
 8000cd2:	f005 fff9 	bl	8006cc8 <lwip_htonl>
 8000cd6:	9006      	str	r0, [sp, #24]
    break;
 8000cd8:	e7c1      	b.n	8000c5e <lwiperf_start_tcp_client+0x36>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000cda:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <lwiperf_start_tcp_client+0x13c>)
 8000cdc:	f240 3216 	movw	r2, #790	@ 0x316
 8000ce0:	4921      	ldr	r1, [pc, #132]	@ (8000d68 <lwiperf_start_tcp_client+0x140>)
 8000ce2:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <lwiperf_start_tcp_client+0x144>)
 8000ce4:	f00d fb82 	bl	800e3ec <iprintf>
 8000ce8:	e7d6      	b.n	8000c98 <lwiperf_start_tcp_client+0x70>
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000cea:	f003 fafd 	bl	80042e8 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000cee:	4b20      	ldr	r3, [pc, #128]	@ (8000d70 <lwiperf_start_tcp_client+0x148>)
 8000cf0:	681c      	ldr	r4, [r3, #0]
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d0ac      	beq.n	8000c50 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cf6:	42a6      	cmp	r6, r4
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
    } else {
      last = i;
      i = i->next;
 8000cf8:	6825      	ldr	r5, [r4, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000cfa:	d02b      	beq.n	8000d54 <lwiperf_start_tcp_client+0x12c>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	68a3      	ldr	r3, [r4, #8]
 8000d00:	429e      	cmp	r6, r3
 8000d02:	d00a      	beq.n	8000d1a <lwiperf_start_tcp_client+0xf2>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000d04:	2d00      	cmp	r5, #0
 8000d06:	d0a3      	beq.n	8000c50 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d08:	42ae      	cmp	r6, r5
      i = i->next;
 8000d0a:	682b      	ldr	r3, [r5, #0]
      last = i;
 8000d0c:	4627      	mov	r7, r4
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d0e:	d00e      	beq.n	8000d2e <lwiperf_start_tcp_client+0x106>
 8000d10:	462c      	mov	r4, r5
      i = i->next;
 8000d12:	461d      	mov	r5, r3
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d14:	68a3      	ldr	r3, [r4, #8]
 8000d16:	429e      	cmp	r6, r3
 8000d18:	d1f4      	bne.n	8000d04 <lwiperf_start_tcp_client+0xdc>
      if (last != NULL) {
 8000d1a:	b937      	cbnz	r7, 8000d2a <lwiperf_start_tcp_client+0x102>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	462c      	mov	r4, r5
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d20:	f006 f890 	bl	8006e44 <mem_free>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	d1e6      	bne.n	8000cf6 <lwiperf_start_tcp_client+0xce>
 8000d28:	e792      	b.n	8000c50 <lwiperf_start_tcp_client+0x28>
 8000d2a:	462b      	mov	r3, r5
 8000d2c:	4625      	mov	r5, r4
      last = i;
 8000d2e:	461c      	mov	r4, r3
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d30:	4628      	mov	r0, r5
        last->next = i;
 8000d32:	603c      	str	r4, [r7, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d34:	f006 f886 	bl	8006e44 <mem_free>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000d38:	2c00      	cmp	r4, #0
 8000d3a:	d089      	beq.n	8000c50 <lwiperf_start_tcp_client+0x28>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d3c:	42a6      	cmp	r6, r4
      i = i->next;
 8000d3e:	6825      	ldr	r5, [r4, #0]
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d40:	d1dd      	bne.n	8000cfe <lwiperf_start_tcp_client+0xd6>
      i = i->next;
 8000d42:	462c      	mov	r4, r5
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d44:	4635      	mov	r5, r6
        last->next = i;
 8000d46:	603c      	str	r4, [r7, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f006 f87b 	bl	8006e44 <mem_free>
  for (i = lwiperf_all_connections; i != NULL; ) {
 8000d4e:	2c00      	cmp	r4, #0
 8000d50:	d1f4      	bne.n	8000d3c <lwiperf_start_tcp_client+0x114>
 8000d52:	e77d      	b.n	8000c50 <lwiperf_start_tcp_client+0x28>
 8000d54:	4630      	mov	r0, r6
 8000d56:	462c      	mov	r4, r5
 8000d58:	e7e2      	b.n	8000d20 <lwiperf_start_tcp_client+0xf8>
 8000d5a:	bf00      	nop
 8000d5c:	fffffc18 	.word	0xfffffc18
 8000d60:	80000001 	.word	0x80000001
 8000d64:	0800f2d0 	.word	0x0800f2d0
 8000d68:	0800f434 	.word	0x0800f434
 8000d6c:	0800f2f8 	.word	0x0800f2f8
 8000d70:	240000ac 	.word	0x240000ac

08000d74 <lwiperf_start_tcp_client_default>:
{
 8000d74:	b510      	push	{r4, lr}
 8000d76:	4614      	mov	r4, r2
 8000d78:	b082      	sub	sp, #8
 8000d7a:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f241 3189 	movw	r1, #5001	@ 0x1389
 8000d82:	9400      	str	r4, [sp, #0]
 8000d84:	f7ff ff50 	bl	8000c28 <lwiperf_start_tcp_client>
}
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd10      	pop	{r4, pc}

08000d8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d8c:	b500      	push	{lr}
 8000d8e:	b083      	sub	sp, #12
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d90:	f002 fef6 	bl	8003b80 <MX_LWIP_Init>
     * iperf3 is not compatible at all.
     * Adding lwiperf.c file to the project is necessary.
     * The default include path should already contain
     * 'lwip/apps/lwiperf.h'
     */
  	LOCK_TCPIP_CORE();
 8000d94:	f003 fa20 	bl	80041d8 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	f7ff ff2c 	bl	8000bf8 <lwiperf_start_tcp_server_default>

    ip4_addr_t remote_addr;
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000da0:	2200      	movs	r2, #0
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <StartDefaultTask+0x30>)
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000da4:	a801      	add	r0, sp, #4
 8000da6:	4611      	mov	r1, r2
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000da8:	9301      	str	r3, [sp, #4]
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000daa:	f7ff ffe3 	bl	8000d74 <lwiperf_start_tcp_client_default>
    UNLOCK_TCPIP_CORE();
 8000dae:	f003 fa91 	bl	80042d4 <sys_unlock_tcpip_core>
    /* Infinite loop */
    for(;;)
    {
      osDelay(1000);
 8000db2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db6:	f003 fb5b 	bl	8004470 <osDelay>
    for(;;)
 8000dba:	e7fa      	b.n	8000db2 <StartDefaultTask+0x26>
 8000dbc:	0101a8c0 	.word	0x0101a8c0

08000dc0 <SystemClock_Config>:
{
 8000dc0:	b530      	push	{r4, r5, lr}
 8000dc2:	b09f      	sub	sp, #124	@ 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc4:	224c      	movs	r2, #76	@ 0x4c
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	a80a      	add	r0, sp, #40	@ 0x28
 8000dca:	f00d fb31 	bl	800e430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dce:	2220      	movs	r2, #32
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	a802      	add	r0, sp, #8
 8000dd4:	f00d fb2c 	bl	800e430 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f001 fff9 	bl	8002dd0 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dde:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <SystemClock_Config+0x9c>)
 8000de0:	2300      	movs	r3, #0
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	6993      	ldr	r3, [r2, #24]
 8000de6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000dea:	6193      	str	r3, [r2, #24]
 8000dec:	6993      	ldr	r3, [r2, #24]
 8000dee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000df6:	6993      	ldr	r3, [r2, #24]
 8000df8:	0499      	lsls	r1, r3, #18
 8000dfa:	d5fc      	bpl.n	8000df6 <SystemClock_Config+0x36>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dfc:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dfe:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e00:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e02:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e06:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e08:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e0a:	9217      	str	r2, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e10:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000e12:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e14:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e16:	e9cd 3519 	strd	r3, r5, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e1e:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000e22:	237d      	movs	r3, #125	@ 0x7d
 8000e24:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f002 f880 	bl	8002f2c <HAL_RCC_OscConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b108      	cbz	r0, 8000e34 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e34:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e38:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e3e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e44:	9409      	str	r4, [sp, #36]	@ 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e46:	e9cd 5405 	strd	r5, r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e4a:	e9cd 4307 	strd	r4, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e4e:	f002 fb17 	bl	8003480 <HAL_RCC_ClockConfig>
 8000e52:	b108      	cbz	r0, 8000e58 <SystemClock_Config+0x98>
 8000e54:	b672      	cpsid	i
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <SystemClock_Config+0x96>
}
 8000e58:	b01f      	add	sp, #124	@ 0x7c
 8000e5a:	bd30      	pop	{r4, r5, pc}
 8000e5c:	58024800 	.word	0x58024800

08000e60 <main>:
{
 8000e60:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e64:	2400      	movs	r4, #0
{
 8000e66:	b08f      	sub	sp, #60	@ 0x3c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e68:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e6a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000e6e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 8000e72:	f000 fe5d 	bl	8001b30 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e76:	f248 721f 	movw	r2, #34591	@ 0x871f
 8000e7a:	f240 1301 	movw	r3, #257	@ 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e7e:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e80:	f8ad 5024 	strh.w	r5, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e84:	930c      	str	r3, [sp, #48]	@ 0x30
 8000e86:	e9cd 420a 	strd	r4, r2, [sp, #40]	@ 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e8a:	f000 fe6f 	bl	8001b6c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000e8e:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000e92:	4bcd      	ldr	r3, [pc, #820]	@ (80011c8 <main+0x368>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e94:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000e96:	920a      	str	r2, [sp, #40]	@ 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000e98:	930b      	str	r3, [sp, #44]	@ 0x2c
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e9a:	f88d 5025 	strb.w	r5, [sp, #37]	@ 0x25
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e9e:	f88d 4031 	strb.w	r4, [sp, #49]	@ 0x31
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ea2:	f000 fe63 	bl	8001b6c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ea6:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000ea8:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eaa:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000eac:	f88d 402e 	strb.w	r4, [sp, #46]	@ 0x2e
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000eb0:	f88d 2025 	strb.w	r2, [sp, #37]	@ 0x25
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000eb4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000eb8:	f88d 5031 	strb.w	r5, [sp, #49]	@ 0x31
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000ebc:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ec0:	f000 fe54 	bl	8001b6c <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ec4:	2004      	movs	r0, #4
 8000ec6:	f000 fe41 	bl	8001b4c <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eca:	4ac0      	ldr	r2, [pc, #768]	@ (80011cc <main+0x36c>)
 8000ecc:	6953      	ldr	r3, [r2, #20]
 8000ece:	f413 3300 	ands.w	r3, r3, #131072	@ 0x20000
 8000ed2:	d111      	bne.n	8000ef8 <main+0x98>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ed8:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000edc:	f8c2 3250 	str.w	r3, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ee4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ee8:	6953      	ldr	r3, [r2, #20]
 8000eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ef4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ef8:	48b4      	ldr	r0, [pc, #720]	@ (80011cc <main+0x36c>)
 8000efa:	6943      	ldr	r3, [r0, #20]
 8000efc:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000f00:	d124      	bne.n	8000f4c <main+0xec>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000f02:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f06:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f0a:	f8d0 5080 	ldr.w	r5, [r0, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f0e:	f643 76e0 	movw	r6, #16352	@ 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f12:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f16:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8000f1a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f1c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f20:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f22:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f26:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f28:	f8c0 2260 	str.w	r2, [r0, #608]	@ 0x260
      } while (ways-- != 0U);
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	d1f8      	bne.n	8000f22 <main+0xc2>
    } while(sets-- != 0U);
 8000f30:	3c20      	subs	r4, #32
 8000f32:	f114 0f20 	cmn.w	r4, #32
 8000f36:	d1f1      	bne.n	8000f1c <main+0xbc>
 8000f38:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f3c:	6943      	ldr	r3, [r0, #20]
 8000f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f42:	6143      	str	r3, [r0, #20]
 8000f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f48:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	2400      	movs	r4, #0
  HAL_Init();
 8000f4e:	f000 fd3d 	bl	80019cc <HAL_Init>
  SystemClock_Config();
 8000f52:	f7ff ff35 	bl	8000dc0 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b9e      	ldr	r3, [pc, #632]	@ (80011d0 <main+0x370>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000f5a:	f240 4102 	movw	r1, #1026	@ 0x402
 8000f5e:	489d      	ldr	r0, [pc, #628]	@ (80011d4 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f62:	f04f 090e 	mov.w	r9, #14
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f66:	f04f 0809 	mov.w	r8, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6a:	2603      	movs	r6, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2701      	movs	r7, #1
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f6e:	f04f 0b0a 	mov.w	fp, #10
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000f72:	f04f 0a04 	mov.w	sl, #4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 8000f7a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f82:	f042 0202 	orr.w	r2, r2, #2
 8000f86:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000f8a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f8e:	f002 0202 	and.w	r2, r2, #2
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f9e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fa2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fa6:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8000faa:	9202      	str	r2, [sp, #8]
 8000fac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fb2:	f042 0208 	orr.w	r2, r2, #8
 8000fb6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fbe:	f002 0208 	and.w	r2, r2, #8
 8000fc2:	9203      	str	r2, [sp, #12]
 8000fc4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fca:	f042 0201 	orr.w	r2, r2, #1
 8000fce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fd6:	f002 0201 	and.w	r2, r2, #1
 8000fda:	9204      	str	r2, [sp, #16]
 8000fdc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fe2:	f042 0210 	orr.w	r2, r2, #16
 8000fe6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000fee:	f002 0210 	and.w	r2, r2, #16
 8000ff2:	9205      	str	r2, [sp, #20]
 8000ff4:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000ffa:	f042 0204 	orr.w	r2, r2, #4
 8000ffe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001002:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001006:	f002 0204 	and.w	r2, r2, #4
 800100a:	9206      	str	r2, [sp, #24]
 800100c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001012:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001016:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800101a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800101e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001022:	9207      	str	r2, [sp, #28]
 8001024:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800102a:	f042 0220 	orr.w	r2, r2, #32
 800102e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001032:	4622      	mov	r2, r4
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	9308      	str	r3, [sp, #32]
 800103e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8001040:	f001 fec2 	bl	8002dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 8001044:	4622      	mov	r2, r4
 8001046:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 800104a:	4863      	ldr	r0, [pc, #396]	@ (80011d8 <main+0x378>)
 800104c:	f001 febc 	bl	8002dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001050:	4622      	mov	r2, r4
 8001052:	f248 1138 	movw	r1, #33080	@ 0x8138
 8001056:	4861      	ldr	r0, [pc, #388]	@ (80011dc <main+0x37c>)
 8001058:	f001 feb6 	bl	8002dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 800105c:	4622      	mov	r2, r4
 800105e:	210c      	movs	r1, #12
 8001060:	485f      	ldr	r0, [pc, #380]	@ (80011e0 <main+0x380>)
 8001062:	f001 feb1 	bl	8002dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 8001066:	4622      	mov	r2, r4
 8001068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106c:	485d      	ldr	r0, [pc, #372]	@ (80011e4 <main+0x384>)
 800106e:	f001 feab 	bl	8002dc8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001072:	4622      	mov	r2, r4
 8001074:	2160      	movs	r1, #96	@ 0x60
 8001076:	485c      	ldr	r0, [pc, #368]	@ (80011e8 <main+0x388>)
 8001078:	f001 fea6 	bl	8002dc8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 800107c:	f240 3303 	movw	r3, #771	@ 0x303
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	a909      	add	r1, sp, #36	@ 0x24
 8001082:	485a      	ldr	r0, [pc, #360]	@ (80011ec <main+0x38c>)
  GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001084:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800108a:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f001 fd5b 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001092:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	a909      	add	r1, sp, #36	@ 0x24
 8001096:	4855      	ldr	r0, [pc, #340]	@ (80011ec <main+0x38c>)
  GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001098:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800109c:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f001 fd50 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 80010a8:	f640 0303 	movw	r3, #2051	@ 0x803
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ac:	a909      	add	r1, sp, #36	@ 0x24
 80010ae:	484b      	ldr	r0, [pc, #300]	@ (80011dc <main+0x37c>)
  GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 80010b0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80010b2:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010bc:	f001 fd44 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80010c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80010c4:	a909      	add	r1, sp, #36	@ 0x24
 80010c6:	4845      	ldr	r0, [pc, #276]	@ (80011dc <main+0x37c>)
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80010c8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010ce:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f001 fd39 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80010d6:	2349      	movs	r3, #73	@ 0x49
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d8:	a909      	add	r1, sp, #36	@ 0x24
 80010da:	483e      	ldr	r0, [pc, #248]	@ (80011d4 <main+0x374>)
  GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80010dc:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e2:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e6:	f001 fd2f 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	f240 4302 	movw	r3, #1026	@ 0x402
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ee:	a909      	add	r1, sp, #36	@ 0x24
 80010f0:	4838      	ldr	r0, [pc, #224]	@ (80011d4 <main+0x374>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fa:	f001 fd25 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 80010fe:	2330      	movs	r3, #48	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001100:	a909      	add	r1, sp, #36	@ 0x24
 8001102:	4835      	ldr	r0, [pc, #212]	@ (80011d8 <main+0x378>)
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001104:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001108:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	f001 fd1a 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001114:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001118:	a909      	add	r1, sp, #36	@ 0x24
 800111a:	482f      	ldr	r0, [pc, #188]	@ (80011d8 <main+0x378>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 800111c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	e9cd 740a 	strd	r7, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001124:	f001 fd10 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001128:	f64b 0303 	movw	r3, #47107	@ 0xb803
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112c:	a909      	add	r1, sp, #36	@ 0x24
 800112e:	482a      	ldr	r0, [pc, #168]	@ (80011d8 <main+0x378>)
  GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001130:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001136:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113a:	f001 fd05 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 800113e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8001140:	a909      	add	r1, sp, #36	@ 0x24
 8001142:	482a      	ldr	r0, [pc, #168]	@ (80011ec <main+0x38c>)
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001144:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800114a:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800114e:	f001 fcfb 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	f242 0204 	movw	r2, #8196	@ 0x2004
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115a:	a909      	add	r1, sp, #36	@ 0x24
 800115c:	481f      	ldr	r0, [pc, #124]	@ (80011dc <main+0x37c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001164:	f001 fcf0 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8001168:	23b0      	movs	r3, #176	@ 0xb0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	a909      	add	r1, sp, #36	@ 0x24
 800116c:	4819      	ldr	r0, [pc, #100]	@ (80011d4 <main+0x374>)
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 800116e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001174:	e9cd 6b0c 	strd	r6, fp, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f001 fce6 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800117c:	230c      	movs	r3, #12
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800117e:	a909      	add	r1, sp, #36	@ 0x24
 8001180:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <main+0x374>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001182:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001186:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800118e:	f001 fcdb 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001192:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	a909      	add	r1, sp, #36	@ 0x24
 8001196:	4812      	ldr	r0, [pc, #72]	@ (80011e0 <main+0x380>)
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001198:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 800119a:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	960c      	str	r6, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SDIO1_CK_Pin|SDIO1_D3_Pin|SDIO1_D2_Pin|SDIO1_D0_Pin
 80011a0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011a6:	f001 fccf 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80011aa:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011ae:	a909      	add	r1, sp, #36	@ 0x24
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <main+0x388>)
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 80011b2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80011b8:	e9cd 480c 	strd	r4, r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011bc:	f001 fcc4 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 80011c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80011c4:	a909      	add	r1, sp, #36	@ 0x24
 80011c6:	e013      	b.n	80011f0 <main+0x390>
 80011c8:	0301000e 	.word	0x0301000e
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	58024400 	.word	0x58024400
 80011d4:	58020c00 	.word	0x58020c00
 80011d8:	58021000 	.word	0x58021000
 80011dc:	58021800 	.word	0x58021800
 80011e0:	58020800 	.word	0x58020800
 80011e4:	58021400 	.word	0x58021400
 80011e8:	58021c00 	.word	0x58021c00
 80011ec:	58020400 	.word	0x58020400
 80011f0:	48c4      	ldr	r0, [pc, #784]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Pin = LCD_B3_Pin;
 80011f2:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80011f4:	230d      	movs	r3, #13
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 80011f8:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f001 fca3 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 8001202:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	a909      	add	r1, sp, #36	@ 0x24
 8001208:	48be      	ldr	r0, [pc, #760]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Pin = USB_FS_DP_Pin|USB_FS_DM_Pin;
 800120a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f001 fc99 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 800121a:	a909      	add	r1, sp, #36	@ 0x24
 800121c:	48ba      	ldr	r0, [pc, #744]	@ (8001508 <main+0x6a8>)
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 800121e:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001224:	f001 fc90 	bl	8002b48 <HAL_GPIO_Init>
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001228:	a909      	add	r1, sp, #36	@ 0x24
 800122a:	48b8      	ldr	r0, [pc, #736]	@ (800150c <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800122c:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	e9cd a509 	strd	sl, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001238:	f001 fc86 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 800123c:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001240:	a909      	add	r1, sp, #36	@ 0x24
 8001242:	48b3      	ldr	r0, [pc, #716]	@ (8001510 <main+0x6b0>)
  GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001244:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800124a:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124e:	f001 fc7b 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8001252:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001256:	a909      	add	r1, sp, #36	@ 0x24
 8001258:	48ad      	ldr	r0, [pc, #692]	@ (8001510 <main+0x6b0>)
  GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 800125a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001260:	e9cd 660c 	strd	r6, r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	f001 fc70 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800126c:	a909      	add	r1, sp, #36	@ 0x24
 800126e:	48a5      	ldr	r0, [pc, #660]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001270:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001276:	e9cd 4b0c 	strd	r4, fp, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800127a:	f001 fc65 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 800127e:	f248 1338 	movw	r3, #33080	@ 0x8138
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001282:	a909      	add	r1, sp, #36	@ 0x24
 8001284:	48a2      	ldr	r0, [pc, #648]	@ (8001510 <main+0x6b0>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001286:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	e9cd 740a 	strd	r7, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128e:	f001 fc5b 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001292:	f648 7308 	movw	r3, #36616	@ 0x8f08
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001296:	a909      	add	r1, sp, #36	@ 0x24
 8001298:	489e      	ldr	r0, [pc, #632]	@ (8001514 <main+0x6b4>)
  GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 800129a:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012a4:	f001 fc50 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80012a8:	23c0      	movs	r3, #192	@ 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012aa:	a909      	add	r1, sp, #36	@ 0x24
 80012ac:	4896      	ldr	r0, [pc, #600]	@ (8001508 <main+0x6a8>)
  GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 80012ae:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b4:	e9cd 490c 	strd	r4, r9, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f001 fc46 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012bc:	2306      	movs	r3, #6
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80012be:	2240      	movs	r2, #64	@ 0x40
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 80012c0:	a909      	add	r1, sp, #36	@ 0x24
 80012c2:	4892      	ldr	r0, [pc, #584]	@ (800150c <main+0x6ac>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012c4:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80012c6:	9209      	str	r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f001 fc3b 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80012d2:	f241 011f 	movw	r1, #4127	@ 0x101f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d6:	4890      	ldr	r0, [pc, #576]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80012d8:	9109      	str	r1, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012da:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80012e0:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e4:	f001 fc30 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80012e8:	2240      	movs	r2, #64	@ 0x40
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012ea:	a909      	add	r1, sp, #36	@ 0x24
 80012ec:	4888      	ldr	r0, [pc, #544]	@ (8001510 <main+0x6b0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80012ee:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	e9cd 2509 	strd	r2, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f001 fc25 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80012fe:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001300:	a909      	add	r1, sp, #36	@ 0x24
 8001302:	4885      	ldr	r0, [pc, #532]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001304:	930d      	str	r3, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 8001306:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 800130c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001312:	f001 fc19 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001316:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800131a:	a909      	add	r1, sp, #36	@ 0x24
 800131c:	487e      	ldr	r0, [pc, #504]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001322:	2320      	movs	r3, #32
 8001324:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001326:	f001 fc0f 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 800132a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132e:	a909      	add	r1, sp, #36	@ 0x24
 8001330:	487a      	ldr	r0, [pc, #488]	@ (800151c <main+0x6bc>)
  GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8001332:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001338:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133c:	f001 fc04 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8001340:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001344:	a909      	add	r1, sp, #36	@ 0x24
 8001346:	4875      	ldr	r0, [pc, #468]	@ (800151c <main+0x6bc>)
  GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8001348:	9209      	str	r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800134e:	e9cd 680c 	strd	r6, r8, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	f001 fbf9 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 8001356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800135a:	a909      	add	r1, sp, #36	@ 0x24
 800135c:	486e      	ldr	r0, [pc, #440]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800135e:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800136a:	f001 fbed 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800136e:	f44f 7240 	mov.w	r2, #768	@ 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	a909      	add	r1, sp, #36	@ 0x24
 8001374:	4869      	ldr	r0, [pc, #420]	@ (800151c <main+0x6bc>)
  GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001376:	9209      	str	r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001378:	2207      	movs	r2, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800137c:	920d      	str	r2, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f001 fbe1 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001386:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	a909      	add	r1, sp, #36	@ 0x24
 800138c:	4864      	ldr	r0, [pc, #400]	@ (8001520 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800138e:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800139a:	f001 fbd5 	bl	8002b48 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 800139e:	a909      	add	r1, sp, #36	@ 0x24
 80013a0:	4859      	ldr	r0, [pc, #356]	@ (8001508 <main+0x6a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a4:	e9cd 7609 	strd	r7, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f001 fbce 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 80013ac:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	a909      	add	r1, sp, #36	@ 0x24
 80013b0:	4855      	ldr	r0, [pc, #340]	@ (8001508 <main+0x6a8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f001 fbc5 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80013be:	2380      	movs	r3, #128	@ 0x80
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013c0:	2205      	movs	r2, #5
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 80013c2:	a909      	add	r1, sp, #36	@ 0x24
 80013c4:	4853      	ldr	r0, [pc, #332]	@ (8001514 <main+0x6b4>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013c6:	920d      	str	r2, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 80013d0:	f001 fbba 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80013d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80013d8:	484c      	ldr	r0, [pc, #304]	@ (800150c <main+0x6ac>)
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 80013da:	9109      	str	r1, [sp, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80013dc:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013e2:	e9cd 470c 	strd	r4, r7, [sp, #48]	@ 0x30
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f001 fbaf 	bl	8002b48 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80013ea:	a909      	add	r1, sp, #36	@ 0x24
 80013ec:	4849      	ldr	r0, [pc, #292]	@ (8001514 <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f0:	e9cd a609 	strd	sl, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f001 fba8 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 80013f8:	2158      	movs	r1, #88	@ 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	4842      	ldr	r0, [pc, #264]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 80013fc:	9109      	str	r1, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001400:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f001 fb9d 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800140e:	2205      	movs	r2, #5
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001410:	a909      	add	r1, sp, #36	@ 0x24
 8001412:	4841      	ldr	r0, [pc, #260]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001414:	920d      	str	r2, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 800141c:	9209      	str	r2, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001422:	f001 fb91 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001426:	f44f 7e80 	mov.w	lr, #256	@ 0x100
 800142a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800142e:	a909      	add	r1, sp, #36	@ 0x24
 8001430:	4836      	ldr	r0, [pc, #216]	@ (800150c <main+0x6ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001434:	e9cd e309 	strd	lr, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001438:	f001 fb86 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 800143c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001440:	a909      	add	r1, sp, #36	@ 0x24
 8001442:	4835      	ldr	r0, [pc, #212]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001444:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001448:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144c:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001452:	f001 fb79 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 8001456:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 800145a:	a909      	add	r1, sp, #36	@ 0x24
 800145c:	482e      	ldr	r0, [pc, #184]	@ (8001518 <main+0x6b8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 8001466:	f001 fb6f 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 800146e:	a909      	add	r1, sp, #36	@ 0x24
 8001470:	4828      	ldr	r0, [pc, #160]	@ (8001514 <main+0x6b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 8001476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 800147c:	f001 fb64 	bl	8002b48 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001480:	a909      	add	r1, sp, #36	@ 0x24
 8001482:	4820      	ldr	r0, [pc, #128]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001484:	950d      	str	r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	e9cd 7509 	strd	r7, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800148e:	f001 fb5b 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001492:	2310      	movs	r3, #16
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001494:	a909      	add	r1, sp, #36	@ 0x24
 8001496:	481f      	ldr	r0, [pc, #124]	@ (8001514 <main+0x6b4>)
  GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001498:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800149a:	f8cd 8034 	str.w	r8, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	e9cd 540a 	strd	r5, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f001 fb50 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 80014a8:	2320      	movs	r3, #32
  HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 80014aa:	a909      	add	r1, sp, #36	@ 0x24
 80014ac:	4815      	ldr	r0, [pc, #84]	@ (8001504 <main+0x6a4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b0:	e9cd 3609 	strd	r3, r6, [sp, #36]	@ 0x24
  HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f001 fb48 	bl	8002b48 <HAL_GPIO_Init>
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	a909      	add	r1, sp, #36	@ 0x24
 80014ba:	4819      	ldr	r0, [pc, #100]	@ (8001520 <main+0x6c0>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80014bc:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	e9cd a509 	strd	sl, r5, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	e9cd 460b 	strd	r4, r6, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f001 fb3e 	bl	8002b48 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80014cc:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014ce:	4811      	ldr	r0, [pc, #68]	@ (8001514 <main+0x6b4>)
 80014d0:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	e9cd 3709 	strd	r3, r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014da:	f001 fb35 	bl	8002b48 <HAL_GPIO_Init>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80014de:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80014e2:	4608      	mov	r0, r1
 80014e4:	f000 fabe 	bl	8001a64 <HAL_SYSCFG_AnalogSwitchConfig>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80014e8:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80014ec:	4608      	mov	r0, r1
 80014ee:	f000 fab9 	bl	8001a64 <HAL_SYSCFG_AnalogSwitchConfig>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80014f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80014f6:	4608      	mov	r0, r1
 80014f8:	f000 fab4 	bl	8001a64 <HAL_SYSCFG_AnalogSwitchConfig>
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80014fc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8001500:	4608      	mov	r0, r1
 8001502:	e00f      	b.n	8001524 <main+0x6c4>
 8001504:	58020000 	.word	0x58020000
 8001508:	58020800 	.word	0x58020800
 800150c:	58021000 	.word	0x58021000
 8001510:	58021800 	.word	0x58021800
 8001514:	58021c00 	.word	0x58021c00
 8001518:	58021400 	.word	0x58021400
 800151c:	58020c00 	.word	0x58020c00
 8001520:	58020400 	.word	0x58020400
 8001524:	f000 fa9e 	bl	8001a64 <HAL_SYSCFG_AnalogSwitchConfig>
  osKernelInitialize();
 8001528:	f002 ff26 	bl	8004378 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800152c:	4a04      	ldr	r2, [pc, #16]	@ (8001540 <main+0x6e0>)
 800152e:	4621      	mov	r1, r4
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <main+0x6e4>)
 8001532:	f002 ff55 	bl	80043e0 <osThreadNew>
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <main+0x6e8>)
 8001538:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800153a:	f002 ff2f 	bl	800439c <osKernelStart>
  while (1)
 800153e:	e7fe      	b.n	800153e <main+0x6de>
 8001540:	08011a28 	.word	0x08011a28
 8001544:	08000d8d 	.word	0x08000d8d
 8001548:	240000b0 	.word	0x240000b0

0800154c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800154e:	6802      	ldr	r2, [r0, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d000      	beq.n	8001556 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001554:	4770      	bx	lr
    HAL_IncTick();
 8001556:	f000 ba69 	b.w	8001a2c <HAL_IncTick>
 800155a:	bf00      	nop
 800155c:	40001000 	.word	0x40001000

08001560 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
  while (1)
 8001562:	e7fe      	b.n	8001562 <Error_Handler+0x2>

08001564 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	210f      	movs	r1, #15
 800156a:	f06f 0001 	mvn.w	r0, #1
{
 800156e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001570:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
{
 8001574:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	f044 0402 	orr.w	r4, r4, #2
 800157a:	f8c3 40f4 	str.w	r4, [r3, #244]	@ 0xf4
 800157e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	b003      	add	sp, #12
 800158c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001590:	f000 ba84 	b.w	8001a9c <HAL_NVIC_SetPriority>
 8001594:	58024400 	.word	0x58024400

08001598 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001598:	280f      	cmp	r0, #15
 800159a:	d901      	bls.n	80015a0 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 800159e:	4770      	bx	lr
{
 80015a0:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015a2:	4601      	mov	r1, r0
{
 80015a4:	b08b      	sub	sp, #44	@ 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80015a6:	2200      	movs	r2, #0
 80015a8:	4604      	mov	r4, r0
 80015aa:	2036      	movs	r0, #54	@ 0x36
 80015ac:	f000 fa76 	bl	8001a9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b0:	2036      	movs	r0, #54	@ 0x36
 80015b2:	f000 faaf 	bl	8001b14 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_InitTick+0x8c>)
    uwTickPrio = TickPriority;
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <HAL_InitTick+0x90>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ba:	4669      	mov	r1, sp
 80015bc:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 80015be:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015c0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80015c4:	f042 0210 	orr.w	r2, r2, #16
 80015c8:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	f002 f8ce 	bl	8003778 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015dc:	9b07      	ldr	r3, [sp, #28]
 80015de:	b9c3      	cbnz	r3, 8001612 <HAL_InitTick+0x7a>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015e0:	f002 f8b8 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 80015e4:	4603      	mov	r3, r0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e6:	4911      	ldr	r1, [pc, #68]	@ (800162c <HAL_InitTick+0x94>)
  htim6.Init.ClockDivision = 0;
 80015e8:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 80015ea:	4c11      	ldr	r4, [pc, #68]	@ (8001630 <HAL_InitTick+0x98>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ec:	fba1 1303 	umull	r1, r3, r1, r3
  htim6.Instance = TIM6;
 80015f0:	4d10      	ldr	r5, [pc, #64]	@ (8001634 <HAL_InitTick+0x9c>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015f2:	f240 31e7 	movw	r1, #999	@ 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015f6:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f8:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 80015fa:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fc:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015fe:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001600:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001604:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001606:	f002 fa81 	bl	8003b0c <HAL_TIM_Base_Init>
 800160a:	b130      	cbz	r0, 800161a <HAL_InitTick+0x82>
    return HAL_ERROR;
 800160c:	2001      	movs	r0, #1
}
 800160e:	b00b      	add	sp, #44	@ 0x2c
 8001610:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001612:	f002 f89f 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8001616:	0043      	lsls	r3, r0, #1
 8001618:	e7e5      	b.n	80015e6 <HAL_InitTick+0x4e>
    return HAL_TIM_Base_Start_IT(&htim6);
 800161a:	4620      	mov	r0, r4
 800161c:	f002 f8da 	bl	80037d4 <HAL_TIM_Base_Start_IT>
 8001620:	e7f5      	b.n	800160e <HAL_InitTick+0x76>
 8001622:	bf00      	nop
 8001624:	58024400 	.word	0x58024400
 8001628:	2400000c 	.word	0x2400000c
 800162c:	431bde83 	.word	0x431bde83
 8001630:	240000b4 	.word	0x240000b4
 8001634:	40001000 	.word	0x40001000

08001638 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <NMI_Handler>
 800163a:	bf00      	nop

0800163c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <HardFault_Handler>
 800163e:	bf00      	nop

08001640 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <MemManage_Handler>
 8001642:	bf00      	nop

08001644 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <BusFault_Handler>
 8001646:	bf00      	nop

08001648 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler>
 800164a:	bf00      	nop

0800164c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop

08001650 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001650:	4801      	ldr	r0, [pc, #4]	@ (8001658 <TIM6_DAC_IRQHandler+0x8>)
 8001652:	f002 b925 	b.w	80038a0 <HAL_TIM_IRQHandler>
 8001656:	bf00      	nop
 8001658:	240000b4 	.word	0x240000b4

0800165c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800165c:	4801      	ldr	r0, [pc, #4]	@ (8001664 <ETH_IRQHandler+0x8>)
 800165e:	f000 bf2b 	b.w	80024b8 <HAL_ETH_IRQHandler>
 8001662:	bf00      	nop
 8001664:	240001d8 	.word	0x240001d8

08001668 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001668:	2001      	movs	r0, #1
 800166a:	4770      	bx	lr

0800166c <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <_kill+0xc>)
 800166e:	2216      	movs	r2, #22
	return -1;
}
 8001670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	errno = EINVAL;
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	4770      	bx	lr
 8001678:	240107ec 	.word	0x240107ec

0800167c <_exit>:
	errno = EINVAL;
 800167c:	4b01      	ldr	r3, [pc, #4]	@ (8001684 <_exit+0x8>)
 800167e:	2216      	movs	r2, #22
 8001680:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001682:	e7fe      	b.n	8001682 <_exit+0x6>
 8001684:	240107ec 	.word	0x240107ec

08001688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001688:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168a:	1e16      	subs	r6, r2, #0
 800168c:	dd07      	ble.n	800169e <_read+0x16>
 800168e:	460c      	mov	r4, r1
 8001690:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	42a5      	cmp	r5, r4
 800169c:	d1f9      	bne.n	8001692 <_read+0xa>
	}

return len;
}
 800169e:	4630      	mov	r0, r6
 80016a0:	bd70      	pop	{r4, r5, r6, pc}
 80016a2:	bf00      	nop

080016a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	1e16      	subs	r6, r2, #0
 80016a8:	dd07      	ble.n	80016ba <_write+0x16>
 80016aa:	460c      	mov	r4, r1
 80016ac:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80016ae:	f814 0b01 	ldrb.w	r0, [r4], #1
 80016b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	42a5      	cmp	r5, r4
 80016b8:	d1f9      	bne.n	80016ae <_write+0xa>
	}
	return len;
}
 80016ba:	4630      	mov	r0, r6
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
 80016be:	bf00      	nop

080016c0 <_close>:

int _close(int file)
{
	return -1;
}
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016cc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016ce:	604b      	str	r3, [r1, #4]
}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop

080016d4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016d4:	2001      	movs	r0, #1
 80016d6:	4770      	bx	lr

080016d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016d8:	2000      	movs	r0, #0
 80016da:	4770      	bx	lr

080016dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	490d      	ldr	r1, [pc, #52]	@ (8001714 <_sbrk+0x38>)
{
 80016de:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001718 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80016e2:	6808      	ldr	r0, [r1, #0]
{
 80016e4:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e6:	4c0d      	ldr	r4, [pc, #52]	@ (800171c <_sbrk+0x40>)
 80016e8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80016ea:	b170      	cbz	r0, 800170a <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ec:	4403      	add	r3, r0
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d803      	bhi.n	80016fa <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80016f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 80016f6:	600b      	str	r3, [r1, #0]
}
 80016f8:	4770      	bx	lr
    errno = ENOMEM;
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <_sbrk+0x44>)
 80016fc:	220c      	movs	r2, #12
    return (void *)-1;
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001702:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800170a:	4c06      	ldr	r4, [pc, #24]	@ (8001724 <_sbrk+0x48>)
 800170c:	4620      	mov	r0, r4
 800170e:	600c      	str	r4, [r1, #0]
 8001710:	e7ec      	b.n	80016ec <_sbrk+0x10>
 8001712:	bf00      	nop
 8001714:	24000100 	.word	0x24000100
 8001718:	24050000 	.word	0x24050000
 800171c:	00000400 	.word	0x00000400
 8001720:	240107ec 	.word	0x240107ec
 8001724:	24015188 	.word	0x24015188

08001728 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001728:	4922      	ldr	r1, [pc, #136]	@ (80017b4 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800172a:	4a23      	ldr	r2, [pc, #140]	@ (80017b8 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800172c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8001730:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 8001734:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800173a:	6813      	ldr	r3, [r2, #0]
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	2b06      	cmp	r3, #6
 8001742:	d805      	bhi.n	8001750 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	f023 030f 	bic.w	r3, r3, #15
 800174a:	f043 0307 	orr.w	r3, r3, #7
 800174e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001750:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001752:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001754:	4a1a      	ldr	r2, [pc, #104]	@ (80017c0 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 8001756:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001758:	4817      	ldr	r0, [pc, #92]	@ (80017b8 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 800175a:	f041 0101 	orr.w	r1, r1, #1
 800175e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001760:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001762:	6819      	ldr	r1, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001768:	6803      	ldr	r3, [r0, #0]
 800176a:	071b      	lsls	r3, r3, #28
 800176c:	d505      	bpl.n	800177a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800176e:	6803      	ldr	r3, [r0, #0]
 8001770:	f023 030f 	bic.w	r3, r3, #15
 8001774:	f043 0307 	orr.w	r3, r3, #7
 8001778:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <SystemInit+0x94>)
 800177c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800177e:	4911      	ldr	r1, [pc, #68]	@ (80017c4 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001780:	4c11      	ldr	r4, [pc, #68]	@ (80017c8 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001782:	4812      	ldr	r0, [pc, #72]	@ (80017cc <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001784:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001786:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001788:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800178a:	629c      	str	r4, [r3, #40]	@ 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800178c:	f243 04d2 	movw	r4, #12498	@ 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001790:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001792:	6319      	str	r1, [r3, #48]	@ 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001794:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001796:	6399      	str	r1, [r3, #56]	@ 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800179a:	6419      	str	r1, [r3, #64]	@ 0x40
  RCC->PLL3FRACR = 0x00000000;
 800179c:	645a      	str	r2, [r3, #68]	@ 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800179e:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017a0:	480b      	ldr	r0, [pc, #44]	@ (80017d0 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 80017a2:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80017a6:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 80017a8:	661a      	str	r2, [r3, #96]	@ 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017aa:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00
 80017b8:	52002000 	.word	0x52002000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80017c4:	01010280 	.word	0x01010280
 80017c8:	02020200 	.word	0x02020200
 80017cc:	01ff0000 	.word	0x01ff0000
 80017d0:	52004000 	.word	0x52004000

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800180c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017d8:	f7ff ffa6 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017de:	490d      	ldr	r1, [pc, #52]	@ (8001814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001802:	f00c fe1d 	bl	800e440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff fb2b 	bl	8000e60 <main>
  bx  lr
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001810:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001814:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8001818:	08011cb0 	.word	0x08011cb0
  ldr r2, =_sbss
 800181c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8001820:	24015184 	.word	0x24015184

08001824 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC3_IRQHandler>
	...

08001828 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001828:	b188      	cbz	r0, 800184e <LAN8742_RegisterBusIO+0x26>
 800182a:	68ca      	ldr	r2, [r1, #12]
 800182c:	b17a      	cbz	r2, 800184e <LAN8742_RegisterBusIO+0x26>
{
 800182e:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001830:	688c      	ldr	r4, [r1, #8]
 8001832:	b17c      	cbz	r4, 8001854 <LAN8742_RegisterBusIO+0x2c>
 8001834:	690d      	ldr	r5, [r1, #16]
 8001836:	b16d      	cbz	r5, 8001854 <LAN8742_RegisterBusIO+0x2c>
 8001838:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 800183a:	e9d1 0100 	ldrd	r0, r1, [r1]
  pObj->IO.DeInit = ioctx->DeInit;
  pObj->IO.ReadReg = ioctx->ReadReg;
 800183e:	615a      	str	r2, [r3, #20]
  pObj->IO.Init = ioctx->Init;
 8001840:	6098      	str	r0, [r3, #8]
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 8001842:	2000      	movs	r0, #0
  pObj->IO.GetTick = ioctx->GetTick;
 8001844:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001846:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 800184a:	bc30      	pop	{r4, r5}
 800184c:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 800184e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8001852:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001858:	e7f7      	b.n	800184a <LAN8742_RegisterBusIO+0x22>
 800185a:	bf00      	nop

0800185c <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800185c:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800185e:	2300      	movs	r3, #0
 {
 8001860:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8001862:	6844      	ldr	r4, [r0, #4]
 {
 8001864:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001866:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8001868:	2c00      	cmp	r4, #0
 800186a:	d146      	bne.n	80018fa <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 800186c:	6883      	ldr	r3, [r0, #8]
 800186e:	b103      	cbz	r3, 8001872 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001870:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001872:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8001874:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001876:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001878:	e007      	b.n	800188a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800187a:	9b01      	ldr	r3, [sp, #4]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	42a3      	cmp	r3, r4
 8001882:	d016      	beq.n	80018b2 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001884:	3401      	adds	r4, #1
 8001886:	2c20      	cmp	r4, #32
 8001888:	d00b      	beq.n	80018a2 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800188a:	696b      	ldr	r3, [r5, #20]
 800188c:	aa01      	add	r2, sp, #4
 800188e:	2112      	movs	r1, #18
 8001890:	4620      	mov	r0, r4
 8001892:	4798      	blx	r3
 8001894:	2800      	cmp	r0, #0
 8001896:	daf0      	bge.n	800187a <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001898:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 800189a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800189e:	2c20      	cmp	r4, #32
 80018a0:	d1f3      	bne.n	800188a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80018a2:	682c      	ldr	r4, [r5, #0]
 80018a4:	2c1f      	cmp	r4, #31
 80018a6:	d937      	bls.n	8001918 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80018a8:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 80018ac:	4630      	mov	r0, r6
 80018ae:	b002      	add	sp, #8
 80018b0:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 80018b2:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80018b4:	692b      	ldr	r3, [r5, #16]
 80018b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018ba:	4620      	mov	r0, r4
 80018bc:	2100      	movs	r1, #0
 80018be:	4798      	blx	r3
 80018c0:	2800      	cmp	r0, #0
 80018c2:	db2c      	blt.n	800191e <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80018c4:	696b      	ldr	r3, [r5, #20]
 80018c6:	aa01      	add	r2, sp, #4
 80018c8:	2100      	movs	r1, #0
 80018ca:	6828      	ldr	r0, [r5, #0]
 80018cc:	4798      	blx	r3
 80018ce:	2800      	cmp	r0, #0
 80018d0:	db2b      	blt.n	800192a <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 80018d2:	69ab      	ldr	r3, [r5, #24]
 80018d4:	4798      	blx	r3
 80018d6:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80018d8:	e00c      	b.n	80018f4 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80018da:	69ab      	ldr	r3, [r5, #24]
 80018dc:	4798      	blx	r3
 80018de:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80018e0:	aa01      	add	r2, sp, #4
 80018e2:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80018e4:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 80018e8:	d81c      	bhi.n	8001924 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80018ea:	696b      	ldr	r3, [r5, #20]
 80018ec:	6828      	ldr	r0, [r5, #0]
 80018ee:	4798      	blx	r3
 80018f0:	2800      	cmp	r0, #0
 80018f2:	db1a      	blt.n	800192a <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	041b      	lsls	r3, r3, #16
 80018f8:	d4ef      	bmi.n	80018da <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 80018fa:	69ab      	ldr	r3, [r5, #24]
 80018fc:	4798      	blx	r3
 80018fe:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001900:	69ab      	ldr	r3, [r5, #24]
 8001902:	4798      	blx	r3
 8001904:	1b03      	subs	r3, r0, r4
 8001906:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800190a:	d9f9      	bls.n	8001900 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	2600      	movs	r6, #0
 8001910:	606b      	str	r3, [r5, #4]
 }
 8001912:	4630      	mov	r0, r6
 8001914:	b002      	add	sp, #8
 8001916:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 8001918:	2e00      	cmp	r6, #0
 800191a:	d1fa      	bne.n	8001912 <LAN8742_Init+0xb6>
 800191c:	e7ca      	b.n	80018b4 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 800191e:	f06f 0603 	mvn.w	r6, #3
 8001922:	e7f6      	b.n	8001912 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001924:	f06f 0601 	mvn.w	r6, #1
 8001928:	e7f3      	b.n	8001912 <LAN8742_Init+0xb6>
                 status = LAN8742_STATUS_READ_ERROR;
 800192a:	f06f 0604 	mvn.w	r6, #4
   if(status == LAN8742_STATUS_OK)
 800192e:	e7f0      	b.n	8001912 <LAN8742_Init+0xb6>

08001930 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001930:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 8001932:	2500      	movs	r5, #0
{
 8001934:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001936:	6943      	ldr	r3, [r0, #20]
{
 8001938:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800193a:	aa01      	add	r2, sp, #4
 800193c:	2101      	movs	r1, #1
 800193e:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8001940:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001942:	4798      	blx	r3
 8001944:	42a8      	cmp	r0, r5
 8001946:	db3d      	blt.n	80019c4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001948:	6963      	ldr	r3, [r4, #20]
 800194a:	aa01      	add	r2, sp, #4
 800194c:	2101      	movs	r1, #1
 800194e:	6820      	ldr	r0, [r4, #0]
 8001950:	4798      	blx	r3
 8001952:	2800      	cmp	r0, #0
 8001954:	db36      	blt.n	80019c4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001956:	9b01      	ldr	r3, [sp, #4]
 8001958:	075b      	lsls	r3, r3, #29
 800195a:	d52a      	bpl.n	80019b2 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800195c:	6963      	ldr	r3, [r4, #20]
 800195e:	aa01      	add	r2, sp, #4
 8001960:	4629      	mov	r1, r5
 8001962:	6820      	ldr	r0, [r4, #0]
 8001964:	4798      	blx	r3
 8001966:	2800      	cmp	r0, #0
 8001968:	db2c      	blt.n	80019c4 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	04dd      	lsls	r5, r3, #19
 800196e:	d514      	bpl.n	800199a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001970:	6963      	ldr	r3, [r4, #20]
 8001972:	aa01      	add	r2, sp, #4
 8001974:	211f      	movs	r1, #31
 8001976:	6820      	ldr	r0, [r4, #0]
 8001978:	4798      	blx	r3
 800197a:	2800      	cmp	r0, #0
 800197c:	db22      	blt.n	80019c4 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	04da      	lsls	r2, r3, #19
 8001982:	d51d      	bpl.n	80019c0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	2b18      	cmp	r3, #24
 800198a:	d017      	beq.n	80019bc <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800198c:	2b08      	cmp	r3, #8
 800198e:	d013      	beq.n	80019b8 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001990:	2b14      	cmp	r3, #20
 8001992:	d10b      	bne.n	80019ac <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001994:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001996:	b003      	add	sp, #12
 8001998:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800199a:	f403 5204 	and.w	r2, r3, #8448	@ 0x2100
 800199e:	f5b2 5f04 	cmp.w	r2, #8448	@ 0x2100
 80019a2:	d00b      	beq.n	80019bc <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80019a4:	0498      	lsls	r0, r3, #18
 80019a6:	d407      	bmi.n	80019b8 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80019a8:	05d9      	lsls	r1, r3, #23
 80019aa:	d4f3      	bmi.n	8001994 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019ac:	2005      	movs	r0, #5
}
 80019ae:	b003      	add	sp, #12
 80019b0:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 80019b2:	2001      	movs	r0, #1
}
 80019b4:	b003      	add	sp, #12
 80019b6:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019b8:	2003      	movs	r0, #3
 80019ba:	e7f8      	b.n	80019ae <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019bc:	2002      	movs	r0, #2
 80019be:	e7f6      	b.n	80019ae <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80019c0:	2006      	movs	r0, #6
 80019c2:	e7f4      	b.n	80019ae <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 80019c4:	f06f 0004 	mvn.w	r0, #4
 80019c8:	e7f1      	b.n	80019ae <LAN8742_GetLinkState+0x7e>
 80019ca:	bf00      	nop

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ce:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019d0:	4c12      	ldr	r4, [pc, #72]	@ (8001a1c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	f000 f851 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019d6:	f001 fd31 	bl	800343c <HAL_RCC_GetSysClockFreq>
 80019da:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <HAL_Init+0x54>)
 80019dc:	4911      	ldr	r1, [pc, #68]	@ (8001a24 <HAL_Init+0x58>)
 80019de:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e0:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019e2:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ea:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ec:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019ee:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019f2:	490d      	ldr	r1, [pc, #52]	@ (8001a28 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019f4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019f8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019fa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80019fe:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a00:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a02:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a04:	f7ff fdc8 	bl	8001598 <HAL_InitTick>
 8001a08:	b110      	cbz	r0, 8001a10 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8001a0a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	bd10      	pop	{r4, pc}
 8001a10:	4604      	mov	r4, r0
  HAL_MspInit();
 8001a12:	f7ff fda7 	bl	8001564 <HAL_MspInit>
}
 8001a16:	4620      	mov	r0, r4
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	bf00      	nop
 8001a1c:	24000000 	.word	0x24000000
 8001a20:	58024400 	.word	0x58024400
 8001a24:	08011a4c 	.word	0x08011a4c
 8001a28:	24000004 	.word	0x24000004

08001a2c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a2c:	4a03      	ldr	r2, [pc, #12]	@ (8001a3c <HAL_IncTick+0x10>)
 8001a2e:	4b04      	ldr	r3, [pc, #16]	@ (8001a40 <HAL_IncTick+0x14>)
 8001a30:	6811      	ldr	r1, [r2, #0]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	440b      	add	r3, r1
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	24000104 	.word	0x24000104
 8001a40:	24000008 	.word	0x24000008

08001a44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a44:	4b01      	ldr	r3, [pc, #4]	@ (8001a4c <HAL_GetTick+0x8>)
 8001a46:	6818      	ldr	r0, [r3, #0]
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	24000104 	.word	0x24000104

08001a50 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a50:	4a03      	ldr	r2, [pc, #12]	@ (8001a60 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001a52:	6853      	ldr	r3, [r2, #4]
 8001a54:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	6053      	str	r3, [r2, #4]
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	58000400 	.word	0x58000400

08001a64 <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001a64:	4a03      	ldr	r2, [pc, #12]	@ (8001a74 <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 8001a66:	6853      	ldr	r3, [r2, #4]
 8001a68:	ea23 0300 	bic.w	r3, r3, r0
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6053      	str	r3, [r2, #4]
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	58000400 	.word	0x58000400

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4906      	ldr	r1, [pc, #24]	@ (8001a94 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a7e:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a82:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a88:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8001a8e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001a90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	05fa0000 	.word	0x05fa0000

08001a9c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_NVIC_SetPriority+0x6c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aaa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aae:	f1be 0f04 	cmp.w	lr, #4
 8001ab2:	bf28      	it	cs
 8001ab4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab8:	f1bc 0f06 	cmp.w	ip, #6
 8001abc:	d91a      	bls.n	8001af4 <HAL_NVIC_SetPriority+0x58>
 8001abe:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac6:	fa03 f30c 	lsl.w	r3, r3, ip
 8001aca:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	fa03 f30e 	lsl.w	r3, r3, lr
 8001ad8:	ea21 0303 	bic.w	r3, r1, r3
 8001adc:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ae0:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001ae8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001aea:	db06      	blt.n	8001afa <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aec:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_NVIC_SetPriority+0x70>)
 8001aee:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001af0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001af4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	4694      	mov	ip, r2
 8001af8:	e7e9      	b.n	8001ace <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	f000 000f 	and.w	r0, r0, #15
 8001afe:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_NVIC_SetPriority+0x74>)
 8001b00:	5413      	strb	r3, [r2, r0]
 8001b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	e000e400 	.word	0xe000e400
 8001b10:	e000ed14 	.word	0xe000ed14

08001b14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b14:	2800      	cmp	r0, #0
 8001b16:	db07      	blt.n	8001b28 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f000 011f 	and.w	r1, r0, #31
 8001b1e:	4a03      	ldr	r2, [pc, #12]	@ (8001b2c <HAL_NVIC_EnableIRQ+0x18>)
 8001b20:	0940      	lsrs	r0, r0, #5
 8001b22:	408b      	lsls	r3, r1
 8001b24:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b30:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b36:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b3e:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8001b40:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <HAL_MPU_Enable+0x1c>)
 8001b4e:	f040 0001 	orr.w	r0, r0, #1
 8001b52:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b62:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001b6c:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_MPU_ConfigRegion+0x60>)
 8001b6e:	7843      	ldrb	r3, [r0, #1]
 8001b70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  if ((MPU_Init->Enable) != 0UL)
 8001b74:	7801      	ldrb	r1, [r0, #0]
 8001b76:	b321      	cbz	r1, 8001bc2 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b78:	6843      	ldr	r3, [r0, #4]
{
 8001b7a:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 8001b7c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b80:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b82:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b86:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b88:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b8c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b90:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b94:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b96:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b98:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b9c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ba0:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ba4:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ba8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001bac:	7a01      	ldrb	r1, [r0, #8]
 8001bae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001bb2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001bb6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001bbe:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8001bc2:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8001bc6:	f8c2 10a0 	str.w	r1, [r2, #160]	@ 0xa0
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bd0:	b430      	push	{r4, r5}
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bd2:	688b      	ldr	r3, [r1, #8]
 8001bd4:	680d      	ldr	r5, [r1, #0]
 8001bd6:	694c      	ldr	r4, [r1, #20]
 8001bd8:	432b      	orrs	r3, r5
 8001bda:	6802      	ldr	r2, [r0, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bdc:	f891 c011 	ldrb.w	ip, [r1, #17]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001be0:	4323      	orrs	r3, r4
 8001be2:	698c      	ldr	r4, [r1, #24]
 8001be4:	6810      	ldr	r0, [r2, #0]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001be6:	fabc fc8c 	clz	ip, ip
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bea:	4323      	orrs	r3, r4
 8001bec:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001bee:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001bf2:	4d52      	ldr	r5, [pc, #328]	@ (8001d3c <ETH_SetMACConfig+0x16c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001bf4:	4323      	orrs	r3, r4
 8001bf6:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8001bf8:	4323      	orrs	r3, r4
 8001bfa:	4c51      	ldr	r4, [pc, #324]	@ (8001d40 <ETH_SetMACConfig+0x170>)
 8001bfc:	4020      	ands	r0, r4
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001bfe:	790c      	ldrb	r4, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c00:	4303      	orrs	r3, r0
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c02:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c04:	ea43 63c4 	orr.w	r3, r3, r4, lsl #27
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c08:	7b0c      	ldrb	r4, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c0a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c0e:	7b8c      	ldrb	r4, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c10:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c14:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c16:	ea43 5344 	orr.w	r3, r3, r4, lsl #21
               ((uint32_t)macconf->JumboPacket << 16) |
 8001c1a:	7c8c      	ldrb	r4, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c1c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001c20:	7f08      	ldrb	r0, [r1, #28]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001c26:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c28:	ea43 3300 	orr.w	r3, r3, r0, lsl #12
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001c2c:	7fc8      	ldrb	r0, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c2e:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001c32:	f891 4028 	ldrb.w	r4, [r1, #40]	@ 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c36:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c3a:	7c08      	ldrb	r0, [r1, #16]
 8001c3c:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c40:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001c44:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c46:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c48:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c4c:	7f88      	ldrb	r0, [r1, #30]
 8001c4e:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c52:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001c56:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c58:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001c5c:	f891 0020 	ldrb.w	r0, [r1, #32]
 8001c60:	fab0 f080 	clz	r0, r0
 8001c64:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c66:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c6a:	6b48      	ldr	r0, [r1, #52]	@ 0x34
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001c6c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c6e:	6853      	ldr	r3, [r2, #4]
 8001c70:	402b      	ands	r3, r5
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001c72:	f64f 750d 	movw	r5, #65293	@ 0xff0d
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c76:	ea43 6344 	orr.w	r3, r3, r4, lsl #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001c7a:	f891 4038 	ldrb.w	r4, [r1, #56]	@ 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c7e:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001c80:	f891 0030 	ldrb.w	r0, [r1, #48]	@ 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c84:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001c88:	f891 4031 	ldrb.w	r4, [r1, #49]	@ 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c8c:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c90:	f891 0032 	ldrb.w	r0, [r1, #50]	@ 0x32
 8001c94:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c98:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001c9c:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001c9e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ca2:	4828      	ldr	r0, [pc, #160]	@ (8001d44 <ETH_SetMACConfig+0x174>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ca4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001ca6:	68d3      	ldr	r3, [r2, #12]
               (macconf->PauseTime << 16));
 8001ca8:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001caa:	4018      	ands	r0, r3
 8001cac:	6c4b      	ldr	r3, [r1, #68]	@ 0x44
 8001cae:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001cb0:	f891 3040 	ldrb.w	r3, [r1, #64]	@ 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001cb4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001cb8:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cba:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8001cbc:	6d08      	ldr	r0, [r1, #80]	@ 0x50
 8001cbe:	402b      	ands	r3, r5
 8001cc0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001cc4:	f891 4054 	ldrb.w	r4, [r1, #84]	@ 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cc8:	4303      	orrs	r3, r0
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001cca:	f891 004c 	ldrb.w	r0, [r1, #76]	@ 0x4c
 8001cce:	fab0 f080 	clz	r0, r0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cd2:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001cd6:	0940      	lsrs	r0, r0, #5
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001cd8:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001cdc:	e9d1 5416 	ldrd	r5, r4, [r1, #88]	@ 0x58
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ce0:	6713      	str	r3, [r2, #112]	@ 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ce2:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ce6:	f891 3056 	ldrb.w	r3, [r1, #86]	@ 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cea:	f020 0003 	bic.w	r0, r0, #3
 8001cee:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001cf0:	f891 0055 	ldrb.w	r0, [r1, #85]	@ 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001cf4:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001cfc:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	@ 0xd00
 8001d00:	f023 0372 	bic.w	r3, r3, #114	@ 0x72
 8001d04:	432b      	orrs	r3, r5
 8001d06:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d0a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	@ 0xd30
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001d0e:	f891 0061 	ldrb.w	r0, [r1, #97]	@ 0x61
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d12:	f023 037b 	bic.w	r3, r3, #123	@ 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001d16:	f891 c062 	ldrb.w	ip, [r1, #98]	@ 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d1a:	4323      	orrs	r3, r4
 8001d1c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d20:	f891 0060 	ldrb.w	r0, [r1, #96]	@ 0x60
 8001d24:	fab0 f180 	clz	r1, r0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d28:	ea43 03cc 	orr.w	r3, r3, ip, lsl #3
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001d2c:	0949      	lsrs	r1, r1, #5
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d2e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
}
 8001d32:	bc30      	pop	{r4, r5}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001d34:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	c0f88000 	.word	0xc0f88000
 8001d40:	00048083 	.word	0x00048083
 8001d44:	fffffef0 	.word	0xfffffef0

08001d48 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d48:	6803      	ldr	r3, [r0, #0]
 8001d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <ETH_SetDMAConfig+0x7c>)
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d50:	6808      	ldr	r0, [r1, #0]
{
 8001d52:	b410      	push	{r4}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001d54:	681c      	ldr	r4, [r3, #0]
 8001d56:	4022      	ands	r2, r4
 8001d58:	4302      	orrs	r2, r0
 8001d5a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d5c:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d5e:	790c      	ldrb	r4, [r1, #4]
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001d60:	03d2      	lsls	r2, r2, #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d62:	6858      	ldr	r0, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001d64:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001d68:	688c      	ldr	r4, [r1, #8]
 8001d6a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d6c:	4c16      	ldr	r4, [pc, #88]	@ (8001dc8 <ETH_SetDMAConfig+0x80>)
 8001d6e:	4004      	ands	r4, r0

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d70:	6a08      	ldr	r0, [r1, #32]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001d72:	4322      	orrs	r2, r4
 8001d74:	605a      	str	r2, [r3, #4]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d76:	7b4a      	ldrb	r2, [r1, #13]
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d78:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d7c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d80:	4812      	ldr	r0, [pc, #72]	@ (8001dcc <ETH_SetDMAConfig+0x84>)
 8001d82:	4020      	ands	r0, r4
 8001d84:	4302      	orrs	r2, r0
 8001d86:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d8a:	7f4a      	ldrb	r2, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d8c:	7d0c      	ldrb	r4, [r1, #20]
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d8e:	0312      	lsls	r2, r2, #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d90:	f8d3 0104 	ldr.w	r0, [r3, #260]	@ 0x104
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d94:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001d98:	690c      	ldr	r4, [r1, #16]
 8001d9a:	4322      	orrs	r2, r4
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d9c:	4c0c      	ldr	r4, [pc, #48]	@ (8001dd0 <ETH_SetDMAConfig+0x88>)
 8001d9e:	4004      	ands	r4, r0

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001da0:	6988      	ldr	r0, [r1, #24]
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001da2:	4322      	orrs	r2, r4
 8001da4:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001da8:	f8d3 4108 	ldr.w	r4, [r3, #264]	@ 0x108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001dac:	7f0a      	ldrb	r2, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dae:	4909      	ldr	r1, [pc, #36]	@ (8001dd4 <ETH_SetDMAConfig+0x8c>)
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001db0:	ea40 72c2 	orr.w	r2, r0, r2, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001db4:	4021      	ands	r1, r4
}
 8001db6:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	ffff87fd 	.word	0xffff87fd
 8001dc8:	ffff2ffe 	.word	0xffff2ffe
 8001dcc:	fffec000 	.word	0xfffec000
 8001dd0:	ffc0efef 	.word	0xffc0efef
 8001dd4:	7fc0ffff 	.word	0x7fc0ffff

08001dd8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001ddc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
{
 8001dde:	4693      	mov	fp, r2
 8001de0:	b085      	sub	sp, #20
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001de2:	688e      	ldr	r6, [r1, #8]
 8001de4:	eb00 0e84 	add.w	lr, r0, r4, lsl #2
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001de8:	f8de 3018 	ldr.w	r3, [lr, #24]
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	f2c0 814a 	blt.w	8002088 <ETH_Prepare_Tx_Descriptors+0x2b0>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001df4:	f8de 202c 	ldr.w	r2, [lr, #44]	@ 0x2c
 8001df8:	2a00      	cmp	r2, #0
 8001dfa:	f040 8145 	bne.w	8002088 <ETH_Prepare_Tx_Descriptors+0x2b0>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001dfe:	f8d1 c000 	ldr.w	ip, [r1]
 8001e02:	f01c 0f04 	tst.w	ip, #4
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001e06:	f00c 0710 	and.w	r7, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001e0a:	f000 8111 	beq.w	8002030 <ETH_Prepare_Tx_Descriptors+0x258>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001e0e:	68dd      	ldr	r5, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001e10:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001e14:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8001e16:	f36f 050f 	bfc	r5, #0, #16
 8001e1a:	ea42 0205 	orr.w	r2, r2, r5
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001e1e:	6805      	ldr	r5, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001e20:	60da      	str	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001e28:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001e2a:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8001e2c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e30:	662a      	str	r2, [r5, #96]	@ 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001e32:	d019      	beq.n	8001e68 <ETH_Prepare_Tx_Descriptors+0x90>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	fa1f f882 	uxth.w	r8, r2
 8001e3a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8001e3c:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001e40:	609a      	str	r2, [r3, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001e48:	60da      	str	r2, [r3, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	f422 2840 	bic.w	r8, r2, #786432	@ 0xc0000
 8001e50:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8001e52:	ea48 0202 	orr.w	r2, r8, r2
 8001e56:	60da      	str	r2, [r3, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001e58:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 8001e5a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e5e:	666a      	str	r2, [r5, #100]	@ 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8001e60:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 8001e62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e66:	652a      	str	r2, [r5, #80]	@ 0x50
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001e68:	2f00      	cmp	r7, #0
 8001e6a:	f040 80e3 	bne.w	8002034 <ETH_Prepare_Tx_Descriptors+0x25c>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001e6e:	f01c 0f14 	tst.w	ip, #20
 8001e72:	f000 8129 	beq.w	80020c8 <ETH_Prepare_Tx_Descriptors+0x2f0>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e7c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001e7e:	f3bf 8f5f 	dmb	sy
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e88:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001e8a:	1c62      	adds	r2, r4, #1
 8001e8c:	2a03      	cmp	r2, #3
 8001e8e:	bf88      	it	hi
 8001e90:	1ee2      	subhi	r2, r4, #3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001e92:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001e96:	699b      	ldr	r3, [r3, #24]

    descnbr += 1U;

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001e98:	68dd      	ldr	r5, [r3, #12]
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	f2c0 8141 	blt.w	8002122 <ETH_Prepare_Tx_Descriptors+0x34a>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001ea0:	f8d1 c000 	ldr.w	ip, [r1]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001ea4:	2502      	movs	r5, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001ea6:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001eaa:	f00c 0704 	and.w	r7, ip, #4
 8001eae:	9502      	str	r5, [sp, #8]
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001eb0:	6835      	ldr	r5, [r6, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001eb2:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 8002138 <ETH_Prepare_Tx_Descriptors+0x360>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001eb6:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001eb8:	689d      	ldr	r5, [r3, #8]
 8001eba:	ea05 0909 	and.w	r9, r5, r9
 8001ebe:	6875      	ldr	r5, [r6, #4]
 8001ec0:	ea49 0505 	orr.w	r5, r9, r5
 8001ec4:	609d      	str	r5, [r3, #8]
  if (txbuffer->next != NULL)
 8001ec6:	68b5      	ldr	r5, [r6, #8]
 8001ec8:	2d00      	cmp	r5, #0
 8001eca:	f000 811f 	beq.w	800210c <ETH_Prepare_Tx_Descriptors+0x334>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001ece:	682e      	ldr	r6, [r5, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001ed0:	f8df 9268 	ldr.w	r9, [pc, #616]	@ 800213c <ETH_Prepare_Tx_Descriptors+0x364>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001ed4:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001ed6:	689e      	ldr	r6, [r3, #8]
 8001ed8:	ea06 0909 	and.w	r9, r6, r9
 8001edc:	686e      	ldr	r6, [r5, #4]
 8001ede:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 8001ee2:	609e      	str	r6, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001ee4:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001ee6:	f1b8 0f00 	cmp.w	r8, #0
 8001eea:	f000 80cf 	beq.w	800208c <ETH_Prepare_Tx_Descriptors+0x2b4>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001eee:	f426 0cf0 	bic.w	ip, r6, #7864320	@ 0x780000
 8001ef2:	6a0e      	ldr	r6, [r1, #32]
 8001ef4:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001ef8:	f8df c244 	ldr.w	ip, [pc, #580]	@ 8002140 <ETH_Prepare_Tx_Descriptors+0x368>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001efc:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001efe:	68de      	ldr	r6, [r3, #12]
 8001f00:	ea06 0c0c 	and.w	ip, r6, ip
 8001f04:	69ce      	ldr	r6, [r1, #28]
 8001f06:	ea4c 0606 	orr.w	r6, ip, r6
 8001f0a:	60de      	str	r6, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001f0c:	68de      	ldr	r6, [r3, #12]
 8001f0e:	f446 2680 	orr.w	r6, r6, #262144	@ 0x40000
 8001f12:	60de      	str	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001f14:	b12f      	cbz	r7, 8001f22 <ETH_Prepare_Tx_Descriptors+0x14a>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8001f16:	689f      	ldr	r7, [r3, #8]
 8001f18:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
 8001f1a:	f427 4740 	bic.w	r7, r7, #49152	@ 0xc000
 8001f1e:	433e      	orrs	r6, r7
 8001f20:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001f22:	68de      	ldr	r6, [r3, #12]
 8001f24:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8001f28:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001f2a:	68de      	ldr	r6, [r3, #12]
 8001f2c:	f026 4680 	bic.w	r6, r6, #1073741824	@ 0x40000000
 8001f30:	60de      	str	r6, [r3, #12]
 8001f32:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001f36:	68de      	ldr	r6, [r3, #12]
 8001f38:	f046 4600 	orr.w	r6, r6, #2147483648	@ 0x80000000
 8001f3c:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8001f3e:	680e      	ldr	r6, [r1, #0]
 8001f40:	07b6      	lsls	r6, r6, #30
 8001f42:	d505      	bpl.n	8001f50 <ETH_Prepare_Tx_Descriptors+0x178>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001f44:	68df      	ldr	r7, [r3, #12]
 8001f46:	68ce      	ldr	r6, [r1, #12]
 8001f48:	f027 7760 	bic.w	r7, r7, #58720256	@ 0x3800000
 8001f4c:	433e      	orrs	r6, r7
 8001f4e:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001f50:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8001f54:	f1b9 0f00 	cmp.w	r9, #0
 8001f58:	f000 80ec 	beq.w	8002134 <ETH_Prepare_Tx_Descriptors+0x35c>
 8001f5c:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001f60:	4d75      	ldr	r5, [pc, #468]	@ (8002138 <ETH_Prepare_Tx_Descriptors+0x360>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001f62:	4e76      	ldr	r6, [pc, #472]	@ (800213c <ETH_Prepare_Tx_Descriptors+0x364>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001f64:	464f      	mov	r7, r9
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001f66:	f8df 81dc 	ldr.w	r8, [pc, #476]	@ 8002144 <ETH_Prepare_Tx_Descriptors+0x36c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001f6a:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8002140 <ETH_Prepare_Tx_Descriptors+0x368>
 8001f6e:	9401      	str	r4, [sp, #4]
 8001f70:	f8cd b00c 	str.w	fp, [sp, #12]
 8001f74:	e019      	b.n	8001faa <ETH_Prepare_Tx_Descriptors+0x1d2>
 8001f76:	ea07 090a 	and.w	r9, r7, sl
 8001f7a:	69cf      	ldr	r7, [r1, #28]
 8001f7c:	ea49 0707 	orr.w	r7, r9, r7
 8001f80:	60df      	str	r7, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001f82:	68df      	ldr	r7, [r3, #12]
 8001f84:	f447 2780 	orr.w	r7, r7, #262144	@ 0x40000
 8001f88:	60df      	str	r7, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001f8a:	f10c 0c01 	add.w	ip, ip, #1
 8001f8e:	f3bf 8f5f 	dmb	sy
  while (txbuffer->next != NULL)
 8001f92:	68a7      	ldr	r7, [r4, #8]

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001f94:	68dc      	ldr	r4, [r3, #12]
 8001f96:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8001f9a:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001f9c:	68dc      	ldr	r4, [r3, #12]
 8001f9e:	f024 4480 	bic.w	r4, r4, #1073741824	@ 0x40000000
 8001fa2:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001fa4:	2f00      	cmp	r7, #0
 8001fa6:	f000 8095 	beq.w	80020d4 <ETH_Prepare_Tx_Descriptors+0x2fc>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001faa:	68dc      	ldr	r4, [r3, #12]
 8001fac:	f024 5480 	bic.w	r4, r4, #268435456	@ 0x10000000
 8001fb0:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001fb2:	1c53      	adds	r3, r2, #1
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	bf94      	ite	ls
 8001fb8:	461a      	movls	r2, r3
 8001fba:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001fbc:	eb00 0982 	add.w	r9, r0, r2, lsl #2
 8001fc0:	f8d9 3018 	ldr.w	r3, [r9, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001fc4:	68dc      	ldr	r4, [r3, #12]
 8001fc6:	f024 5400 	bic.w	r4, r4, #536870912	@ 0x20000000
 8001fca:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001fcc:	68dc      	ldr	r4, [r3, #12]
 8001fce:	2c00      	cmp	r4, #0
 8001fd0:	db41      	blt.n	8002056 <ETH_Prepare_Tx_Descriptors+0x27e>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001fd2:	f8d9 402c 	ldr.w	r4, [r9, #44]	@ 0x2c
 8001fd6:	2c00      	cmp	r4, #0
 8001fd8:	d13d      	bne.n	8002056 <ETH_Prepare_Tx_Descriptors+0x27e>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001fda:	683c      	ldr	r4, [r7, #0]
 8001fdc:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001fde:	689c      	ldr	r4, [r3, #8]
 8001fe0:	ea04 0905 	and.w	r9, r4, r5
 8001fe4:	687c      	ldr	r4, [r7, #4]
 8001fe6:	ea49 0404 	orr.w	r4, r9, r4
 8001fea:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001fec:	68bc      	ldr	r4, [r7, #8]
 8001fee:	b364      	cbz	r4, 800204a <ETH_Prepare_Tx_Descriptors+0x272>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001ff0:	6827      	ldr	r7, [r4, #0]
 8001ff2:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001ff4:	689f      	ldr	r7, [r3, #8]
 8001ff6:	ea07 0906 	and.w	r9, r7, r6
 8001ffa:	6867      	ldr	r7, [r4, #4]
 8001ffc:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
 8002000:	609f      	str	r7, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002002:	f8d1 b000 	ldr.w	fp, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002006:	68df      	ldr	r7, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002008:	f01b 0f10 	tst.w	fp, #16
 800200c:	d1b3      	bne.n	8001f76 <ETH_Prepare_Tx_Descriptors+0x19e>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800200e:	ea07 0908 	and.w	r9, r7, r8
 8002012:	684f      	ldr	r7, [r1, #4]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002014:	f01b 0f01 	tst.w	fp, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002018:	ea49 0707 	orr.w	r7, r9, r7
 800201c:	60df      	str	r7, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800201e:	d0b4      	beq.n	8001f8a <ETH_Prepare_Tx_Descriptors+0x1b2>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002020:	68df      	ldr	r7, [r3, #12]
 8002022:	f427 3940 	bic.w	r9, r7, #196608	@ 0x30000
 8002026:	694f      	ldr	r7, [r1, #20]
 8002028:	ea49 0707 	orr.w	r7, r9, r7
 800202c:	60df      	str	r7, [r3, #12]
 800202e:	e7ac      	b.n	8001f8a <ETH_Prepare_Tx_Descriptors+0x1b2>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002030:	2f00      	cmp	r7, #0
 8002032:	d049      	beq.n	80020c8 <ETH_Prepare_Tx_Descriptors+0x2f0>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002034:	689d      	ldr	r5, [r3, #8]
 8002036:	698a      	ldr	r2, [r1, #24]
 8002038:	f36f 050d 	bfc	r5, #0, #14
 800203c:	432a      	orrs	r2, r5
 800203e:	609a      	str	r2, [r3, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002046:	60da      	str	r2, [r3, #12]
 8002048:	e711      	b.n	8001e6e <ETH_Prepare_Tx_Descriptors+0x96>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 800204a:	605c      	str	r4, [r3, #4]
    txbuffer = txbuffer->next;
 800204c:	463c      	mov	r4, r7
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800204e:	689f      	ldr	r7, [r3, #8]
 8002050:	4037      	ands	r7, r6
 8002052:	609f      	str	r7, [r3, #8]
 8002054:	e7d5      	b.n	8002002 <ETH_Prepare_Tx_Descriptors+0x22a>
      for (idx = 0; idx < descnbr; idx ++)
 8002056:	9b02      	ldr	r3, [sp, #8]
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002058:	9c01      	ldr	r4, [sp, #4]
      for (idx = 0; idx < descnbr; idx ++)
 800205a:	eb13 060c 	adds.w	r6, r3, ip
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800205e:	f8de 2018 	ldr.w	r2, [lr, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002062:	d011      	beq.n	8002088 <ETH_Prepare_Tx_Descriptors+0x2b0>
 8002064:	2100      	movs	r1, #0
 8002066:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 800206a:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800206c:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800206e:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8002070:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002072:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002074:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002078:	bf98      	it	ls
 800207a:	462c      	movls	r4, r5
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800207c:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 800207e:	42b1      	cmp	r1, r6
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002080:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8002084:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8002086:	d1ee      	bne.n	8002066 <ETH_Prepare_Tx_Descriptors+0x28e>
    return HAL_ETH_ERROR_BUSY;
 8002088:	2002      	movs	r0, #2
 800208a:	e03c      	b.n	8002106 <ETH_Prepare_Tx_Descriptors+0x32e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800208c:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8002144 <ETH_Prepare_Tx_Descriptors+0x36c>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002090:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002094:	ea06 0808 	and.w	r8, r6, r8
 8002098:	684e      	ldr	r6, [r1, #4]
 800209a:	ea48 0606 	orr.w	r6, r8, r6
 800209e:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80020a0:	d006      	beq.n	80020b0 <ETH_Prepare_Tx_Descriptors+0x2d8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80020a2:	68de      	ldr	r6, [r3, #12]
 80020a4:	f426 3840 	bic.w	r8, r6, #196608	@ 0x30000
 80020a8:	694e      	ldr	r6, [r1, #20]
 80020aa:	ea48 0606 	orr.w	r6, r8, r6
 80020ae:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80020b0:	f01c 0f20 	tst.w	ip, #32
 80020b4:	f43f af2e 	beq.w	8001f14 <ETH_Prepare_Tx_Descriptors+0x13c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80020b8:	68de      	ldr	r6, [r3, #12]
 80020ba:	f026 6c40 	bic.w	ip, r6, #201326592	@ 0xc000000
 80020be:	690e      	ldr	r6, [r1, #16]
 80020c0:	ea4c 0606 	orr.w	r6, ip, r6
 80020c4:	60de      	str	r6, [r3, #12]
 80020c6:	e725      	b.n	8001f14 <ETH_Prepare_Tx_Descriptors+0x13c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020c8:	2700      	movs	r7, #0
 80020ca:	2501      	movs	r5, #1
 80020cc:	4622      	mov	r2, r4
 80020ce:	46b8      	mov	r8, r7
 80020d0:	9502      	str	r5, [sp, #8]
 80020d2:	e6ed      	b.n	8001eb0 <ETH_Prepare_Tx_Descriptors+0xd8>
 80020d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
  }

  if (ItMode != ((uint32_t)RESET))
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80020d8:	6899      	ldr	r1, [r3, #8]
  if (ItMode != ((uint32_t)RESET))
 80020da:	f1bb 0f00 	cmp.w	fp, #0
 80020de:	d01c      	beq.n	800211a <ETH_Prepare_Tx_Descriptors+0x342>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80020e0:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
 80020e4:	6099      	str	r1, [r3, #8]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80020e6:	68d9      	ldr	r1, [r3, #12]
 80020e8:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80020ec:	60d9      	str	r1, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80020ee:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 80020f2:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80020f4:	62d9      	str	r1, [r3, #44]	@ 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80020f6:	6282      	str	r2, [r0, #40]	@ 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80020fa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80020fc:	3301      	adds	r3, #1
 80020fe:	4463      	add	r3, ip
 8002100:	6403      	str	r3, [r0, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002102:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002104:	2000      	movs	r0, #0
}
 8002106:	b005      	add	sp, #20
 8002108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800210c:	605d      	str	r5, [r3, #4]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800210e:	4635      	mov	r5, r6
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002110:	689e      	ldr	r6, [r3, #8]
 8002112:	f36f 461d 	bfc	r6, #16, #14
 8002116:	609e      	str	r6, [r3, #8]
 8002118:	e6e4      	b.n	8001ee4 <ETH_Prepare_Tx_Descriptors+0x10c>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800211a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800211e:	6099      	str	r1, [r3, #8]
 8002120:	e7e1      	b.n	80020e6 <ETH_Prepare_Tx_Descriptors+0x30e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002122:	f8de 2018 	ldr.w	r2, [lr, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002126:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800212a:	68d3      	ldr	r3, [r2, #12]
 800212c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002130:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8002132:	e7a9      	b.n	8002088 <ETH_Prepare_Tx_Descriptors+0x2b0>
  while (txbuffer->next != NULL)
 8002134:	46cc      	mov	ip, r9
 8002136:	e7cf      	b.n	80020d8 <ETH_Prepare_Tx_Descriptors+0x300>
 8002138:	ffffc000 	.word	0xffffc000
 800213c:	c000ffff 	.word	0xc000ffff
 8002140:	fffc0000 	.word	0xfffc0000
 8002144:	ffff8000 	.word	0xffff8000

08002148 <ETH_UpdateDescriptor>:
{
 8002148:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buff = NULL;
 800214a:	2300      	movs	r3, #0
{
 800214c:	b083      	sub	sp, #12
 800214e:	4605      	mov	r5, r0
  uint8_t *buff = NULL;
 8002150:	9301      	str	r3, [sp, #4]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002152:	e9d0 761a 	ldrd	r7, r6, [r0, #104]	@ 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002156:	f107 0312 	add.w	r3, r7, #18
 800215a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
      HAL_ETH_RxAllocateCallback(&buff);
 800215e:	a801      	add	r0, sp, #4
  while ((desccount > 0U) && (allocStatus != 0U))
 8002160:	b12e      	cbz	r6, 800216e <ETH_UpdateDescriptor+0x26>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002162:	6923      	ldr	r3, [r4, #16]
 8002164:	b993      	cbnz	r3, 800218c <ETH_UpdateDescriptor+0x44>
      HAL_ETH_RxAllocateCallback(&buff);
 8002166:	f001 ffe1 	bl	800412c <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 800216a:	9b01      	ldr	r3, [sp, #4]
 800216c:	b963      	cbnz	r3, 8002188 <ETH_UpdateDescriptor+0x40>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800216e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8002170:	42b3      	cmp	r3, r6
 8002172:	d007      	beq.n	8002184 <ETH_UpdateDescriptor+0x3c>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217c:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002180:	e9c5 761a 	strd	r7, r6, [r5, #104]	@ 0x68
}
 8002184:	b003      	add	sp, #12
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002188:	6123      	str	r3, [r4, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800218a:	6023      	str	r3, [r4, #0]
 800218c:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8002190:	6dab      	ldr	r3, [r5, #88]	@ 0x58
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8002192:	f04f 4141 	mov.w	r1, #3238002688	@ 0xc1000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002196:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
      if (heth->RxDescList.ItMode != 0U)
 800219a:	b95b      	cbnz	r3, 80021b4 <ETH_UpdateDescriptor+0x6c>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800219c:	60e2      	str	r2, [r4, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 800219e:	1c7b      	adds	r3, r7, #1
      desccount--;
 80021a0:	3e01      	subs	r6, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	bf88      	it	hi
 80021a6:	1efb      	subhi	r3, r7, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021a8:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 80021ac:	461f      	mov	r7, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021ae:	f855 4022 	ldr.w	r4, [r5, r2, lsl #2]
      desccount--;
 80021b2:	e7d4      	b.n	800215e <ETH_UpdateDescriptor+0x16>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80021b4:	60e1      	str	r1, [r4, #12]
 80021b6:	e7f2      	b.n	800219e <ETH_UpdateDescriptor+0x56>

080021b8 <HAL_ETH_Start_IT>:
{
 80021b8:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80021ba:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d001      	beq.n	80021c6 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
}
 80021c4:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80021c6:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 80021c8:	2523      	movs	r5, #35	@ 0x23
    heth->RxDescList.ItMode = 1U;
 80021ca:	2201      	movs	r2, #1
 80021cc:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80021ce:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
    heth->RxDescList.ItMode = 1U;
 80021d2:	6582      	str	r2, [r0, #88]	@ 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80021d4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80021d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002250 <HAL_ETH_Start_IT+0x98>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80021e0:	4a1c      	ldr	r2, [pc, #112]	@ (8002254 <HAL_ETH_Start_IT+0x9c>)
 80021e2:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80021e6:	430a      	orrs	r2, r1
 80021e8:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80021ec:	2304      	movs	r3, #4
 80021ee:	66c3      	str	r3, [r0, #108]	@ 0x6c
    ETH_UpdateDescriptor(heth);
 80021f0:	f7ff ffaa 	bl	8002148 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021f4:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 80021f6:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021f8:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80021fa:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021fe:	f041 0102 	orr.w	r1, r1, #2
 8002202:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002204:	6811      	ldr	r1, [r2, #0]
 8002206:	f041 0101 	orr.w	r1, r1, #1
 800220a:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800220c:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	@ 0xd00
 8002210:	f041 0101 	orr.w	r1, r1, #1
 8002214:	f8c2 1d00 	str.w	r1, [r2, #3328]	@ 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002218:	f24d 02c1 	movw	r2, #53441	@ 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800221c:	f8d3 1104 	ldr.w	r1, [r3, #260]	@ 0x104
 8002220:	f041 0101 	orr.w	r1, r1, #1
 8002224:	f8c3 1104 	str.w	r1, [r3, #260]	@ 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002228:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 800222c:	f041 0101 	orr.w	r1, r1, #1
 8002230:	f8c3 1108 	str.w	r1, [r3, #264]	@ 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8002234:	f8d3 1160 	ldr.w	r1, [r3, #352]	@ 0x160
 8002238:	f441 7181 	orr.w	r1, r1, #258	@ 0x102
 800223c:	f8c3 1160 	str.w	r1, [r3, #352]	@ 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002240:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8002244:	430a      	orrs	r2, r1
 8002246:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 800224a:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	0c020060 	.word	0x0c020060
 8002254:	0c20c000 	.word	0x0c20c000

08002258 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002258:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 800225c:	2a23      	cmp	r2, #35	@ 0x23
 800225e:	d001      	beq.n	8002264 <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8002260:	2001      	movs	r0, #1
}
 8002262:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002264:	4601      	mov	r1, r0
 8002266:	4603      	mov	r3, r0
{
 8002268:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 800226a:	f8c0 2084 	str.w	r2, [r0, #132]	@ 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800226e:	f103 0c54 	add.w	ip, r3, #84	@ 0x54
 8002272:	f851 2b44 	ldr.w	r2, [r1], #68
 8002276:	4c19      	ldr	r4, [pc, #100]	@ (80022dc <HAL_ETH_Stop_IT+0x84>)
 8002278:	f502 5080 	add.w	r0, r2, #4096	@ 0x1000
 800227c:	f8d0 5134 	ldr.w	r5, [r0, #308]	@ 0x134
 8002280:	402c      	ands	r4, r5
 8002282:	f8c0 4134 	str.w	r4, [r0, #308]	@ 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002286:	f8d0 4104 	ldr.w	r4, [r0, #260]	@ 0x104
 800228a:	f024 0401 	bic.w	r4, r4, #1
 800228e:	f8c0 4104 	str.w	r4, [r0, #260]	@ 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8002292:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
 8002296:	f024 0401 	bic.w	r4, r4, #1
 800229a:	f8c0 4108 	str.w	r4, [r0, #264]	@ 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800229e:	6810      	ldr	r0, [r2, #0]
 80022a0:	f020 0001 	bic.w	r0, r0, #1
 80022a4:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80022a6:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	@ 0xd00
 80022aa:	f040 0001 	orr.w	r0, r0, #1
 80022ae:	f8c2 0d00 	str.w	r0, [r2, #3328]	@ 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80022b2:	6810      	ldr	r0, [r2, #0]
 80022b4:	f020 0002 	bic.w	r0, r0, #2
 80022b8:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80022ba:	f851 0f04 	ldr.w	r0, [r1, #4]!
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80022be:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80022c0:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80022c2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 80022c6:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80022c8:	d1f7      	bne.n	80022ba <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 80022ca:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 80022cc:	2110      	movs	r1, #16
    return HAL_OK;
 80022ce:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 80022d0:	659a      	str	r2, [r3, #88]	@ 0x58
    heth->gState = HAL_ETH_STATE_READY;
 80022d2:	f8c3 1084 	str.w	r1, [r3, #132]	@ 0x84
}
 80022d6:	bc30      	pop	{r4, r5}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	ffff2f3e 	.word	0xffff2f3e

080022e0 <HAL_ETH_Transmit_IT>:
{
 80022e0:	b510      	push	{r4, lr}
 80022e2:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 80022e4:	b321      	cbz	r1, 8002330 <HAL_ETH_Transmit_IT+0x50>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80022e6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80022ea:	2a23      	cmp	r2, #35	@ 0x23
 80022ec:	d001      	beq.n	80022f2 <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 80022ee:	2001      	movs	r0, #1
}
 80022f0:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80022f2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80022f4:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80022f6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80022f8:	f7ff fd6e 	bl	8001dd8 <ETH_Prepare_Tx_Descriptors>
 80022fc:	b130      	cbz	r0, 800230c <HAL_ETH_Transmit_IT+0x2c>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80022fe:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_ERROR;
 800230a:	e7f0      	b.n	80022ee <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 800230c:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002310:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    return HAL_OK;
 8002312:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002314:	1c53      	adds	r3, r2, #1
 8002316:	2b03      	cmp	r3, #3
 8002318:	bf88      	it	hi
 800231a:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800231c:	6822      	ldr	r2, [r4, #0]
 800231e:	1d99      	adds	r1, r3, #6
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002320:	62a3      	str	r3, [r4, #40]	@ 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002322:	f502 5380 	add.w	r3, r2, #4096	@ 0x1000
 8002326:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800232a:	f8c3 1120 	str.w	r1, [r3, #288]	@ 0x120
}
 800232e:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002330:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 800233c:	e7d7      	b.n	80022ee <HAL_ETH_Transmit_IT+0xe>
 800233e:	bf00      	nop

08002340 <HAL_ETH_ReadData>:
{
 8002340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002344:	4604      	mov	r4, r0
 8002346:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8002348:	2900      	cmp	r1, #0
 800234a:	d073      	beq.n	8002434 <HAL_ETH_ReadData+0xf4>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 800234c:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002350:	2b23      	cmp	r3, #35	@ 0x23
 8002352:	d165      	bne.n	8002420 <HAL_ETH_ReadData+0xe0>
  descidx = heth->RxDescList.RxDescIdx;
 8002354:	f8d0 805c 	ldr.w	r8, [r0, #92]	@ 0x5c
 8002358:	460f      	mov	r7, r1
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800235a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800235c:	f108 0212 	add.w	r2, r8, #18
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002360:	f1c3 0b04 	rsb	fp, r3, #4
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002364:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002368:	68e9      	ldr	r1, [r5, #12]
         && (rxdataready == 0U))
 800236a:	2900      	cmp	r1, #0
 800236c:	db69      	blt.n	8002442 <HAL_ETH_ReadData+0x102>
 800236e:	f1bb 0f00 	cmp.w	fp, #0
 8002372:	d068      	beq.n	8002446 <HAL_ETH_ReadData+0x106>
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002374:	f100 0380 	add.w	r3, r0, #128	@ 0x80
  uint32_t desccnt = 0U;
 8002378:	f04f 0900 	mov.w	r9, #0
      dmarxdesc->BackupAddr0 = 0;
 800237c:	9703      	str	r7, [sp, #12]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f100 037c 	add.w	r3, r0, #124	@ 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8002384:	46ca      	mov	sl, r9
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	e003      	b.n	8002392 <HAL_ETH_ReadData+0x52>
         && (rxdataready == 0U))
 800238a:	45cb      	cmp	fp, r9
 800238c:	d93d      	bls.n	800240a <HAL_ETH_ReadData+0xca>
 800238e:	2e00      	cmp	r6, #0
 8002390:	d13b      	bne.n	800240a <HAL_ETH_ReadData+0xca>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8002392:	68eb      	ldr	r3, [r5, #12]
 8002394:	0059      	lsls	r1, r3, #1
 8002396:	d503      	bpl.n	80023a0 <HAL_ETH_ReadData+0x60>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002398:	686b      	ldr	r3, [r5, #4]
 800239a:	67a3      	str	r3, [r4, #120]	@ 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800239c:	682b      	ldr	r3, [r5, #0]
 800239e:	6763      	str	r3, [r4, #116]	@ 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80023a0:	68eb      	ldr	r3, [r5, #12]
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	d401      	bmi.n	80023aa <HAL_ETH_ReadData+0x6a>
 80023a6:	6fe6      	ldr	r6, [r4, #124]	@ 0x7c
 80023a8:	b1fe      	cbz	r6, 80023ea <HAL_ETH_ReadData+0xaa>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80023aa:	68eb      	ldr	r3, [r5, #12]
      bufflength = heth->Init.RxBuffLen;
 80023ac:	6967      	ldr	r7, [r4, #20]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80023ae:	009b      	lsls	r3, r3, #2
        heth->RxDescList.RxDescCnt = 0;
 80023b0:	bf48      	it	mi
 80023b2:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	@ 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80023b6:	68ee      	ldr	r6, [r5, #12]
 80023b8:	f016 5680 	ands.w	r6, r6, #268435456	@ 0x10000000
 80023bc:	d007      	beq.n	80023ce <HAL_ETH_ReadData+0x8e>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80023be:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 80023c0:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 80023c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023c4:	f3c7 070e 	ubfx	r7, r7, #0, #15
 80023c8:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 80023ca:	68eb      	ldr	r3, [r5, #12]
 80023cc:	6723      	str	r3, [r4, #112]	@ 0x70
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80023ce:	b2bb      	uxth	r3, r7
 80023d0:	692a      	ldr	r2, [r5, #16]
 80023d2:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 80023d6:	f001 fecd 	bl	8004174 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 80023da:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80023dc:	3301      	adds	r3, #1
 80023de:	6623      	str	r3, [r4, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80023e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023e2:	443b      	add	r3, r7
 80023e4:	6663      	str	r3, [r4, #100]	@ 0x64
      dmarxdesc->BackupAddr0 = 0;
 80023e6:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023ea:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 80023ee:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	bf8c      	ite	hi
 80023f6:	f1a8 0803 	subhi.w	r8, r8, #3
 80023fa:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023fc:	f108 0312 	add.w	r3, r8, #18
 8002400:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002404:	68eb      	ldr	r3, [r5, #12]
         && (rxdataready == 0U))
 8002406:	2b00      	cmp	r3, #0
 8002408:	dabf      	bge.n	800238a <HAL_ETH_ReadData+0x4a>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 800240a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800240c:	9f03      	ldr	r7, [sp, #12]
 800240e:	444b      	add	r3, r9
 8002410:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002412:	b113      	cbz	r3, 800241a <HAL_ETH_ReadData+0xda>
    ETH_UpdateDescriptor(heth);
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff fe97 	bl	8002148 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 800241a:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 800241e:	b91e      	cbnz	r6, 8002428 <HAL_ETH_ReadData+0xe8>
    return HAL_ERROR;
 8002420:	2001      	movs	r0, #1
}
 8002422:	b005      	add	sp, #20
 8002424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    heth->RxDescList.pRxStart = NULL;
 8002428:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 800242a:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
    return HAL_OK;
 800242c:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 800242e:	603a      	str	r2, [r7, #0]
    heth->RxDescList.pRxStart = NULL;
 8002430:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8002432:	e7f6      	b.n	8002422 <HAL_ETH_ReadData+0xe2>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002434:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    return HAL_ERROR;
 8002440:	e7ee      	b.n	8002420 <HAL_ETH_ReadData+0xe0>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0ec      	beq.n	8002420 <HAL_ETH_ReadData+0xe0>
    ETH_UpdateDescriptor(heth);
 8002446:	4620      	mov	r0, r4
 8002448:	f7ff fe7e 	bl	8002148 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 800244c:	f8c4 805c 	str.w	r8, [r4, #92]	@ 0x5c
  if (rxdataready == 1U)
 8002450:	e7e6      	b.n	8002420 <HAL_ETH_ReadData+0xe0>
 8002452:	bf00      	nop

08002454 <HAL_ETH_ReleaseTxPacket>:
{
 8002454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002458:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	@ 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800245c:	b17d      	cbz	r5, 800247e <HAL_ETH_ReleaseTxPacket+0x2a>
 800245e:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002460:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002462:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8002466:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002468:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800246c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002470:	b140      	cbz	r0, 8002484 <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002472:	68f3      	ldr	r3, [r6, #12]
 8002474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da0a      	bge.n	8002494 <HAL_ETH_ReleaseTxPacket+0x40>
}
 800247e:	2000      	movs	r0, #0
 8002480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002484:	3401      	adds	r4, #1
 8002486:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800248a:	2d00      	cmp	r5, #0
 800248c:	d1e9      	bne.n	8002462 <HAL_ETH_ReleaseTxPacket+0xe>
}
 800248e:	2000      	movs	r0, #0
 8002490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002494:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002496:	f001 fe9d 	bl	80041d4 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 800249a:	f8c8 702c 	str.w	r7, [r8, #44]	@ 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800249e:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 80024a2:	6435      	str	r5, [r6, #64]	@ 0x40
        dmatxdesclist->releaseIndex = idx;
 80024a4:	6474      	str	r4, [r6, #68]	@ 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80024a6:	2d00      	cmp	r5, #0
 80024a8:	d1db      	bne.n	8002462 <HAL_ETH_ReleaseTxPacket+0xe>
 80024aa:	e7f0      	b.n	800248e <HAL_ETH_ReleaseTxPacket+0x3a>

080024ac <HAL_ETH_PMTCallback>:
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <HAL_ETH_EEECallback>:
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop

080024b4 <HAL_ETH_WakeUpCallback>:
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80024b8:	6803      	ldr	r3, [r0, #0]
 80024ba:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80024be:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80024c2:	0649      	lsls	r1, r1, #25
{
 80024c4:	b510      	push	{r4, lr}
 80024c6:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80024c8:	d504      	bpl.n	80024d4 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80024ca:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80024ce:	0649      	lsls	r1, r1, #25
 80024d0:	f100 808a 	bmi.w	80025e8 <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80024d4:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80024d8:	07c8      	lsls	r0, r1, #31
 80024da:	d503      	bpl.n	80024e4 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80024dc:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80024e0:	07c9      	lsls	r1, r1, #31
 80024e2:	d476      	bmi.n	80025d2 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80024e4:	f8d2 1160 	ldr.w	r1, [r2, #352]	@ 0x160
 80024e8:	0448      	lsls	r0, r1, #17
 80024ea:	d503      	bpl.n	80024f4 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80024ec:	f8d2 1134 	ldr.w	r1, [r2, #308]	@ 0x134
 80024f0:	0449      	lsls	r1, r1, #17
 80024f2:	d41b      	bmi.n	800252c <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 80024f4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80024f8:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 80024fc:	d133      	bne.n	8002566 <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80024fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002502:	06d0      	lsls	r0, r2, #27
 8002504:	d447      	bmi.n	8002596 <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800250a:	0691      	lsls	r1, r2, #26
 800250c:	d454      	bmi.n	80025b8 <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002512:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8002516:	0252      	lsls	r2, r2, #9
 8002518:	d400      	bmi.n	800251c <HAL_ETH_IRQHandler+0x64>
}
 800251a:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800251c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002520:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002522:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    HAL_ETH_WakeUpCallback(heth);
 8002526:	f7ff ffc5 	bl	80024b4 <HAL_ETH_WakeUpCallback>
}
 800252a:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800252c:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8002530:	f043 0308 	orr.w	r3, r3, #8
 8002534:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002538:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
 800253c:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002540:	f8d2 3160 	ldr.w	r3, [r2, #352]	@ 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002544:	d15a      	bne.n	80025fc <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002546:	f44f 41cd 	mov.w	r1, #26240	@ 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800254a:	400b      	ands	r3, r1
 800254c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002550:	f8c2 1160 	str.w	r1, [r2, #352]	@ 0x160
      HAL_ETH_ErrorCallback(heth);
 8002554:	4620      	mov	r0, r4
 8002556:	f001 fc53 	bl	8003e00 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002560:	f412 4fc0 	tst.w	r2, #24576	@ 0x6000
 8002564:	d0cb      	beq.n	80024fe <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002566:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800256a:	21e0      	movs	r1, #224	@ 0xe0
    HAL_ETH_ErrorCallback(heth);
 800256c:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800256e:	f042 0210 	orr.w	r2, r2, #16
 8002572:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002576:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800257a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 800257e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
    HAL_ETH_ErrorCallback(heth);
 8002582:	f001 fc3d 	bl	8003e00 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8002586:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002588:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 800258a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800258e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002592:	06d0      	lsls	r0, r2, #27
 8002594:	d5b7      	bpl.n	8002506 <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002596:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_PMTCallback(heth);
 800259a:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800259c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80025a0:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
    HAL_ETH_PMTCallback(heth);
 80025a4:	f7ff ff82 	bl	80024ac <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80025a8:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80025aa:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80025ac:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80025b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80025b4:	0691      	lsls	r1, r2, #26
 80025b6:	d5aa      	bpl.n	800250e <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80025b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
    HAL_ETH_EEECallback(heth);
 80025bc:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
    HAL_ETH_EEECallback(heth);
 80025c6:	f7ff ff73 	bl	80024b0 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 80025d0:	e79d      	b.n	800250e <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80025d2:	f248 0301 	movw	r3, #32769	@ 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80025d6:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80025d8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_TxCpltCallback(heth);
 80025dc:	f001 fc0a 	bl	8003df4 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80025e6:	e77d      	b.n	80024e4 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80025e8:	f248 0340 	movw	r3, #32832	@ 0x8040
 80025ec:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      HAL_ETH_RxCpltCallback(heth);
 80025f0:	f001 fbfa 	bl	8003de8 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	f503 5280 	add.w	r2, r3, #4096	@ 0x1000
 80025fa:	e76b      	b.n	80024d4 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80025fc:	f241 1002 	movw	r0, #4354	@ 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002600:	21e0      	movs	r1, #224	@ 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002602:	4003      	ands	r3, r0
 8002604:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002608:	f8d2 3134 	ldr.w	r3, [r2, #308]	@ 0x134
 800260c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002610:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8002614:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
 8002618:	e79c      	b.n	8002554 <HAL_ETH_IRQHandler+0x9c>
 800261a:	bf00      	nop

0800261c <HAL_ETH_ReadPHYRegister>:
{
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002620:	6800      	ldr	r0, [r0, #0]
{
 8002622:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002624:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8002628:	07db      	lsls	r3, r3, #31
 800262a:	d501      	bpl.n	8002630 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 800262c:	2001      	movs	r0, #1
}
 800262e:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002630:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002634:	f023 7378 	bic.w	r3, r3, #65011712	@ 0x3e00000
 8002638:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800263c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002640:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002644:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002648:	f8c0 2200 	str.w	r2, [r0, #512]	@ 0x200
  tickstart = HAL_GetTick();
 800264c:	f7ff f9fa 	bl	8001a44 <HAL_GetTick>
 8002650:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002652:	e005      	b.n	8002660 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002654:	f7ff f9f6 	bl	8001a44 <HAL_GetTick>
 8002658:	1b82      	subs	r2, r0, r6
 800265a:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800265e:	d8e5      	bhi.n	800262c <HAL_ETH_ReadPHYRegister+0x10>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002660:	6821      	ldr	r1, [r4, #0]
 8002662:	f8d1 2200 	ldr.w	r2, [r1, #512]	@ 0x200
 8002666:	f012 0201 	ands.w	r2, r2, #1
 800266a:	d1f3      	bne.n	8002654 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800266c:	f8d1 3204 	ldr.w	r3, [r1, #516]	@ 0x204
  return HAL_OK;
 8002670:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002672:	b29b      	uxth	r3, r3
 8002674:	602b      	str	r3, [r5, #0]
}
 8002676:	bd70      	pop	{r4, r5, r6, pc}

08002678 <HAL_ETH_WritePHYRegister>:
{
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800267c:	6800      	ldr	r0, [r0, #0]
 800267e:	f8d0 5200 	ldr.w	r5, [r0, #512]	@ 0x200
 8002682:	07ed      	lsls	r5, r5, #31
 8002684:	d501      	bpl.n	800268a <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8002686:	2001      	movs	r0, #1
}
 8002688:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800268a:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800268e:	b29d      	uxth	r5, r3
 8002690:	f020 7378 	bic.w	r3, r0, #65011712	@ 0x3e00000
 8002694:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002698:	490f      	ldr	r1, [pc, #60]	@ (80026d8 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800269a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800269e:	f8c1 5204 	str.w	r5, [r1, #516]	@ 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026a6:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80026aa:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80026ae:	f8c1 3200 	str.w	r3, [r1, #512]	@ 0x200
  tickstart = HAL_GetTick();
 80026b2:	f7ff f9c7 	bl	8001a44 <HAL_GetTick>
 80026b6:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026b8:	e005      	b.n	80026c6 <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80026ba:	f7ff f9c3 	bl	8001a44 <HAL_GetTick>
 80026be:	1b43      	subs	r3, r0, r5
 80026c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80026c4:	d8df      	bhi.n	8002686 <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026cc:	f013 0301 	ands.w	r3, r3, #1
 80026d0:	d1f3      	bne.n	80026ba <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80026d2:	4618      	mov	r0, r3
}
 80026d4:	bd38      	pop	{r3, r4, r5, pc}
 80026d6:	bf00      	nop
 80026d8:	40028000 	.word	0x40028000

080026dc <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80026dc:	2900      	cmp	r1, #0
 80026de:	f000 80c4 	beq.w	800286a <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80026e2:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
{
 80026e6:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80026e8:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80026ea:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80026ec:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80026f0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80026f4:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80026f8:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80026fa:	62cc      	str	r4, [r1, #44]	@ 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80026fc:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8002700:	624a      	str	r2, [r1, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f482 7280 	eor.w	r2, r2, #256	@ 0x100
 8002708:	f3c2 2200 	ubfx	r2, r2, #8, #1
 800270c:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002710:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002712:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002716:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f482 6280 	eor.w	r2, r2, #1024	@ 0x400
 800271e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002722:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002724:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002726:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800272a:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002732:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002734:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002736:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002738:	f404 5400 	and.w	r4, r4, #8192	@ 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800273c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002740:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800274a:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f482 3200 	eor.w	r2, r2, #131072	@ 0x20000
 8002752:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8002756:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800275e:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002762:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800276a:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002772:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800277a:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800277c:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800277e:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002782:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002784:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002786:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002788:	f004 64e0 	and.w	r4, r4, #117440512	@ 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800278c:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002790:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002792:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002794:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002796:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002798:	f004 44e0 	and.w	r4, r4, #1879048192	@ 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800279c:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80027a0:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80027a2:	634a      	str	r2, [r1, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	f482 3280 	eor.w	r2, r2, #65536	@ 0x10000
 80027aa:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80027ae:	f881 2032 	strb.w	r2, [r1, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80027b8:	f881 2031 	strb.w	r2, [r1, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80027bc:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80027be:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80027c2:	f881 2030 	strb.w	r2, [r1, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80027c6:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 80027c8:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80027cc:	f881 2038 	strb.w	r2, [r1, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027d0:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027d2:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027d4:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027d8:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80027dc:	63cc      	str	r4, [r1, #60]	@ 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80027de:	f881 2040 	strb.w	r2, [r1, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027e2:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027e6:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027ea:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80027ee:	644c      	str	r4, [r1, #68]	@ 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80027f0:	f881 2054 	strb.w	r2, [r1, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80027f4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80027f6:	f082 0280 	eor.w	r2, r2, #128	@ 0x80
 80027fa:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80027fe:	f881 204c 	strb.w	r2, [r1, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002802:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002804:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002806:	f004 0470 	and.w	r4, r4, #112	@ 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800280a:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800280c:	650c      	str	r4, [r1, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800280e:	648a      	str	r2, [r1, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002810:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002814:	f002 0201 	and.w	r2, r2, #1
 8002818:	f881 2056 	strb.w	r2, [r1, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800281c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
                                      ? ENABLE : DISABLE;
 8002820:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002824:	f881 2055 	strb.w	r2, [r1, #85]	@ 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002828:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	@ 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800282c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002830:	f004 0472 	and.w	r4, r4, #114	@ 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002834:	f002 0223 	and.w	r2, r2, #35	@ 0x23
 8002838:	e9c1 4216 	strd	r4, r2, [r1, #88]	@ 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800283c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
}
 8002840:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002844:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002848:	f881 2062 	strb.w	r2, [r1, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800284c:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	@ 0xd30
 8002850:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002854:	f881 2061 	strb.w	r2, [r1, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002858:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800285c:	f083 0340 	eor.w	r3, r3, #64	@ 0x40
 8002860:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002864:	f881 3060 	strb.w	r3, [r1, #96]	@ 0x60
}
 8002868:	4770      	bx	lr
    return HAL_ERROR;
 800286a:	2001      	movs	r0, #1
}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop

08002870 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002870:	b131      	cbz	r1, 8002880 <HAL_ETH_SetMACConfig+0x10>
{
 8002872:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002874:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 8002878:	2b10      	cmp	r3, #16
 800287a:	d003      	beq.n	8002884 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 800287c:	2001      	movs	r0, #1
}
 800287e:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002880:	2001      	movs	r0, #1
}
 8002882:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002884:	f7ff f9a4 	bl	8001bd0 <ETH_SetMACConfig>
    return HAL_OK;
 8002888:	2000      	movs	r0, #0
}
 800288a:	bd08      	pop	{r3, pc}

0800288c <HAL_ETH_SetMDIOClockRange>:
{
 800288c:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 800288e:	6803      	ldr	r3, [r0, #0]
{
 8002890:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002892:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8002896:	f000 ff1d 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800289a:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_ETH_SetMDIOClockRange+0x64>)
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800289e:	f424 6470 	bic.w	r4, r4, #3840	@ 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80028a2:	4403      	add	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d205      	bcs.n	80028b4 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80028a8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028ac:	682b      	ldr	r3, [r5, #0]
 80028ae:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80028b2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80028b4:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <HAL_ETH_SetMDIOClockRange+0x6c>)
 80028b6:	4a11      	ldr	r2, [pc, #68]	@ (80028fc <HAL_ETH_SetMDIOClockRange+0x70>)
 80028b8:	4403      	add	r3, r0
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d805      	bhi.n	80028ca <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80028be:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028c2:	682b      	ldr	r3, [r5, #0]
 80028c4:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80028c8:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80028ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002900 <HAL_ETH_SetMDIOClockRange+0x74>)
 80028cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <HAL_ETH_SetMDIOClockRange+0x78>)
 80028ce:	4403      	add	r3, r0
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d3eb      	bcc.n	80028ac <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80028d6:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <HAL_ETH_SetMDIOClockRange+0x80>)
 80028d8:	4403      	add	r3, r0
 80028da:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028dc:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80028de:	bf94      	ite	ls
 80028e0:	f444 7480 	orrls.w	r4, r4, #256	@ 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80028e4:	f444 6480 	orrhi.w	r4, r4, #1024	@ 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028e8:	f8c3 4200 	str.w	r4, [r3, #512]	@ 0x200
}
 80028ec:	bd38      	pop	{r3, r4, r5, pc}
 80028ee:	bf00      	nop
 80028f0:	feced300 	.word	0xfeced300
 80028f4:	00e4e1c0 	.word	0x00e4e1c0
 80028f8:	fde9f140 	.word	0xfde9f140
 80028fc:	017d783f 	.word	0x017d783f
 8002900:	fc6c7900 	.word	0xfc6c7900
 8002904:	02625a00 	.word	0x02625a00
 8002908:	fa0a1f00 	.word	0xfa0a1f00
 800290c:	02faf07f 	.word	0x02faf07f

08002910 <HAL_ETH_Init>:
  if (heth == NULL)
 8002910:	2800      	cmp	r0, #0
 8002912:	f000 810b 	beq.w	8002b2c <HAL_ETH_Init+0x21c>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002916:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 800291a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800291c:	4605      	mov	r5, r0
 800291e:	b0a5      	sub	sp, #148	@ 0x94
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80af 	beq.w	8002a84 <HAL_ETH_Init+0x174>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b82      	ldr	r3, [pc, #520]	@ (8002b30 <HAL_ETH_Init+0x220>)
 8002928:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800292c:	f042 0202 	orr.w	r2, r2, #2
 8002930:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002938:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	9b01      	ldr	r3, [sp, #4]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002942:	2800      	cmp	r0, #0
 8002944:	f040 8094 	bne.w	8002a70 <HAL_ETH_Init+0x160>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002948:	f7ff f882 	bl	8001a50 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800294c:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 800294e:	4a79      	ldr	r2, [pc, #484]	@ (8002b34 <HAL_ETH_Init+0x224>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
  (void)SYSCFG->PMCR;
 8002954:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f042 0201 	orr.w	r2, r2, #1
 800295c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800295e:	f7ff f871 	bl	8001a44 <HAL_GetTick>
 8002962:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002964:	e006      	b.n	8002974 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002966:	f7ff f86d 	bl	8001a44 <HAL_GetTick>
 800296a:	1b80      	subs	r0, r0, r6
 800296c:	f5b0 7ffa 	cmp.w	r0, #500	@ 0x1f4
 8002970:	f200 8081 	bhi.w	8002a76 <HAL_ETH_Init+0x166>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800297a:	681c      	ldr	r4, [r3, #0]
 800297c:	f014 0401 	ands.w	r4, r4, #1
 8002980:	d1f1      	bne.n	8002966 <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002982:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002984:	2701      	movs	r7, #1
  HAL_ETH_SetMDIOClockRange(heth);
 8002986:	f7ff ff81 	bl	800288c <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800298a:	f000 fea3 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800298e:	4b6a      	ldr	r3, [pc, #424]	@ (8002b38 <HAL_ETH_Init+0x228>)
 8002990:	682e      	ldr	r6, [r5, #0]
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002992:	a90b      	add	r1, sp, #44	@ 0x2c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002994:	fba3 2300 	umull	r2, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002998:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800299a:	9414      	str	r4, [sp, #80]	@ 0x50
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800299c:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 800299e:	f88d 4054 	strb.w	r4, [sp, #84]	@ 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029a2:	f88d 4064 	strb.w	r4, [sp, #100]	@ 0x64
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029a6:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029a8:	941a      	str	r4, [sp, #104]	@ 0x68
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029aa:	f88d 408e 	strb.w	r4, [sp, #142]	@ 0x8e
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029ae:	f8c6 30dc 	str.w	r3, [r6, #220]	@ 0xdc
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80029b6:	940d      	str	r4, [sp, #52]	@ 0x34
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029b8:	9311      	str	r3, [sp, #68]	@ 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029ba:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
  macDefaultConf.ChecksumOffload = ENABLE;
 80029be:	f88d 7030 	strb.w	r7, [sp, #48]	@ 0x30
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029c2:	9318      	str	r3, [sp, #96]	@ 0x60
  macDefaultConf.LoopbackMode = DISABLE;
 80029c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80029c8:	f88d 705e 	strb.w	r7, [sp, #94]	@ 0x5e
  macDefaultConf.LoopbackMode = DISABLE;
 80029cc:	9312      	str	r3, [sp, #72]	@ 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029ce:	2320      	movs	r3, #32
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80029d0:	f8ad 708c 	strh.w	r7, [sp, #140]	@ 0x8c
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029d4:	9322      	str	r3, [sp, #136]	@ 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
  macDefaultConf.JumboPacket = DISABLE;
 80029da:	f88d 403e 	strb.w	r4, [sp, #62]	@ 0x3e
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029de:	930b      	str	r3, [sp, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80029e4:	941f      	str	r4, [sp, #124]	@ 0x7c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029e6:	9310      	str	r3, [sp, #64]	@ 0x40
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029e8:	4b54      	ldr	r3, [pc, #336]	@ (8002b3c <HAL_ETH_Init+0x22c>)
  macDefaultConf.PauseTime = 0x0;
 80029ea:	941d      	str	r4, [sp, #116]	@ 0x74
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80029ec:	930e      	str	r3, [sp, #56]	@ 0x38
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029ee:	2302      	movs	r3, #2
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80029f0:	9416      	str	r4, [sp, #88]	@ 0x58
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029f2:	9321      	str	r3, [sp, #132]	@ 0x84
  macDefaultConf.Watchdog = ENABLE;
 80029f4:	f240 1301 	movw	r3, #257	@ 0x101
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80029f8:	f88d 406c 	strb.w	r4, [sp, #108]	@ 0x6c
  macDefaultConf.Watchdog = ENABLE;
 80029fc:	f8ad 303c 	strh.w	r3, [sp, #60]	@ 0x3c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a00:	f88d 4082 	strb.w	r4, [sp, #130]	@ 0x82
  macDefaultConf.RetryTransmission = ENABLE;
 8002a04:	f88d 704c 	strb.w	r7, [sp, #76]	@ 0x4c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a08:	f8ad 4080 	strh.w	r4, [sp, #128]	@ 0x80
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a0c:	f8ad 405c 	strh.w	r4, [sp, #92]	@ 0x5c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a10:	941c      	str	r4, [sp, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a12:	f88d 7078 	strb.w	r7, [sp, #120]	@ 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a16:	f7ff f8db 	bl	8001bd0 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a1a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a1e:	a902      	add	r1, sp, #8
 8002a20:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a22:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a26:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a28:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a2a:	f44f 7306 	mov.w	r3, #536	@ 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a2e:	9704      	str	r7, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a30:	930a      	str	r3, [sp, #40]	@ 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a32:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a34:	f8ad 4014 	strh.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a38:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a3c:	f8ad 4024 	strh.w	r4, [sp, #36]	@ 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a40:	f7ff f982 	bl	8001d48 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002a44:	f506 5180 	add.w	r1, r6, #4096	@ 0x1000
 8002a48:	f8d1 3100 	ldr.w	r3, [r1, #256]	@ 0x100
 8002a4c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002a54:	f8c1 3100 	str.w	r3, [r1, #256]	@ 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002a58:	696b      	ldr	r3, [r5, #20]
 8002a5a:	f013 0203 	ands.w	r2, r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_ETH_Init+0x180>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a60:	23e0      	movs	r3, #224	@ 0xe0
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a62:	f8c5 7088 	str.w	r7, [r5, #136]	@ 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a66:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
    return HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
}
 8002a6c:	b025      	add	sp, #148	@ 0x94
 8002a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a70:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a74:	e768      	b.n	8002948 <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a76:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a78:	23e0      	movs	r3, #224	@ 0xe0
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a7a:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a7e:	f8c5 3084 	str.w	r3, [r5, #132]	@ 0x84
      return HAL_ERROR;
 8002a82:	e7f2      	b.n	8002a6a <HAL_ETH_Init+0x15a>
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a84:	2323      	movs	r3, #35	@ 0x23
 8002a86:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    HAL_ETH_MspInit(heth);
 8002a8a:	f001 fab5 	bl	8003ff8 <HAL_ETH_MspInit>
 8002a8e:	e74a      	b.n	8002926 <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a90:	f8d1 0108 	ldr.w	r0, [r1, #264]	@ 0x108
 8002a94:	68ef      	ldr	r7, [r5, #12]
 8002a96:	f36f 004e 	bfc	r0, #1, #14
 8002a9a:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8002a9e:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
 8002aa2:	f105 0014 	add.w	r0, r5, #20
 8002aa6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    dmatxdesc = heth->Init.TxDesc + i;
 8002aaa:	463b      	mov	r3, r7
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002aac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002aae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002ab0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002ab2:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ab4:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ab8:	3318      	adds	r3, #24
 8002aba:	429c      	cmp	r4, r3
 8002abc:	d1f6      	bne.n	8002aac <HAL_ETH_Init+0x19c>
    dmarxdesc =  heth->Init.RxDesc + i;
 8002abe:	692c      	ldr	r4, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ac0:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 8002ac2:	62aa      	str	r2, [r5, #40]	@ 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002ac4:	f105 0044 	add.w	r0, r5, #68	@ 0x44
 8002ac8:	f8c1 312c 	str.w	r3, [r1, #300]	@ 0x12c
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002acc:	2200      	movs	r2, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ace:	f8c1 7114 	str.w	r7, [r1, #276]	@ 0x114
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ad2:	4623      	mov	r3, r4
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ad4:	f8c1 7120 	str.w	r7, [r1, #288]	@ 0x120
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ad8:	f105 0754 	add.w	r7, r5, #84	@ 0x54
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002adc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ade:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ae0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002ae2:	615a      	str	r2, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ae4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae6:	60da      	str	r2, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002ae8:	f840 3f04 	str.w	r3, [r0, #4]!
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aec:	4287      	cmp	r7, r0
 8002aee:	f103 0318 	add.w	r3, r3, #24
 8002af2:	d1f3      	bne.n	8002adc <HAL_ETH_Init+0x1cc>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002af4:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002af6:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002af8:	65aa      	str	r2, [r5, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002afa:	e9c5 2217 	strd	r2, r2, [r5, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002afe:	e9c5 221a 	strd	r2, r2, [r5, #104]	@ 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b02:	f8c1 0130 	str.w	r0, [r1, #304]	@ 0x130
  return HAL_OK;
 8002b06:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b08:	f8c1 411c 	str.w	r4, [r1, #284]	@ 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b0c:	3448      	adds	r4, #72	@ 0x48
 8002b0e:	f8c1 4128 	str.w	r4, [r1, #296]	@ 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b12:	8899      	ldrh	r1, [r3, #4]
 8002b14:	f8c6 1300 	str.w	r1, [r6, #768]	@ 0x300
  heth->gState = HAL_ETH_STATE_READY;
 8002b18:	2110      	movs	r1, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002b1a:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002b1c:	f8c6 3304 	str.w	r3, [r6, #772]	@ 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002b20:	f8c5 2088 	str.w	r2, [r5, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002b24:	f8c5 1084 	str.w	r1, [r5, #132]	@ 0x84
}
 8002b28:	b025      	add	sp, #148	@ 0x94
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002b2c:	2001      	movs	r0, #1
}
 8002b2e:	4770      	bx	lr
 8002b30:	58024400 	.word	0x58024400
 8002b34:	58000400 	.word	0x58000400
 8002b38:	431bde83 	.word	0x431bde83
 8002b3c:	01010000 	.word	0x01010000

08002b40 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002b40:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b4c:	680c      	ldr	r4, [r1, #0]
{
 8002b4e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	f000 80a7 	beq.w	8002ca4 <HAL_GPIO_Init+0x15c>
  uint32_t position = 0x00U;
 8002b56:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b58:	f04f 0b01 	mov.w	fp, #1
 8002b5c:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00U)
 8002b60:	ea1e 0a04 	ands.w	sl, lr, r4
 8002b64:	f000 8099 	beq.w	8002c9a <HAL_GPIO_Init+0x152>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b68:	684d      	ldr	r5, [r1, #4]
 8002b6a:	005a      	lsls	r2, r3, #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b6c:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b6e:	f005 0c03 	and.w	ip, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b72:	fa06 f702 	lsl.w	r7, r6, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b76:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b7a:	43ff      	mvns	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b7c:	f1b8 0f01 	cmp.w	r8, #1
 8002b80:	f240 8093 	bls.w	8002caa <HAL_GPIO_Init+0x162>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	f1bc 0f03 	cmp.w	ip, #3
 8002b88:	f040 80ff 	bne.w	8002d8a <HAL_GPIO_Init+0x242>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	fa0c f202 	lsl.w	r2, ip, r2
      temp = GPIOx->MODER;
 8002b90:	f8d0 c000 	ldr.w	ip, [r0]
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b94:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b98:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b9c:	ea42 0207 	orr.w	r2, r2, r7
      GPIOx->MODER = temp;
 8002ba0:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba2:	d07a      	beq.n	8002c9a <HAL_GPIO_Init+0x152>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba4:	4f7f      	ldr	r7, [pc, #508]	@ (8002da4 <HAL_GPIO_Init+0x25c>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ba6:	f003 0c03 	and.w	ip, r3, #3
 8002baa:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bac:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bb0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb4:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bb8:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bbc:	4e7a      	ldr	r6, [pc, #488]	@ (8002da8 <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002bc2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8002bc6:	f023 0703 	bic.w	r7, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bca:	42b0      	cmp	r0, r6
 8002bcc:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd0:	f002 0202 	and.w	r2, r2, #2
 8002bd4:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002bd8:	9203      	str	r2, [sp, #12]
 8002bda:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002bdc:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bde:	ea22 020e 	bic.w	r2, r2, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002be2:	d02d      	beq.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002be4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002be8:	42b0      	cmp	r0, r6
 8002bea:	f000 80a4 	beq.w	8002d36 <HAL_GPIO_Init+0x1ee>
 8002bee:	4e6f      	ldr	r6, [pc, #444]	@ (8002dac <HAL_GPIO_Init+0x264>)
 8002bf0:	42b0      	cmp	r0, r6
 8002bf2:	f000 80a7 	beq.w	8002d44 <HAL_GPIO_Init+0x1fc>
 8002bf6:	f8df e1b8 	ldr.w	lr, [pc, #440]	@ 8002db0 <HAL_GPIO_Init+0x268>
 8002bfa:	4570      	cmp	r0, lr
 8002bfc:	f000 8094 	beq.w	8002d28 <HAL_GPIO_Init+0x1e0>
 8002c00:	f8df e1b0 	ldr.w	lr, [pc, #432]	@ 8002db4 <HAL_GPIO_Init+0x26c>
 8002c04:	4570      	cmp	r0, lr
 8002c06:	f000 80ab 	beq.w	8002d60 <HAL_GPIO_Init+0x218>
 8002c0a:	f8df e1ac 	ldr.w	lr, [pc, #428]	@ 8002db8 <HAL_GPIO_Init+0x270>
 8002c0e:	4570      	cmp	r0, lr
 8002c10:	f000 80ad 	beq.w	8002d6e <HAL_GPIO_Init+0x226>
 8002c14:	f8df e1a4 	ldr.w	lr, [pc, #420]	@ 8002dbc <HAL_GPIO_Init+0x274>
 8002c18:	4570      	cmp	r0, lr
 8002c1a:	f000 809a 	beq.w	8002d52 <HAL_GPIO_Init+0x20a>
 8002c1e:	f8df e1a0 	ldr.w	lr, [pc, #416]	@ 8002dc0 <HAL_GPIO_Init+0x278>
 8002c22:	4570      	cmp	r0, lr
 8002c24:	f000 80aa 	beq.w	8002d7c <HAL_GPIO_Init+0x234>
 8002c28:	f8df e198 	ldr.w	lr, [pc, #408]	@ 8002dc4 <HAL_GPIO_Init+0x27c>
 8002c2c:	4570      	cmp	r0, lr
 8002c2e:	bf0c      	ite	eq
 8002c30:	f04f 0e09 	moveq.w	lr, #9
 8002c34:	f04f 0e0a 	movne.w	lr, #10
 8002c38:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002c3c:	ea42 020c 	orr.w	r2, r2, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c40:	60ba      	str	r2, [r7, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c46:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002c48:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->RTSR1;
 8002c4c:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002c4e:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8002c52:	bf54      	ite	pl
 8002c54:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002c56:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002c5a:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8002c5c:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c5e:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002c60:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8002c64:	bf54      	ite	pl
 8002c66:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002c68:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8002c6c:	6072      	str	r2, [r6, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c6e:	f8d6 2084 	ldr.w	r2, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c72:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002c74:	f04f 46b0 	mov.w	r6, #1476395008	@ 0x58000000
        temp &= ~(iocurrent);
 8002c78:	bf54      	ite	pl
 8002c7a:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002c7c:	ea4a 0202 	orrmi.w	r2, sl, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c80:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002c82:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8002c86:	f8c6 2084 	str.w	r2, [r6, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8002c8a:	f8d6 2080 	ldr.w	r2, [r6, #128]	@ 0x80
        temp &= ~(iocurrent);
 8002c8e:	bf54      	ite	pl
 8002c90:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002c92:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8002c96:	f8c5 2080 	str.w	r2, [r5, #128]	@ 0x80
      }
    }

    position++;
 8002c9a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c9c:	fa34 f203 	lsrs.w	r2, r4, r3
 8002ca0:	f47f af5c 	bne.w	8002b5c <HAL_GPIO_Init+0x14>
  }
}
 8002ca4:	b005      	add	sp, #20
 8002ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002caa:	f8d0 9008 	ldr.w	r9, [r0, #8]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	f1bc 0f02 	cmp.w	ip, #2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb2:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cb4:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb8:	fa06 f802 	lsl.w	r8, r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cbc:	688e      	ldr	r6, [r1, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cbe:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002cc2:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc6:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002cca:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cce:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cd2:	ea29 0e0e 	bic.w	lr, r9, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd6:	ea48 0e0e 	orr.w	lr, r8, lr
        GPIOx->OTYPER = temp;
 8002cda:	f8c0 e004 	str.w	lr, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cde:	fa06 fe02 	lsl.w	lr, r6, r2
      temp = GPIOx->PUPDR;
 8002ce2:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ce6:	ea08 0807 	and.w	r8, r8, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cea:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8002cee:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cf2:	f47f af4b 	bne.w	8002b8c <HAL_GPIO_Init+0x44>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002cf6:	f003 0e07 	and.w	lr, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002cfa:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002cfc:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d00:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002d04:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d08:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d10:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d12:	260f      	movs	r6, #15
 8002d14:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d18:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d1a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d1e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002d22:	f8c8 e020 	str.w	lr, [r8, #32]
 8002d26:	e731      	b.n	8002b8c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d28:	f04f 0e03 	mov.w	lr, #3
 8002d2c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d30:	ea42 020c 	orr.w	r2, r2, ip
 8002d34:	e784      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d36:	f04f 0e01 	mov.w	lr, #1
 8002d3a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d3e:	ea42 020c 	orr.w	r2, r2, ip
 8002d42:	e77d      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d44:	f04f 0e02 	mov.w	lr, #2
 8002d48:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d4c:	ea42 020c 	orr.w	r2, r2, ip
 8002d50:	e776      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d52:	f04f 0e06 	mov.w	lr, #6
 8002d56:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d5a:	ea42 020c 	orr.w	r2, r2, ip
 8002d5e:	e76f      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d60:	f04f 0e04 	mov.w	lr, #4
 8002d64:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d68:	ea42 020c 	orr.w	r2, r2, ip
 8002d6c:	e768      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d6e:	f04f 0e05 	mov.w	lr, #5
 8002d72:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d76:	ea42 020c 	orr.w	r2, r2, ip
 8002d7a:	e761      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
 8002d7c:	f04f 0e07 	mov.w	lr, #7
 8002d80:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002d84:	ea42 020c 	orr.w	r2, r2, ip
 8002d88:	e75a      	b.n	8002c40 <HAL_GPIO_Init+0xf8>
      temp = GPIOx->PUPDR;
 8002d8a:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d8e:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d90:	ea08 0807 	and.w	r8, r8, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d94:	fa06 fe02 	lsl.w	lr, r6, r2
 8002d98:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 8002d9c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da0:	e6f4      	b.n	8002b8c <HAL_GPIO_Init+0x44>
 8002da2:	bf00      	nop
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020000 	.word	0x58020000
 8002dac:	58020800 	.word	0x58020800
 8002db0:	58020c00 	.word	0x58020c00
 8002db4:	58021000 	.word	0x58021000
 8002db8:	58021400 	.word	0x58021400
 8002dbc:	58021800 	.word	0x58021800
 8002dc0:	58021c00 	.word	0x58021c00
 8002dc4:	58022400 	.word	0x58022400

08002dc8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc8:	b902      	cbnz	r2, 8002dcc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002dca:	0409      	lsls	r1, r1, #16
 8002dcc:	6181      	str	r1, [r0, #24]
  }
}
 8002dce:	4770      	bx	lr

08002dd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dd0:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dd2:	4c1c      	ldr	r4, [pc, #112]	@ (8002e44 <HAL_PWREx_ConfigSupply+0x74>)
{
 8002dd4:	4605      	mov	r5, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002dd6:	68e3      	ldr	r3, [r4, #12]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	2b06      	cmp	r3, #6
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dde:	68e3      	ldr	r3, [r4, #12]
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002de0:	d005      	beq.n	8002dee <HAL_PWREx_ConfigSupply+0x1e>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002de2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de6:	1a18      	subs	r0, r3, r0
 8002de8:	bf18      	it	ne
 8002dea:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002dec:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002df2:	4303      	orrs	r3, r0
 8002df4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8002df6:	f7fe fe25 	bl	8001a44 <HAL_GetTick>
 8002dfa:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dfc:	e005      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x3a>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dfe:	f7fe fe21 	bl	8001a44 <HAL_GetTick>
 8002e02:	1b83      	subs	r3, r0, r6
 8002e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e08:	d81a      	bhi.n	8002e40 <HAL_PWREx_ConfigSupply+0x70>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e0a:	6863      	ldr	r3, [r4, #4]
 8002e0c:	049b      	lsls	r3, r3, #18
 8002e0e:	d5f6      	bpl.n	8002dfe <HAL_PWREx_ConfigSupply+0x2e>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e10:	f1a5 031d 	sub.w	r3, r5, #29
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d904      	bls.n	8002e22 <HAL_PWREx_ConfigSupply+0x52>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002e18:	3d2d      	subs	r5, #45	@ 0x2d
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002e1a:	2d01      	cmp	r5, #1
 8002e1c:	d901      	bls.n	8002e22 <HAL_PWREx_ConfigSupply+0x52>
      return HAL_OK;
 8002e1e:	2000      	movs	r0, #0
}
 8002e20:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick ();
 8002e22:	f7fe fe0f 	bl	8001a44 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e26:	4d07      	ldr	r5, [pc, #28]	@ (8002e44 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8002e28:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002e2a:	68eb      	ldr	r3, [r5, #12]
 8002e2c:	f003 0311 	and.w	r3, r3, #17
 8002e30:	2b11      	cmp	r3, #17
 8002e32:	d0f4      	beq.n	8002e1e <HAL_PWREx_ConfigSupply+0x4e>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e34:	f7fe fe06 	bl	8001a44 <HAL_GetTick>
 8002e38:	1b00      	subs	r0, r0, r4
 8002e3a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8002e3e:	d9f4      	bls.n	8002e2a <HAL_PWREx_ConfigSupply+0x5a>
      return HAL_ERROR;
 8002e40:	2001      	movs	r0, #1
}
 8002e42:	bd70      	pop	{r4, r5, r6, pc}
 8002e44:	58024800 	.word	0x58024800

08002e48 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e48:	4b33      	ldr	r3, [pc, #204]	@ (8002f18 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002e4a:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e4e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e50:	6add      	ldr	r5, [r3, #44]	@ 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8002e52:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e58:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8002e5c:	d036      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq.part.0+0x84>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e5e:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e62:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e66:	f001 0103 	and.w	r1, r1, #3
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e6a:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e6e:	fb05 f202 	mul.w	r2, r5, r2
      switch (pllsource)
 8002e72:	2901      	cmp	r1, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e78:	ee06 2a90 	vmov	s13, r2
 8002e7c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
      switch (pllsource)
 8002e80:	d002      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8002e82:	2902      	cmp	r1, #2
 8002e84:	d042      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 8002e86:	b319      	cbz	r1, 8002ed0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e88:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8002f1c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8002e8c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8002e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002eaa:	ee67 7a86 	vmul.f32	s15, s15, s12
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002eb6:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002eb8:	ee07 3a10 	vmov	s14, r3
 8002ebc:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002ec0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ec4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002ec8:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002ecc:	bc30      	pop	{r4, r5}
 8002ece:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	0692      	lsls	r2, r2, #26
 8002ed4:	d51d      	bpl.n	8002f12 <HAL_RCC_GetSysClockFreq.part.0+0xca>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ed6:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ed8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002edc:	4a10      	ldr	r2, [pc, #64]	@ (8002f20 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ee0:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ee8:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eea:	ee07 3a90 	vmov	s15, r3
 8002eee:	ee06 2a10 	vmov	s12, r2
 8002ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8002efa:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002efe:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8002f02:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8002f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f0a:	e7d0      	b.n	8002eae <HAL_RCC_GetSysClockFreq.part.0+0x66>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f0c:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002f24 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 8002f10:	e7bc      	b.n	8002e8c <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f12:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8002f28 <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 8002f16:	e7b9      	b.n	8002e8c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	4a742400 	.word	0x4a742400
 8002f20:	03d09000 	.word	0x03d09000
 8002f24:	4bbebc20 	.word	0x4bbebc20
 8002f28:	4c742400 	.word	0x4c742400

08002f2c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	f000 827f 	beq.w	8003430 <HAL_RCC_OscConfig+0x504>
{
 8002f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f34:	6803      	ldr	r3, [r0, #0]
 8002f36:	4604      	mov	r4, r0
 8002f38:	07d9      	lsls	r1, r3, #31
 8002f3a:	d52e      	bpl.n	8002f9a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3c:	4993      	ldr	r1, [pc, #588]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 8002f3e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f40:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f42:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f46:	2a10      	cmp	r2, #16
 8002f48:	f000 80f0 	beq.w	800312c <HAL_RCC_OscConfig+0x200>
 8002f4c:	2a18      	cmp	r2, #24
 8002f4e:	f000 80e8 	beq.w	8003122 <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f52:	6863      	ldr	r3, [r4, #4]
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f58:	f000 8108 	beq.w	800316c <HAL_RCC_OscConfig+0x240>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8146 	beq.w	80031ee <HAL_RCC_OscConfig+0x2c2>
 8002f62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f66:	4b89      	ldr	r3, [pc, #548]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f000 8232 	beq.w	80033d2 <HAL_RCC_OscConfig+0x4a6>
 8002f6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fd62 	bl	8001a44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f80:	4e82      	ldr	r6, [pc, #520]	@ (800318c <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8002f82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f84:	e005      	b.n	8002f92 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f86:	f7fe fd5d 	bl	8001a44 <HAL_GetTick>
 8002f8a:	1b40      	subs	r0, r0, r5
 8002f8c:	2864      	cmp	r0, #100	@ 0x64
 8002f8e:	f200 812c 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f92:	6833      	ldr	r3, [r6, #0]
 8002f94:	039b      	lsls	r3, r3, #14
 8002f96:	d5f6      	bpl.n	8002f86 <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	079d      	lsls	r5, r3, #30
 8002f9c:	d47e      	bmi.n	800309c <HAL_RCC_OscConfig+0x170>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002f9e:	06d9      	lsls	r1, r3, #27
 8002fa0:	d528      	bpl.n	8002ff4 <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa2:	497a      	ldr	r1, [pc, #488]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 8002fa4:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fa8:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002fac:	2a08      	cmp	r2, #8
 8002fae:	f000 80cd 	beq.w	800314c <HAL_RCC_OscConfig+0x220>
 8002fb2:	2a18      	cmp	r2, #24
 8002fb4:	f000 80c5 	beq.w	8003142 <HAL_RCC_OscConfig+0x216>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fb8:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002fba:	4d74      	ldr	r5, [pc, #464]	@ (800318c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 814e 	beq.w	800325e <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8002fc2:	682b      	ldr	r3, [r5, #0]
 8002fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fc8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fca:	f7fe fd3b 	bl	8001a44 <HAL_GetTick>
 8002fce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd0:	e005      	b.n	8002fde <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fd37 	bl	8001a44 <HAL_GetTick>
 8002fd6:	1b80      	subs	r0, r0, r6
 8002fd8:	2802      	cmp	r0, #2
 8002fda:	f200 8106 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fde:	682b      	ldr	r3, [r5, #0]
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	d5f6      	bpl.n	8002fd2 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fe4:	68eb      	ldr	r3, [r5, #12]
 8002fe6:	6a22      	ldr	r2, [r4, #32]
 8002fe8:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8002fec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ff0:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	071d      	lsls	r5, r3, #28
 8002ff6:	d516      	bpl.n	8003026 <HAL_RCC_OscConfig+0xfa>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ff8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4d64      	ldr	r5, [pc, #400]	@ (800318c <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 810c 	beq.w	800321a <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8003002:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003004:	f043 0301 	orr.w	r3, r3, #1
 8003008:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800300a:	f7fe fd1b 	bl	8001a44 <HAL_GetTick>
 800300e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003010:	e005      	b.n	800301e <HAL_RCC_OscConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003012:	f7fe fd17 	bl	8001a44 <HAL_GetTick>
 8003016:	1b80      	subs	r0, r0, r6
 8003018:	2802      	cmp	r0, #2
 800301a:	f200 80e6 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800301e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003020:	0798      	lsls	r0, r3, #30
 8003022:	d5f6      	bpl.n	8003012 <HAL_RCC_OscConfig+0xe6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	069a      	lsls	r2, r3, #26
 8003028:	d516      	bpl.n	8003058 <HAL_RCC_OscConfig+0x12c>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800302a:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800302c:	4d57      	ldr	r5, [pc, #348]	@ (800318c <HAL_RCC_OscConfig+0x260>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8104 	beq.w	800323c <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800303a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800303c:	f7fe fd02 	bl	8001a44 <HAL_GetTick>
 8003040:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003042:	e005      	b.n	8003050 <HAL_RCC_OscConfig+0x124>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003044:	f7fe fcfe 	bl	8001a44 <HAL_GetTick>
 8003048:	1b80      	subs	r0, r0, r6
 800304a:	2802      	cmp	r0, #2
 800304c:	f200 80cd 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	049f      	lsls	r7, r3, #18
 8003054:	d5f6      	bpl.n	8003044 <HAL_RCC_OscConfig+0x118>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	0759      	lsls	r1, r3, #29
 800305a:	f100 808d 	bmi.w	8003178 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003060:	b1d2      	cbz	r2, 8003098 <HAL_RCC_OscConfig+0x16c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003062:	4d4a      	ldr	r5, [pc, #296]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 8003064:	692b      	ldr	r3, [r5, #16]
 8003066:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800306a:	2b18      	cmp	r3, #24
 800306c:	f000 8183 	beq.w	8003376 <HAL_RCC_OscConfig+0x44a>
        __HAL_RCC_PLL_DISABLE();
 8003070:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003072:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003074:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003078:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307a:	f000 8117 	beq.w	80032ac <HAL_RCC_OscConfig+0x380>
        tickstart = HAL_GetTick();
 800307e:	f7fe fce1 	bl	8001a44 <HAL_GetTick>
 8003082:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003084:	e005      	b.n	8003092 <HAL_RCC_OscConfig+0x166>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003086:	f7fe fcdd 	bl	8001a44 <HAL_GetTick>
 800308a:	1b00      	subs	r0, r0, r4
 800308c:	2802      	cmp	r0, #2
 800308e:	f200 80ac 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003092:	682b      	ldr	r3, [r5, #0]
 8003094:	019b      	lsls	r3, r3, #6
 8003096:	d4f6      	bmi.n	8003086 <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8003098:	2000      	movs	r0, #0
}
 800309a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800309c:	4a3b      	ldr	r2, [pc, #236]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 800309e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030a2:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 80030a6:	d122      	bne.n	80030ee <HAL_RCC_OscConfig+0x1c2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030a8:	4b38      	ldr	r3, [pc, #224]	@ (800318c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030aa:	68e2      	ldr	r2, [r4, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0759      	lsls	r1, r3, #29
 80030b0:	d501      	bpl.n	80030b6 <HAL_RCC_OscConfig+0x18a>
 80030b2:	2a00      	cmp	r2, #0
 80030b4:	d043      	beq.n	800313e <HAL_RCC_OscConfig+0x212>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030b6:	4d35      	ldr	r5, [pc, #212]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 80030b8:	682b      	ldr	r3, [r5, #0]
 80030ba:	f023 0319 	bic.w	r3, r3, #25
 80030be:	4313      	orrs	r3, r2
 80030c0:	602b      	str	r3, [r5, #0]
          tickstart = HAL_GetTick();
 80030c2:	f7fe fcbf 	bl	8001a44 <HAL_GetTick>
 80030c6:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030c8:	e005      	b.n	80030d6 <HAL_RCC_OscConfig+0x1aa>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ca:	f7fe fcbb 	bl	8001a44 <HAL_GetTick>
 80030ce:	1b80      	subs	r0, r0, r6
 80030d0:	2802      	cmp	r0, #2
 80030d2:	f200 808a 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	075b      	lsls	r3, r3, #29
 80030da:	d5f6      	bpl.n	80030ca <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030dc:	686b      	ldr	r3, [r5, #4]
 80030de:	6922      	ldr	r2, [r4, #16]
 80030e0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80030e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80030e8:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030ea:	6823      	ldr	r3, [r4, #0]
 80030ec:	e757      	b.n	8002f9e <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030ee:	2b18      	cmp	r3, #24
 80030f0:	f000 80d8 	beq.w	80032a4 <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f4:	4d25      	ldr	r5, [pc, #148]	@ (800318c <HAL_RCC_OscConfig+0x260>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f6:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f8:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030fa:	2a00      	cmp	r2, #0
 80030fc:	f000 80c1 	beq.w	8003282 <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003100:	f023 0319 	bic.w	r3, r3, #25
 8003104:	4313      	orrs	r3, r2
 8003106:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003108:	f7fe fc9c 	bl	8001a44 <HAL_GetTick>
 800310c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310e:	e004      	b.n	800311a <HAL_RCC_OscConfig+0x1ee>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fc98 	bl	8001a44 <HAL_GetTick>
 8003114:	1b80      	subs	r0, r0, r6
 8003116:	2802      	cmp	r0, #2
 8003118:	d867      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800311a:	682b      	ldr	r3, [r5, #0]
 800311c:	075f      	lsls	r7, r3, #29
 800311e:	d5f7      	bpl.n	8003110 <HAL_RCC_OscConfig+0x1e4>
 8003120:	e7dc      	b.n	80030dc <HAL_RCC_OscConfig+0x1b0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003122:	f001 0103 	and.w	r1, r1, #3
 8003126:	2902      	cmp	r1, #2
 8003128:	f47f af13 	bne.w	8002f52 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	4a17      	ldr	r2, [pc, #92]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	0392      	lsls	r2, r2, #14
 8003132:	f57f af32 	bpl.w	8002f9a <HAL_RCC_OscConfig+0x6e>
 8003136:	6862      	ldr	r2, [r4, #4]
 8003138:	2a00      	cmp	r2, #0
 800313a:	f47f af2e 	bne.w	8002f9a <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 800313e:	2001      	movs	r0, #1
}
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003142:	f001 0103 	and.w	r1, r1, #3
 8003146:	2901      	cmp	r1, #1
 8003148:	f47f af36 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800314c:	4a0f      	ldr	r2, [pc, #60]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	05d2      	lsls	r2, r2, #23
 8003152:	d502      	bpl.n	800315a <HAL_RCC_OscConfig+0x22e>
 8003154:	69e2      	ldr	r2, [r4, #28]
 8003156:	2a80      	cmp	r2, #128	@ 0x80
 8003158:	d1f1      	bne.n	800313e <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800315a:	490c      	ldr	r1, [pc, #48]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 800315c:	6a20      	ldr	r0, [r4, #32]
 800315e:	68ca      	ldr	r2, [r1, #12]
 8003160:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8003164:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003168:	60ca      	str	r2, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800316a:	e743      	b.n	8002ff4 <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316c:	4a07      	ldr	r2, [pc, #28]	@ (800318c <HAL_RCC_OscConfig+0x260>)
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003176:	e701      	b.n	8002f7c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8003178:	4d05      	ldr	r5, [pc, #20]	@ (8003190 <HAL_RCC_OscConfig+0x264>)
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003180:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003182:	f7fe fc5f 	bl	8001a44 <HAL_GetTick>
 8003186:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003188:	e009      	b.n	800319e <HAL_RCC_OscConfig+0x272>
 800318a:	bf00      	nop
 800318c:	58024400 	.word	0x58024400
 8003190:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003194:	f7fe fc56 	bl	8001a44 <HAL_GetTick>
 8003198:	1b80      	subs	r0, r0, r6
 800319a:	2864      	cmp	r0, #100	@ 0x64
 800319c:	d825      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800319e:	682b      	ldr	r3, [r5, #0]
 80031a0:	05da      	lsls	r2, r3, #23
 80031a2:	d5f7      	bpl.n	8003194 <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	68a3      	ldr	r3, [r4, #8]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	f000 8134 	beq.w	8003414 <HAL_RCC_OscConfig+0x4e8>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8118 	beq.w	80033e2 <HAL_RCC_OscConfig+0x4b6>
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	4b9f      	ldr	r3, [pc, #636]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
 80031b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031b8:	f000 8132 	beq.w	8003420 <HAL_RCC_OscConfig+0x4f4>
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	671a      	str	r2, [r3, #112]	@ 0x70
 80031c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031c4:	f022 0204 	bic.w	r2, r2, #4
 80031c8:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80031ca:	f7fe fc3b 	bl	8001a44 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ce:	4e99      	ldr	r6, [pc, #612]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80031d4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d6:	e004      	b.n	80031e2 <HAL_RCC_OscConfig+0x2b6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d8:	f7fe fc34 	bl	8001a44 <HAL_GetTick>
 80031dc:	1b40      	subs	r0, r0, r5
 80031de:	42b8      	cmp	r0, r7
 80031e0:	d803      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031e2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80031e4:	079b      	lsls	r3, r3, #30
 80031e6:	d5f7      	bpl.n	80031d8 <HAL_RCC_OscConfig+0x2ac>
 80031e8:	e739      	b.n	800305e <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 80031ea:	2003      	movs	r0, #3
}
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ee:	4d91      	ldr	r5, [pc, #580]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f6:	602b      	str	r3, [r5, #0]
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003200:	f7fe fc20 	bl	8001a44 <HAL_GetTick>
 8003204:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003206:	e004      	b.n	8003212 <HAL_RCC_OscConfig+0x2e6>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fc1c 	bl	8001a44 <HAL_GetTick>
 800320c:	1b80      	subs	r0, r0, r6
 800320e:	2864      	cmp	r0, #100	@ 0x64
 8003210:	d8eb      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003212:	682b      	ldr	r3, [r5, #0]
 8003214:	039f      	lsls	r7, r3, #14
 8003216:	d4f7      	bmi.n	8003208 <HAL_RCC_OscConfig+0x2dc>
 8003218:	e6be      	b.n	8002f98 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800321a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8003222:	f7fe fc0f 	bl	8001a44 <HAL_GetTick>
 8003226:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003228:	e004      	b.n	8003234 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe fc0b 	bl	8001a44 <HAL_GetTick>
 800322e:	1b80      	subs	r0, r0, r6
 8003230:	2802      	cmp	r0, #2
 8003232:	d8da      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003234:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8003236:	0799      	lsls	r1, r3, #30
 8003238:	d4f7      	bmi.n	800322a <HAL_RCC_OscConfig+0x2fe>
 800323a:	e6f3      	b.n	8003024 <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 800323c:	682b      	ldr	r3, [r5, #0]
 800323e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003242:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003244:	f7fe fbfe 	bl	8001a44 <HAL_GetTick>
 8003248:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800324a:	e004      	b.n	8003256 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800324c:	f7fe fbfa 	bl	8001a44 <HAL_GetTick>
 8003250:	1b80      	subs	r0, r0, r6
 8003252:	2802      	cmp	r0, #2
 8003254:	d8c9      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003256:	682b      	ldr	r3, [r5, #0]
 8003258:	0498      	lsls	r0, r3, #18
 800325a:	d4f7      	bmi.n	800324c <HAL_RCC_OscConfig+0x320>
 800325c:	e6fb      	b.n	8003056 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003264:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003266:	f7fe fbed 	bl	8001a44 <HAL_GetTick>
 800326a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800326c:	e004      	b.n	8003278 <HAL_RCC_OscConfig+0x34c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800326e:	f7fe fbe9 	bl	8001a44 <HAL_GetTick>
 8003272:	1b80      	subs	r0, r0, r6
 8003274:	2802      	cmp	r0, #2
 8003276:	d8b8      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	05df      	lsls	r7, r3, #23
 800327c:	d4f7      	bmi.n	800326e <HAL_RCC_OscConfig+0x342>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	e6b8      	b.n	8002ff4 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8003282:	f023 0301 	bic.w	r3, r3, #1
 8003286:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003288:	f7fe fbdc 	bl	8001a44 <HAL_GetTick>
 800328c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800328e:	e004      	b.n	800329a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003290:	f7fe fbd8 	bl	8001a44 <HAL_GetTick>
 8003294:	1b80      	subs	r0, r0, r6
 8003296:	2802      	cmp	r0, #2
 8003298:	d8a7      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800329a:	682b      	ldr	r3, [r5, #0]
 800329c:	0758      	lsls	r0, r3, #29
 800329e:	d4f7      	bmi.n	8003290 <HAL_RCC_OscConfig+0x364>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	e67c      	b.n	8002f9e <HAL_RCC_OscConfig+0x72>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032a4:	0790      	lsls	r0, r2, #30
 80032a6:	f47f af25 	bne.w	80030f4 <HAL_RCC_OscConfig+0x1c8>
 80032aa:	e6fd      	b.n	80030a8 <HAL_RCC_OscConfig+0x17c>
        tickstart = HAL_GetTick();
 80032ac:	f7fe fbca 	bl	8001a44 <HAL_GetTick>
 80032b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032b2:	e004      	b.n	80032be <HAL_RCC_OscConfig+0x392>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe fbc6 	bl	8001a44 <HAL_GetTick>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	2802      	cmp	r0, #2
 80032bc:	d895      	bhi.n	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032be:	682b      	ldr	r3, [r5, #0]
 80032c0:	0199      	lsls	r1, r3, #6
 80032c2:	d4f7      	bmi.n	80032b4 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c4:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80032c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003438 <HAL_RCC_OscConfig+0x50c>)
 80032c8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80032ca:	400b      	ands	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80032d0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80032d4:	62ab      	str	r3, [r5, #40]	@ 0x28
 80032d6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80032d8:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 80032dc:	3901      	subs	r1, #1
 80032de:	3b01      	subs	r3, #1
 80032e0:	3a01      	subs	r2, #1
 80032e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	0412      	lsls	r2, r2, #16
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80032f0:	4313      	orrs	r3, r2
 80032f2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80032f4:	3a01      	subs	r2, #1
 80032f6:	430b      	orrs	r3, r1
 80032f8:	0612      	lsls	r2, r2, #24
 80032fa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80032fe:	4313      	orrs	r3, r2
 8003300:	632b      	str	r3, [r5, #48]	@ 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8003302:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003304:	f023 0301 	bic.w	r3, r3, #1
 8003308:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800330a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800330c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800330e:	f36f 03cf 	bfc	r3, #3, #13
 8003312:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003316:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003318:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800331a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800331c:	f023 030c 	bic.w	r3, r3, #12
 8003320:	4313      	orrs	r3, r2
 8003322:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003324:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003326:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003328:	f023 0302 	bic.w	r3, r3, #2
 800332c:	4313      	orrs	r3, r2
 800332e:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003330:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003336:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003338:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800333a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333e:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003340:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8003342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003346:	62eb      	str	r3, [r5, #44]	@ 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8003348:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003356:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003358:	f7fe fb74 	bl	8001a44 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800335c:	4d35      	ldr	r5, [pc, #212]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
        tickstart = HAL_GetTick();
 800335e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003360:	e005      	b.n	800336e <HAL_RCC_OscConfig+0x442>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003362:	f7fe fb6f 	bl	8001a44 <HAL_GetTick>
 8003366:	1b00      	subs	r0, r0, r4
 8003368:	2802      	cmp	r0, #2
 800336a:	f63f af3e 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	019a      	lsls	r2, r3, #6
 8003372:	d5f6      	bpl.n	8003362 <HAL_RCC_OscConfig+0x436>
 8003374:	e690      	b.n	8003098 <HAL_RCC_OscConfig+0x16c>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003376:	2a01      	cmp	r2, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003378:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800337a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337c:	f43f aedf 	beq.w	800313e <HAL_RCC_OscConfig+0x212>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003380:	f001 0203 	and.w	r2, r1, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003384:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003386:	4282      	cmp	r2, r0
 8003388:	f47f aed9 	bne.w	800313e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800338c:	f3c1 1105 	ubfx	r1, r1, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003392:	4291      	cmp	r1, r2
 8003394:	f47f aed3 	bne.w	800313e <HAL_RCC_OscConfig+0x212>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003398:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800339a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800339e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a0:	4291      	cmp	r1, r2
 80033a2:	f47f aecc 	bne.w	800313e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033a6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80033a8:	f3c3 2146 	ubfx	r1, r3, #9, #7
 80033ac:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033ae:	4291      	cmp	r1, r2
 80033b0:	f47f aec5 	bne.w	800313e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80033b6:	f3c3 4106 	ubfx	r1, r3, #16, #7
 80033ba:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033bc:	4291      	cmp	r1, r2
 80033be:	f47f aebe 	bne.w	800313e <HAL_RCC_OscConfig+0x212>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033c2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80033c4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80033c8:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033ca:	1a98      	subs	r0, r3, r2
 80033cc:	bf18      	it	ne
 80033ce:	2001      	movne	r0, #1
}
 80033d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80033de:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e0:	e5cc      	b.n	8002f7c <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e2:	4d14      	ldr	r5, [pc, #80]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	672b      	str	r3, [r5, #112]	@ 0x70
 80033f0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80033f2:	f023 0304 	bic.w	r3, r3, #4
 80033f6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80033f8:	f7fe fb24 	bl	8001a44 <HAL_GetTick>
 80033fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033fe:	e005      	b.n	800340c <HAL_RCC_OscConfig+0x4e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe fb20 	bl	8001a44 <HAL_GetTick>
 8003404:	1b80      	subs	r0, r0, r6
 8003406:	42b8      	cmp	r0, r7
 8003408:	f63f aeef 	bhi.w	80031ea <HAL_RCC_OscConfig+0x2be>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800340c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800340e:	0798      	lsls	r0, r3, #30
 8003410:	d4f6      	bmi.n	8003400 <HAL_RCC_OscConfig+0x4d4>
 8003412:	e624      	b.n	800305e <HAL_RCC_OscConfig+0x132>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	4a07      	ldr	r2, [pc, #28]	@ (8003434 <HAL_RCC_OscConfig+0x508>)
 8003416:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800341e:	e6d4      	b.n	80031ca <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003420:	f042 0204 	orr.w	r2, r2, #4
 8003424:	671a      	str	r2, [r3, #112]	@ 0x70
 8003426:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	671a      	str	r2, [r3, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342e:	e6cc      	b.n	80031ca <HAL_RCC_OscConfig+0x29e>
    return HAL_ERROR;
 8003430:	2001      	movs	r0, #1
}
 8003432:	4770      	bx	lr
 8003434:	58024400 	.word	0x58024400
 8003438:	fffffc0c 	.word	0xfffffc0c

0800343c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800343c:	4a0c      	ldr	r2, [pc, #48]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x34>)
 800343e:	6913      	ldr	r3, [r2, #16]
 8003440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003444:	2b10      	cmp	r3, #16
 8003446:	d00d      	beq.n	8003464 <HAL_RCC_GetSysClockFreq+0x28>
 8003448:	2b18      	cmp	r3, #24
 800344a:	d009      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x24>
 800344c:	b963      	cbnz	r3, 8003468 <HAL_RCC_GetSysClockFreq+0x2c>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	069b      	lsls	r3, r3, #26
 8003452:	d50b      	bpl.n	800346c <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	4807      	ldr	r0, [pc, #28]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x38>)
 8003458:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800345c:	40d8      	lsrs	r0, r3
 800345e:	4770      	bx	lr
 8003460:	f7ff bcf2 	b.w	8002e48 <HAL_RCC_GetSysClockFreq.part.0>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003464:	4804      	ldr	r0, [pc, #16]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003466:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8003468:	4804      	ldr	r0, [pc, #16]	@ (800347c <HAL_RCC_GetSysClockFreq+0x40>)
 800346a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800346c:	4801      	ldr	r0, [pc, #4]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x38>)
}
 800346e:	4770      	bx	lr
 8003470:	58024400 	.word	0x58024400
 8003474:	03d09000 	.word	0x03d09000
 8003478:	017d7840 	.word	0x017d7840
 800347c:	003d0900 	.word	0x003d0900

08003480 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003480:	2800      	cmp	r0, #0
 8003482:	f000 810e 	beq.w	80036a2 <HAL_RCC_ClockConfig+0x222>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003486:	4a8d      	ldr	r2, [pc, #564]	@ (80036bc <HAL_RCC_ClockConfig+0x23c>)
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	428b      	cmp	r3, r1
{
 8003490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003494:	4604      	mov	r4, r0
 8003496:	460d      	mov	r5, r1
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	f023 030f 	bic.w	r3, r3, #15
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a4:	6813      	ldr	r3, [r2, #0]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	428b      	cmp	r3, r1
 80034ac:	d002      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80034ae:	2001      	movs	r0, #1
}
 80034b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	0758      	lsls	r0, r3, #29
 80034b8:	d50b      	bpl.n	80034d2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034ba:	4981      	ldr	r1, [pc, #516]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80034bc:	6920      	ldr	r0, [r4, #16]
 80034be:	698a      	ldr	r2, [r1, #24]
 80034c0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d904      	bls.n	80034d2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c8:	698a      	ldr	r2, [r1, #24]
 80034ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80034ce:	4302      	orrs	r2, r0
 80034d0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034d2:	0719      	lsls	r1, r3, #28
 80034d4:	d50b      	bpl.n	80034ee <HAL_RCC_ClockConfig+0x6e>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034d6:	497a      	ldr	r1, [pc, #488]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80034d8:	6960      	ldr	r0, [r4, #20]
 80034da:	69ca      	ldr	r2, [r1, #28]
 80034dc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80034e0:	4290      	cmp	r0, r2
 80034e2:	d904      	bls.n	80034ee <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034e4:	69ca      	ldr	r2, [r1, #28]
 80034e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80034ea:	4302      	orrs	r2, r0
 80034ec:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ee:	06da      	lsls	r2, r3, #27
 80034f0:	d50b      	bpl.n	800350a <HAL_RCC_ClockConfig+0x8a>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034f2:	4973      	ldr	r1, [pc, #460]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80034f4:	69a0      	ldr	r0, [r4, #24]
 80034f6:	69ca      	ldr	r2, [r1, #28]
 80034f8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80034fc:	4290      	cmp	r0, r2
 80034fe:	d904      	bls.n	800350a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003500:	69ca      	ldr	r2, [r1, #28]
 8003502:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003506:	4302      	orrs	r2, r0
 8003508:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800350a:	069f      	lsls	r7, r3, #26
 800350c:	d50b      	bpl.n	8003526 <HAL_RCC_ClockConfig+0xa6>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800350e:	496c      	ldr	r1, [pc, #432]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 8003510:	69e0      	ldr	r0, [r4, #28]
 8003512:	6a0a      	ldr	r2, [r1, #32]
 8003514:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003518:	4290      	cmp	r0, r2
 800351a:	d904      	bls.n	8003526 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800351c:	6a0a      	ldr	r2, [r1, #32]
 800351e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003522:	4302      	orrs	r2, r0
 8003524:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003526:	079e      	lsls	r6, r3, #30
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003528:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	f140 80ab 	bpl.w	8003686 <HAL_RCC_ClockConfig+0x206>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003530:	4e63      	ldr	r6, [pc, #396]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 8003532:	68e0      	ldr	r0, [r4, #12]
 8003534:	69b1      	ldr	r1, [r6, #24]
 8003536:	f001 010f 	and.w	r1, r1, #15
 800353a:	4288      	cmp	r0, r1
 800353c:	d904      	bls.n	8003548 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353e:	69b1      	ldr	r1, [r6, #24]
 8003540:	f021 010f 	bic.w	r1, r1, #15
 8003544:	4301      	orrs	r1, r0
 8003546:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003548:	2a00      	cmp	r2, #0
 800354a:	d030      	beq.n	80035ae <HAL_RCC_ClockConfig+0x12e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800354c:	4a5c      	ldr	r2, [pc, #368]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 800354e:	68a1      	ldr	r1, [r4, #8]
 8003550:	6993      	ldr	r3, [r2, #24]
 8003552:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003556:	430b      	orrs	r3, r1
 8003558:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800355c:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355e:	2902      	cmp	r1, #2
 8003560:	f000 80a1 	beq.w	80036a6 <HAL_RCC_ClockConfig+0x226>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003564:	2903      	cmp	r1, #3
 8003566:	f000 8098 	beq.w	800369a <HAL_RCC_ClockConfig+0x21a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800356a:	2901      	cmp	r1, #1
 800356c:	f000 80a1 	beq.w	80036b2 <HAL_RCC_ClockConfig+0x232>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003570:	075f      	lsls	r7, r3, #29
 8003572:	d59c      	bpl.n	80034ae <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003574:	4e52      	ldr	r6, [pc, #328]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003576:	f241 3888 	movw	r8, #5000	@ 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800357a:	6933      	ldr	r3, [r6, #16]
 800357c:	f023 0307 	bic.w	r3, r3, #7
 8003580:	430b      	orrs	r3, r1
 8003582:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8003584:	f7fe fa5e 	bl	8001a44 <HAL_GetTick>
 8003588:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	e005      	b.n	8003598 <HAL_RCC_ClockConfig+0x118>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800358c:	f7fe fa5a 	bl	8001a44 <HAL_GetTick>
 8003590:	1bc0      	subs	r0, r0, r7
 8003592:	4540      	cmp	r0, r8
 8003594:	f200 808b 	bhi.w	80036ae <HAL_RCC_ClockConfig+0x22e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003598:	6933      	ldr	r3, [r6, #16]
 800359a:	6862      	ldr	r2, [r4, #4]
 800359c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035a0:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80035a4:	d1f2      	bne.n	800358c <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	079e      	lsls	r6, r3, #30
 80035aa:	d506      	bpl.n	80035ba <HAL_RCC_ClockConfig+0x13a>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035ac:	68e0      	ldr	r0, [r4, #12]
 80035ae:	4944      	ldr	r1, [pc, #272]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80035b0:	698a      	ldr	r2, [r1, #24]
 80035b2:	f002 020f 	and.w	r2, r2, #15
 80035b6:	4290      	cmp	r0, r2
 80035b8:	d369      	bcc.n	800368e <HAL_RCC_ClockConfig+0x20e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ba:	4940      	ldr	r1, [pc, #256]	@ (80036bc <HAL_RCC_ClockConfig+0x23c>)
 80035bc:	680a      	ldr	r2, [r1, #0]
 80035be:	f002 020f 	and.w	r2, r2, #15
 80035c2:	42aa      	cmp	r2, r5
 80035c4:	d90a      	bls.n	80035dc <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c6:	680a      	ldr	r2, [r1, #0]
 80035c8:	f022 020f 	bic.w	r2, r2, #15
 80035cc:	432a      	orrs	r2, r5
 80035ce:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d0:	680a      	ldr	r2, [r1, #0]
 80035d2:	f002 020f 	and.w	r2, r2, #15
 80035d6:	42aa      	cmp	r2, r5
 80035d8:	f47f af69 	bne.w	80034ae <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035dc:	0758      	lsls	r0, r3, #29
 80035de:	d50b      	bpl.n	80035f8 <HAL_RCC_ClockConfig+0x178>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035e0:	4937      	ldr	r1, [pc, #220]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80035e2:	6920      	ldr	r0, [r4, #16]
 80035e4:	698a      	ldr	r2, [r1, #24]
 80035e6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80035ea:	4290      	cmp	r0, r2
 80035ec:	d204      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x178>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035ee:	698a      	ldr	r2, [r1, #24]
 80035f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80035f4:	4302      	orrs	r2, r0
 80035f6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	0719      	lsls	r1, r3, #28
 80035fa:	d50b      	bpl.n	8003614 <HAL_RCC_ClockConfig+0x194>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035fc:	4930      	ldr	r1, [pc, #192]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 80035fe:	6960      	ldr	r0, [r4, #20]
 8003600:	69ca      	ldr	r2, [r1, #28]
 8003602:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8003606:	4290      	cmp	r0, r2
 8003608:	d204      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x194>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800360a:	69ca      	ldr	r2, [r1, #28]
 800360c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003610:	4302      	orrs	r2, r0
 8003612:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	06da      	lsls	r2, r3, #27
 8003616:	d50b      	bpl.n	8003630 <HAL_RCC_ClockConfig+0x1b0>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003618:	4929      	ldr	r1, [pc, #164]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 800361a:	69a0      	ldr	r0, [r4, #24]
 800361c:	69ca      	ldr	r2, [r1, #28]
 800361e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003622:	4290      	cmp	r0, r2
 8003624:	d204      	bcs.n	8003630 <HAL_RCC_ClockConfig+0x1b0>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003626:	69ca      	ldr	r2, [r1, #28]
 8003628:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800362c:	4302      	orrs	r2, r0
 800362e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003630:	069b      	lsls	r3, r3, #26
 8003632:	d50b      	bpl.n	800364c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003634:	4a22      	ldr	r2, [pc, #136]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 8003636:	69e1      	ldr	r1, [r4, #28]
 8003638:	6a13      	ldr	r3, [r2, #32]
 800363a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800363e:	4299      	cmp	r1, r3
 8003640:	d204      	bcs.n	800364c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003642:	6a13      	ldr	r3, [r2, #32]
 8003644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003648:	430b      	orrs	r3, r1
 800364a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800364c:	f7ff fef6 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8003650:	4a1b      	ldr	r2, [pc, #108]	@ (80036c0 <HAL_RCC_ClockConfig+0x240>)
 8003652:	4603      	mov	r3, r0
 8003654:	481b      	ldr	r0, [pc, #108]	@ (80036c4 <HAL_RCC_ClockConfig+0x244>)
 8003656:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003658:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800365a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800365e:	4d1a      	ldr	r5, [pc, #104]	@ (80036c8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003660:	f002 020f 	and.w	r2, r2, #15
 8003664:	4c19      	ldr	r4, [pc, #100]	@ (80036cc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003666:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003668:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800366a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 800366e:	4818      	ldr	r0, [pc, #96]	@ (80036d0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003670:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003674:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8003676:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8003678:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800367a:	40d3      	lsrs	r3, r2
 800367c:	6023      	str	r3, [r4, #0]
}
 800367e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8003682:	f7fd bf89 	b.w	8001598 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	2a00      	cmp	r2, #0
 8003688:	f47f af60 	bne.w	800354c <HAL_RCC_ClockConfig+0xcc>
 800368c:	e795      	b.n	80035ba <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368e:	698a      	ldr	r2, [r1, #24]
 8003690:	f022 020f 	bic.w	r2, r2, #15
 8003694:	4302      	orrs	r2, r0
 8003696:	618a      	str	r2, [r1, #24]
 8003698:	e78f      	b.n	80035ba <HAL_RCC_ClockConfig+0x13a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800369a:	019a      	lsls	r2, r3, #6
 800369c:	f53f af6a 	bmi.w	8003574 <HAL_RCC_ClockConfig+0xf4>
 80036a0:	e705      	b.n	80034ae <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80036a2:	2001      	movs	r0, #1
}
 80036a4:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036a6:	0398      	lsls	r0, r3, #14
 80036a8:	f53f af64 	bmi.w	8003574 <HAL_RCC_ClockConfig+0xf4>
 80036ac:	e6ff      	b.n	80034ae <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 80036ae:	2003      	movs	r0, #3
 80036b0:	e6fe      	b.n	80034b0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036b2:	05db      	lsls	r3, r3, #23
 80036b4:	f53f af5e 	bmi.w	8003574 <HAL_RCC_ClockConfig+0xf4>
 80036b8:	e6f9      	b.n	80034ae <HAL_RCC_ClockConfig+0x2e>
 80036ba:	bf00      	nop
 80036bc:	52002000 	.word	0x52002000
 80036c0:	58024400 	.word	0x58024400
 80036c4:	08011a4c 	.word	0x08011a4c
 80036c8:	24000004 	.word	0x24000004
 80036cc:	24000000 	.word	0x24000000
 80036d0:	2400000c 	.word	0x2400000c

080036d4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d4:	4a18      	ldr	r2, [pc, #96]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d8:	6913      	ldr	r3, [r2, #16]
 80036da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d024      	beq.n	800372c <HAL_RCC_GetHCLKFreq+0x58>
 80036e2:	2b18      	cmp	r3, #24
 80036e4:	d009      	beq.n	80036fa <HAL_RCC_GetHCLKFreq+0x26>
 80036e6:	bb1b      	cbnz	r3, 8003730 <HAL_RCC_GetHCLKFreq+0x5c>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036e8:	6813      	ldr	r3, [r2, #0]
 80036ea:	069b      	lsls	r3, r3, #26
 80036ec:	d522      	bpl.n	8003734 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	4b12      	ldr	r3, [pc, #72]	@ (800373c <HAL_RCC_GetHCLKFreq+0x68>)
 80036f2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80036f6:	40d3      	lsrs	r3, r2
 80036f8:	e002      	b.n	8003700 <HAL_RCC_GetHCLKFreq+0x2c>
 80036fa:	f7ff fba5 	bl	8002e48 <HAL_RCC_GetSysClockFreq.part.0>
 80036fe:	4603      	mov	r3, r0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003700:	490d      	ldr	r1, [pc, #52]	@ (8003738 <HAL_RCC_GetHCLKFreq+0x64>)
 8003702:	480f      	ldr	r0, [pc, #60]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x6c>)
 8003704:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003706:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003708:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800370c:	4c0d      	ldr	r4, [pc, #52]	@ (8003744 <HAL_RCC_GetHCLKFreq+0x70>)
 800370e:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003712:	4d0d      	ldr	r5, [pc, #52]	@ (8003748 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003714:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003716:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003718:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800371c:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003720:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003722:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8003726:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003728:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800372a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <HAL_RCC_GetHCLKFreq+0x78>)
 800372e:	e7e7      	b.n	8003700 <HAL_RCC_GetHCLKFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8003730:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <HAL_RCC_GetHCLKFreq+0x7c>)
 8003732:	e7e5      	b.n	8003700 <HAL_RCC_GetHCLKFreq+0x2c>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003734:	4b01      	ldr	r3, [pc, #4]	@ (800373c <HAL_RCC_GetHCLKFreq+0x68>)
 8003736:	e7e3      	b.n	8003700 <HAL_RCC_GetHCLKFreq+0x2c>
 8003738:	58024400 	.word	0x58024400
 800373c:	03d09000 	.word	0x03d09000
 8003740:	08011a4c 	.word	0x08011a4c
 8003744:	24000000 	.word	0x24000000
 8003748:	24000004 	.word	0x24000004
 800374c:	017d7840 	.word	0x017d7840
 8003750:	003d0900 	.word	0x003d0900

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003756:	f7ff ffbd 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800375a:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800375c:	4a05      	ldr	r2, [pc, #20]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003764:	5cd3      	ldrb	r3, [r2, r3]
 8003766:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800376a:	40d8      	lsrs	r0, r3
 800376c:	bd08      	pop	{r3, pc}
 800376e:	bf00      	nop
 8003770:	58024400 	.word	0x58024400
 8003774:	08011a4c 	.word	0x08011a4c

08003778 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800377a:	223f      	movs	r2, #63	@ 0x3f
{
 800377c:	b410      	push	{r4}
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800377e:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003780:	691a      	ldr	r2, [r3, #16]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003782:	4c12      	ldr	r4, [pc, #72]	@ (80037cc <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003784:	f002 0207 	and.w	r2, r2, #7
 8003788:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800378a:	699a      	ldr	r2, [r3, #24]
 800378c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8003790:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003792:	699a      	ldr	r2, [r3, #24]
 8003794:	f002 020f 	and.w	r2, r2, #15
 8003798:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80037a0:	6102      	str	r2, [r0, #16]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 80037a8:	6142      	str	r2, [r0, #20]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80037b0:	6182      	str	r2, [r0, #24]
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b8:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037ba:	6823      	ldr	r3, [r4, #0]
}
 80037bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	600b      	str	r3, [r1, #0]
}
 80037c6:	4770      	bx	lr
 80037c8:	58024400 	.word	0x58024400
 80037cc:	52002000 	.word	0x52002000

080037d0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d149      	bne.n	8003870 <HAL_TIM_Base_Start_IT+0x9c>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037dc:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037de:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e0:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_TIM_Base_Start_IT+0xa0>)
 80037e2:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80037e6:	bf18      	it	ne
 80037e8:	429a      	cmpne	r2, r3
{
 80037ea:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	4d21      	ldr	r5, [pc, #132]	@ (8003878 <HAL_TIM_Base_Start_IT+0xa4>)
 80037f4:	4c21      	ldr	r4, [pc, #132]	@ (800387c <HAL_TIM_Base_Start_IT+0xa8>)
 80037f6:	42aa      	cmp	r2, r5
 80037f8:	bf08      	it	eq
 80037fa:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80037fe:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003802:	481f      	ldr	r0, [pc, #124]	@ (8003880 <HAL_TIM_Base_Start_IT+0xac>)
 8003804:	42a2      	cmp	r2, r4
 8003806:	bf08      	it	eq
 8003808:	f043 0301 	orreq.w	r3, r3, #1
 800380c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003810:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	42a2      	cmp	r2, r4
 8003814:	bf08      	it	eq
 8003816:	f043 0301 	orreq.w	r3, r3, #1
 800381a:	f504 6440 	add.w	r4, r4, #3072	@ 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800381e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003822:	4282      	cmp	r2, r0
 8003824:	bf08      	it	eq
 8003826:	f043 0301 	orreq.w	r3, r3, #1
 800382a:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800382e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003830:	42a2      	cmp	r2, r4
 8003832:	bf08      	it	eq
 8003834:	f043 0301 	orreq.w	r3, r3, #1
 8003838:	4912      	ldr	r1, [pc, #72]	@ (8003884 <HAL_TIM_Base_Start_IT+0xb0>)
 800383a:	4282      	cmp	r2, r0
 800383c:	bf08      	it	eq
 800383e:	f043 0301 	orreq.w	r3, r3, #1
 8003842:	428a      	cmp	r2, r1
 8003844:	bf08      	it	eq
 8003846:	f043 0301 	orreq.w	r3, r3, #1
 800384a:	b913      	cbnz	r3, 8003852 <HAL_TIM_Base_Start_IT+0x7e>
 800384c:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <HAL_TIM_Base_Start_IT+0xb4>)
 800384e:	429a      	cmp	r2, r3
 8003850:	d107      	bne.n	8003862 <HAL_TIM_Base_Start_IT+0x8e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003852:	6891      	ldr	r1, [r2, #8]
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_TIM_Base_Start_IT+0xb8>)
 8003856:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	2b06      	cmp	r3, #6
 800385a:	d006      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x96>
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003860:	d003      	beq.n	800386a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003862:	6813      	ldr	r3, [r2, #0]
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6013      	str	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800386a:	2000      	movs	r0, #0
}
 800386c:	bc30      	pop	{r4, r5}
 800386e:	4770      	bx	lr
    return HAL_ERROR;
 8003870:	2001      	movs	r0, #1
}
 8003872:	4770      	bx	lr
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40010400 	.word	0x40010400
 8003884:	4000e000 	.word	0x4000e000
 8003888:	4000e400 	.word	0x4000e400
 800388c:	00010007 	.word	0x00010007

08003890 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop

080038a0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038a0:	6803      	ldr	r3, [r0, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	0791      	lsls	r1, r2, #30
{
 80038a6:	b510      	push	{r4, lr}
 80038a8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038aa:	d502      	bpl.n	80038b2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	0792      	lsls	r2, r2, #30
 80038b0:	d468      	bmi.n	8003984 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	0752      	lsls	r2, r2, #29
 80038b6:	d502      	bpl.n	80038be <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	0750      	lsls	r0, r2, #29
 80038bc:	d44f      	bmi.n	800395e <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	0711      	lsls	r1, r2, #28
 80038c2:	d502      	bpl.n	80038ca <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	0712      	lsls	r2, r2, #28
 80038c8:	d437      	bmi.n	800393a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	06d0      	lsls	r0, r2, #27
 80038ce:	d502      	bpl.n	80038d6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	06d1      	lsls	r1, r2, #27
 80038d4:	d41e      	bmi.n	8003914 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d6:	691a      	ldr	r2, [r3, #16]
 80038d8:	07d2      	lsls	r2, r2, #31
 80038da:	d502      	bpl.n	80038e2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	07d0      	lsls	r0, r2, #31
 80038e0:	d469      	bmi.n	80039b6 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	0611      	lsls	r1, r2, #24
 80038e6:	d502      	bpl.n	80038ee <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	0612      	lsls	r2, r2, #24
 80038ec:	d46b      	bmi.n	80039c6 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	05d0      	lsls	r0, r2, #23
 80038f2:	d502      	bpl.n	80038fa <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	0611      	lsls	r1, r2, #24
 80038f8:	d46d      	bmi.n	80039d6 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	0652      	lsls	r2, r2, #25
 80038fe:	d502      	bpl.n	8003906 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	0650      	lsls	r0, r2, #25
 8003904:	d46f      	bmi.n	80039e6 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	0691      	lsls	r1, r2, #26
 800390a:	d502      	bpl.n	8003912 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	0692      	lsls	r2, r2, #26
 8003910:	d449      	bmi.n	80039a6 <HAL_TIM_IRQHandler+0x106>
}
 8003912:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003914:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003918:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800391c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003926:	d16f      	bne.n	8003a08 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003928:	f7ff ffb2 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff ffb3 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003932:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	7722      	strb	r2, [r4, #28]
 8003938:	e7cd      	b.n	80038d6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800393a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800393e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003940:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003942:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003944:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	079b      	lsls	r3, r3, #30
 800394a:	d15a      	bne.n	8003a02 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800394c:	f7ff ffa0 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff ffa1 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003956:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003958:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	7722      	strb	r2, [r4, #28]
 800395c:	e7b5      	b.n	80038ca <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800395e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003962:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003964:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003966:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003968:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8003970:	d144      	bne.n	80039fc <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003972:	f7ff ff8d 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff ff8e 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800397e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003980:	7722      	strb	r2, [r4, #28]
 8003982:	e79c      	b.n	80038be <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003984:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003988:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800398a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800398c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	0799      	lsls	r1, r3, #30
 8003992:	d130      	bne.n	80039f6 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003994:	f7ff ff7c 	bl	8003890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff ff7d 	bl	8003898 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800399e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039a0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a2:	7722      	strb	r2, [r4, #28]
 80039a4:	e785      	b.n	80038b2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80039aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039ac:	611a      	str	r2, [r3, #16]
}
 80039ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80039b2:	f000 b8dd 	b.w	8003b70 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b6:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80039be:	f7fd fdc5 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	e78d      	b.n	80038e2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 80039ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039cc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80039ce:	f000 f8d1 	bl	8003b74 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	e78b      	b.n	80038ee <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 80039da:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80039de:	f000 f8cb 	bl	8003b78 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	e789      	b.n	80038fa <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 80039ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039ec:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80039ee:	f7ff ff55 	bl	800389c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039f2:	6823      	ldr	r3, [r4, #0]
 80039f4:	e787      	b.n	8003906 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 80039f6:	f7ff ff4d 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e7d0      	b.n	800399e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80039fc:	f7ff ff4a 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e7bc      	b.n	800397c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a02:	f7ff ff47 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003a06:	e7a6      	b.n	8003956 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003a08:	f7ff ff44 	bl	8003894 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e791      	b.n	8003932 <HAL_TIM_IRQHandler+0x92>
 8003a0e:	bf00      	nop

08003a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a12:	4a37      	ldr	r2, [pc, #220]	@ (8003af0 <TIM_Base_SetConfig+0xe0>)
 8003a14:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8003a18:	4c36      	ldr	r4, [pc, #216]	@ (8003af4 <TIM_Base_SetConfig+0xe4>)
 8003a1a:	eba0 0202 	sub.w	r2, r0, r2
  tmpcr1 = TIMx->CR1;
 8003a1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a20:	eba0 0e04 	sub.w	lr, r0, r4
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a24:	694f      	ldr	r7, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a26:	fab2 f282 	clz	r2, r2

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2a:	688e      	ldr	r6, [r1, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	fabe fe8e 	clz	lr, lr

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a30:	680d      	ldr	r5, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a32:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003a36:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8003a3a:	d027      	beq.n	8003a8c <TIM_Base_SetConfig+0x7c>
 8003a3c:	bb32      	cbnz	r2, 8003a8c <TIM_Base_SetConfig+0x7c>
 8003a3e:	f8df c0c8 	ldr.w	ip, [pc, #200]	@ 8003b08 <TIM_Base_SetConfig+0xf8>
 8003a42:	4560      	cmp	r0, ip
 8003a44:	d039      	beq.n	8003aba <TIM_Base_SetConfig+0xaa>
 8003a46:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003a4a:	4560      	cmp	r0, ip
 8003a4c:	d035      	beq.n	8003aba <TIM_Base_SetConfig+0xaa>
 8003a4e:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 8003a52:	4560      	cmp	r0, ip
 8003a54:	d01a      	beq.n	8003a8c <TIM_Base_SetConfig+0x7c>
 8003a56:	f1be 0f00 	cmp.w	lr, #0
 8003a5a:	d117      	bne.n	8003a8c <TIM_Base_SetConfig+0x7c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5c:	4a26      	ldr	r2, [pc, #152]	@ (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003a5e:	4290      	cmp	r0, r2
 8003a60:	d02f      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a66:	4290      	cmp	r0, r2
 8003a68:	d02b      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a6a:	4c24      	ldr	r4, [pc, #144]	@ (8003afc <TIM_Base_SetConfig+0xec>)
 8003a6c:	4a24      	ldr	r2, [pc, #144]	@ (8003b00 <TIM_Base_SetConfig+0xf0>)
 8003a6e:	4290      	cmp	r0, r2
 8003a70:	bf18      	it	ne
 8003a72:	42a0      	cmpne	r0, r4
 8003a74:	d025      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
 8003a76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003a7a:	4290      	cmp	r0, r2
 8003a7c:	d021      	beq.n	8003ac2 <TIM_Base_SetConfig+0xb2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a82:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003a84:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a86:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a88:	6285      	str	r5, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a8a:	e013      	b.n	8003ab4 <TIM_Base_SetConfig+0xa4>
    tmpcr1 |= Structure->CounterMode;
 8003a8c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003a92:	4323      	orrs	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a94:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aa0:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003aa2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa4:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aa6:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa8:	b912      	cbnz	r2, 8003ab0 <TIM_Base_SetConfig+0xa0>
 8003aaa:	f1be 0f00 	cmp.w	lr, #0
 8003aae:	d012      	beq.n	8003ad6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab0:	690b      	ldr	r3, [r1, #16]
 8003ab2:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	6143      	str	r3, [r0, #20]
}
 8003ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003abe:	684a      	ldr	r2, [r1, #4]
 8003ac0:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ace:	433b      	orrs	r3, r7
  TIMx->CR1 = tmpcr1;
 8003ad0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ad2:	62c6      	str	r6, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ad4:	6285      	str	r5, [r0, #40]	@ 0x28
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <TIM_Base_SetConfig+0xe8>)
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <TIM_Base_SetConfig+0xf4>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ada:	4298      	cmp	r0, r3
 8003adc:	bf18      	it	ne
 8003ade:	4290      	cmpne	r0, r2
 8003ae0:	d0e6      	beq.n	8003ab0 <TIM_Base_SetConfig+0xa0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ae6:	4298      	cmp	r0, r3
 8003ae8:	d0e2      	beq.n	8003ab0 <TIM_Base_SetConfig+0xa0>
  TIMx->EGR = TIM_EGR_UG;
 8003aea:	2301      	movs	r3, #1
 8003aec:	6143      	str	r3, [r0, #20]
}
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	40010000 	.word	0x40010000
 8003af4:	40010400 	.word	0x40010400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014800 	.word	0x40014800
 8003b00:	4000e000 	.word	0x4000e000
 8003b04:	40014400 	.word	0x40014400
 8003b08:	40000400 	.word	0x40000400

08003b0c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003b0c:	b370      	cbz	r0, 8003b6c <HAL_TIM_Base_Init+0x60>
{
 8003b0e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003b10:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003b14:	4604      	mov	r4, r0
 8003b16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003b1a:	b313      	cbz	r3, 8003b62 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	f851 0b04 	ldr.w	r0, [r1], #4
 8003b28:	f7ff ff72 	bl	8003a10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	2301      	movs	r3, #1
  return HAL_OK;
 8003b2e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b30:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003b38:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003b3c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003b40:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8003b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b4c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003b50:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8003b54:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8003b58:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003b5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 8003b60:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003b62:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003b66:	f7ff fe33 	bl	80037d0 <HAL_TIM_Base_MspInit>
 8003b6a:	e7d7      	b.n	8003b1c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003b6c:	2001      	movs	r0, #1
}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop

08003b74 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop

08003b78 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop

08003b7c <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop

08003b80 <MX_LWIP_Init>:
{
 8003b80:	b570      	push	{r4, r5, r6, lr}
  NETMASK_ADDRESS[0] = 255;
 8003b82:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8003b86:	4d26      	ldr	r5, [pc, #152]	@ (8003c20 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 8003b88:	2100      	movs	r1, #0
{
 8003b8a:	b084      	sub	sp, #16
  IP_ADDRESS[0] = 192;
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <MX_LWIP_Init+0xa4>)
  GATEWAY_ADDRESS[0] = 192;
 8003b8e:	4c26      	ldr	r4, [pc, #152]	@ (8003c28 <MX_LWIP_Init+0xa8>)
	tcpip_init(tcpip_init_done, arg);
 8003b90:	4608      	mov	r0, r1
  IP_ADDRESS[0] = 192;
 8003b92:	4e26      	ldr	r6, [pc, #152]	@ (8003c2c <MX_LWIP_Init+0xac>)
  NETMASK_ADDRESS[0] = 255;
 8003b94:	602b      	str	r3, [r5, #0]
  GATEWAY_ADDRESS[0] = 192;
 8003b96:	4b26      	ldr	r3, [pc, #152]	@ (8003c30 <MX_LWIP_Init+0xb0>)
  IP_ADDRESS[0] = 192;
 8003b98:	6032      	str	r2, [r6, #0]
  GATEWAY_ADDRESS[0] = 192;
 8003b9a:	6023      	str	r3, [r4, #0]
	tcpip_init(tcpip_init_done, arg);
 8003b9c:	f003 f84a 	bl	8006c34 <tcpip_init>
	LOCK_TCPIP_CORE();
 8003ba0:	f000 fb1a 	bl	80041d8 <sys_lock_tcpip_core>
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	4a23      	ldr	r2, [pc, #140]	@ (8003c34 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003ba8:	6820      	ldr	r0, [r4, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003baa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bac:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <MX_LWIP_Init+0xb8>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003bae:	6836      	ldr	r6, [r6, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003bb0:	6018      	str	r0, [r3, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003bb2:	4922      	ldr	r1, [pc, #136]	@ (8003c3c <MX_LWIP_Init+0xbc>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003bb4:	4822      	ldr	r0, [pc, #136]	@ (8003c40 <MX_LWIP_Init+0xc0>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003bb6:	600e      	str	r6, [r1, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003bb8:	9002      	str	r0, [sp, #8]
 8003bba:	4822      	ldr	r0, [pc, #136]	@ (8003c44 <MX_LWIP_Init+0xc4>)
 8003bbc:	4c22      	ldr	r4, [pc, #136]	@ (8003c48 <MX_LWIP_Init+0xc8>)
 8003bbe:	9001      	str	r0, [sp, #4]
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	9000      	str	r0, [sp, #0]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f003 fd0b 	bl	80075e0 <netif_add>
  netif_set_default(&gnetif);
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f003 fdb8 	bl	8007740 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8003bd0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
    netif_set_up(&gnetif);
 8003bd4:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003bd6:	075b      	lsls	r3, r3, #29
 8003bd8:	d51e      	bpl.n	8003c18 <MX_LWIP_Init+0x98>
    netif_set_up(&gnetif);
 8003bda:	f003 fdbb 	bl	8007754 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003bde:	491b      	ldr	r1, [pc, #108]	@ (8003c4c <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 8003be0:	2410      	movs	r4, #16
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003be2:	4819      	ldr	r0, [pc, #100]	@ (8003c48 <MX_LWIP_Init+0xc8>)
 8003be4:	f003 fe4a 	bl	800787c <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003be8:	4b19      	ldr	r3, [pc, #100]	@ (8003c50 <MX_LWIP_Init+0xd0>)
 8003bea:	2220      	movs	r2, #32
 8003bec:	2100      	movs	r1, #0
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f00a fc1e 	bl	800e430 <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003bf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  attributes.name = "EthLink";
 8003bf8:	1f02      	subs	r2, r0, #4
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003bfa:	4603      	mov	r3, r0
  attributes.name = "EthLink";
 8003bfc:	4815      	ldr	r0, [pc, #84]	@ (8003c54 <MX_LWIP_Init+0xd4>)
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003bfe:	6151      	str	r1, [r2, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003c00:	4911      	ldr	r1, [pc, #68]	@ (8003c48 <MX_LWIP_Init+0xc8>)
  attributes.name = "EthLink";
 8003c02:	f843 0c04 	str.w	r0, [r3, #-4]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003c06:	4814      	ldr	r0, [pc, #80]	@ (8003c58 <MX_LWIP_Init+0xd8>)
  attributes.priority = osPriorityBelowNormal;
 8003c08:	6194      	str	r4, [r2, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003c0a:	f000 fbe9 	bl	80043e0 <osThreadNew>
}
 8003c0e:	b004      	add	sp, #16
 8003c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  UNLOCK_TCPIP_CORE();
 8003c14:	f000 bb5e 	b.w	80042d4 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 8003c18:	f003 fdc0 	bl	800779c <netif_set_down>
 8003c1c:	e7df      	b.n	8003bde <MX_LWIP_Init+0x5e>
 8003c1e:	bf00      	nop
 8003c20:	24000130 	.word	0x24000130
 8003c24:	014ba8c0 	.word	0x014ba8c0
 8003c28:	2400012c 	.word	0x2400012c
 8003c2c:	24000134 	.word	0x24000134
 8003c30:	0164a8c0 	.word	0x0164a8c0
 8003c34:	2400013c 	.word	0x2400013c
 8003c38:	24000138 	.word	0x24000138
 8003c3c:	24000140 	.word	0x24000140
 8003c40:	08006bb9 	.word	0x08006bb9
 8003c44:	08003e1d 	.word	0x08003e1d
 8003c48:	24000144 	.word	0x24000144
 8003c4c:	08003b7d 	.word	0x08003b7d
 8003c50:	2400010c 	.word	0x2400010c
 8003c54:	0800f450 	.word	0x0800f450
 8003c58:	080041f5 	.word	0x080041f5

08003c5c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	4770      	bx	lr

08003c60 <low_level_output>:
{
 8003c60:	b530      	push	{r4, r5, lr}
 8003c62:	b08d      	sub	sp, #52	@ 0x34
 8003c64:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003c66:	2230      	movs	r2, #48	@ 0x30
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4668      	mov	r0, sp
 8003c6c:	f00a fbe0 	bl	800e430 <memset>
  for(q = p; q != NULL; q = q->next)
 8003c70:	b31c      	cbz	r4, 8003cba <low_level_output+0x5a>
    Txbuffer[i].buffer = q->payload;
 8003c72:	6861      	ldr	r1, [r4, #4]
    Txbuffer[i].len = q->len;
 8003c74:	8963      	ldrh	r3, [r4, #10]
    if(q->next == NULL)
 8003c76:	6822      	ldr	r2, [r4, #0]
    Txbuffer[i].len = q->len;
 8003c78:	e9cd 1300 	strd	r1, r3, [sp]
    if(q->next == NULL)
 8003c7c:	b1a2      	cbz	r2, 8003ca8 <low_level_output+0x48>
    if(i >= ETH_TX_DESC_CNT)
 8003c7e:	ab03      	add	r3, sp, #12
    i++;
 8003c80:	f04f 0c01 	mov.w	ip, #1
    Txbuffer[i].buffer = q->payload;
 8003c84:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8003c86:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 8003c88:	6812      	ldr	r2, [r2, #0]
      Txbuffer[i-1].next = &Txbuffer[i];
 8003c8a:	f843 3c04 	str.w	r3, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 8003c8e:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8003c90:	e943 0103 	strd	r0, r1, [r3, #-12]
    if(q->next == NULL)
 8003c94:	b14a      	cbz	r2, 8003caa <low_level_output+0x4a>
    i++;
 8003c96:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8003c9a:	f1bc 0f04 	cmp.w	ip, #4
 8003c9e:	d1f1      	bne.n	8003c84 <low_level_output+0x24>
      return ERR_IF;
 8003ca0:	f06f 000b 	mvn.w	r0, #11
}
 8003ca4:	b00d      	add	sp, #52	@ 0x34
 8003ca6:	bd30      	pop	{r4, r5, pc}
    if(q->next == NULL)
 8003ca8:	4694      	mov	ip, r2
      Txbuffer[i].next = NULL;
 8003caa:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8003cae:	aa0c      	add	r2, sp, #48	@ 0x30
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8003cb6:	f84c 3c28 	str.w	r3, [ip, #-40]
  TxConfig.Length = p->tot_len;
 8003cba:	4d0e      	ldr	r5, [pc, #56]	@ (8003cf4 <low_level_output+0x94>)
  pbuf_ref(p);
 8003cbc:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8003cbe:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 8003cc0:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 8003cc4:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 8003cc6:	636c      	str	r4, [r5, #52]	@ 0x34
  pbuf_ref(p);
 8003cc8:	f004 f868 	bl	8007d9c <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4d0a      	ldr	r5, [pc, #40]	@ (8003cf8 <low_level_output+0x98>)
 8003cd0:	480a      	ldr	r0, [pc, #40]	@ (8003cfc <low_level_output+0x9c>)
 8003cd2:	f7fe fb05 	bl	80022e0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003cd6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cda:	6828      	ldr	r0, [r5, #0]
 8003cdc:	f000 fcc0 	bl	8004660 <osSemaphoreAcquire>
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d1f7      	bne.n	8003cd6 <low_level_output+0x76>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003ce6:	4805      	ldr	r0, [pc, #20]	@ (8003cfc <low_level_output+0x9c>)
 8003ce8:	f7fe fbb4 	bl	8002454 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003cec:	4620      	mov	r0, r4
}
 8003cee:	b00d      	add	sp, #52	@ 0x34
 8003cf0:	bd30      	pop	{r4, r5, pc}
 8003cf2:	bf00      	nop
 8003cf4:	240001a0 	.word	0x240001a0
 8003cf8:	24000288 	.word	0x24000288
 8003cfc:	240001d8 	.word	0x240001d8

08003d00 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8003d00:	f7fd bea0 	b.w	8001a44 <HAL_GetTick>

08003d04 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 8003d04:	4802      	ldr	r0, [pc, #8]	@ (8003d10 <ETH_PHY_IO_Init+0xc>)
{
 8003d06:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003d08:	f7fe fdc0 	bl	800288c <HAL_ETH_SetMDIOClockRange>
}
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	bd08      	pop	{r3, pc}
 8003d10:	240001d8 	.word	0x240001d8

08003d14 <ETH_PHY_IO_ReadReg>:
{
 8003d14:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003d16:	4806      	ldr	r0, [pc, #24]	@ (8003d30 <ETH_PHY_IO_ReadReg+0x1c>)
{
 8003d18:	b508      	push	{r3, lr}
 8003d1a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003d1c:	460a      	mov	r2, r1
 8003d1e:	4661      	mov	r1, ip
 8003d20:	f7fe fc7c 	bl	800261c <HAL_ETH_ReadPHYRegister>
 8003d24:	3800      	subs	r0, #0
 8003d26:	bf18      	it	ne
 8003d28:	2001      	movne	r0, #1
}
 8003d2a:	4240      	negs	r0, r0
 8003d2c:	bd08      	pop	{r3, pc}
 8003d2e:	bf00      	nop
 8003d30:	240001d8 	.word	0x240001d8

08003d34 <ETH_PHY_IO_WriteReg>:
{
 8003d34:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003d36:	4806      	ldr	r0, [pc, #24]	@ (8003d50 <ETH_PHY_IO_WriteReg+0x1c>)
{
 8003d38:	b508      	push	{r3, lr}
 8003d3a:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	4661      	mov	r1, ip
 8003d40:	f7fe fc9a 	bl	8002678 <HAL_ETH_WritePHYRegister>
 8003d44:	3800      	subs	r0, #0
 8003d46:	bf18      	it	ne
 8003d48:	2001      	movne	r0, #1
}
 8003d4a:	4240      	negs	r0, r0
 8003d4c:	bd08      	pop	{r3, pc}
 8003d4e:	bf00      	nop
 8003d50:	240001d8 	.word	0x240001d8

08003d54 <pbuf_free_custom>:
{
 8003d54:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003d56:	4808      	ldr	r0, [pc, #32]	@ (8003d78 <pbuf_free_custom+0x24>)
{
 8003d58:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003d5a:	f003 fb6d 	bl	8007438 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003d5e:	4b07      	ldr	r3, [pc, #28]	@ (8003d7c <pbuf_free_custom+0x28>)
 8003d60:	781a      	ldrb	r2, [r3, #0]
 8003d62:	2a01      	cmp	r2, #1
 8003d64:	d000      	beq.n	8003d68 <pbuf_free_custom+0x14>
}
 8003d66:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 8003d68:	4905      	ldr	r1, [pc, #20]	@ (8003d80 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 8003d6a:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8003d6c:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8003d6e:	701a      	strb	r2, [r3, #0]
}
 8003d70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8003d74:	f000 bca6 	b.w	80046c4 <osSemaphoreRelease>
 8003d78:	08011a94 	.word	0x08011a94
 8003d7c:	24000290 	.word	0x24000290
 8003d80:	2400028c 	.word	0x2400028c

08003d84 <ethernetif_input>:
{
 8003d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d88:	4c14      	ldr	r4, [pc, #80]	@ (8003ddc <ethernetif_input+0x58>)
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	f8df 8050 	ldr.w	r8, [pc, #80]	@ 8003de0 <ethernetif_input+0x5c>
 8003d90:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8003d92:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003d94:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8003de4 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003d9c:	6820      	ldr	r0, [r4, #0]
 8003d9e:	f000 fc5f 	bl	8004660 <osSemaphoreAcquire>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d1f8      	bne.n	8003d98 <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003da6:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003daa:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f3      	bne.n	8003d98 <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003db0:	a901      	add	r1, sp, #4
 8003db2:	4648      	mov	r0, r9
 8003db4:	f7fe fac4 	bl	8002340 <HAL_ETH_ReadData>
  return p;
 8003db8:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 8003dba:	4631      	mov	r1, r6
 8003dbc:	4628      	mov	r0, r5
        if (p != NULL)
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	d0ea      	beq.n	8003d98 <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8003dc2:	6933      	ldr	r3, [r6, #16]
 8003dc4:	4798      	blx	r3
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d0ed      	beq.n	8003da6 <ethernetif_input+0x22>
            pbuf_free(p);
 8003dca:	4628      	mov	r0, r5
 8003dcc:	f003 fe68 	bl	8007aa0 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003dd0:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003dd4:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1de      	bne.n	8003d98 <ethernetif_input+0x14>
 8003dda:	e7e9      	b.n	8003db0 <ethernetif_input+0x2c>
 8003ddc:	2400028c 	.word	0x2400028c
 8003de0:	24000290 	.word	0x24000290
 8003de4:	240001d8 	.word	0x240001d8

08003de8 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8003de8:	4b01      	ldr	r3, [pc, #4]	@ (8003df0 <HAL_ETH_RxCpltCallback+0x8>)
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	f000 bc6a 	b.w	80046c4 <osSemaphoreRelease>
 8003df0:	2400028c 	.word	0x2400028c

08003df4 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8003df4:	4b01      	ldr	r3, [pc, #4]	@ (8003dfc <HAL_ETH_TxCpltCallback+0x8>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	f000 bc64 	b.w	80046c4 <osSemaphoreRelease>
 8003dfc:	24000288 	.word	0x24000288

08003e00 <HAL_ETH_ErrorCallback>:
{
 8003e00:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8003e02:	f7fe fe9d 	bl	8002b40 <HAL_ETH_GetDMAError>
 8003e06:	0603      	lsls	r3, r0, #24
 8003e08:	d400      	bmi.n	8003e0c <HAL_ETH_ErrorCallback+0xc>
}
 8003e0a:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8003e0c:	4b02      	ldr	r3, [pc, #8]	@ (8003e18 <HAL_ETH_ErrorCallback+0x18>)
 8003e0e:	6818      	ldr	r0, [r3, #0]
}
 8003e10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8003e14:	f000 bc56 	b.w	80046c4 <osSemaphoreRelease>
 8003e18:	2400028c 	.word	0x2400028c

08003e1c <ethernetif_init>:
{
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e20:	4604      	mov	r4, r0
{
 8003e22:	b0a4      	sub	sp, #144	@ 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e24:	2800      	cmp	r0, #0
 8003e26:	f000 80b4 	beq.w	8003f92 <ethernetif_init+0x176>
  netif->linkoutput = low_level_output;
 8003e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8003fa4 <ethernetif_init+0x188>)
  netif->name[0] = IFNAME0;
 8003e2c:	f247 4173 	movw	r1, #29811	@ 0x7473
  netif->output = etharp_output;
 8003e30:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa8 <ethernetif_init+0x18c>)
  ETH_MACConfigTypeDef MACConf = {0};
 8003e32:	a80b      	add	r0, sp, #44	@ 0x2c
  netif->name[0] = IFNAME0;
 8003e34:	85e1      	strh	r1, [r4, #46]	@ 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 8003e36:	2100      	movs	r1, #0
  netif->output = etharp_output;
 8003e38:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 8003e3a:	2264      	movs	r2, #100	@ 0x64
  netif->linkoutput = low_level_output;
 8003e3c:	61a3      	str	r3, [r4, #24]
  MACAddr[4] = 0x00;
 8003e3e:	2600      	movs	r6, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003e40:	f00a faf6 	bl	800e430 <memset>
  MACAddr[0] = 0x00;
 8003e44:	4b59      	ldr	r3, [pc, #356]	@ (8003fac <ethernetif_init+0x190>)
  heth.Instance = ETH;
 8003e46:	4d5a      	ldr	r5, [pc, #360]	@ (8003fb0 <ethernetif_init+0x194>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003e48:	2701      	movs	r7, #1
  MACAddr[0] = 0x00;
 8003e4a:	9300      	str	r3, [sp, #0]
  heth.Init.TxDesc = DMATxDscrTab;
 8003e4c:	4b59      	ldr	r3, [pc, #356]	@ (8003fb4 <ethernetif_init+0x198>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e4e:	4628      	mov	r0, r5
  heth.Instance = ETH;
 8003e50:	4a59      	ldr	r2, [pc, #356]	@ (8003fb8 <ethernetif_init+0x19c>)
  heth.Init.TxDesc = DMATxDscrTab;
 8003e52:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003e54:	4b59      	ldr	r3, [pc, #356]	@ (8003fbc <ethernetif_init+0x1a0>)
  heth.Instance = ETH;
 8003e56:	602a      	str	r2, [r5, #0]
  heth.Init.RxDesc = DMARxDscrTab;
 8003e58:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 8003e5a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
  MACAddr[4] = 0x00;
 8003e5e:	f8ad 6004 	strh.w	r6, [sp, #4]
  heth.Init.RxBuffLen = 1536;
 8003e62:	616b      	str	r3, [r5, #20]
  heth.Init.MACAddr = &MACAddr[0];
 8003e64:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003e68:	722f      	strb	r7, [r5, #8]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e6a:	f7fe fd51 	bl	8002910 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003e6e:	4b54      	ldr	r3, [pc, #336]	@ (8003fc0 <ethernetif_init+0x1a4>)
 8003e70:	4631      	mov	r1, r6
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e72:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003e74:	2234      	movs	r2, #52	@ 0x34
 8003e76:	4618      	mov	r0, r3
 8003e78:	f00a fada 	bl	800e430 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003e7c:	2221      	movs	r2, #33	@ 0x21
 8003e7e:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003e82:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e86:	6102      	str	r2, [r0, #16]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003e88:	484e      	ldr	r0, [pc, #312]	@ (8003fc4 <ethernetif_init+0x1a8>)
 8003e8a:	f003 fa5d 	bl	8007348 <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e8e:	686b      	ldr	r3, [r5, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e90:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003e92:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e94:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	f884 2026 	strb.w	r2, [r4, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e9e:	785a      	ldrb	r2, [r3, #1]
 8003ea0:	f884 2027 	strb.w	r2, [r4, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ea4:	789a      	ldrb	r2, [r3, #2]
 8003ea6:	f884 2028 	strb.w	r2, [r4, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003eaa:	78da      	ldrb	r2, [r3, #3]
 8003eac:	f884 2029 	strb.w	r2, [r4, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003eb0:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003eb2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003eb6:	f884 102a 	strb.w	r1, [r4, #42]	@ 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003eba:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ebc:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003ebe:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ec2:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8003ec6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003eca:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ece:	4632      	mov	r2, r6
  netif->mtu = ETH_MAX_PAYLOAD;
 8003ed0:	84a3      	strh	r3, [r4, #36]	@ 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ed2:	f000 fb6f 	bl	80045b4 <osSemaphoreNew>
 8003ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc8 <ethernetif_init+0x1ac>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003edc:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ede:	4638      	mov	r0, r7
 8003ee0:	f000 fb68 	bl	80045b4 <osSemaphoreNew>
 8003ee4:	4b39      	ldr	r3, [pc, #228]	@ (8003fcc <ethernetif_init+0x1b0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003ee6:	4631      	mov	r1, r6
 8003ee8:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003eea:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003eec:	a803      	add	r0, sp, #12
 8003eee:	f00a fa9f 	bl	800e430 <memset>
  attributes.name = "EthIf";
 8003ef2:	4b37      	ldr	r3, [pc, #220]	@ (8003fd0 <ethernetif_init+0x1b4>)
  attributes.priority = osPriorityRealtime;
 8003ef4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8003ef8:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8003efa:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8003efc:	2330      	movs	r3, #48	@ 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8003efe:	4621      	mov	r1, r4
  attributes.priority = osPriorityRealtime;
 8003f00:	e9cd 0307 	strd	r0, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003f04:	4833      	ldr	r0, [pc, #204]	@ (8003fd4 <ethernetif_init+0x1b8>)
 8003f06:	f000 fa6b 	bl	80043e0 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003f0a:	4933      	ldr	r1, [pc, #204]	@ (8003fd8 <ethernetif_init+0x1bc>)
 8003f0c:	4833      	ldr	r0, [pc, #204]	@ (8003fdc <ethernetif_init+0x1c0>)
 8003f0e:	f7fd fc8b 	bl	8001828 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003f12:	4832      	ldr	r0, [pc, #200]	@ (8003fdc <ethernetif_init+0x1c0>)
 8003f14:	f7fd fca2 	bl	800185c <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003f18:	f1b8 0f00 	cmp.w	r8, #0
 8003f1c:	d124      	bne.n	8003f68 <ethernetif_init+0x14c>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003f1e:	482f      	ldr	r0, [pc, #188]	@ (8003fdc <ethernetif_init+0x1c0>)
 8003f20:	f7fd fd06 	bl	8001930 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003f24:	42b8      	cmp	r0, r7
 8003f26:	dd2a      	ble.n	8003f7e <ethernetif_init+0x162>
      switch (PHYLinkState)
 8003f28:	3803      	subs	r0, #3
 8003f2a:	2802      	cmp	r0, #2
 8003f2c:	d822      	bhi.n	8003f74 <ethernetif_init+0x158>
 8003f2e:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe0 <ethernetif_init+0x1c4>)
 8003f30:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe4 <ethernetif_init+0x1c8>)
 8003f32:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8003f36:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003f3a:	a90b      	add	r1, sp, #44	@ 0x2c
 8003f3c:	481c      	ldr	r0, [pc, #112]	@ (8003fb0 <ethernetif_init+0x194>)
 8003f3e:	f7fe fbcd 	bl	80026dc <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003f42:	a90b      	add	r1, sp, #44	@ 0x2c
 8003f44:	481a      	ldr	r0, [pc, #104]	@ (8003fb0 <ethernetif_init+0x194>)
    MACConf.Speed = speed;
 8003f46:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003f4a:	f7fe fc91 	bl	8002870 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003f4e:	4818      	ldr	r0, [pc, #96]	@ (8003fb0 <ethernetif_init+0x194>)
 8003f50:	f7fe f932 	bl	80021b8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003f54:	4620      	mov	r0, r4
 8003f56:	f003 fbfd 	bl	8007754 <netif_set_up>
    netif_set_link_up(netif);
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f003 fc42 	bl	80077e4 <netif_set_link_up>
}
 8003f60:	2000      	movs	r0, #0
 8003f62:	b024      	add	sp, #144	@ 0x90
 8003f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Error_Handler();
 8003f68:	f7fd fafa 	bl	8001560 <Error_Handler>
}
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	b024      	add	sp, #144	@ 0x90
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      switch (PHYLinkState)
 8003f74:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
 8003f78:	f44f 5600 	mov.w	r6, #8192	@ 0x2000
 8003f7c:	e7dd      	b.n	8003f3a <ethernetif_init+0x11e>
      netif_set_link_down(netif);
 8003f7e:	4620      	mov	r0, r4
 8003f80:	f003 fc58 	bl	8007834 <netif_set_link_down>
      netif_set_down(netif);
 8003f84:	4620      	mov	r0, r4
 8003f86:	f003 fc09 	bl	800779c <netif_set_down>
}
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	b024      	add	sp, #144	@ 0x90
 8003f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <ethernetif_init+0x1cc>)
 8003f94:	f240 2217 	movw	r2, #535	@ 0x217
 8003f98:	4914      	ldr	r1, [pc, #80]	@ (8003fec <ethernetif_init+0x1d0>)
 8003f9a:	4815      	ldr	r0, [pc, #84]	@ (8003ff0 <ethernetif_init+0x1d4>)
 8003f9c:	f00a fa26 	bl	800e3ec <iprintf>
 8003fa0:	e743      	b.n	8003e2a <ethernetif_init+0xe>
 8003fa2:	bf00      	nop
 8003fa4:	08003c61 	.word	0x08003c61
 8003fa8:	0800cfbd 	.word	0x0800cfbd
 8003fac:	00e18000 	.word	0x00e18000
 8003fb0:	240001d8 	.word	0x240001d8
 8003fb4:	30000100 	.word	0x30000100
 8003fb8:	40028000 	.word	0x40028000
 8003fbc:	30000000 	.word	0x30000000
 8003fc0:	240001a4 	.word	0x240001a4
 8003fc4:	08011a94 	.word	0x08011a94
 8003fc8:	2400028c 	.word	0x2400028c
 8003fcc:	24000288 	.word	0x24000288
 8003fd0:	0800f484 	.word	0x0800f484
 8003fd4:	08003d85 	.word	0x08003d85
 8003fd8:	24000010 	.word	0x24000010
 8003fdc:	24000180 	.word	0x24000180
 8003fe0:	08011a88 	.word	0x08011a88
 8003fe4:	08011a7c 	.word	0x08011a7c
 8003fe8:	0800f458 	.word	0x0800f458
 8003fec:	0800f474 	.word	0x0800f474
 8003ff0:	0800f2f8 	.word	0x0800f2f8

08003ff4 <sys_now>:
  return HAL_GetTick();
 8003ff4:	f7fd bd26 	b.w	8001a44 <HAL_GetTick>

08003ff8 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8003ff8:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <HAL_ETH_MspInit+0x120>)
 8003ffa:	6802      	ldr	r2, [r0, #0]
{
 8003ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8003ffe:	429a      	cmp	r2, r3
{
 8004000:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004002:	f04f 0400 	mov.w	r4, #0
 8004006:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800400a:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800400e:	940a      	str	r4, [sp, #40]	@ 0x28
  if(ethHandle->Instance==ETH)
 8004010:	d001      	beq.n	8004016 <HAL_ETH_MspInit+0x1e>
}
 8004012:	b00d      	add	sp, #52	@ 0x34
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004016:	4b41      	ldr	r3, [pc, #260]	@ (800411c <HAL_ETH_MspInit+0x124>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004018:	250b      	movs	r5, #11
 800401a:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401c:	4840      	ldr	r0, [pc, #256]	@ (8004120 <HAL_ETH_MspInit+0x128>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800401e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2602      	movs	r6, #2
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004024:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004028:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800402c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004030:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8004034:	9200      	str	r2, [sp, #0]
 8004036:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004038:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 800403c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004040:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8004044:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004048:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 800404c:	9201      	str	r2, [sp, #4]
 800404e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004050:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004054:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004058:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 800405c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004060:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004064:	9202      	str	r2, [sp, #8]
 8004066:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004068:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800406c:	f042 0204 	orr.w	r2, r2, #4
 8004070:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8004074:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004078:	f002 0204 	and.w	r2, r2, #4
 800407c:	9203      	str	r2, [sp, #12]
 800407e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004080:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004084:	f042 0202 	orr.w	r2, r2, #2
 8004088:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800408c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8004090:	f002 0202 	and.w	r2, r2, #2
 8004094:	9204      	str	r2, [sp, #16]
 8004096:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004098:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 80040a4:	2232      	movs	r2, #50	@ 0x32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 80040b0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b2:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040b4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 80040b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ba:	e9cd 7509 	strd	r7, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040be:	f7fe fd43 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80040c2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040c6:	a906      	add	r1, sp, #24
 80040c8:	4816      	ldr	r0, [pc, #88]	@ (8004124 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80040ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040cc:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ce:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d0:	e9cd 4708 	strd	r4, r7, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d4:	f7fe fd38 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80040d8:	2386      	movs	r3, #134	@ 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040da:	a906      	add	r1, sp, #24
 80040dc:	4812      	ldr	r0, [pc, #72]	@ (8004128 <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 80040de:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e0:	9709      	str	r7, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040e2:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	e9cd 6407 	strd	r6, r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e8:	f7fe fd2e 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_RX_ER_Pin;
 80040ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(RMII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80040f0:	a906      	add	r1, sp, #24
 80040f2:	480c      	ldr	r0, [pc, #48]	@ (8004124 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = RMII_RX_ER_Pin;
 80040f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040f8:	950a      	str	r5, [sp, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(RMII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 80040fe:	f7fe fd23 	bl	8002b48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004102:	4622      	mov	r2, r4
 8004104:	2105      	movs	r1, #5
 8004106:	203d      	movs	r0, #61	@ 0x3d
 8004108:	f7fd fcc8 	bl	8001a9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800410c:	203d      	movs	r0, #61	@ 0x3d
 800410e:	f7fd fd01 	bl	8001b14 <HAL_NVIC_EnableIRQ>
}
 8004112:	b00d      	add	sp, #52	@ 0x34
 8004114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004116:	bf00      	nop
 8004118:	40028000 	.word	0x40028000
 800411c:	58024400 	.word	0x58024400
 8004120:	58020800 	.word	0x58020800
 8004124:	58020400 	.word	0x58020400
 8004128:	58020000 	.word	0x58020000

0800412c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800412c:	b530      	push	{r4, r5, lr}
 800412e:	4604      	mov	r4, r0
 8004130:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004132:	480d      	ldr	r0, [pc, #52]	@ (8004168 <HAL_ETH_RxAllocateCallback+0x3c>)
 8004134:	f003 f950 	bl	80073d8 <memp_malloc_pool>
  if (p)
 8004138:	4603      	mov	r3, r0
 800413a:	b178      	cbz	r0, 800415c <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800413c:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8004140:	4a0a      	ldr	r2, [pc, #40]	@ (800416c <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004142:	2100      	movs	r1, #0
 8004144:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004148:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 800414a:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800414c:	2241      	movs	r2, #65	@ 0x41
 800414e:	9001      	str	r0, [sp, #4]
 8004150:	4608      	mov	r0, r1
 8004152:	9500      	str	r5, [sp, #0]
 8004154:	f003 fbf2 	bl	800793c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004158:	b003      	add	sp, #12
 800415a:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_ETH_RxAllocateCallback+0x44>)
 800415e:	2101      	movs	r1, #1
    *buff = NULL;
 8004160:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8004162:	7011      	strb	r1, [r2, #0]
}
 8004164:	b003      	add	sp, #12
 8004166:	bd30      	pop	{r4, r5, pc}
 8004168:	08011a94 	.word	0x08011a94
 800416c:	08003d55 	.word	0x08003d55
 8004170:	24000290 	.word	0x24000290

08004174 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004174:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8004176:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004178:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 800417c:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8004180:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8004184:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8004188:	6805      	ldr	r5, [r0, #0]
 800418a:	b1f5      	cbz	r5, 80041ca <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800418c:	680d      	ldr	r5, [r1, #0]
 800418e:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8004190:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004192:	6801      	ldr	r1, [r0, #0]
 8004194:	b129      	cbz	r1, 80041a2 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8004196:	8908      	ldrh	r0, [r1, #8]
 8004198:	4418      	add	r0, r3
 800419a:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800419c:	6809      	ldr	r1, [r1, #0]
 800419e:	2900      	cmp	r1, #0
 80041a0:	d1f9      	bne.n	8004196 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80041a2:	b183      	cbz	r3, 80041c6 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80041a4:	f002 011f 	and.w	r1, r2, #31
 80041a8:	4419      	add	r1, r3
 80041aa:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80041ae:	4808      	ldr	r0, [pc, #32]	@ (80041d0 <HAL_ETH_RxLinkCallback+0x5c>)
 80041b0:	4411      	add	r1, r2
 80041b2:	f8c0 225c 	str.w	r2, [r0, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80041b6:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80041b8:	1a8b      	subs	r3, r1, r2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	dcf9      	bgt.n	80041b2 <HAL_ETH_RxLinkCallback+0x3e>
 80041be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80041c2:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 80041c6:	bc30      	pop	{r4, r5}
 80041c8:	4770      	bx	lr
    *ppStart = p;
 80041ca:	6004      	str	r4, [r0, #0]
 80041cc:	e7e0      	b.n	8004190 <HAL_ETH_RxLinkCallback+0x1c>
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80041d4:	f003 bc64 	b.w	8007aa0 <pbuf_free>

080041d8 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 80041d8:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 80041da:	4804      	ldr	r0, [pc, #16]	@ (80041ec <sys_lock_tcpip_core+0x14>)
 80041dc:	f009 ffd4 	bl	800e188 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 80041e0:	f000 f944 	bl	800446c <osThreadGetId>
 80041e4:	4b02      	ldr	r3, [pc, #8]	@ (80041f0 <sys_lock_tcpip_core+0x18>)
 80041e6:	6018      	str	r0, [r3, #0]
}
 80041e8:	bd08      	pop	{r3, pc}
 80041ea:	bf00      	nop
 80041ec:	24009a80 	.word	0x24009a80
 80041f0:	2400017c 	.word	0x2400017c

080041f4 <ethernet_link_thread>:
{
 80041f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041f8:	b09b      	sub	sp, #108	@ 0x6c
  LOCK_TCPIP_CORE();
 80041fa:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 80041fe:	2264      	movs	r2, #100	@ 0x64
 8004200:	2100      	movs	r1, #0
{
 8004202:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8004204:	4668      	mov	r0, sp
 8004206:	f00a f913 	bl	800e430 <memset>
  LOCK_TCPIP_CORE();
 800420a:	46cb      	mov	fp, r9
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800420c:	46ca      	mov	sl, r9
 800420e:	4d2b      	ldr	r5, [pc, #172]	@ (80042bc <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004210:	4f2b      	ldr	r7, [pc, #172]	@ (80042c0 <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8004212:	f7ff ffe1 	bl	80041d8 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004216:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 80042d0 <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 800421a:	4c2a      	ldr	r4, [pc, #168]	@ (80042c4 <ethernet_link_thread+0xd0>)
 800421c:	e02f      	b.n	800427e <ethernet_link_thread+0x8a>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800421e:	2801      	cmp	r0, #1
 8004220:	dd41      	ble.n	80042a6 <ethernet_link_thread+0xb2>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004222:	075a      	lsls	r2, r3, #29
 8004224:	d41d      	bmi.n	8004262 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 8004226:	3802      	subs	r0, #2
 8004228:	2803      	cmp	r0, #3
 800422a:	d838      	bhi.n	800429e <ethernet_link_thread+0xaa>
 800422c:	4b26      	ldr	r3, [pc, #152]	@ (80042c8 <ethernet_link_thread+0xd4>)
 800422e:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 8004232:	4b26      	ldr	r3, [pc, #152]	@ (80042cc <ethernet_link_thread+0xd8>)
 8004234:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004238:	4669      	mov	r1, sp
 800423a:	4640      	mov	r0, r8
 800423c:	f7fe fa4e 	bl	80026dc <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004240:	4669      	mov	r1, sp
 8004242:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8004244:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8004248:	e9cd 9b05 	strd	r9, fp, [sp, #20]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800424c:	f7fe fb10 	bl	8002870 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004250:	4640      	mov	r0, r8
 8004252:	f7fd ffb1 	bl	80021b8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8004256:	4630      	mov	r0, r6
 8004258:	f003 fa7c 	bl	8007754 <netif_set_up>
      netif_set_link_up(netif);
 800425c:	4630      	mov	r0, r6
 800425e:	f003 fac1 	bl	80077e4 <netif_set_link_up>
	lwip_core_lock_holder_thread_id = 0;
 8004262:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8004264:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8004266:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8004268:	f009 ff94 	bl	800e194 <sys_mutex_unlock>
    osDelay(100);
 800426c:	2064      	movs	r0, #100	@ 0x64
 800426e:	f000 f8ff 	bl	8004470 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8004272:	4620      	mov	r0, r4
 8004274:	f009 ff88 	bl	800e188 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8004278:	f000 f8f8 	bl	800446c <osThreadGetId>
 800427c:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800427e:	4638      	mov	r0, r7
 8004280:	f7fd fb56 	bl	8001930 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004284:	f896 302d 	ldrb.w	r3, [r6, #45]	@ 0x2d
 8004288:	0759      	lsls	r1, r3, #29
 800428a:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800428e:	d4c6      	bmi.n	800421e <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004290:	07d3      	lsls	r3, r2, #31
 8004292:	d4e6      	bmi.n	8004262 <ethernet_link_thread+0x6e>
 8004294:	2801      	cmp	r0, #1
 8004296:	dde4      	ble.n	8004262 <ethernet_link_thread+0x6e>
    switch (PHYLinkState)
 8004298:	3802      	subs	r0, #2
 800429a:	2803      	cmp	r0, #3
 800429c:	d9c6      	bls.n	800422c <ethernet_link_thread+0x38>
    if(linkchanged)
 800429e:	f1ba 0f00 	cmp.w	sl, #0
 80042a2:	d0de      	beq.n	8004262 <ethernet_link_thread+0x6e>
 80042a4:	e7c8      	b.n	8004238 <ethernet_link_thread+0x44>
    HAL_ETH_Stop_IT(&heth);
 80042a6:	4640      	mov	r0, r8
 80042a8:	f7fd ffd6 	bl	8002258 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80042ac:	4630      	mov	r0, r6
 80042ae:	f003 fa75 	bl	800779c <netif_set_down>
    netif_set_link_down(netif);
 80042b2:	4630      	mov	r0, r6
 80042b4:	f003 fabe 	bl	8007834 <netif_set_link_down>
 80042b8:	e7d3      	b.n	8004262 <ethernet_link_thread+0x6e>
 80042ba:	bf00      	nop
 80042bc:	2400017c 	.word	0x2400017c
 80042c0:	24000180 	.word	0x24000180
 80042c4:	24009a80 	.word	0x24009a80
 80042c8:	08011a6c 	.word	0x08011a6c
 80042cc:	08011a5c 	.word	0x08011a5c
 80042d0:	240001d8 	.word	0x240001d8

080042d4 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 80042d4:	4b02      	ldr	r3, [pc, #8]	@ (80042e0 <sys_unlock_tcpip_core+0xc>)
 80042d6:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 80042d8:	4802      	ldr	r0, [pc, #8]	@ (80042e4 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 80042da:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 80042dc:	f009 bf5a 	b.w	800e194 <sys_mutex_unlock>
 80042e0:	2400017c 	.word	0x2400017c
 80042e4:	24009a80 	.word	0x24009a80

080042e8 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 80042e8:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 80042ea:	4b11      	ldr	r3, [pc, #68]	@ (8004330 <sys_check_core_locking+0x48>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f2:	b9ab      	cbnz	r3, 8004320 <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 80042f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004334 <sys_check_core_locking+0x4c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b18b      	cbz	r3, 800431e <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 80042fa:	4d0f      	ldr	r5, [pc, #60]	@ (8004338 <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 80042fc:	f000 f8b6 	bl	800446c <osThreadGetId>
 8004300:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8004302:	682b      	ldr	r3, [r5, #0]
 8004304:	4283      	cmp	r3, r0
 8004306:	d00a      	beq.n	800431e <sys_check_core_locking+0x36>
 8004308:	4b0c      	ldr	r3, [pc, #48]	@ (800433c <sys_check_core_locking+0x54>)
 800430a:	f44f 7274 	mov.w	r2, #976	@ 0x3d0
 800430e:	490c      	ldr	r1, [pc, #48]	@ (8004340 <sys_check_core_locking+0x58>)
 8004310:	480c      	ldr	r0, [pc, #48]	@ (8004344 <sys_check_core_locking+0x5c>)
 8004312:	f00a f86b 	bl	800e3ec <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8004316:	682b      	ldr	r3, [r5, #0]
 8004318:	42a3      	cmp	r3, r4
 800431a:	d000      	beq.n	800431e <sys_check_core_locking+0x36>
 800431c:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 800431e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8004320:	4b06      	ldr	r3, [pc, #24]	@ (800433c <sys_check_core_locking+0x54>)
 8004322:	f240 32ca 	movw	r2, #970	@ 0x3ca
 8004326:	4908      	ldr	r1, [pc, #32]	@ (8004348 <sys_check_core_locking+0x60>)
 8004328:	4806      	ldr	r0, [pc, #24]	@ (8004344 <sys_check_core_locking+0x5c>)
 800432a:	f00a f85f 	bl	800e3ec <iprintf>
 800432e:	e7e1      	b.n	80042f4 <sys_check_core_locking+0xc>
 8004330:	e000ed00 	.word	0xe000ed00
 8004334:	24000178 	.word	0x24000178
 8004338:	2400017c 	.word	0x2400017c
 800433c:	0800f458 	.word	0x0800f458
 8004340:	0800f4b4 	.word	0x0800f4b4
 8004344:	0800f2f8 	.word	0x0800f2f8
 8004348:	0800f48c 	.word	0x0800f48c

0800434c <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 800434c:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 800434e:	f000 f88d 	bl	800446c <osThreadGetId>
 8004352:	4b01      	ldr	r3, [pc, #4]	@ (8004358 <sys_mark_tcpip_thread+0xc>)
 8004354:	6018      	str	r0, [r3, #0]
}
 8004356:	bd08      	pop	{r3, pc}
 8004358:	24000178 	.word	0x24000178

0800435c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800435c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800435e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004362:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004364:	f001 fdd2 	bl	8005f0c <xTaskGetSchedulerState>
 8004368:	2801      	cmp	r0, #1
 800436a:	d100      	bne.n	800436e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800436c:	bd08      	pop	{r3, pc}
 800436e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8004372:	f002 b99f 	b.w	80066b4 <xPortSysTickHandler>
 8004376:	bf00      	nop

08004378 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004378:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800437c:	b92b      	cbnz	r3, 800438a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <osKernelInitialize+0x20>)
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	b928      	cbnz	r0, 8004390 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004388:	4770      	bx	lr
    stat = osErrorISR;
 800438a:	f06f 0005 	mvn.w	r0, #5
 800438e:	4770      	bx	lr
    } else {
      stat = osError;
 8004390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    }
  }

  return (stat);
}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	24001be8 	.word	0x24001be8

0800439c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800439c:	b510      	push	{r4, lr}
 800439e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80043a2:	b974      	cbnz	r4, 80043c2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80043a4:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <osKernelStart+0x2c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	2a01      	cmp	r2, #1
 80043aa:	d107      	bne.n	80043bc <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ac:	4907      	ldr	r1, [pc, #28]	@ (80043cc <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043ae:	2202      	movs	r2, #2
 80043b0:	77cc      	strb	r4, [r1, #31]
 80043b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043b4:	f001 fa98 	bl	80058e8 <vTaskStartScheduler>
      stat = osOK;
 80043b8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80043ba:	bd10      	pop	{r4, pc}
      stat = osError;
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80043c0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80043c2:	f06f 0005 	mvn.w	r0, #5
}
 80043c6:	bd10      	pop	{r4, pc}
 80043c8:	24001be8 	.word	0x24001be8
 80043cc:	e000ed00 	.word	0xe000ed00

080043d0 <osKernelGetTickCount>:
 80043d0:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 80043d4:	b10b      	cbz	r3, 80043da <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 80043d6:	f001 bae5 	b.w	80059a4 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 80043da:	f001 badd 	b.w	8005998 <xTaskGetTickCount>
 80043de:	bf00      	nop

080043e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043e2:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043e4:	b087      	sub	sp, #28
  hTask = NULL;
 80043e6:	9505      	str	r5, [sp, #20]
 80043e8:	f3ef 8305 	mrs	r3, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80043ec:	b348      	cbz	r0, 8004442 <osThreadNew+0x62>
 80043ee:	bb43      	cbnz	r3, 8004442 <osThreadNew+0x62>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80043f0:	4614      	mov	r4, r2
 80043f2:	b1d2      	cbz	r2, 800442a <osThreadNew+0x4a>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80043f4:	6996      	ldr	r6, [r2, #24]
 80043f6:	bb3e      	cbnz	r6, 8004448 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;
 80043f8:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043fa:	6863      	ldr	r3, [r4, #4]
 80043fc:	07db      	lsls	r3, r3, #31
 80043fe:	d420      	bmi.n	8004442 <osThreadNew+0x62>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8004400:	6963      	ldr	r3, [r4, #20]
 8004402:	b32b      	cbz	r3, 8004450 <osThreadNew+0x70>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004404:	089a      	lsrs	r2, r3, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004406:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8004408:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800440c:	68e7      	ldr	r7, [r4, #12]
 800440e:	b315      	cbz	r5, 8004456 <osThreadNew+0x76>
 8004410:	2fa7      	cmp	r7, #167	@ 0xa7
 8004412:	d916      	bls.n	8004442 <osThreadNew+0x62>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004414:	6924      	ldr	r4, [r4, #16]
 8004416:	b1a4      	cbz	r4, 8004442 <osThreadNew+0x62>
 8004418:	b19b      	cbz	r3, 8004442 <osThreadNew+0x62>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800441a:	460b      	mov	r3, r1
 800441c:	9600      	str	r6, [sp, #0]
 800441e:	4661      	mov	r1, ip
 8004420:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004424:	f001 f9f6 	bl	8005814 <xTaskCreateStatic>
 8004428:	e00c      	b.n	8004444 <osThreadNew+0x64>
 800442a:	f44f 7200 	mov.w	r2, #512	@ 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 800442e:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004430:	460b      	mov	r3, r1
 8004432:	4621      	mov	r1, r4
 8004434:	ac05      	add	r4, sp, #20
 8004436:	9600      	str	r6, [sp, #0]
 8004438:	9401      	str	r4, [sp, #4]
 800443a:	f001 fa25 	bl	8005888 <xTaskCreate>
 800443e:	2801      	cmp	r0, #1
 8004440:	d011      	beq.n	8004466 <osThreadNew+0x86>
        return (NULL);
 8004442:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004444:	b007      	add	sp, #28
 8004446:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004448:	1e72      	subs	r2, r6, #1
 800444a:	2a37      	cmp	r2, #55	@ 0x37
 800444c:	d9d5      	bls.n	80043fa <osThreadNew+0x1a>
 800444e:	e7f8      	b.n	8004442 <osThreadNew+0x62>
    stack = configMINIMAL_STACK_SIZE;
 8004450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004454:	e7d7      	b.n	8004406 <osThreadNew+0x26>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004456:	2f00      	cmp	r7, #0
 8004458:	d1f3      	bne.n	8004442 <osThreadNew+0x62>
 800445a:	6923      	ldr	r3, [r4, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <osThreadNew+0x62>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004460:	b292      	uxth	r2, r2
 8004462:	4664      	mov	r4, ip
 8004464:	e7e4      	b.n	8004430 <osThreadNew+0x50>
  return ((osThreadId_t)hTask);
 8004466:	9805      	ldr	r0, [sp, #20]
 8004468:	e7ec      	b.n	8004444 <osThreadNew+0x64>
 800446a:	bf00      	nop

0800446c <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800446c:	f001 bd48 	b.w	8005f00 <xTaskGetCurrentTaskHandle>

08004470 <osDelay>:
 8004470:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004474:	b93a      	cbnz	r2, 8004486 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8004476:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004478:	b908      	cbnz	r0, 800447e <osDelay+0xe>
    stat = osOK;
 800447a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800447c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800447e:	f001 fbe7 	bl	8005c50 <vTaskDelay>
    stat = osOK;
 8004482:	2000      	movs	r0, #0
}
 8004484:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8004486:	f06f 0005 	mvn.w	r0, #5
}
 800448a:	4770      	bx	lr

0800448c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004492:	b93b      	cbnz	r3, 80044a4 <osMutexNew+0x18>
    if (attr != NULL) {
 8004494:	4604      	mov	r4, r0
 8004496:	b1d8      	cbz	r0, 80044d0 <osMutexNew+0x44>
      type = attr->attr_bits;
 8004498:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800449a:	f003 0208 	and.w	r2, r3, #8
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800449e:	07db      	lsls	r3, r3, #31
 80044a0:	d403      	bmi.n	80044aa <osMutexNew+0x1e>
    if ((type & osMutexRobust) != osMutexRobust) {
 80044a2:	b1fa      	cbz	r2, 80044e4 <osMutexNew+0x58>
  hMutex = NULL;
 80044a4:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80044a6:	4628      	mov	r0, r5
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
    if ((type & osMutexRobust) != osMutexRobust) {
 80044aa:	2a00      	cmp	r2, #0
 80044ac:	d1fa      	bne.n	80044a4 <osMutexNew+0x18>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044ae:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80044b2:	b379      	cbz	r1, 8004514 <osMutexNew+0x88>
 80044b4:	2b4f      	cmp	r3, #79	@ 0x4f
 80044b6:	d9f5      	bls.n	80044a4 <osMutexNew+0x18>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80044b8:	2004      	movs	r0, #4
 80044ba:	f000 fc8f 	bl	8004ddc <xQueueCreateMutexStatic>
 80044be:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80044c0:	2800      	cmp	r0, #0
 80044c2:	d0ef      	beq.n	80044a4 <osMutexNew+0x18>
        vQueueAddToRegistry (hMutex, name);
 80044c4:	6821      	ldr	r1, [r4, #0]
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80044c6:	f045 0501 	orr.w	r5, r5, #1
        vQueueAddToRegistry (hMutex, name);
 80044ca:	f000 ffed 	bl	80054a8 <vQueueAddToRegistry>
  return ((osMutexId_t)hMutex);
 80044ce:	e7ea      	b.n	80044a6 <osMutexNew+0x1a>
              hMutex = xSemaphoreCreateMutex ();
 80044d0:	2001      	movs	r0, #1
 80044d2:	f000 fcd9 	bl	8004e88 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80044d6:	4605      	mov	r5, r0
 80044d8:	2800      	cmp	r0, #0
 80044da:	d0e4      	beq.n	80044a6 <osMutexNew+0x1a>
        vQueueAddToRegistry (hMutex, name);
 80044dc:	4621      	mov	r1, r4
 80044de:	f000 ffe3 	bl	80054a8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80044e2:	e7e0      	b.n	80044a6 <osMutexNew+0x1a>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80044e4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 80044e8:	b159      	cbz	r1, 8004502 <osMutexNew+0x76>
 80044ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80044ec:	d9da      	bls.n	80044a4 <osMutexNew+0x18>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80044ee:	2001      	movs	r0, #1
 80044f0:	f000 fc74 	bl	8004ddc <xQueueCreateMutexStatic>
      if (hMutex != NULL) {
 80044f4:	4605      	mov	r5, r0
 80044f6:	2800      	cmp	r0, #0
 80044f8:	d0d5      	beq.n	80044a6 <osMutexNew+0x1a>
        vQueueAddToRegistry (hMutex, name);
 80044fa:	6821      	ldr	r1, [r4, #0]
 80044fc:	f000 ffd4 	bl	80054a8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004500:	e7d1      	b.n	80044a6 <osMutexNew+0x1a>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ce      	bne.n	80044a4 <osMutexNew+0x18>
              hMutex = xSemaphoreCreateMutex ();
 8004506:	2001      	movs	r0, #1
 8004508:	f000 fcbe 	bl	8004e88 <xQueueCreateMutex>
      if (hMutex != NULL) {
 800450c:	4605      	mov	r5, r0
 800450e:	2800      	cmp	r0, #0
 8004510:	d1f3      	bne.n	80044fa <osMutexNew+0x6e>
 8004512:	e7c7      	b.n	80044a4 <osMutexNew+0x18>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1c5      	bne.n	80044a4 <osMutexNew+0x18>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004518:	2004      	movs	r0, #4
 800451a:	f000 fcb5 	bl	8004e88 <xQueueCreateMutex>
 800451e:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 8004520:	2800      	cmp	r0, #0
 8004522:	d1cf      	bne.n	80044c4 <osMutexNew+0x38>
 8004524:	e7be      	b.n	80044a4 <osMutexNew+0x18>
 8004526:	bf00      	nop

08004528 <osMutexAcquire>:
 8004528:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 800452c:	b9d2      	cbnz	r2, 8004564 <osMutexAcquire+0x3c>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800452e:	2801      	cmp	r0, #1
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004530:	b538      	push	{r3, r4, r5, lr}
 8004532:	4603      	mov	r3, r0
  else if (hMutex == NULL) {
 8004534:	d919      	bls.n	800456a <osMutexAcquire+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8004536:	f003 0501 	and.w	r5, r3, #1
 800453a:	460c      	mov	r4, r1
 800453c:	f020 0001 	bic.w	r0, r0, #1
 8004540:	b955      	cbnz	r5, 8004558 <osMutexAcquire+0x30>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004542:	f000 fe35 	bl	80051b0 <xQueueSemaphoreTake>
 8004546:	2801      	cmp	r0, #1
 8004548:	d00a      	beq.n	8004560 <osMutexAcquire+0x38>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800454a:	2c00      	cmp	r4, #0
 800454c:	bf14      	ite	ne
 800454e:	f06f 0001 	mvnne.w	r0, #1
 8004552:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004556:	bd38      	pop	{r3, r4, r5, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004558:	f000 ff00 	bl	800535c <xQueueTakeMutexRecursive>
 800455c:	2801      	cmp	r0, #1
 800455e:	d1f4      	bne.n	800454a <osMutexAcquire+0x22>
  stat = osOK;
 8004560:	2000      	movs	r0, #0
}
 8004562:	bd38      	pop	{r3, r4, r5, pc}
    stat = osErrorISR;
 8004564:	f06f 0005 	mvn.w	r0, #5
}
 8004568:	4770      	bx	lr
    stat = osErrorParameter;
 800456a:	f06f 0003 	mvn.w	r0, #3
}
 800456e:	bd38      	pop	{r3, r4, r5, pc}

08004570 <osMutexRelease>:
 8004570:	f3ef 8105 	mrs	r1, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004574:	b9b9      	cbnz	r1, 80045a6 <osMutexRelease+0x36>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004576:	2801      	cmp	r0, #1
 8004578:	4602      	mov	r2, r0
 800457a:	d917      	bls.n	80045ac <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800457c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004580:	b508      	push	{r3, lr}
 8004582:	f002 0301 	and.w	r3, r2, #1
    if (rmtx != 0U) {
 8004586:	b93b      	cbnz	r3, 8004598 <osMutexRelease+0x28>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004588:	461a      	mov	r2, r3
 800458a:	4619      	mov	r1, r3
 800458c:	f000 fb62 	bl	8004c54 <xQueueGenericSend>
 8004590:	2801      	cmp	r0, #1
 8004592:	d105      	bne.n	80045a0 <osMutexRelease+0x30>
  stat = osOK;
 8004594:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004596:	bd08      	pop	{r3, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004598:	f000 fc56 	bl	8004e48 <xQueueGiveMutexRecursive>
 800459c:	2801      	cmp	r0, #1
 800459e:	d0f9      	beq.n	8004594 <osMutexRelease+0x24>
        stat = osErrorResource;
 80045a0:	f06f 0002 	mvn.w	r0, #2
}
 80045a4:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 80045a6:	f06f 0005 	mvn.w	r0, #5
 80045aa:	4770      	bx	lr
    stat = osErrorParameter;
 80045ac:	f06f 0003 	mvn.w	r0, #3
}
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop

080045b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80045b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b6:	b083      	sub	sp, #12
 80045b8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80045bc:	b98e      	cbnz	r6, 80045e2 <osSemaphoreNew+0x2e>
 80045be:	4605      	mov	r5, r0
 80045c0:	b178      	cbz	r0, 80045e2 <osSemaphoreNew+0x2e>
 80045c2:	4288      	cmp	r0, r1
 80045c4:	460f      	mov	r7, r1
 80045c6:	d30c      	bcc.n	80045e2 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 80045c8:	4614      	mov	r4, r2
 80045ca:	b172      	cbz	r2, 80045ea <osSemaphoreNew+0x36>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80045cc:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 80045d0:	b14a      	cbz	r2, 80045e6 <osSemaphoreNew+0x32>
 80045d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80045d4:	d905      	bls.n	80045e2 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80045d6:	2801      	cmp	r0, #1
 80045d8:	d02e      	beq.n	8004638 <osSemaphoreNew+0x84>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80045da:	f000 faf9 	bl	8004bd0 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80045de:	4605      	mov	r5, r0
 80045e0:	b96d      	cbnz	r5, 80045fe <osSemaphoreNew+0x4a>
  hSemaphore = NULL;
 80045e2:	2500      	movs	r5, #0
 80045e4:	e010      	b.n	8004608 <osSemaphoreNew+0x54>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1fb      	bne.n	80045e2 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 80045ea:	2d01      	cmp	r5, #1
 80045ec:	d00f      	beq.n	800460e <osSemaphoreNew+0x5a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80045ee:	4628      	mov	r0, r5
 80045f0:	4639      	mov	r1, r7
 80045f2:	f000 fb11 	bl	8004c18 <xQueueCreateCountingSemaphore>
 80045f6:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	d0f2      	beq.n	80045e2 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 80045fc:	b104      	cbz	r4, 8004600 <osSemaphoreNew+0x4c>
          name = attr->name;
 80045fe:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004600:	4621      	mov	r1, r4
 8004602:	4628      	mov	r0, r5
 8004604:	f000 ff50 	bl	80054a8 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8004608:	4628      	mov	r0, r5
 800460a:	b003      	add	sp, #12
 800460c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 800460e:	4628      	mov	r0, r5
 8004610:	2203      	movs	r2, #3
 8004612:	2100      	movs	r1, #0
 8004614:	f000 fab4 	bl	8004b80 <xQueueGenericCreate>
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004618:	4605      	mov	r5, r0
 800461a:	2800      	cmp	r0, #0
 800461c:	d0ec      	beq.n	80045f8 <osSemaphoreNew+0x44>
 800461e:	2f00      	cmp	r7, #0
 8004620:	d0ea      	beq.n	80045f8 <osSemaphoreNew+0x44>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004622:	2300      	movs	r3, #0
 8004624:	461a      	mov	r2, r3
 8004626:	4619      	mov	r1, r3
 8004628:	f000 fb14 	bl	8004c54 <xQueueGenericSend>
 800462c:	2801      	cmp	r0, #1
 800462e:	d0e5      	beq.n	80045fc <osSemaphoreNew+0x48>
            vSemaphoreDelete (hSemaphore);
 8004630:	4628      	mov	r0, r5
 8004632:	f000 ff0f 	bl	8005454 <vQueueDelete>
      if (hSemaphore != NULL) {
 8004636:	e7d4      	b.n	80045e2 <osSemaphoreNew+0x2e>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004638:	4613      	mov	r3, r2
 800463a:	2203      	movs	r2, #3
 800463c:	4631      	mov	r1, r6
 800463e:	9200      	str	r2, [sp, #0]
 8004640:	4632      	mov	r2, r6
 8004642:	f000 fa4b 	bl	8004adc <xQueueGenericCreateStatic>
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004646:	4605      	mov	r5, r0
 8004648:	2800      	cmp	r0, #0
 800464a:	d0c9      	beq.n	80045e0 <osSemaphoreNew+0x2c>
 800464c:	2f00      	cmp	r7, #0
 800464e:	d0c7      	beq.n	80045e0 <osSemaphoreNew+0x2c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004650:	4633      	mov	r3, r6
 8004652:	4632      	mov	r2, r6
 8004654:	4631      	mov	r1, r6
 8004656:	f000 fafd 	bl	8004c54 <xQueueGenericSend>
 800465a:	2801      	cmp	r0, #1
 800465c:	d0cf      	beq.n	80045fe <osSemaphoreNew+0x4a>
 800465e:	e7e7      	b.n	8004630 <osSemaphoreNew+0x7c>

08004660 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004660:	b360      	cbz	r0, 80046bc <osSemaphoreAcquire+0x5c>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004662:	b510      	push	{r4, lr}
 8004664:	460c      	mov	r4, r1
 8004666:	b082      	sub	sp, #8
 8004668:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800466c:	b1b3      	cbz	r3, 800469c <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800466e:	bb11      	cbnz	r1, 80046b6 <osSemaphoreAcquire+0x56>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004670:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8004672:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004674:	f000 fe92 	bl	800539c <xQueueReceiveFromISR>
 8004678:	2801      	cmp	r0, #1
 800467a:	d118      	bne.n	80046ae <osSemaphoreAcquire+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800467c:	9b01      	ldr	r3, [sp, #4]
 800467e:	b913      	cbnz	r3, 8004686 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8004680:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004682:	b002      	add	sp, #8
 8004684:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8004686:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800468a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800468e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004692:	f3bf 8f4f 	dsb	sy
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	e7f1      	b.n	8004680 <osSemaphoreAcquire+0x20>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800469c:	f000 fd88 	bl	80051b0 <xQueueSemaphoreTake>
 80046a0:	2801      	cmp	r0, #1
 80046a2:	d0ed      	beq.n	8004680 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 80046a4:	b11c      	cbz	r4, 80046ae <osSemaphoreAcquire+0x4e>
        stat = osErrorTimeout;
 80046a6:	f06f 0001 	mvn.w	r0, #1
}
 80046aa:	b002      	add	sp, #8
 80046ac:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 80046ae:	f06f 0002 	mvn.w	r0, #2
}
 80046b2:	b002      	add	sp, #8
 80046b4:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 80046b6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80046ba:	e7e2      	b.n	8004682 <osSemaphoreAcquire+0x22>
    stat = osErrorParameter;
 80046bc:	f06f 0003 	mvn.w	r0, #3
}
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop

080046c4 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80046c4:	b328      	cbz	r0, 8004712 <osSemaphoreRelease+0x4e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80046c6:	b500      	push	{lr}
 80046c8:	b083      	sub	sp, #12
 80046ca:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80046ce:	b19b      	cbz	r3, 80046f8 <osSemaphoreRelease+0x34>
    yield = pdFALSE;
 80046d0:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80046d2:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80046d4:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80046d6:	f000 fc5b 	bl	8004f90 <xQueueGiveFromISR>
 80046da:	2801      	cmp	r0, #1
 80046dc:	d116      	bne.n	800470c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80046de:	9b01      	ldr	r3, [sp, #4]
 80046e0:	b183      	cbz	r3, 8004704 <osSemaphoreRelease+0x40>
 80046e2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80046e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ea:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	e005      	b.n	8004704 <osSemaphoreRelease+0x40>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046f8:	461a      	mov	r2, r3
 80046fa:	4619      	mov	r1, r3
 80046fc:	f000 faaa 	bl	8004c54 <xQueueGenericSend>
 8004700:	2801      	cmp	r0, #1
 8004702:	d103      	bne.n	800470c <osSemaphoreRelease+0x48>
  stat = osOK;
 8004704:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8004706:	b003      	add	sp, #12
 8004708:	f85d fb04 	ldr.w	pc, [sp], #4
      stat = osErrorResource;
 800470c:	f06f 0002 	mvn.w	r0, #2
 8004710:	e7f9      	b.n	8004706 <osSemaphoreRelease+0x42>
    stat = osErrorParameter;
 8004712:	f06f 0003 	mvn.w	r0, #3
}
 8004716:	4770      	bx	lr

08004718 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471a:	b083      	sub	sp, #12
 800471c:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004720:	b987      	cbnz	r7, 8004744 <osMessageQueueNew+0x2c>
 8004722:	4605      	mov	r5, r0
 8004724:	b170      	cbz	r0, 8004744 <osMessageQueueNew+0x2c>
 8004726:	b169      	cbz	r1, 8004744 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 8004728:	4614      	mov	r4, r2
 800472a:	b17a      	cbz	r2, 800474c <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800472c:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8004730:	b1c3      	cbz	r3, 8004764 <osMessageQueueNew+0x4c>
 8004732:	2a4f      	cmp	r2, #79	@ 0x4f
 8004734:	d906      	bls.n	8004744 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004736:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004738:	b122      	cbz	r2, 8004744 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800473a:	fb01 f505 	mul.w	r5, r1, r5
 800473e:	6966      	ldr	r6, [r4, #20]
 8004740:	42ae      	cmp	r6, r5
 8004742:	d21e      	bcs.n	8004782 <osMessageQueueNew+0x6a>
  hQueue = NULL;
 8004744:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8004746:	4628      	mov	r0, r5
 8004748:	b003      	add	sp, #12
 800474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 800474c:	f000 fa18 	bl	8004b80 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004750:	4605      	mov	r5, r0
 8004752:	2800      	cmp	r0, #0
 8004754:	d0f6      	beq.n	8004744 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 8004756:	4628      	mov	r0, r5
 8004758:	4621      	mov	r1, r4
 800475a:	f000 fea5 	bl	80054a8 <vQueueAddToRegistry>
}
 800475e:	4628      	mov	r0, r5
 8004760:	b003      	add	sp, #12
 8004762:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004764:	2a00      	cmp	r2, #0
 8004766:	d1ed      	bne.n	8004744 <osMessageQueueNew+0x2c>
 8004768:	6923      	ldr	r3, [r4, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1ea      	bne.n	8004744 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800476e:	6962      	ldr	r2, [r4, #20]
 8004770:	2a00      	cmp	r2, #0
 8004772:	d1e7      	bne.n	8004744 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 8004774:	f000 fa04 	bl	8004b80 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004778:	4605      	mov	r5, r0
 800477a:	2800      	cmp	r0, #0
 800477c:	d0e2      	beq.n	8004744 <osMessageQueueNew+0x2c>
        name = attr->name;
 800477e:	6824      	ldr	r4, [r4, #0]
 8004780:	e7e9      	b.n	8004756 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004782:	9700      	str	r7, [sp, #0]
 8004784:	f000 f9aa 	bl	8004adc <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8004788:	4605      	mov	r5, r0
 800478a:	2800      	cmp	r0, #0
 800478c:	d1f7      	bne.n	800477e <osMessageQueueNew+0x66>
 800478e:	e7d9      	b.n	8004744 <osMessageQueueNew+0x2c>

08004790 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004790:	b560      	push	{r5, r6, lr}
 8004792:	461e      	mov	r6, r3
 8004794:	b083      	sub	sp, #12
 8004796:	f3ef 8205 	mrs	r2, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800479a:	fab0 f580 	clz	r5, r0
 800479e:	fab1 f381 	clz	r3, r1
 80047a2:	096d      	lsrs	r5, r5, #5
 80047a4:	095b      	lsrs	r3, r3, #5
  if (IS_IRQ()) {
 80047a6:	b1da      	cbz	r2, 80047e0 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80047a8:	2e00      	cmp	r6, #0
 80047aa:	bf18      	it	ne
 80047ac:	f043 0301 	orrne.w	r3, r3, #1
 80047b0:	bb33      	cbnz	r3, 8004800 <osMessageQueuePut+0x70>
 80047b2:	bb2d      	cbnz	r5, 8004800 <osMessageQueuePut+0x70>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80047b4:	462b      	mov	r3, r5
 80047b6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80047b8:	9501      	str	r5, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80047ba:	f000 fb83 	bl	8004ec4 <xQueueGenericSendFromISR>
 80047be:	2801      	cmp	r0, #1
 80047c0:	d11a      	bne.n	80047f8 <osMessageQueuePut+0x68>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80047c2:	9b01      	ldr	r3, [sp, #4]
 80047c4:	b14b      	cbz	r3, 80047da <osMessageQueuePut+0x4a>
 80047c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80047ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80047d2:	f3bf 8f4f 	dsb	sy
 80047d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80047da:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80047dc:	b003      	add	sp, #12
 80047de:	bd60      	pop	{r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80047e0:	b975      	cbnz	r5, 8004800 <osMessageQueuePut+0x70>
 80047e2:	b96b      	cbnz	r3, 8004800 <osMessageQueuePut+0x70>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80047e4:	4632      	mov	r2, r6
 80047e6:	f000 fa35 	bl	8004c54 <xQueueGenericSend>
 80047ea:	2801      	cmp	r0, #1
 80047ec:	d0f5      	beq.n	80047da <osMessageQueuePut+0x4a>
        if (timeout != 0U) {
 80047ee:	b11e      	cbz	r6, 80047f8 <osMessageQueuePut+0x68>
          stat = osErrorTimeout;
 80047f0:	f06f 0001 	mvn.w	r0, #1
}
 80047f4:	b003      	add	sp, #12
 80047f6:	bd60      	pop	{r5, r6, pc}
        stat = osErrorResource;
 80047f8:	f06f 0002 	mvn.w	r0, #2
}
 80047fc:	b003      	add	sp, #12
 80047fe:	bd60      	pop	{r5, r6, pc}
      stat = osErrorParameter;
 8004800:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8004804:	e7ea      	b.n	80047dc <osMessageQueuePut+0x4c>
 8004806:	bf00      	nop

08004808 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	461e      	mov	r6, r3
 800480c:	b082      	sub	sp, #8
 800480e:	f3ef 8305 	mrs	r3, IPSR
  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004812:	fab0 f580 	clz	r5, r0
 8004816:	fab1 f481 	clz	r4, r1
 800481a:	096d      	lsrs	r5, r5, #5
 800481c:	0964      	lsrs	r4, r4, #5
  if (IS_IRQ()) {
 800481e:	b1d3      	cbz	r3, 8004856 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004820:	2e00      	cmp	r6, #0
 8004822:	bf18      	it	ne
 8004824:	f044 0401 	orrne.w	r4, r4, #1
 8004828:	bb2c      	cbnz	r4, 8004876 <osMessageQueueGet+0x6e>
 800482a:	bb25      	cbnz	r5, 8004876 <osMessageQueueGet+0x6e>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800482c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800482e:	9501      	str	r5, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004830:	f000 fdb4 	bl	800539c <xQueueReceiveFromISR>
 8004834:	2801      	cmp	r0, #1
 8004836:	d11a      	bne.n	800486e <osMessageQueueGet+0x66>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004838:	9b01      	ldr	r3, [sp, #4]
 800483a:	b14b      	cbz	r3, 8004850 <osMessageQueueGet+0x48>
 800483c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004840:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004844:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004850:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004852:	b002      	add	sp, #8
 8004854:	bd70      	pop	{r4, r5, r6, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004856:	b975      	cbnz	r5, 8004876 <osMessageQueueGet+0x6e>
 8004858:	b96c      	cbnz	r4, 8004876 <osMessageQueueGet+0x6e>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800485a:	4632      	mov	r2, r6
 800485c:	f000 fbee 	bl	800503c <xQueueReceive>
 8004860:	2801      	cmp	r0, #1
 8004862:	d0f5      	beq.n	8004850 <osMessageQueueGet+0x48>
        if (timeout != 0U) {
 8004864:	b11e      	cbz	r6, 800486e <osMessageQueueGet+0x66>
          stat = osErrorTimeout;
 8004866:	f06f 0001 	mvn.w	r0, #1
}
 800486a:	b002      	add	sp, #8
 800486c:	bd70      	pop	{r4, r5, r6, pc}
        stat = osErrorResource;
 800486e:	f06f 0002 	mvn.w	r0, #2
}
 8004872:	b002      	add	sp, #8
 8004874:	bd70      	pop	{r4, r5, r6, pc}
      stat = osErrorParameter;
 8004876:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800487a:	e7ea      	b.n	8004852 <osMessageQueueGet+0x4a>

0800487c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800487c:	4b05      	ldr	r3, [pc, #20]	@ (8004894 <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800487e:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004880:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004882:	f44f 7300 	mov.w	r3, #512	@ 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004886:	4c04      	ldr	r4, [pc, #16]	@ (8004898 <vApplicationGetIdleTaskMemory+0x1c>)
 8004888:	600c      	str	r4, [r1, #0]
}
 800488a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800488e:	6013      	str	r3, [r2, #0]
}
 8004890:	4770      	bx	lr
 8004892:	bf00      	nop
 8004894:	24001b40 	.word	0x24001b40
 8004898:	24001340 	.word	0x24001340

0800489c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800489c:	4b05      	ldr	r3, [pc, #20]	@ (80048b4 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800489e:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048a0:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048a6:	4c04      	ldr	r4, [pc, #16]	@ (80048b8 <vApplicationGetTimerTaskMemory+0x1c>)
 80048a8:	600c      	str	r4, [r1, #0]
}
 80048aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048ae:	6013      	str	r3, [r2, #0]
}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	24001298 	.word	0x24001298
 80048b8:	24000298 	.word	0x24000298

080048bc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048bc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c4:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048c6:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c8:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ca:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048cc:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop

080048d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048d4:	2300      	movs	r3, #0
 80048d6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80048dc:	6803      	ldr	r3, [r0, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048de:	6842      	ldr	r2, [r0, #4]
	( pxList->uxNumberOfItems )++;
 80048e0:	3301      	adds	r3, #1
{
 80048e2:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048e4:	6894      	ldr	r4, [r2, #8]
 80048e6:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048ea:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048ec:	6091      	str	r1, [r2, #8]
}
 80048ee:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80048f2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048f4:	6003      	str	r3, [r0, #0]
}
 80048f6:	4770      	bx	lr

080048f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048f8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048fa:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048fc:	1c6b      	adds	r3, r5, #1
 80048fe:	d010      	beq.n	8004922 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004900:	f100 0308 	add.w	r3, r0, #8
 8004904:	461c      	mov	r4, r3
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	42aa      	cmp	r2, r5
 800490c:	d9fa      	bls.n	8004904 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800490e:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004910:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8004912:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004914:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004916:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004918:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800491a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800491c:	6002      	str	r2, [r0, #0]
}
 800491e:	bc30      	pop	{r4, r5}
 8004920:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004922:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	e7f2      	b.n	800490e <vListInsert+0x16>

08004928 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004928:	6903      	ldr	r3, [r0, #16]
{
 800492a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800492c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800492e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 8004932:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8004934:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004938:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800493a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 800493c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004940:	bf08      	it	eq
 8004942:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004944:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8004946:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004948:	3a01      	subs	r2, #1
 800494a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800494c:	6818      	ldr	r0, [r3, #0]
}
 800494e:	4770      	bx	lr

08004950 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	4616      	mov	r6, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004954:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8004956:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004958:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800495a:	b92a      	cbnz	r2, 8004968 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800495c:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800495e:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004960:	b32e      	cbz	r6, 80049ae <prvCopyDataToQueue+0x5e>
BaseType_t xReturn = pdFALSE;
 8004962:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004964:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 8004966:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004968:	b97e      	cbnz	r6, 800498a <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800496a:	6840      	ldr	r0, [r0, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800496c:	3501      	adds	r5, #1
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800496e:	f009 fded 	bl	800e54c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004972:	6863      	ldr	r3, [r4, #4]
 8004974:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004976:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004978:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800497a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800497c:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800497e:	bf24      	itt	cs
 8004980:	6823      	ldrcs	r3, [r4, #0]
 8004982:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004984:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004986:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8004988:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800498a:	68c0      	ldr	r0, [r0, #12]
 800498c:	f009 fdde 	bl	800e54c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004990:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004992:	68e3      	ldr	r3, [r4, #12]
 8004994:	4251      	negs	r1, r2
 8004996:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004998:	6822      	ldr	r2, [r4, #0]
 800499a:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800499c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800499e:	d202      	bcs.n	80049a6 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049a0:	68a3      	ldr	r3, [r4, #8]
 80049a2:	440b      	add	r3, r1
 80049a4:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80049a6:	2e02      	cmp	r6, #2
 80049a8:	d006      	beq.n	80049b8 <prvCopyDataToQueue+0x68>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049aa:	3501      	adds	r5, #1
 80049ac:	e7ea      	b.n	8004984 <prvCopyDataToQueue+0x34>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049ae:	6880      	ldr	r0, [r0, #8]
 80049b0:	f001 fafc 	bl	8005fac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049b4:	60a6      	str	r6, [r4, #8]
 80049b6:	e7d5      	b.n	8004964 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049b8:	2d01      	cmp	r5, #1
BaseType_t xReturn = pdFALSE;
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	bf38      	it	cc
 80049c0:	2501      	movcc	r5, #1
 80049c2:	e7cf      	b.n	8004964 <prvCopyDataToQueue+0x14>

080049c4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049c8:	f001 fe0c 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049cc:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80049d0:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d2:	2c00      	cmp	r4, #0
 80049d4:	dd14      	ble.n	8004a00 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d6:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80049da:	e003      	b.n	80049e4 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049dc:	1e63      	subs	r3, r4, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e2:	b16a      	cbz	r2, 8004a00 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049e6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e8:	b153      	cbz	r3, 8004a00 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ea:	f001 f9ef 	bl	8005dcc <xTaskRemoveFromEventList>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	d0f4      	beq.n	80049dc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80049f2:	f001 fa7f 	bl	8005ef4 <vTaskMissedYield>
			--cTxLock;
 80049f6:	1e63      	subs	r3, r4, #1
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	d1f1      	bne.n	80049e4 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a00:	23ff      	movs	r3, #255	@ 0xff
 8004a02:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a06:	f001 fe0f 	bl	8006628 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a0a:	f001 fdeb 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a0e:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8004a12:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a14:	2c00      	cmp	r4, #0
 8004a16:	dd14      	ble.n	8004a42 <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a18:	f105 0610 	add.w	r6, r5, #16
 8004a1c:	e003      	b.n	8004a26 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a1e:	1e63      	subs	r3, r4, #1
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a24:	b16a      	cbz	r2, 8004a42 <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a26:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a28:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a2a:	b153      	cbz	r3, 8004a42 <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a2c:	f001 f9ce 	bl	8005dcc <xTaskRemoveFromEventList>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d0f4      	beq.n	8004a1e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8004a34:	f001 fa5e 	bl	8005ef4 <vTaskMissedYield>
				--cRxLock;
 8004a38:	1e63      	subs	r3, r4, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d1f1      	bne.n	8004a26 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a42:	23ff      	movs	r3, #255	@ 0xff
 8004a44:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
}
 8004a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004a4c:	f001 bdec 	b.w	8006628 <vPortExitCritical>

08004a50 <xQueueGenericReset>:
{
 8004a50:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8004a52:	b1e0      	cbz	r0, 8004a8e <xQueueGenericReset+0x3e>
 8004a54:	4604      	mov	r4, r0
 8004a56:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004a58:	f001 fdc4 	bl	80065e4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5c:	6822      	ldr	r2, [r4, #0]
 8004a5e:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a62:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a64:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a68:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a6a:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a6c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a6e:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a70:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004a72:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a74:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a76:	63a1      	str	r1, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a78:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a7c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8004a80:	b975      	cbnz	r5, 8004aa0 <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	b9c3      	cbnz	r3, 8004ab8 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8004a86:	f001 fdcf 	bl	8006628 <vPortExitCritical>
}
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004a9e:	e7fe      	b.n	8004a9e <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa0:	f104 0010 	add.w	r0, r4, #16
 8004aa4:	f7ff ff0a 	bl	80048bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aa8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004aac:	f7ff ff06 	bl	80048bc <vListInitialise>
	taskEXIT_CRITICAL();
 8004ab0:	f001 fdba 	bl	8006628 <vPortExitCritical>
}
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab8:	f104 0010 	add.w	r0, r4, #16
 8004abc:	f001 f986 	bl	8005dcc <xTaskRemoveFromEventList>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d0e0      	beq.n	8004a86 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8004ac4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004acc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	e7d5      	b.n	8004a86 <xQueueGenericReset+0x36>
 8004ada:	bf00      	nop

08004adc <xQueueGenericCreateStatic>:
	{
 8004adc:	b530      	push	{r4, r5, lr}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ae4:	b940      	cbnz	r0, 8004af8 <xQueueGenericCreateStatic+0x1c>
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8004af8:	b153      	cbz	r3, 8004b10 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004afa:	b30a      	cbz	r2, 8004b40 <xQueueGenericCreateStatic+0x64>
 8004afc:	b989      	cbnz	r1, 8004b22 <xQueueGenericCreateStatic+0x46>
 8004afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	e7fe      	b.n	8004b0e <xQueueGenericCreateStatic+0x32>
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004b20:	e7fe      	b.n	8004b20 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b22:	b16a      	cbz	r2, 8004b40 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b24:	2550      	movs	r5, #80	@ 0x50
 8004b26:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b28:	9d03      	ldr	r5, [sp, #12]
 8004b2a:	2d50      	cmp	r5, #80	@ 0x50
 8004b2c:	d013      	beq.n	8004b56 <xQueueGenericCreateStatic+0x7a>
 8004b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	e7fe      	b.n	8004b3e <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b40:	2900      	cmp	r1, #0
 8004b42:	d0ef      	beq.n	8004b24 <xQueueGenericCreateStatic+0x48>
 8004b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericCreateStatic+0x78>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b56:	2900      	cmp	r1, #0
 8004b58:	bf08      	it	eq
 8004b5a:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8004b5c:	6419      	str	r1, [r3, #64]	@ 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b5e:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8004b60:	63d8      	str	r0, [r3, #60]	@ 0x3c
 8004b62:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b64:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b66:	f883 1046 	strb.w	r1, [r3, #70]	@ 0x46
 8004b6a:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b6c:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b6e:	f7ff ff6f 	bl	8004a50 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004b72:	9b01      	ldr	r3, [sp, #4]
	}
 8004b74:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8004b76:	f883 404c 	strb.w	r4, [r3, #76]	@ 0x4c
	}
 8004b7a:	b005      	add	sp, #20
 8004b7c:	bd30      	pop	{r4, r5, pc}
 8004b7e:	bf00      	nop

08004b80 <xQueueGenericCreate>:
	{
 8004b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b82:	b940      	cbnz	r0, 8004b96 <xQueueGenericCreate+0x16>
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericCreate+0x14>
 8004b96:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b98:	fb01 f000 	mul.w	r0, r1, r0
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ba0:	3050      	adds	r0, #80	@ 0x50
 8004ba2:	f001 fe99 	bl	80068d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004ba6:	4607      	mov	r7, r0
 8004ba8:	b170      	cbz	r0, 8004bc8 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bb0:	b165      	cbz	r5, 8004bcc <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bb2:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	4638      	mov	r0, r7
 8004bba:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004bbc:	e9c7 450f 	strd	r4, r5, [r7, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bc0:	f7ff ff46 	bl	8004a50 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004bc4:	f887 604c 	strb.w	r6, [r7, #76]	@ 0x4c
	}
 8004bc8:	4638      	mov	r0, r7
 8004bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e7f2      	b.n	8004bb6 <xQueueGenericCreate+0x36>

08004bd0 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8004bd0:	b940      	cbnz	r0, 8004be4 <xQueueCreateCountingSemaphoreStatic+0x14>
 8004bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	e7fe      	b.n	8004be2 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004be4:	4288      	cmp	r0, r1
	{
 8004be6:	b510      	push	{r4, lr}
 8004be8:	460c      	mov	r4, r1
 8004bea:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 8004bec:	d208      	bcs.n	8004c00 <xQueueCreateCountingSemaphoreStatic+0x30>
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	e7fe      	b.n	8004bfe <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c00:	2102      	movs	r1, #2
 8004c02:	4613      	mov	r3, r2
 8004c04:	2200      	movs	r2, #0
 8004c06:	9100      	str	r1, [sp, #0]
 8004c08:	4611      	mov	r1, r2
 8004c0a:	f7ff ff67 	bl	8004adc <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004c0e:	b100      	cbz	r0, 8004c12 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c10:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8004c12:	b002      	add	sp, #8
 8004c14:	bd10      	pop	{r4, pc}
 8004c16:	bf00      	nop

08004c18 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8004c18:	b940      	cbnz	r0, 8004c2c <xQueueCreateCountingSemaphore+0x14>
 8004c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	e7fe      	b.n	8004c2a <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c2c:	4288      	cmp	r0, r1
	{
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c32:	d208      	bcs.n	8004c46 <xQueueCreateCountingSemaphore+0x2e>
 8004c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	e7fe      	b.n	8004c44 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004c46:	2202      	movs	r2, #2
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f7ff ff99 	bl	8004b80 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004c4e:	b100      	cbz	r0, 8004c52 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004c50:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8004c52:	bd10      	pop	{r4, pc}

08004c54 <xQueueGenericSend>:
{
 8004c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d07e      	beq.n	8004d5e <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c60:	460f      	mov	r7, r1
 8004c62:	4604      	mov	r4, r0
 8004c64:	461e      	mov	r6, r3
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d069      	beq.n	8004d3e <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c6a:	2e02      	cmp	r6, #2
 8004c6c:	d10b      	bne.n	8004c86 <xQueueGenericSend+0x32>
 8004c6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d008      	beq.n	8004c86 <xQueueGenericSend+0x32>
 8004c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c86:	f001 f941 	bl	8005f0c <xTaskGetSchedulerState>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	d070      	beq.n	8004d70 <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c8e:	f1a6 0802 	sub.w	r8, r6, #2
 8004c92:	2500      	movs	r5, #0
 8004c94:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8004c98:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c9a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004c9e:	e007      	b.n	8004cb0 <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004ca0:	f001 fcc2 	bl	8006628 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7ff fe8d 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004caa:	f000 ffc1 	bl	8005c30 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cae:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8004cb0:	f001 fc98 	bl	80065e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cb4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004cb6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004cb8:	4290      	cmp	r0, r2
 8004cba:	d365      	bcc.n	8004d88 <xQueueGenericSend+0x134>
 8004cbc:	f1b8 0f00 	cmp.w	r8, #0
 8004cc0:	d162      	bne.n	8004d88 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d077      	beq.n	8004db8 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 8004cc8:	2d00      	cmp	r5, #0
 8004cca:	d044      	beq.n	8004d56 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 8004ccc:	f001 fcac 	bl	8006628 <vPortExitCritical>
		vTaskSuspendAll();
 8004cd0:	f000 fe5a 	bl	8005988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd4:	f001 fc86 	bl	80065e4 <vPortEnterCritical>
 8004cd8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004cdc:	2bff      	cmp	r3, #255	@ 0xff
 8004cde:	d101      	bne.n	8004ce4 <xQueueGenericSend+0x90>
 8004ce0:	f884 9044 	strb.w	r9, [r4, #68]	@ 0x44
 8004ce4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004ce8:	2bff      	cmp	r3, #255	@ 0xff
 8004cea:	d101      	bne.n	8004cf0 <xQueueGenericSend+0x9c>
 8004cec:	f884 9045 	strb.w	r9, [r4, #69]	@ 0x45
 8004cf0:	f001 fc9a 	bl	8006628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cf4:	a901      	add	r1, sp, #4
 8004cf6:	a802      	add	r0, sp, #8
 8004cf8:	f001 f8ba 	bl	8005e70 <xTaskCheckForTimeOut>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d15f      	bne.n	8004dc0 <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 8004d00:	f001 fc70 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004d06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d1c9      	bne.n	8004ca0 <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 8004d0c:	f001 fc8c 	bl	8006628 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d10:	9901      	ldr	r1, [sp, #4]
 8004d12:	f104 0010 	add.w	r0, r4, #16
 8004d16:	f001 f821 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d1a:	4620      	mov	r0, r4
 8004d1c:	f7ff fe52 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d20:	f000 ff86 	bl	8005c30 <xTaskResumeAll>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d1c2      	bne.n	8004cae <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8004d28:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d30:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	e7b7      	b.n	8004cae <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d092      	beq.n	8004c6a <xQueueGenericSend+0x16>
 8004d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d48:	f383 8811 	msr	BASEPRI, r3
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	e7fe      	b.n	8004d54 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d56:	a802      	add	r0, sp, #8
 8004d58:	f001 f87e 	bl	8005e58 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d5c:	e7b6      	b.n	8004ccc <xQueueGenericSend+0x78>
 8004d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004d6e:	e7fe      	b.n	8004d6e <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d08b      	beq.n	8004c8e <xQueueGenericSend+0x3a>
 8004d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	e7fe      	b.n	8004d86 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d88:	4632      	mov	r2, r6
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fddf 	bl	8004950 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004d94:	b9d3      	cbnz	r3, 8004dcc <xQueueGenericSend+0x178>
					else if( xYieldRequired != pdFALSE )
 8004d96:	b148      	cbz	r0, 8004dac <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8004d98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004da0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004dac:	f001 fc3c 	bl	8006628 <vPortExitCritical>
				return pdPASS;
 8004db0:	2001      	movs	r0, #1
}
 8004db2:	b005      	add	sp, #20
 8004db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8004db8:	f001 fc36 	bl	8006628 <vPortExitCritical>
					return errQUEUE_FULL;
 8004dbc:	2000      	movs	r0, #0
 8004dbe:	e7f8      	b.n	8004db2 <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7ff fdff 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004dc6:	f000 ff33 	bl	8005c30 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004dca:	e7f7      	b.n	8004dbc <xQueueGenericSend+0x168>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dcc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004dd0:	f000 fffc 	bl	8005dcc <xTaskRemoveFromEventList>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d0e9      	beq.n	8004dac <xQueueGenericSend+0x158>
 8004dd8:	e7de      	b.n	8004d98 <xQueueGenericSend+0x144>
 8004dda:	bf00      	nop

08004ddc <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8004ddc:	b179      	cbz	r1, 8004dfe <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dde:	2350      	movs	r3, #80	@ 0x50
	{
 8004de0:	b570      	push	{r4, r5, r6, lr}
 8004de2:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004de4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004de6:	9b01      	ldr	r3, [sp, #4]
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d011      	beq.n	8004e10 <xQueueCreateMutexStatic+0x34>
 8004dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	e7fe      	b.n	8004dfc <xQueueCreateMutexStatic+0x20>
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8004e0e:	e7fe      	b.n	8004e0e <xQueueCreateMutexStatic+0x32>
 8004e10:	460c      	mov	r4, r1
	pxNewQueue->uxLength = uxQueueLength;
 8004e12:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e14:	2101      	movs	r1, #1
 8004e16:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e18:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e1a:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e1c:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e20:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8004e22:	e9c4 160f 	strd	r1, r6, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e26:	f7ff fe13 	bl	8004a50 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e2a:	4633      	mov	r3, r6
 8004e2c:	4632      	mov	r2, r6
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004e32:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e36:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e38:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e3a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e3c:	f7ff ff0a 	bl	8004c54 <xQueueGenericSend>
	}
 8004e40:	4620      	mov	r0, r4
 8004e42:	b002      	add	sp, #8
 8004e44:	bd70      	pop	{r4, r5, r6, pc}
 8004e46:	bf00      	nop

08004e48 <xQueueGiveMutexRecursive>:
	{
 8004e48:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8004e4a:	b138      	cbz	r0, 8004e5c <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004e4c:	6885      	ldr	r5, [r0, #8]
 8004e4e:	4604      	mov	r4, r0
 8004e50:	f001 f856 	bl	8005f00 <xTaskGetCurrentTaskHandle>
 8004e54:	4285      	cmp	r5, r0
 8004e56:	d00a      	beq.n	8004e6e <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004e58:	2000      	movs	r0, #0
	}
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004e6c:	e7fe      	b.n	8004e6c <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004e6e:	68e3      	ldr	r3, [r4, #12]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004e74:	b10b      	cbz	r3, 8004e7a <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004e76:	2001      	movs	r0, #1
	}
 8004e78:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff fee8 	bl	8004c54 <xQueueGenericSend>
 8004e84:	e7f7      	b.n	8004e76 <xQueueGiveMutexRecursive+0x2e>
 8004e86:	bf00      	nop

08004e88 <xQueueCreateMutex>:
	{
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e8c:	2050      	movs	r0, #80	@ 0x50
 8004e8e:	f001 fd23 	bl	80068d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004e92:	4604      	mov	r4, r0
 8004e94:	b198      	cbz	r0, 8004ebe <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e96:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004e98:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e9a:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e9c:	f880 6046 	strb.w	r6, [r0, #70]	@ 0x46
	pxNewQueue->uxLength = uxQueueLength;
 8004ea0:	e9c0 160f 	strd	r1, r6, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ea4:	f7ff fdd4 	bl	8004a50 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ea8:	4633      	mov	r3, r6
 8004eaa:	4632      	mov	r2, r6
 8004eac:	4631      	mov	r1, r6
 8004eae:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb0:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004eb4:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004eb6:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004eb8:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004eba:	f7ff fecb 	bl	8004c54 <xQueueGenericSend>
	}
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
 8004ec2:	bf00      	nop

08004ec4 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d04b      	beq.n	8004f60 <xQueueGenericSendFromISR+0x9c>
{
 8004ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ecc:	460e      	mov	r6, r1
 8004ece:	4604      	mov	r4, r0
 8004ed0:	4617      	mov	r7, r2
 8004ed2:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed4:	b339      	cbz	r1, 8004f26 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ed6:	2d02      	cmp	r5, #2
 8004ed8:	d10b      	bne.n	8004ef2 <xQueueGenericSendFromISR+0x2e>
 8004eda:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d008      	beq.n	8004ef2 <xQueueGenericSendFromISR+0x2e>
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	e7fe      	b.n	8004ef0 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ef2:	f001 fc93 	bl	800681c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ef6:	f3ef 8811 	mrs	r8, BASEPRI
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f0a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004f0c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d315      	bcc.n	8004f3e <xQueueGenericSendFromISR+0x7a>
 8004f12:	f1a5 0002 	sub.w	r0, r5, #2
 8004f16:	fab0 f080 	clz	r0, r0
 8004f1a:	0940      	lsrs	r0, r0, #5
 8004f1c:	b978      	cbnz	r0, 8004f3e <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f1e:	f388 8811 	msr	BASEPRI, r8
}
 8004f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f26:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0d4      	beq.n	8004ed6 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f3e:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f40:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f44:	4631      	mov	r1, r6
 8004f46:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f48:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f4c:	f7ff fd00 	bl	8004950 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004f50:	1c6b      	adds	r3, r5, #1
 8004f52:	d00e      	beq.n	8004f72 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f54:	1c6b      	adds	r3, r5, #1
 8004f56:	b25b      	sxtb	r3, r3
 8004f58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	e7de      	b.n	8004f1e <xQueueGenericSendFromISR+0x5a>
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004f70:	e7fe      	b.n	8004f70 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f1      	beq.n	8004f5c <xQueueGenericSendFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f78:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8004f7c:	f000 ff26 	bl	8005dcc <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004f80:	2f00      	cmp	r7, #0
 8004f82:	d0eb      	beq.n	8004f5c <xQueueGenericSendFromISR+0x98>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d0e9      	beq.n	8004f5c <xQueueGenericSendFromISR+0x98>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	e7e6      	b.n	8004f5c <xQueueGenericSendFromISR+0x98>
 8004f8e:	bf00      	nop

08004f90 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004f90:	b360      	cbz	r0, 8004fec <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f92:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f98:	b143      	cbz	r3, 8004fac <xQueueGiveFromISR+0x1c>
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	e7fe      	b.n	8004faa <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004fac:	6803      	ldr	r3, [r0, #0]
 8004fae:	460d      	mov	r5, r1
 8004fb0:	b32b      	cbz	r3, 8004ffe <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fb2:	f001 fc33 	bl	800681c <vPortValidateInterruptPriority>
	__asm volatile
 8004fb6:	f3ef 8611 	mrs	r6, BASEPRI
 8004fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fca:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004fcc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d921      	bls.n	8005016 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fd2:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fd6:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004fd8:	2aff      	cmp	r2, #255	@ 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fda:	63a3      	str	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fdc:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004fde:	d01e      	beq.n	800501e <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
			xReturn = pdPASS;
 8004fe8:	2001      	movs	r0, #1
 8004fea:	e015      	b.n	8005018 <xQueueGiveFromISR+0x88>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004ffe:	6883      	ldr	r3, [r0, #8]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0d6      	beq.n	8004fb2 <xQueueGiveFromISR+0x22>
 8005004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	e7fe      	b.n	8005014 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8005016:	2000      	movs	r0, #0
	__asm volatile
 8005018:	f386 8811 	msr	BASEPRI, r6
}
 800501c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800501e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0e1      	beq.n	8004fe8 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005024:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005028:	f000 fed0 	bl	8005dcc <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 800502c:	2d00      	cmp	r5, #0
 800502e:	d0db      	beq.n	8004fe8 <xQueueGiveFromISR+0x58>
 8005030:	2800      	cmp	r0, #0
 8005032:	d0d9      	beq.n	8004fe8 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	e7d6      	b.n	8004fe8 <xQueueGiveFromISR+0x58>
 800503a:	bf00      	nop

0800503c <xQueueReceive>:
{
 800503c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503e:	b085      	sub	sp, #20
 8005040:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005042:	2800      	cmp	r0, #0
 8005044:	f000 8084 	beq.w	8005150 <xQueueReceive+0x114>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005048:	460e      	mov	r6, r1
 800504a:	4604      	mov	r4, r0
 800504c:	2900      	cmp	r1, #0
 800504e:	d041      	beq.n	80050d4 <xQueueReceive+0x98>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005050:	f000 ff5c 	bl	8005f0c <xTaskGetSchedulerState>
 8005054:	2800      	cmp	r0, #0
 8005056:	d049      	beq.n	80050ec <xQueueReceive+0xb0>
		taskENTER_CRITICAL();
 8005058:	f001 fac4 	bl	80065e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800505c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800505e:	2d00      	cmp	r5, #0
 8005060:	d17f      	bne.n	8005162 <xQueueReceive+0x126>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005062:	9b01      	ldr	r3, [sp, #4]
 8005064:	b38b      	cbz	r3, 80050ca <xQueueReceive+0x8e>
		prvLockQueue( pxQueue );
 8005066:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005068:	a802      	add	r0, sp, #8
 800506a:	f000 fef5 	bl	8005e58 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800506e:	f001 fadb 	bl	8006628 <vPortExitCritical>
		vTaskSuspendAll();
 8005072:	f000 fc89 	bl	8005988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005076:	f001 fab5 	bl	80065e4 <vPortEnterCritical>
 800507a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800507e:	2bff      	cmp	r3, #255	@ 0xff
 8005080:	d101      	bne.n	8005086 <xQueueReceive+0x4a>
 8005082:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8005086:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800508a:	2bff      	cmp	r3, #255	@ 0xff
 800508c:	d101      	bne.n	8005092 <xQueueReceive+0x56>
 800508e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005092:	f001 fac9 	bl	8006628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005096:	a901      	add	r1, sp, #4
 8005098:	a802      	add	r0, sp, #8
 800509a:	f000 fee9 	bl	8005e70 <xTaskCheckForTimeOut>
 800509e:	2800      	cmp	r0, #0
 80050a0:	d130      	bne.n	8005104 <xQueueReceive+0xc8>
	taskENTER_CRITICAL();
 80050a2:	f001 fa9f 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050a6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d038      	beq.n	800511e <xQueueReceive+0xe2>
	taskEXIT_CRITICAL();
 80050ac:	f001 fabc 	bl	8006628 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80050b0:	4620      	mov	r0, r4
 80050b2:	f7ff fc87 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050b6:	f000 fdbb 	bl	8005c30 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80050ba:	f001 fa93 	bl	80065e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050be:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d14e      	bne.n	8005162 <xQueueReceive+0x126>
				if( xTicksToWait == ( TickType_t ) 0 )
 80050c4:	9b01      	ldr	r3, [sp, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1d1      	bne.n	800506e <xQueueReceive+0x32>
					taskEXIT_CRITICAL();
 80050ca:	f001 faad 	bl	8006628 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80050ce:	2000      	movs	r0, #0
}
 80050d0:	b005      	add	sp, #20
 80050d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050d4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ba      	beq.n	8005050 <xQueueReceive+0x14>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	e7fe      	b.n	80050ea <xQueueReceive+0xae>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050ec:	9b01      	ldr	r3, [sp, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0b2      	beq.n	8005058 <xQueueReceive+0x1c>
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	e7fe      	b.n	8005102 <xQueueReceive+0xc6>
			prvUnlockQueue( pxQueue );
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff fc5d 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800510a:	f000 fd91 	bl	8005c30 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800510e:	f001 fa69 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005112:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0d8      	beq.n	80050ca <xQueueReceive+0x8e>
	taskEXIT_CRITICAL();
 8005118:	f001 fa86 	bl	8006628 <vPortExitCritical>
	return xReturn;
 800511c:	e7cd      	b.n	80050ba <xQueueReceive+0x7e>
	taskEXIT_CRITICAL();
 800511e:	f001 fa83 	bl	8006628 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005122:	9901      	ldr	r1, [sp, #4]
 8005124:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005128:	f000 fe18 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff fc49 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005132:	f000 fd7d 	bl	8005c30 <xTaskResumeAll>
 8005136:	2800      	cmp	r0, #0
 8005138:	d1bf      	bne.n	80050ba <xQueueReceive+0x7e>
					portYIELD_WITHIN_API();
 800513a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800513e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005142:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	e7b4      	b.n	80050ba <xQueueReceive+0x7e>
 8005150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005160:	e7fe      	b.n	8005160 <xQueueReceive+0x124>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005162:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005164:	b152      	cbz	r2, 800517c <xQueueReceive+0x140>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005166:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005168:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800516a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800516c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800516e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005170:	d301      	bcc.n	8005176 <xQueueReceive+0x13a>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005172:	6821      	ldr	r1, [r4, #0]
 8005174:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005176:	4630      	mov	r0, r6
 8005178:	f009 f9e8 	bl	800e54c <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800517c:	3d01      	subs	r5, #1
 800517e:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005180:	6923      	ldr	r3, [r4, #16]
 8005182:	b91b      	cbnz	r3, 800518c <xQueueReceive+0x150>
				taskEXIT_CRITICAL();
 8005184:	f001 fa50 	bl	8006628 <vPortExitCritical>
				return pdPASS;
 8005188:	2001      	movs	r0, #1
 800518a:	e7a1      	b.n	80050d0 <xQueueReceive+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800518c:	f104 0010 	add.w	r0, r4, #16
 8005190:	f000 fe1c 	bl	8005dcc <xTaskRemoveFromEventList>
 8005194:	2800      	cmp	r0, #0
 8005196:	d0f5      	beq.n	8005184 <xQueueReceive+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8005198:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800519c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	e7ea      	b.n	8005184 <xQueueReceive+0x148>
 80051ae:	bf00      	nop

080051b0 <xQueueSemaphoreTake>:
{
 80051b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b2:	b085      	sub	sp, #20
 80051b4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d057      	beq.n	800526a <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 80051ba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80051bc:	4604      	mov	r4, r0
 80051be:	b143      	cbz	r3, 80051d2 <xQueueSemaphoreTake+0x22>
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	e7fe      	b.n	80051d0 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051d2:	f000 fe9b 	bl	8005f0c <xTaskGetSchedulerState>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	d050      	beq.n	800527c <xQueueSemaphoreTake+0xcc>
		taskENTER_CRITICAL();
 80051da:	f001 fa03 	bl	80065e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80051de:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	f040 809b 	bne.w	800531c <xQueueSemaphoreTake+0x16c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80051e6:	9b01      	ldr	r3, [sp, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 808b 	beq.w	8005304 <xQueueSemaphoreTake+0x154>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ee:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80051f0:	462f      	mov	r7, r5
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051f2:	a802      	add	r0, sp, #8
 80051f4:	f000 fe30 	bl	8005e58 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80051f8:	f001 fa16 	bl	8006628 <vPortExitCritical>
		vTaskSuspendAll();
 80051fc:	f000 fbc4 	bl	8005988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005200:	f001 f9f0 	bl	80065e4 <vPortEnterCritical>
 8005204:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005208:	2bff      	cmp	r3, #255	@ 0xff
 800520a:	d101      	bne.n	8005210 <xQueueSemaphoreTake+0x60>
 800520c:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 8005210:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005214:	2bff      	cmp	r3, #255	@ 0xff
 8005216:	d101      	bne.n	800521c <xQueueSemaphoreTake+0x6c>
 8005218:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800521c:	f001 fa04 	bl	8006628 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005220:	a901      	add	r1, sp, #4
 8005222:	a802      	add	r0, sp, #8
 8005224:	f000 fe24 	bl	8005e70 <xTaskCheckForTimeOut>
 8005228:	2800      	cmp	r0, #0
 800522a:	d133      	bne.n	8005294 <xQueueSemaphoreTake+0xe4>
	taskENTER_CRITICAL();
 800522c:	f001 f9da 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005230:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d040      	beq.n	80052b8 <xQueueSemaphoreTake+0x108>
	taskEXIT_CRITICAL();
 8005236:	f001 f9f7 	bl	8006628 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff fbc2 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005240:	f000 fcf6 	bl	8005c30 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8005244:	f001 f9ce 	bl	80065e4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005248:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800524a:	2d00      	cmp	r5, #0
 800524c:	d166      	bne.n	800531c <xQueueSemaphoreTake+0x16c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800524e:	9b01      	ldr	r3, [sp, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1d1      	bne.n	80051f8 <xQueueSemaphoreTake+0x48>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005254:	2e00      	cmp	r6, #0
 8005256:	d055      	beq.n	8005304 <xQueueSemaphoreTake+0x154>
 8005258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	e7fe      	b.n	8005268 <xQueueSemaphoreTake+0xb8>
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800527a:	e7fe      	b.n	800527a <xQueueSemaphoreTake+0xca>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800527c:	9b01      	ldr	r3, [sp, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ab      	beq.n	80051da <xQueueSemaphoreTake+0x2a>
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	e7fe      	b.n	8005292 <xQueueSemaphoreTake+0xe2>
			prvUnlockQueue( pxQueue );
 8005294:	4620      	mov	r0, r4
 8005296:	f7ff fb95 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800529a:	f000 fcc9 	bl	8005c30 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800529e:	f001 f9a1 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052a2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80052a4:	b92b      	cbnz	r3, 80052b2 <xQueueSemaphoreTake+0x102>
	taskEXIT_CRITICAL();
 80052a6:	f001 f9bf 	bl	8006628 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80052aa:	bb06      	cbnz	r6, 80052ee <xQueueSemaphoreTake+0x13e>
					return errQUEUE_EMPTY;
 80052ac:	2000      	movs	r0, #0
}
 80052ae:	b005      	add	sp, #20
 80052b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	taskEXIT_CRITICAL();
 80052b2:	f001 f9b9 	bl	8006628 <vPortExitCritical>
	return xReturn;
 80052b6:	e7c5      	b.n	8005244 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 80052b8:	f001 f9b6 	bl	8006628 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	b323      	cbz	r3, 800530a <xQueueSemaphoreTake+0x15a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80052c6:	f000 fd49 	bl	8005d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fb7a 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052d0:	f000 fcae 	bl	8005c30 <xTaskResumeAll>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d1b5      	bne.n	8005244 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 80052d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80052dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	e7aa      	b.n	8005244 <xQueueSemaphoreTake+0x94>
						taskENTER_CRITICAL();
 80052ee:	f001 f979 	bl	80065e4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052f2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80052f4:	b119      	cbz	r1, 80052fe <xQueueSemaphoreTake+0x14e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052fe:	68a0      	ldr	r0, [r4, #8]
 8005300:	f000 fe98 	bl	8006034 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005304:	f001 f990 	bl	8006628 <vPortExitCritical>
 8005308:	e7d0      	b.n	80052ac <xQueueSemaphoreTake+0xfc>
						taskENTER_CRITICAL();
 800530a:	f001 f96b 	bl	80065e4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800530e:	68a0      	ldr	r0, [r4, #8]
 8005310:	f000 fe0c 	bl	8005f2c <xTaskPriorityInherit>
 8005314:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8005316:	f001 f987 	bl	8006628 <vPortExitCritical>
 800531a:	e7d1      	b.n	80052c0 <xQueueSemaphoreTake+0x110>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800531c:	3d01      	subs	r5, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800531e:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005320:	63a5      	str	r5, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005322:	b12b      	cbz	r3, 8005330 <xQueueSemaphoreTake+0x180>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	b93b      	cbnz	r3, 8005338 <xQueueSemaphoreTake+0x188>
				taskEXIT_CRITICAL();
 8005328:	f001 f97e 	bl	8006628 <vPortExitCritical>
				return pdPASS;
 800532c:	2001      	movs	r0, #1
 800532e:	e7be      	b.n	80052ae <xQueueSemaphoreTake+0xfe>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005330:	f000 fed0 	bl	80060d4 <pvTaskIncrementMutexHeldCount>
 8005334:	60a0      	str	r0, [r4, #8]
 8005336:	e7f5      	b.n	8005324 <xQueueSemaphoreTake+0x174>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005338:	f104 0010 	add.w	r0, r4, #16
 800533c:	f000 fd46 	bl	8005dcc <xTaskRemoveFromEventList>
 8005340:	2800      	cmp	r0, #0
 8005342:	d0f1      	beq.n	8005328 <xQueueSemaphoreTake+0x178>
						queueYIELD_IF_USING_PREEMPTION();
 8005344:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	e7e6      	b.n	8005328 <xQueueSemaphoreTake+0x178>
 800535a:	bf00      	nop

0800535c <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 800535c:	b1a8      	cbz	r0, 800538a <xQueueTakeMutexRecursive+0x2e>
	{
 800535e:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005360:	6886      	ldr	r6, [r0, #8]
 8005362:	4604      	mov	r4, r0
 8005364:	460d      	mov	r5, r1
 8005366:	f000 fdcb 	bl	8005f00 <xTaskGetCurrentTaskHandle>
 800536a:	4286      	cmp	r6, r0
 800536c:	d008      	beq.n	8005380 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800536e:	4629      	mov	r1, r5
 8005370:	4620      	mov	r0, r4
 8005372:	f7ff ff1d 	bl	80051b0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8005376:	b110      	cbz	r0, 800537e <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005378:	68e3      	ldr	r3, [r4, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	60e3      	str	r3, [r4, #12]
	}
 800537e:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005380:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8005382:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005384:	4403      	add	r3, r0
 8005386:	60e3      	str	r3, [r4, #12]
	}
 8005388:	bd70      	pop	{r4, r5, r6, pc}
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 800539a:	e7fe      	b.n	800539a <xQueueTakeMutexRecursive+0x3e>

0800539c <xQueueReceiveFromISR>:
{
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80053a0:	b310      	cbz	r0, 80053e8 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a2:	460f      	mov	r7, r1
 80053a4:	4604      	mov	r4, r0
 80053a6:	4616      	mov	r6, r2
 80053a8:	b191      	cbz	r1, 80053d0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053aa:	f001 fa37 	bl	800681c <vPortValidateInterruptPriority>
	__asm volatile
 80053ae:	f3ef 8911 	mrs	r9, BASEPRI
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053c2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053c4:	b9cd      	cbnz	r5, 80053fa <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80053c6:	4628      	mov	r0, r5
	__asm volatile
 80053c8:	f389 8811 	msr	BASEPRI, r9
}
 80053cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0e9      	beq.n	80053aa <xQueueReceiveFromISR+0xe>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	e7fe      	b.n	80053e6 <xQueueReceiveFromISR+0x4a>
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80053f8:	e7fe      	b.n	80053f8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80053fa:	f894 8044 	ldrb.w	r8, [r4, #68]	@ 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053fe:	6c22      	ldr	r2, [r4, #64]	@ 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005400:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005404:	b142      	cbz	r2, 8005418 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005406:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005408:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800540a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800540c:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800540e:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005410:	d21c      	bcs.n	800544c <xQueueReceiveFromISR+0xb0>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005412:	4638      	mov	r0, r7
 8005414:	f009 f89a 	bl	800e54c <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005418:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800541a:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800541e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005420:	d006      	beq.n	8005430 <xQueueReceiveFromISR+0x94>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005422:	f108 0301 	add.w	r3, r8, #1
 8005426:	b25b      	sxtb	r3, r3
 8005428:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 800542c:	2001      	movs	r0, #1
 800542e:	e7cb      	b.n	80053c8 <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0fa      	beq.n	800542c <xQueueReceiveFromISR+0x90>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005436:	f104 0010 	add.w	r0, r4, #16
 800543a:	f000 fcc7 	bl	8005dcc <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 800543e:	2e00      	cmp	r6, #0
 8005440:	d0f4      	beq.n	800542c <xQueueReceiveFromISR+0x90>
 8005442:	2800      	cmp	r0, #0
 8005444:	d0f2      	beq.n	800542c <xQueueReceiveFromISR+0x90>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005446:	2301      	movs	r3, #1
 8005448:	6033      	str	r3, [r6, #0]
 800544a:	e7ef      	b.n	800542c <xQueueReceiveFromISR+0x90>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800544c:	6821      	ldr	r1, [r4, #0]
 800544e:	60e1      	str	r1, [r4, #12]
 8005450:	e7df      	b.n	8005412 <xQueueReceiveFromISR+0x76>
 8005452:	bf00      	nop

08005454 <vQueueDelete>:
	configASSERT( pxQueue );
 8005454:	b170      	cbz	r0, 8005474 <vQueueDelete+0x20>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005456:	2300      	movs	r3, #0
 8005458:	4911      	ldr	r1, [pc, #68]	@ (80054a0 <vQueueDelete+0x4c>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800545a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800545e:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005462:	3301      	adds	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005464:	4290      	cmp	r0, r2
 8005466:	d010      	beq.n	800548a <vQueueDelete+0x36>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005468:	2b08      	cmp	r3, #8
 800546a:	d1f6      	bne.n	800545a <vQueueDelete+0x6>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800546c:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8005470:	b14b      	cbz	r3, 8005486 <vQueueDelete+0x32>
}
 8005472:	4770      	bx	lr
 8005474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005478:	f383 8811 	msr	BASEPRI, r3
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005484:	e7fe      	b.n	8005484 <vQueueDelete+0x30>
			vPortFree( pxQueue );
 8005486:	f001 babd 	b.w	8006a04 <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800548a:	4906      	ldr	r1, [pc, #24]	@ (80054a4 <vQueueDelete+0x50>)
 800548c:	2300      	movs	r3, #0
 800548e:	2200      	movs	r2, #0
 8005490:	448c      	add	ip, r1
 8005492:	e9cc 2300 	strd	r2, r3, [ip]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005496:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1e9      	bne.n	8005472 <vQueueDelete+0x1e>
 800549e:	e7f2      	b.n	8005486 <vQueueDelete+0x32>
 80054a0:	24001bf4 	.word	0x24001bf4
 80054a4:	24001bf0 	.word	0x24001bf0

080054a8 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054a8:	2300      	movs	r3, #0
 80054aa:	4a0a      	ldr	r2, [pc, #40]	@ (80054d4 <vQueueAddToRegistry+0x2c>)
	{
 80054ac:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054ae:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80054b2:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 80054b6:	b12c      	cbz	r4, 80054c4 <vQueueAddToRegistry+0x1c>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054b8:	3301      	adds	r3, #1
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d1f7      	bne.n	80054ae <vQueueAddToRegistry+0x6>
	}
 80054be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054cc:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	24001bf0 	.word	0x24001bf0

080054d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	4604      	mov	r4, r0
 80054dc:	460e      	mov	r6, r1
 80054de:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054e0:	f001 f880 	bl	80065e4 <vPortEnterCritical>
 80054e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80054e8:	2bff      	cmp	r3, #255	@ 0xff
 80054ea:	d102      	bne.n	80054f2 <vQueueWaitForMessageRestricted+0x1a>
 80054ec:	2300      	movs	r3, #0
 80054ee:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80054f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80054f6:	2bff      	cmp	r3, #255	@ 0xff
 80054f8:	d102      	bne.n	8005500 <vQueueWaitForMessageRestricted+0x28>
 80054fa:	2300      	movs	r3, #0
 80054fc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005500:	f001 f892 	bl	8006628 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005506:	b123      	cbz	r3, 8005512 <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005508:	4620      	mov	r0, r4
	}
 800550a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800550e:	f7ff ba59 	b.w	80049c4 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005512:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005516:	462a      	mov	r2, r5
 8005518:	4631      	mov	r1, r6
 800551a:	f000 fc39 	bl	8005d90 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 800551e:	4620      	mov	r0, r4
	}
 8005520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8005524:	f7ff ba4e 	b.w	80049c4 <prvUnlockQueue>

08005528 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552c:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800552e:	f001 f859 	bl	80065e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005532:	4a33      	ldr	r2, [pc, #204]	@ (8005600 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8005534:	4e33      	ldr	r6, [pc, #204]	@ (8005604 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800553c:	6833      	ldr	r3, [r6, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d031      	beq.n	80055a6 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005542:	4c31      	ldr	r4, [pc, #196]	@ (8005608 <prvAddNewTaskToReadyList+0xe0>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005544:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	b333      	cbz	r3, 8005598 <prvAddNewTaskToReadyList+0x70>
 800554a:	4f30      	ldr	r7, [pc, #192]	@ (800560c <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800554c:	4a30      	ldr	r2, [pc, #192]	@ (8005610 <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800554e:	4931      	ldr	r1, [pc, #196]	@ (8005614 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	3301      	adds	r3, #1
 8005554:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005556:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005558:	680b      	ldr	r3, [r1, #0]
 800555a:	4283      	cmp	r3, r0
 800555c:	d200      	bcs.n	8005560 <prvAddNewTaskToReadyList+0x38>
 800555e:	6008      	str	r0, [r1, #0]
 8005560:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005564:	1d29      	adds	r1, r5, #4
 8005566:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800556a:	f7ff f9b7 	bl	80048dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800556e:	f001 f85b 	bl	8006628 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	b173      	cbz	r3, 8005594 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005576:	6832      	ldr	r2, [r6, #0]
 8005578:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800557a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d209      	bcs.n	8005594 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005580:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005588:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005598:	6833      	ldr	r3, [r6, #0]
 800559a:	4f1c      	ldr	r7, [pc, #112]	@ (800560c <prvAddNewTaskToReadyList+0xe4>)
 800559c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800559e:	4283      	cmp	r3, r0
 80055a0:	d8d4      	bhi.n	800554c <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 80055a2:	6035      	str	r5, [r6, #0]
 80055a4:	e7d2      	b.n	800554c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80055a6:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055a8:	6813      	ldr	r3, [r2, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d003      	beq.n	80055b6 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ae:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80055b0:	4f16      	ldr	r7, [pc, #88]	@ (800560c <prvAddNewTaskToReadyList+0xe4>)
 80055b2:	4c15      	ldr	r4, [pc, #84]	@ (8005608 <prvAddNewTaskToReadyList+0xe0>)
 80055b4:	e7ca      	b.n	800554c <prvAddNewTaskToReadyList+0x24>
 80055b6:	4f15      	ldr	r7, [pc, #84]	@ (800560c <prvAddNewTaskToReadyList+0xe4>)
 80055b8:	463c      	mov	r4, r7
 80055ba:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055be:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c0:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80055c2:	f7ff f97b 	bl	80048bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055c6:	4544      	cmp	r4, r8
 80055c8:	d1f9      	bne.n	80055be <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 80055ca:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8005630 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80055ce:	4c12      	ldr	r4, [pc, #72]	@ (8005618 <prvAddNewTaskToReadyList+0xf0>)
	vListInitialise( &xDelayedTaskList1 );
 80055d0:	4640      	mov	r0, r8
 80055d2:	f7ff f973 	bl	80048bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80055d6:	4620      	mov	r0, r4
 80055d8:	f7ff f970 	bl	80048bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055dc:	480f      	ldr	r0, [pc, #60]	@ (800561c <prvAddNewTaskToReadyList+0xf4>)
 80055de:	f7ff f96d 	bl	80048bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055e2:	480f      	ldr	r0, [pc, #60]	@ (8005620 <prvAddNewTaskToReadyList+0xf8>)
 80055e4:	f7ff f96a 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055e8:	480e      	ldr	r0, [pc, #56]	@ (8005624 <prvAddNewTaskToReadyList+0xfc>)
 80055ea:	f7ff f967 	bl	80048bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005628 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80055f0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80055f2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055f6:	4b0d      	ldr	r3, [pc, #52]	@ (800562c <prvAddNewTaskToReadyList+0x104>)
 80055f8:	601c      	str	r4, [r3, #0]
 80055fa:	4c03      	ldr	r4, [pc, #12]	@ (8005608 <prvAddNewTaskToReadyList+0xe0>)
}
 80055fc:	e7a6      	b.n	800554c <prvAddNewTaskToReadyList+0x24>
 80055fe:	bf00      	nop
 8005600:	24001c54 	.word	0x24001c54
 8005604:	24002128 	.word	0x24002128
 8005608:	24001c48 	.word	0x24001c48
 800560c:	24001cc8 	.word	0x24001cc8
 8005610:	24001c38 	.word	0x24001c38
 8005614:	24001c4c 	.word	0x24001c4c
 8005618:	24001ca0 	.word	0x24001ca0
 800561c:	24001c84 	.word	0x24001c84
 8005620:	24001c70 	.word	0x24001c70
 8005624:	24001c58 	.word	0x24001c58
 8005628:	24001c9c 	.word	0x24001c9c
 800562c:	24001c98 	.word	0x24001c98
 8005630:	24001cb4 	.word	0x24001cb4

08005634 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005636:	4b15      	ldr	r3, [pc, #84]	@ (800568c <prvAddCurrentTaskToDelayedList+0x58>)
{
 8005638:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800563a:	4e15      	ldr	r6, [pc, #84]	@ (8005690 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800563c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800563e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	1d18      	adds	r0, r3, #4
 8005644:	f7ff f970 	bl	8004928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005648:	1c63      	adds	r3, r4, #1
 800564a:	d100      	bne.n	800564e <prvAddCurrentTaskToDelayedList+0x1a>
 800564c:	b9bf      	cbnz	r7, 800567e <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800564e:	192d      	adds	r5, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005650:	6833      	ldr	r3, [r6, #0]
 8005652:	605d      	str	r5, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005654:	d307      	bcc.n	8005666 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005656:	4b0f      	ldr	r3, [pc, #60]	@ (8005694 <prvAddCurrentTaskToDelayedList+0x60>)
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800565c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005660:	3104      	adds	r1, #4
 8005662:	f7ff b949 	b.w	80048f8 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005666:	4b0c      	ldr	r3, [pc, #48]	@ (8005698 <prvAddCurrentTaskToDelayedList+0x64>)
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	6831      	ldr	r1, [r6, #0]
 800566c:	3104      	adds	r1, #4
 800566e:	f7ff f943 	bl	80048f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <prvAddCurrentTaskToDelayedList+0x68>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	42aa      	cmp	r2, r5
 8005678:	d900      	bls.n	800567c <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 800567a:	601d      	str	r5, [r3, #0]
}
 800567c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800567e:	6831      	ldr	r1, [r6, #0]
 8005680:	4807      	ldr	r0, [pc, #28]	@ (80056a0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8005682:	3104      	adds	r1, #4
}
 8005684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005688:	f7ff b928 	b.w	80048dc <vListInsertEnd>
 800568c:	24001c50 	.word	0x24001c50
 8005690:	24002128 	.word	0x24002128
 8005694:	24001c98 	.word	0x24001c98
 8005698:	24001c9c 	.word	0x24001c9c
 800569c:	24001c34 	.word	0x24001c34
 80056a0:	24001c58 	.word	0x24001c58

080056a4 <prvDeleteTCB>:
	{
 80056a4:	b510      	push	{r4, lr}
 80056a6:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056a8:	3054      	adds	r0, #84	@ 0x54
 80056aa:	f008 fef1 	bl	800e490 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056ae:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 80056b2:	b163      	cbz	r3, 80056ce <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d013      	beq.n	80056e0 <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d010      	beq.n	80056de <prvDeleteTCB+0x3a>
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	e7fe      	b.n	80056cc <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80056ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80056d0:	f001 f998 	bl	8006a04 <vPortFree>
				vPortFree( pxTCB );
 80056d4:	4620      	mov	r0, r4
	}
 80056d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80056da:	f001 b993 	b.w	8006a04 <vPortFree>
	}
 80056de:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80056e0:	4620      	mov	r0, r4
	}
 80056e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80056e6:	f001 b98d 	b.w	8006a04 <vPortFree>
 80056ea:	bf00      	nop

080056ec <prvIdleTask>:
{
 80056ec:	4c15      	ldr	r4, [pc, #84]	@ (8005744 <prvIdleTask+0x58>)
				taskYIELD();
 80056ee:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 80056f2:	4e15      	ldr	r6, [pc, #84]	@ (8005748 <prvIdleTask+0x5c>)
 80056f4:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
 80056f8:	4d14      	ldr	r5, [pc, #80]	@ (800574c <prvIdleTask+0x60>)
 80056fa:	f8df a054 	ldr.w	sl, [pc, #84]	@ 8005750 <prvIdleTask+0x64>
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	e011      	b.n	8005726 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8005702:	f000 ff6f 	bl	80065e4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005706:	68f3      	ldr	r3, [r6, #12]
 8005708:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800570a:	1d38      	adds	r0, r7, #4
 800570c:	f7ff f90c 	bl	8004928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	3b01      	subs	r3, #1
 8005714:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800571c:	f000 ff84 	bl	8006628 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ffbf 	bl	80056a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ea      	bne.n	8005702 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800572c:	f8da 3000 	ldr.w	r3, [sl]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d9f8      	bls.n	8005726 <prvIdleTask+0x3a>
				taskYIELD();
 8005734:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	e7f1      	b.n	8005726 <prvIdleTask+0x3a>
 8005742:	bf00      	nop
 8005744:	24001c6c 	.word	0x24001c6c
 8005748:	24001c70 	.word	0x24001c70
 800574c:	24001c54 	.word	0x24001c54
 8005750:	24001cc8 	.word	0x24001cc8

08005754 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005758:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800575a:	0095      	lsls	r5, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800575c:	4606      	mov	r6, r0
 800575e:	4689      	mov	r9, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005760:	462a      	mov	r2, r5
 8005762:	21a5      	movs	r1, #165	@ 0xa5
 8005764:	6b20      	ldr	r0, [r4, #48]	@ 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005766:	461f      	mov	r7, r3
 8005768:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800576c:	3d04      	subs	r5, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800576e:	f008 fe5f 	bl	800e430 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005772:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005774:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005776:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800577a:	f1b9 0f00 	cmp.w	r9, #0
 800577e:	d044      	beq.n	800580a <prvInitialiseNewTask.constprop.0+0xb6>
 8005780:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8005784:	f104 0333 	add.w	r3, r4, #51	@ 0x33
 8005788:	f109 090f 	add.w	r9, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800578c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8005790:	f803 2f01 	strb.w	r2, [r3, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005794:	b10a      	cbz	r2, 800579a <prvInitialiseNewTask.constprop.0+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005796:	45cc      	cmp	ip, r9
 8005798:	d1f8      	bne.n	800578c <prvInitialiseNewTask.constprop.0+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800579a:	2300      	movs	r3, #0
 800579c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057a0:	9b08      	ldr	r3, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80057a2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057a6:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057a8:	2b37      	cmp	r3, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80057aa:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057ae:	bf28      	it	cs
 80057b0:	2337      	movcs	r3, #55	@ 0x37
 80057b2:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80057b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80057b6:	64e3      	str	r3, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057b8:	f7ff f88c 	bl	80048d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057bc:	f104 0018 	add.w	r0, r4, #24
 80057c0:	f7ff f888 	bl	80048d4 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c4:	f1c9 0338 	rsb	r3, r9, #56	@ 0x38
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057c8:	4651      	mov	r1, sl
 80057ca:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057cc:	61a3      	str	r3, [r4, #24]
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057ce:	f104 0054 	add.w	r0, r4, #84	@ 0x54
		pxNewTCB->ulNotifiedValue = 0;
 80057d2:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057d6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057d8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057da:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057de:	f008 fe27 	bl	800e430 <memset>
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057e4:	4628      	mov	r0, r5
 80057e6:	463a      	mov	r2, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057e8:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80057ec:	65a3      	str	r3, [r4, #88]	@ 0x58
 80057ee:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057f0:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057f2:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80057f4:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057f6:	f000 fecb 	bl	8006590 <pxPortInitialiseStack>
 80057fa:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80057fc:	f1b8 0f00 	cmp.w	r8, #0
 8005800:	d001      	beq.n	8005806 <prvInitialiseNewTask.constprop.0+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005802:	f8c8 4000 	str.w	r4, [r8]
}
 8005806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800580a:	f884 9034 	strb.w	r9, [r4, #52]	@ 0x34
 800580e:	e7c7      	b.n	80057a0 <prvInitialiseNewTask.constprop.0+0x4c>
 8005810:	240106ac 	.word	0x240106ac

08005814 <xTaskCreateStatic>:
	{
 8005814:	b530      	push	{r4, r5, lr}
 8005816:	b087      	sub	sp, #28
 8005818:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800581a:	b1c4      	cbz	r4, 800584e <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 800581c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800581e:	b16d      	cbz	r5, 800583c <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005820:	25a8      	movs	r5, #168	@ 0xa8
 8005822:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005824:	9d05      	ldr	r5, [sp, #20]
 8005826:	2da8      	cmp	r5, #168	@ 0xa8
 8005828:	d01a      	beq.n	8005860 <xTaskCreateStatic+0x4c>
 800582a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	e7fe      	b.n	800583a <xTaskCreateStatic+0x26>
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800584c:	e7fe      	b.n	800584c <xTaskCreateStatic+0x38>
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800585e:	e7fe      	b.n	800585e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005860:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005862:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005864:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005866:	9502      	str	r5, [sp, #8]
 8005868:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800586a:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800586c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800586e:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005872:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005874:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005876:	9401      	str	r4, [sp, #4]
 8005878:	f7ff ff6c 	bl	8005754 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800587e:	f7ff fe53 	bl	8005528 <prvAddNewTaskToReadyList>
	}
 8005882:	9804      	ldr	r0, [sp, #16]
 8005884:	b007      	add	sp, #28
 8005886:	bd30      	pop	{r4, r5, pc}

08005888 <xTaskCreate>:
	{
 8005888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800588c:	4607      	mov	r7, r0
 800588e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005890:	0090      	lsls	r0, r2, #2
	{
 8005892:	4615      	mov	r5, r2
 8005894:	4688      	mov	r8, r1
 8005896:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005898:	f001 f81e 	bl	80068d8 <pvPortMalloc>
			if( pxStack != NULL )
 800589c:	b1f0      	cbz	r0, 80058dc <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800589e:	4604      	mov	r4, r0
 80058a0:	20a8      	movs	r0, #168	@ 0xa8
 80058a2:	f001 f819 	bl	80068d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80058a6:	4606      	mov	r6, r0
 80058a8:	b1a8      	cbz	r0, 80058d6 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 80058aa:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ac:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ae:	464b      	mov	r3, r9
 80058b0:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058b2:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058b6:	4641      	mov	r1, r8
 80058b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80058ba:	4638      	mov	r0, r7
 80058bc:	9602      	str	r6, [sp, #8]
 80058be:	9401      	str	r4, [sp, #4]
 80058c0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80058c2:	9400      	str	r4, [sp, #0]
 80058c4:	f7ff ff46 	bl	8005754 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c8:	4630      	mov	r0, r6
 80058ca:	f7ff fe2d 	bl	8005528 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058ce:	2001      	movs	r0, #1
	}
 80058d0:	b005      	add	sp, #20
 80058d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80058d6:	4620      	mov	r0, r4
 80058d8:	f001 f894 	bl	8006a04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
	}
 80058e0:	b005      	add	sp, #20
 80058e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058e6:	bf00      	nop

080058e8 <vTaskStartScheduler>:
{
 80058e8:	b510      	push	{r4, lr}
 80058ea:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058ec:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ee:	aa07      	add	r2, sp, #28
 80058f0:	a906      	add	r1, sp, #24
 80058f2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058f8:	f7fe ffc0 	bl	800487c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058fc:	4623      	mov	r3, r4
 80058fe:	9a07      	ldr	r2, [sp, #28]
 8005900:	9400      	str	r4, [sp, #0]
 8005902:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005906:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800590a:	4918      	ldr	r1, [pc, #96]	@ (800596c <vTaskStartScheduler+0x84>)
 800590c:	4818      	ldr	r0, [pc, #96]	@ (8005970 <vTaskStartScheduler+0x88>)
 800590e:	f7ff ff81 	bl	8005814 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005912:	b170      	cbz	r0, 8005932 <vTaskStartScheduler+0x4a>
			xReturn = xTimerCreateTimerTask();
 8005914:	f000 fc20 	bl	8006158 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8005918:	2801      	cmp	r0, #1
 800591a:	d00c      	beq.n	8005936 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800591c:	3001      	adds	r0, #1
 800591e:	d108      	bne.n	8005932 <vTaskStartScheduler+0x4a>
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	e7fe      	b.n	8005930 <vTaskStartScheduler+0x48>
}
 8005932:	b008      	add	sp, #32
 8005934:	bd10      	pop	{r4, pc}
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <vTaskStartScheduler+0x8c>)
 8005948:	4a0b      	ldr	r2, [pc, #44]	@ (8005978 <vTaskStartScheduler+0x90>)
 800594a:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800594c:	490b      	ldr	r1, [pc, #44]	@ (800597c <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800594e:	3354      	adds	r3, #84	@ 0x54
 8005950:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
		xSchedulerRunning = pdTRUE;
 8005956:	4a0a      	ldr	r2, [pc, #40]	@ (8005980 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8005958:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800595a:	4b0a      	ldr	r3, [pc, #40]	@ (8005984 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 800595c:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800595e:	601c      	str	r4, [r3, #0]
}
 8005960:	b008      	add	sp, #32
 8005962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8005966:	f000 becf 	b.w	8006708 <xPortStartScheduler>
 800596a:	bf00      	nop
 800596c:	0800f4d8 	.word	0x0800f4d8
 8005970:	080056ed 	.word	0x080056ed
 8005974:	24002128 	.word	0x24002128
 8005978:	2400003c 	.word	0x2400003c
 800597c:	24001c34 	.word	0x24001c34
 8005980:	24001c48 	.word	0x24001c48
 8005984:	24001c50 	.word	0x24001c50

08005988 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005988:	4a02      	ldr	r2, [pc, #8]	@ (8005994 <vTaskSuspendAll+0xc>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	24001c30 	.word	0x24001c30

08005998 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005998:	4b01      	ldr	r3, [pc, #4]	@ (80059a0 <xTaskGetTickCount+0x8>)
 800599a:	6818      	ldr	r0, [r3, #0]
}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	24001c50 	.word	0x24001c50

080059a4 <xTaskGetTickCountFromISR>:
{
 80059a4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059a6:	f000 ff39 	bl	800681c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80059aa:	4b01      	ldr	r3, [pc, #4]	@ (80059b0 <xTaskGetTickCountFromISR+0xc>)
 80059ac:	6818      	ldr	r0, [r3, #0]
}
 80059ae:	bd08      	pop	{r3, pc}
 80059b0:	24001c50 	.word	0x24001c50

080059b4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b4:	4b4f      	ldr	r3, [pc, #316]	@ (8005af4 <xTaskIncrementTick+0x140>)
 80059b6:	681b      	ldr	r3, [r3, #0]
{
 80059b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059bc:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d145      	bne.n	8005a4e <xTaskIncrementTick+0x9a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059c2:	4b4d      	ldr	r3, [pc, #308]	@ (8005af8 <xTaskIncrementTick+0x144>)
 80059c4:	681e      	ldr	r6, [r3, #0]
 80059c6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80059c8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d048      	beq.n	8005a60 <xTaskIncrementTick+0xac>
 80059ce:	4b4b      	ldr	r3, [pc, #300]	@ (8005afc <xTaskIncrementTick+0x148>)
 80059d0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d2:	9b01      	ldr	r3, [sp, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	429e      	cmp	r6, r3
 80059d8:	d34f      	bcc.n	8005a7a <xTaskIncrementTick+0xc6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059da:	4f49      	ldr	r7, [pc, #292]	@ (8005b00 <xTaskIncrementTick+0x14c>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681d      	ldr	r5, [r3, #0]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	d076      	beq.n	8005ad2 <xTaskIncrementTick+0x11e>
BaseType_t xSwitchRequired = pdFALSE;
 80059e4:	2500      	movs	r5, #0
 80059e6:	f8df 912c 	ldr.w	r9, [pc, #300]	@ 8005b14 <xTaskIncrementTick+0x160>
 80059ea:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 8005b18 <xTaskIncrementTick+0x164>
					prvAddTaskToReadyList( pxTCB );
 80059ee:	f8df 812c 	ldr.w	r8, [pc, #300]	@ 8005b1c <xTaskIncrementTick+0x168>
 80059f2:	e020      	b.n	8005a36 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f4:	f7fe ff98 	bl	8004928 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059f8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059fa:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059fe:	b10b      	cbz	r3, 8005a04 <xTaskIncrementTick+0x50>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a00:	f7fe ff92 	bl	8004928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005a04:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005a06:	4659      	mov	r1, fp
 8005a08:	f8d8 3000 	ldr.w	r3, [r8]
 8005a0c:	4298      	cmp	r0, r3
 8005a0e:	d901      	bls.n	8005a14 <xTaskIncrementTick+0x60>
 8005a10:	f8c8 0000 	str.w	r0, [r8]
 8005a14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005a18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8005a1c:	f7fe ff5e 	bl	80048dc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a20:	f8da 3000 	ldr.w	r3, [sl]
 8005a24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	bf28      	it	cs
 8005a2c:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d051      	beq.n	8005ada <xTaskIncrementTick+0x126>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a3c:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a3e:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8005a42:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a44:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8005a46:	d2d5      	bcs.n	80059f4 <xTaskIncrementTick+0x40>
						xNextTaskUnblockTime = xItemValue;
 8005a48:	9a01      	ldr	r2, [sp, #4]
 8005a4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a4c:	e01a      	b.n	8005a84 <xTaskIncrementTick+0xd0>
		++xPendedTicks;
 8005a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b04 <xTaskIncrementTick+0x150>)
BaseType_t xSwitchRequired = pdFALSE;
 8005a50:	2500      	movs	r5, #0
		++xPendedTicks;
 8005a52:	6813      	ldr	r3, [r2, #0]
}
 8005a54:	4628      	mov	r0, r5
		++xPendedTicks;
 8005a56:	3301      	adds	r3, #1
 8005a58:	6013      	str	r3, [r2, #0]
}
 8005a5a:	b003      	add	sp, #12
 8005a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005a60:	4b27      	ldr	r3, [pc, #156]	@ (8005b00 <xTaskIncrementTick+0x14c>)
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	b30a      	cbz	r2, 8005aac <xTaskIncrementTick+0xf8>
 8005a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	e7fe      	b.n	8005a78 <xTaskIncrementTick+0xc4>
BaseType_t xSwitchRequired = pdFALSE;
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8005b14 <xTaskIncrementTick+0x160>
 8005a80:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8005b18 <xTaskIncrementTick+0x164>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a84:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005a88:	491f      	ldr	r1, [pc, #124]	@ (8005b08 <xTaskIncrementTick+0x154>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005a96:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005a98:	2a02      	cmp	r2, #2
 8005a9a:	bf28      	it	cs
 8005a9c:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	bf18      	it	ne
 8005aa2:	2501      	movne	r5, #1
}
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	b003      	add	sp, #12
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005aac:	4a17      	ldr	r2, [pc, #92]	@ (8005b0c <xTaskIncrementTick+0x158>)
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	6811      	ldr	r1, [r2, #0]
 8005ab2:	6019      	str	r1, [r3, #0]
 8005ab4:	4916      	ldr	r1, [pc, #88]	@ (8005b10 <xTaskIncrementTick+0x15c>)
 8005ab6:	6010      	str	r0, [r2, #0]
 8005ab8:	680a      	ldr	r2, [r1, #0]
 8005aba:	3201      	adds	r2, #1
 8005abc:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	b97a      	cbnz	r2, 8005ae4 <xTaskIncrementTick+0x130>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <xTaskIncrementTick+0x148>)
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e77f      	b.n	80059d2 <xTaskIncrementTick+0x1e>
 8005ad2:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8005b14 <xTaskIncrementTick+0x160>
 8005ad6:	f8df a040 	ldr.w	sl, [pc, #64]	@ 8005b18 <xTaskIncrementTick+0x164>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ada:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ade:	9a01      	ldr	r2, [sp, #4]
 8005ae0:	6013      	str	r3, [r2, #0]
					break;
 8005ae2:	e7cf      	b.n	8005a84 <xTaskIncrementTick+0xd0>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ae6:	4a05      	ldr	r2, [pc, #20]	@ (8005afc <xTaskIncrementTick+0x148>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005aea:	9201      	str	r2, [sp, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6013      	str	r3, [r2, #0]
}
 8005af2:	e76e      	b.n	80059d2 <xTaskIncrementTick+0x1e>
 8005af4:	24001c30 	.word	0x24001c30
 8005af8:	24001c50 	.word	0x24001c50
 8005afc:	24001c34 	.word	0x24001c34
 8005b00:	24001c9c 	.word	0x24001c9c
 8005b04:	24001c44 	.word	0x24001c44
 8005b08:	24001c40 	.word	0x24001c40
 8005b0c:	24001c98 	.word	0x24001c98
 8005b10:	24001c3c 	.word	0x24001c3c
 8005b14:	24001cc8 	.word	0x24001cc8
 8005b18:	24002128 	.word	0x24002128
 8005b1c:	24001c4c 	.word	0x24001c4c

08005b20 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005b20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 8005b24:	f000 fd5e 	bl	80065e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005b28:	4b37      	ldr	r3, [pc, #220]	@ (8005c08 <xTaskResumeAll.part.0+0xe8>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d157      	bne.n	8005be6 <xTaskResumeAll.part.0+0xc6>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b36:	4b35      	ldr	r3, [pc, #212]	@ (8005c0c <xTaskResumeAll.part.0+0xec>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d053      	beq.n	8005be6 <xTaskResumeAll.part.0+0xc6>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b3e:	4d34      	ldr	r5, [pc, #208]	@ (8005c10 <xTaskResumeAll.part.0+0xf0>)
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d05c      	beq.n	8005c00 <xTaskResumeAll.part.0+0xe0>
 8005b46:	4e33      	ldr	r6, [pc, #204]	@ (8005c14 <xTaskResumeAll.part.0+0xf4>)
						xYieldPending = pdTRUE;
 8005b48:	f04f 0a01 	mov.w	sl, #1
 8005b4c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8005c28 <xTaskResumeAll.part.0+0x108>
 8005b50:	4f31      	ldr	r7, [pc, #196]	@ (8005c18 <xTaskResumeAll.part.0+0xf8>)
 8005b52:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ 8005c2c <xTaskResumeAll.part.0+0x10c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b56:	68eb      	ldr	r3, [r5, #12]
 8005b58:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b5a:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b5e:	f104 0018 	add.w	r0, r4, #24
 8005b62:	f7fe fee1 	bl	8004928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b66:	4658      	mov	r0, fp
 8005b68:	f7fe fede 	bl	8004928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b6c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005b6e:	6832      	ldr	r2, [r6, #0]
 8005b70:	4659      	mov	r1, fp
 8005b72:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005b76:	4293      	cmp	r3, r2
 8005b78:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005b7c:	d900      	bls.n	8005b80 <xTaskResumeAll.part.0+0x60>
 8005b7e:	6033      	str	r3, [r6, #0]
 8005b80:	f7fe feac 	bl	80048dc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d301      	bcc.n	8005b92 <xTaskResumeAll.part.0+0x72>
						xYieldPending = pdTRUE;
 8005b8e:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b92:	682b      	ldr	r3, [r5, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1de      	bne.n	8005b56 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b98:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <xTaskResumeAll.part.0+0xfc>)
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	bb42      	cbnz	r2, 8005bf2 <xTaskResumeAll.part.0+0xd2>
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c20 <xTaskResumeAll.part.0+0x100>)
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ba6:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ba8:	4e1e      	ldr	r6, [pc, #120]	@ (8005c24 <xTaskResumeAll.part.0+0x104>)
 8005baa:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005bac:	b144      	cbz	r4, 8005bc0 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 8005bae:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005bb0:	f7ff ff00 	bl	80059b4 <xTaskIncrementTick>
 8005bb4:	b108      	cbz	r0, 8005bba <xTaskResumeAll.part.0+0x9a>
								xYieldPending = pdTRUE;
 8005bb6:	f8c9 5000 	str.w	r5, [r9]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005bba:	3c01      	subs	r4, #1
 8005bbc:	d1f8      	bne.n	8005bb0 <xTaskResumeAll.part.0+0x90>
						xPendedTicks = 0;
 8005bbe:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8005bc0:	f8d9 3000 	ldr.w	r3, [r9]
 8005bc4:	b17b      	cbz	r3, 8005be6 <xTaskResumeAll.part.0+0xc6>
					taskYIELD_IF_USING_PREEMPTION();
 8005bc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005bda:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005bdc:	f000 fd24 	bl	8006628 <vPortExitCritical>
}
 8005be0:	4620      	mov	r0, r4
 8005be2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8005be6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005be8:	f000 fd1e 	bl	8006628 <vPortExitCritical>
}
 8005bec:	4620      	mov	r0, r4
 8005bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bf6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf8:	68d2      	ldr	r2, [r2, #12]
 8005bfa:	6852      	ldr	r2, [r2, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	e7d3      	b.n	8005ba8 <xTaskResumeAll.part.0+0x88>
 8005c00:	f8df 9028 	ldr.w	r9, [pc, #40]	@ 8005c2c <xTaskResumeAll.part.0+0x10c>
 8005c04:	e7d0      	b.n	8005ba8 <xTaskResumeAll.part.0+0x88>
 8005c06:	bf00      	nop
 8005c08:	24001c30 	.word	0x24001c30
 8005c0c:	24001c54 	.word	0x24001c54
 8005c10:	24001c84 	.word	0x24001c84
 8005c14:	24001c4c 	.word	0x24001c4c
 8005c18:	24002128 	.word	0x24002128
 8005c1c:	24001c9c 	.word	0x24001c9c
 8005c20:	24001c34 	.word	0x24001c34
 8005c24:	24001c44 	.word	0x24001c44
 8005c28:	24001cc8 	.word	0x24001cc8
 8005c2c:	24001c40 	.word	0x24001c40

08005c30 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <xTaskResumeAll+0x1c>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	b943      	cbnz	r3, 8005c48 <xTaskResumeAll+0x18>
 8005c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	e7fe      	b.n	8005c46 <xTaskResumeAll+0x16>
 8005c48:	f7ff bf6a 	b.w	8005b20 <xTaskResumeAll.part.0>
 8005c4c:	24001c30 	.word	0x24001c30

08005c50 <vTaskDelay>:
	{
 8005c50:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c52:	b950      	cbnz	r0, 8005c6a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005c54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
	}
 8005c68:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005c6a:	4c10      	ldr	r4, [pc, #64]	@ (8005cac <vTaskDelay+0x5c>)
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	b141      	cbz	r1, 8005c82 <vTaskDelay+0x32>
 8005c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	e7fe      	b.n	8005c80 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c88:	f7ff fcd4 	bl	8005634 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	b943      	cbnz	r3, 8005ca2 <vTaskDelay+0x52>
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	e7fe      	b.n	8005ca0 <vTaskDelay+0x50>
 8005ca2:	f7ff ff3d 	bl	8005b20 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d0d4      	beq.n	8005c54 <vTaskDelay+0x4>
	}
 8005caa:	bd10      	pop	{r4, pc}
 8005cac:	24001c30 	.word	0x24001c30

08005cb0 <vTaskSwitchContext>:
{
 8005cb0:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cb2:	4b24      	ldr	r3, [pc, #144]	@ (8005d44 <vTaskSwitchContext+0x94>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	b11b      	cbz	r3, 8005cc0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8005cb8:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <vTaskSwitchContext+0x98>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	601a      	str	r2, [r3, #0]
}
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8005cc0:	4c22      	ldr	r4, [pc, #136]	@ (8005d4c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8005cc2:	4a21      	ldr	r2, [pc, #132]	@ (8005d48 <vTaskSwitchContext+0x98>)
 8005cc4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005cc6:	6822      	ldr	r2, [r4, #0]
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d92e      	bls.n	8005d30 <vTaskSwitchContext+0x80>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cd2:	4d1f      	ldr	r5, [pc, #124]	@ (8005d50 <vTaskSwitchContext+0xa0>)
 8005cd4:	491f      	ldr	r1, [pc, #124]	@ (8005d54 <vTaskSwitchContext+0xa4>)
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005cdc:	0098      	lsls	r0, r3, #2
 8005cde:	0092      	lsls	r2, r2, #2
 8005ce0:	588a      	ldr	r2, [r1, r2]
 8005ce2:	b942      	cbnz	r2, 8005cf6 <vTaskSwitchContext+0x46>
 8005ce4:	b1db      	cbz	r3, 8005d1e <vTaskSwitchContext+0x6e>
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005cec:	0098      	lsls	r0, r3, #2
 8005cee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005cf2:	2a00      	cmp	r2, #0
 8005cf4:	d0f6      	beq.n	8005ce4 <vTaskSwitchContext+0x34>
 8005cf6:	4418      	add	r0, r3
 8005cf8:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8005cfc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005d00:	4662      	mov	r2, ip
 8005d02:	6849      	ldr	r1, [r1, #4]
 8005d04:	3208      	adds	r2, #8
 8005d06:	4291      	cmp	r1, r2
 8005d08:	f8cc 1004 	str.w	r1, [ip, #4]
 8005d0c:	d016      	beq.n	8005d3c <vTaskSwitchContext+0x8c>
 8005d0e:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d10:	4a11      	ldr	r2, [pc, #68]	@ (8005d58 <vTaskSwitchContext+0xa8>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d12:	6021      	str	r1, [r4, #0]
 8005d14:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	3354      	adds	r3, #84	@ 0x54
 8005d1a:	6013      	str	r3, [r2, #0]
}
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2e:	e7fe      	b.n	8005d2e <vTaskSwitchContext+0x7e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8005d30:	6820      	ldr	r0, [r4, #0]
 8005d32:	6821      	ldr	r1, [r4, #0]
 8005d34:	3134      	adds	r1, #52	@ 0x34
 8005d36:	f7fa fb3b 	bl	80003b0 <vApplicationStackOverflowHook>
 8005d3a:	e7ca      	b.n	8005cd2 <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d3c:	6849      	ldr	r1, [r1, #4]
 8005d3e:	f8cc 1004 	str.w	r1, [ip, #4]
 8005d42:	e7e4      	b.n	8005d0e <vTaskSwitchContext+0x5e>
 8005d44:	24001c30 	.word	0x24001c30
 8005d48:	24001c40 	.word	0x24001c40
 8005d4c:	24002128 	.word	0x24002128
 8005d50:	24001c4c 	.word	0x24001c4c
 8005d54:	24001cc8 	.word	0x24001cc8
 8005d58:	2400003c 	.word	0x2400003c

08005d5c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005d5c:	b160      	cbz	r0, 8005d78 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d8c <vTaskPlaceOnEventList+0x30>)
{
 8005d60:	b510      	push	{r4, lr}
 8005d62:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d64:	6819      	ldr	r1, [r3, #0]
 8005d66:	3118      	adds	r1, #24
 8005d68:	f7fe fdc6 	bl	80048f8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	2101      	movs	r1, #1
}
 8005d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d74:	f7ff bc5e 	b.w	8005634 <prvAddCurrentTaskToDelayedList>
 8005d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005d88:	e7fe      	b.n	8005d88 <vTaskPlaceOnEventList+0x2c>
 8005d8a:	bf00      	nop
 8005d8c:	24002128 	.word	0x24002128

08005d90 <vTaskPlaceOnEventListRestricted>:
	{
 8005d90:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8005d92:	b180      	cbz	r0, 8005db6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <vTaskPlaceOnEventListRestricted+0x38>)
 8005d96:	460d      	mov	r5, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	3118      	adds	r1, #24
 8005d9e:	f7fe fd9d 	bl	80048dc <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8005da2:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005da4:	4621      	mov	r1, r4
 8005da6:	bf0c      	ite	eq
 8005da8:	4628      	moveq	r0, r5
 8005daa:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
	}
 8005dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005db2:	f7ff bc3f 	b.w	8005634 <prvAddCurrentTaskToDelayedList>
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005dc6:	e7fe      	b.n	8005dc6 <vTaskPlaceOnEventListRestricted+0x36>
 8005dc8:	24002128 	.word	0x24002128

08005dcc <xTaskRemoveFromEventList>:
{
 8005dcc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dce:	68c3      	ldr	r3, [r0, #12]
 8005dd0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005dd2:	b34c      	cbz	r4, 8005e28 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005dd4:	f104 0518 	add.w	r5, r4, #24
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f7fe fda5 	bl	8004928 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dde:	4b18      	ldr	r3, [pc, #96]	@ (8005e40 <xTaskRemoveFromEventList+0x74>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	b173      	cbz	r3, 8005e02 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005de4:	4629      	mov	r1, r5
 8005de6:	4817      	ldr	r0, [pc, #92]	@ (8005e44 <xTaskRemoveFromEventList+0x78>)
 8005de8:	f7fe fd78 	bl	80048dc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dec:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <xTaskRemoveFromEventList+0x7c>)
 8005dee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d920      	bls.n	8005e3a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4a14      	ldr	r2, [pc, #80]	@ (8005e4c <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 8005dfc:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005dfe:	6013      	str	r3, [r2, #0]
}
 8005e00:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e02:	1d25      	adds	r5, r4, #4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f7fe fd8f 	bl	8004928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005e0a:	4b11      	ldr	r3, [pc, #68]	@ (8005e50 <xTaskRemoveFromEventList+0x84>)
 8005e0c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	4290      	cmp	r0, r2
 8005e12:	d900      	bls.n	8005e16 <xTaskRemoveFromEventList+0x4a>
 8005e14:	6018      	str	r0, [r3, #0]
 8005e16:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <xTaskRemoveFromEventList+0x88>)
 8005e18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005e22:	f7fe fd5b 	bl	80048dc <vListInsertEnd>
 8005e26:	e7e1      	b.n	8005dec <xTaskRemoveFromEventList+0x20>
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005e38:	e7fe      	b.n	8005e38 <xTaskRemoveFromEventList+0x6c>
		xReturn = pdFALSE;
 8005e3a:	2000      	movs	r0, #0
}
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	24001c30 	.word	0x24001c30
 8005e44:	24001c84 	.word	0x24001c84
 8005e48:	24002128 	.word	0x24002128
 8005e4c:	24001c40 	.word	0x24001c40
 8005e50:	24001c4c 	.word	0x24001c4c
 8005e54:	24001cc8 	.word	0x24001cc8

08005e58 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e58:	4a03      	ldr	r2, [pc, #12]	@ (8005e68 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e5a:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005e5c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	24001c3c 	.word	0x24001c3c
 8005e6c:	24001c50 	.word	0x24001c50

08005e70 <xTaskCheckForTimeOut>:
{
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8005e72:	b308      	cbz	r0, 8005eb8 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8005e74:	460d      	mov	r5, r1
 8005e76:	b1b1      	cbz	r1, 8005ea6 <xTaskCheckForTimeOut+0x36>
 8005e78:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005e7a:	f000 fbb3 	bl	80065e4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005e7e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005e80:	4a1a      	ldr	r2, [pc, #104]	@ (8005eec <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005e82:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005e84:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005e86:	d02c      	beq.n	8005ee2 <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e88:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8005ef0 <xTaskCheckForTimeOut+0x80>
 8005e8c:	6826      	ldr	r6, [r4, #0]
 8005e8e:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e92:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e94:	42be      	cmp	r6, r7
 8005e96:	d018      	beq.n	8005eca <xTaskCheckForTimeOut+0x5a>
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	d816      	bhi.n	8005eca <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8005e9c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8005e9e:	f000 fbc3 	bl	8006628 <vPortExitCritical>
}
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005eb6:	e7fe      	b.n	8005eb6 <xTaskCheckForTimeOut+0x46>
 8005eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005eca:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ece:	4573      	cmp	r3, lr
 8005ed0:	d909      	bls.n	8005ee6 <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8005ed2:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ed4:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ed8:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8005eda:	4403      	add	r3, r0
 8005edc:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ede:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8005ee2:	2400      	movs	r4, #0
 8005ee4:	e7db      	b.n	8005e9e <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005eea:	e7d7      	b.n	8005e9c <xTaskCheckForTimeOut+0x2c>
 8005eec:	24001c50 	.word	0x24001c50
 8005ef0:	24001c3c 	.word	0x24001c3c

08005ef4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005ef4:	4b01      	ldr	r3, [pc, #4]	@ (8005efc <vTaskMissedYield+0x8>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	4770      	bx	lr
 8005efc:	24001c40 	.word	0x24001c40

08005f00 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005f00:	4b01      	ldr	r3, [pc, #4]	@ (8005f08 <xTaskGetCurrentTaskHandle+0x8>)
 8005f02:	6818      	ldr	r0, [r3, #0]
	}
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	24002128 	.word	0x24002128

08005f0c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005f0c:	4b05      	ldr	r3, [pc, #20]	@ (8005f24 <xTaskGetSchedulerState+0x18>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	b133      	cbz	r3, 8005f20 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <xTaskGetSchedulerState+0x1c>)
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	fab0 f080 	clz	r0, r0
 8005f1a:	0940      	lsrs	r0, r0, #5
 8005f1c:	0040      	lsls	r0, r0, #1
 8005f1e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f20:	2001      	movs	r0, #1
	}
 8005f22:	4770      	bx	lr
 8005f24:	24001c48 	.word	0x24001c48
 8005f28:	24001c30 	.word	0x24001c30

08005f2c <xTaskPriorityInherit>:
	{
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005f2e:	4604      	mov	r4, r0
 8005f30:	b1c8      	cbz	r0, 8005f66 <xTaskPriorityInherit+0x3a>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f32:	4d1b      	ldr	r5, [pc, #108]	@ (8005fa0 <xTaskPriorityInherit+0x74>)
 8005f34:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005f36:	682a      	ldr	r2, [r5, #0]
 8005f38:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d214      	bcs.n	8005f68 <xTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f3e:	6982      	ldr	r2, [r0, #24]
 8005f40:	2a00      	cmp	r2, #0
 8005f42:	db04      	blt.n	8005f4e <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f44:	682a      	ldr	r2, [r5, #0]
 8005f46:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f48:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8005f4c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005f4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f52:	4e14      	ldr	r6, [pc, #80]	@ (8005fa4 <xTaskPriorityInherit+0x78>)
 8005f54:	6962      	ldr	r2, [r4, #20]
 8005f56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d00c      	beq.n	8005f78 <xTaskPriorityInherit+0x4c>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f5e:	682b      	ldr	r3, [r5, #0]
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 8005f64:	2001      	movs	r0, #1
	}
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f68:	682b      	ldr	r3, [r5, #0]
 8005f6a:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 8005f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6e:	4298      	cmp	r0, r3
 8005f70:	bf2c      	ite	cs
 8005f72:	2000      	movcs	r0, #0
 8005f74:	2001      	movcc	r0, #1
	}
 8005f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f78:	1d27      	adds	r7, r4, #4
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	f7fe fcd4 	bl	8004928 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f80:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f82:	4b09      	ldr	r3, [pc, #36]	@ (8005fa8 <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f84:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f86:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f88:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005f8a:	4290      	cmp	r0, r2
 8005f8c:	d900      	bls.n	8005f90 <xTaskPriorityInherit+0x64>
 8005f8e:	6018      	str	r0, [r3, #0]
 8005f90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f94:	4639      	mov	r1, r7
 8005f96:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005f9a:	f7fe fc9f 	bl	80048dc <vListInsertEnd>
 8005f9e:	e7e1      	b.n	8005f64 <xTaskPriorityInherit+0x38>
 8005fa0:	24002128 	.word	0x24002128
 8005fa4:	24001cc8 	.word	0x24001cc8
 8005fa8:	24001c4c 	.word	0x24001c4c

08005fac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005fac:	b308      	cbz	r0, 8005ff2 <xTaskPriorityDisinherit+0x46>
	{
 8005fae:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8005fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006028 <xTaskPriorityDisinherit+0x7c>)
 8005fb2:	681c      	ldr	r4, [r3, #0]
 8005fb4:	4284      	cmp	r4, r0
 8005fb6:	d008      	beq.n	8005fca <xTaskPriorityDisinherit+0x1e>
 8005fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	e7fe      	b.n	8005fc8 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8005fca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005fcc:	b143      	cbz	r3, 8005fe0 <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005fd0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fd2:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005fd4:	6523      	str	r3, [r4, #80]	@ 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fd6:	4291      	cmp	r1, r2
 8005fd8:	d000      	beq.n	8005fdc <xTaskPriorityDisinherit+0x30>
 8005fda:	b163      	cbz	r3, 8005ff6 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005fdc:	2000      	movs	r0, #0
	}
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005ff0:	e7fe      	b.n	8005ff0 <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 8005ff2:	2000      	movs	r0, #0
	}
 8005ff4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff6:	1d25      	adds	r5, r4, #4
 8005ff8:	4628      	mov	r0, r5
 8005ffa:	f7fe fc95 	bl	8004928 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ffe:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006000:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <xTaskPriorityDisinherit+0x80>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006002:	f1c0 0238 	rsb	r2, r0, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006006:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4290      	cmp	r0, r2
 800600e:	d900      	bls.n	8006012 <xTaskPriorityDisinherit+0x66>
 8006010:	6018      	str	r0, [r3, #0]
 8006012:	4b07      	ldr	r3, [pc, #28]	@ (8006030 <xTaskPriorityDisinherit+0x84>)
 8006014:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006018:	4629      	mov	r1, r5
 800601a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800601e:	f7fe fc5d 	bl	80048dc <vListInsertEnd>
					xReturn = pdTRUE;
 8006022:	2001      	movs	r0, #1
	}
 8006024:	bd38      	pop	{r3, r4, r5, pc}
 8006026:	bf00      	nop
 8006028:	24002128 	.word	0x24002128
 800602c:	24001c4c 	.word	0x24001c4c
 8006030:	24001cc8 	.word	0x24001cc8

08006034 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8006034:	2800      	cmp	r0, #0
 8006036:	d03c      	beq.n	80060b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
			configASSERT( pxTCB->uxMutexesHeld );
 8006038:	6d03      	ldr	r3, [r0, #80]	@ 0x50
	{
 800603a:	b570      	push	{r4, r5, r6, lr}
 800603c:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800603e:	b14b      	cbz	r3, 8006054 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006040:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006042:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006044:	4281      	cmp	r1, r0
 8006046:	bf38      	it	cc
 8006048:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800604e:	428a      	cmp	r2, r1
 8006050:	d109      	bne.n	8006066 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006052:	bd70      	pop	{r4, r5, r6, pc}
 8006054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006064:	e7fe      	b.n	8006064 <vTaskPriorityDisinheritAfterTimeout+0x30>
					configASSERT( pxTCB != pxCurrentTCB );
 8006066:	4b18      	ldr	r3, [pc, #96]	@ (80060c8 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	42a3      	cmp	r3, r4
 800606c:	d022      	beq.n	80060b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800606e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8006070:	62e1      	str	r1, [r4, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006072:	2b00      	cmp	r3, #0
 8006074:	db02      	blt.n	800607c <vTaskPriorityDisinheritAfterTimeout+0x48>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006076:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
 800607a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800607c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006080:	4d12      	ldr	r5, [pc, #72]	@ (80060cc <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006082:	6961      	ldr	r1, [r4, #20]
 8006084:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8006088:	4299      	cmp	r1, r3
 800608a:	d1e2      	bne.n	8006052 <vTaskPriorityDisinheritAfterTimeout+0x1e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608c:	1d26      	adds	r6, r4, #4
 800608e:	4630      	mov	r0, r6
 8006090:	f7fe fc4a 	bl	8004928 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006094:	4b0e      	ldr	r3, [pc, #56]	@ (80060d0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8006096:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4290      	cmp	r0, r2
 800609c:	d900      	bls.n	80060a0 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800609e:	6018      	str	r0, [r3, #0]
 80060a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80060a4:	4631      	mov	r1, r6
 80060a6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80060aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80060ae:	f7fe bc15 	b.w	80048dc <vListInsertEnd>
 80060b2:	4770      	bx	lr
 80060b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80060c4:	e7fe      	b.n	80060c4 <vTaskPriorityDisinheritAfterTimeout+0x90>
 80060c6:	bf00      	nop
 80060c8:	24002128 	.word	0x24002128
 80060cc:	24001cc8 	.word	0x24001cc8
 80060d0:	24001c4c 	.word	0x24001c4c

080060d4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80060d4:	4b04      	ldr	r3, [pc, #16]	@ (80060e8 <pvTaskIncrementMutexHeldCount+0x14>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	b11a      	cbz	r2, 80060e2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80060da:	6819      	ldr	r1, [r3, #0]
 80060dc:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 80060de:	3201      	adds	r2, #1
 80060e0:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 80060e2:	6818      	ldr	r0, [r3, #0]
	}
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	24002128 	.word	0x24002128

080060ec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80060ee:	4c12      	ldr	r4, [pc, #72]	@ (8006138 <prvCheckForValidListAndQueue+0x4c>)
{
 80060f0:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80060f2:	f000 fa77 	bl	80065e4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	b125      	cbz	r5, 8006104 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80060fa:	b003      	add	sp, #12
 80060fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8006100:	f000 ba92 	b.w	8006628 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8006104:	4f0d      	ldr	r7, [pc, #52]	@ (800613c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8006106:	4e0e      	ldr	r6, [pc, #56]	@ (8006140 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8006108:	4638      	mov	r0, r7
 800610a:	f7fe fbd7 	bl	80048bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800610e:	4630      	mov	r0, r6
 8006110:	f7fe fbd4 	bl	80048bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006114:	4a0b      	ldr	r2, [pc, #44]	@ (8006144 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006116:	9500      	str	r5, [sp, #0]
 8006118:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800611a:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800611c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800611e:	4a0a      	ldr	r2, [pc, #40]	@ (8006148 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006122:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006124:	4a0a      	ldr	r2, [pc, #40]	@ (8006150 <prvCheckForValidListAndQueue+0x64>)
 8006126:	f7fe fcd9 	bl	8004adc <xQueueGenericCreateStatic>
 800612a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800612c:	2800      	cmp	r0, #0
 800612e:	d0e4      	beq.n	80060fa <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006130:	4908      	ldr	r1, [pc, #32]	@ (8006154 <prvCheckForValidListAndQueue+0x68>)
 8006132:	f7ff f9b9 	bl	80054a8 <vQueueAddToRegistry>
 8006136:	e7e0      	b.n	80060fa <prvCheckForValidListAndQueue+0xe>
 8006138:	24002224 	.word	0x24002224
 800613c:	24002244 	.word	0x24002244
 8006140:	24002230 	.word	0x24002230
 8006144:	2400222c 	.word	0x2400222c
 8006148:	24002228 	.word	0x24002228
 800614c:	2400212c 	.word	0x2400212c
 8006150:	2400217c 	.word	0x2400217c
 8006154:	0800f4e0 	.word	0x0800f4e0

08006158 <xTimerCreateTimerTask>:
{
 8006158:	b530      	push	{r4, r5, lr}
 800615a:	b089      	sub	sp, #36	@ 0x24
	prvCheckForValidListAndQueue();
 800615c:	f7ff ffc6 	bl	80060ec <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006160:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <xTimerCreateTimerTask+0x54>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b1cb      	cbz	r3, 800619a <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006166:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006168:	aa07      	add	r2, sp, #28
 800616a:	a906      	add	r1, sp, #24
 800616c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800616e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006170:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006174:	f7fe fb92 	bl	800489c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006178:	4623      	mov	r3, r4
 800617a:	9a07      	ldr	r2, [sp, #28]
 800617c:	9500      	str	r5, [sp, #0]
 800617e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006182:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8006186:	490a      	ldr	r1, [pc, #40]	@ (80061b0 <xTimerCreateTimerTask+0x58>)
 8006188:	480a      	ldr	r0, [pc, #40]	@ (80061b4 <xTimerCreateTimerTask+0x5c>)
 800618a:	f7ff fb43 	bl	8005814 <xTaskCreateStatic>
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <xTimerCreateTimerTask+0x60>)
 8006190:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006192:	b110      	cbz	r0, 800619a <xTimerCreateTimerTask+0x42>
}
 8006194:	2001      	movs	r0, #1
 8006196:	b009      	add	sp, #36	@ 0x24
 8006198:	bd30      	pop	{r4, r5, pc}
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80061aa:	e7fe      	b.n	80061aa <xTimerCreateTimerTask+0x52>
 80061ac:	24002224 	.word	0x24002224
 80061b0:	0800f4e8 	.word	0x0800f4e8
 80061b4:	080062a5 	.word	0x080062a5
 80061b8:	24002220 	.word	0x24002220

080061bc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80061bc:	b1c8      	cbz	r0, 80061f2 <xTimerGenericCommand+0x36>
{
 80061be:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 80061c0:	4d18      	ldr	r5, [pc, #96]	@ (8006224 <xTimerGenericCommand+0x68>)
{
 80061c2:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 80061c4:	682c      	ldr	r4, [r5, #0]
 80061c6:	b18c      	cbz	r4, 80061ec <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061c8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80061ca:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 80061cc:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061d0:	dc18      	bgt.n	8006204 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061d2:	f7ff fe9b 	bl	8005f0c <xTaskGetSchedulerState>
 80061d6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061d8:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061dc:	d01b      	beq.n	8006216 <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061de:	4669      	mov	r1, sp
 80061e0:	461a      	mov	r2, r3
 80061e2:	6828      	ldr	r0, [r5, #0]
 80061e4:	f7fe fd36 	bl	8004c54 <xQueueGenericSend>
}
 80061e8:	b005      	add	sp, #20
 80061ea:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80061ec:	4620      	mov	r0, r4
}
 80061ee:	b005      	add	sp, #20
 80061f0:	bd30      	pop	{r4, r5, pc}
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8006202:	e7fe      	b.n	8006202 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006204:	469c      	mov	ip, r3
 8006206:	4669      	mov	r1, sp
 8006208:	2300      	movs	r3, #0
 800620a:	4620      	mov	r0, r4
 800620c:	4662      	mov	r2, ip
 800620e:	f7fe fe59 	bl	8004ec4 <xQueueGenericSendFromISR>
}
 8006212:	b005      	add	sp, #20
 8006214:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006216:	9a08      	ldr	r2, [sp, #32]
 8006218:	4669      	mov	r1, sp
 800621a:	6828      	ldr	r0, [r5, #0]
 800621c:	f7fe fd1a 	bl	8004c54 <xQueueGenericSend>
 8006220:	e7e5      	b.n	80061ee <xTimerGenericCommand+0x32>
 8006222:	bf00      	nop
 8006224:	24002224 	.word	0x24002224

08006228 <prvSwitchTimerLists>:
{
 8006228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622a:	4e1c      	ldr	r6, [pc, #112]	@ (800629c <prvSwitchTimerLists+0x74>)
 800622c:	b083      	sub	sp, #12
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800622e:	e00d      	b.n	800624c <prvSwitchTimerLists+0x24>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006230:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006232:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006234:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006236:	1d25      	adds	r5, r4, #4
 8006238:	4628      	mov	r0, r5
 800623a:	f7fe fb75 	bl	8004928 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623e:	6a23      	ldr	r3, [r4, #32]
 8006240:	4620      	mov	r0, r4
 8006242:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006244:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006248:	075b      	lsls	r3, r3, #29
 800624a:	d409      	bmi.n	8006260 <prvSwitchTimerLists+0x38>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800624c:	6833      	ldr	r3, [r6, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	2a00      	cmp	r2, #0
 8006252:	d1ed      	bne.n	8006230 <prvSwitchTimerLists+0x8>
	pxCurrentTimerList = pxOverflowTimerList;
 8006254:	4a12      	ldr	r2, [pc, #72]	@ (80062a0 <prvSwitchTimerLists+0x78>)
 8006256:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006258:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800625a:	6031      	str	r1, [r6, #0]
}
 800625c:	b003      	add	sp, #12
 800625e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006260:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006262:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006264:	2300      	movs	r3, #0
 8006266:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006268:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800626a:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 800626c:	42af      	cmp	r7, r5
 800626e:	d205      	bcs.n	800627c <prvSwitchTimerLists+0x54>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006270:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006272:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006274:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006276:	f7fe fb3f 	bl	80048f8 <vListInsert>
 800627a:	e7e7      	b.n	800624c <prvSwitchTimerLists+0x24>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800627c:	4619      	mov	r1, r3
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	f7ff ff9c 	bl	80061bc <xTimerGenericCommand>
				configASSERT( xResult );
 8006284:	2800      	cmp	r0, #0
 8006286:	d1e1      	bne.n	800624c <prvSwitchTimerLists+0x24>
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	e7fe      	b.n	8006298 <prvSwitchTimerLists+0x70>
 800629a:	bf00      	nop
 800629c:	2400222c 	.word	0x2400222c
 80062a0:	24002228 	.word	0x24002228

080062a4 <prvTimerTask>:
{
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	f8df 8260 	ldr.w	r8, [pc, #608]	@ 800650c <prvTimerTask+0x268>
 80062ac:	b087      	sub	sp, #28
 80062ae:	4e95      	ldr	r6, [pc, #596]	@ (8006504 <prvTimerTask+0x260>)
 80062b0:	f8df 925c 	ldr.w	r9, [pc, #604]	@ 8006510 <prvTimerTask+0x26c>
 80062b4:	4c94      	ldr	r4, [pc, #592]	@ (8006508 <prvTimerTask+0x264>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062b6:	f8d8 2000 	ldr.w	r2, [r8]
 80062ba:	f8d2 a000 	ldr.w	sl, [r2]
 80062be:	f1ba 0f00 	cmp.w	sl, #0
 80062c2:	f000 80a9 	beq.w	8006418 <prvTimerTask+0x174>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062c6:	68d3      	ldr	r3, [r2, #12]
 80062c8:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 80062cc:	f7ff fb5c 	bl	8005988 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80062d0:	f7ff fb62 	bl	8005998 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80062d4:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 80062d6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80062d8:	4290      	cmp	r0, r2
 80062da:	f0c0 80a5 	bcc.w	8006428 <prvTimerTask+0x184>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062de:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
 80062e0:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062e2:	f200 80aa 	bhi.w	800643a <prvTimerTask+0x196>
				( void ) xTaskResumeAll();
 80062e6:	f7ff fca3 	bl	8005c30 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ea:	f8d8 2000 	ldr.w	r2, [r8]
 80062ee:	68d2      	ldr	r2, [r2, #12]
 80062f0:	68d7      	ldr	r7, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f2:	f107 0b04 	add.w	fp, r7, #4
 80062f6:	4658      	mov	r0, fp
 80062f8:	f7fe fb16 	bl	8004928 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006300:	0750      	lsls	r0, r2, #29
 8006302:	f100 80c2 	bmi.w	800648a <prvTimerTask+0x1e6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	4638      	mov	r0, r7
 8006312:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006314:	2200      	movs	r2, #0
 8006316:	a902      	add	r1, sp, #8
 8006318:	6820      	ldr	r0, [r4, #0]
 800631a:	f7fe fe8f 	bl	800503c <xQueueReceive>
 800631e:	2800      	cmp	r0, #0
 8006320:	d0c9      	beq.n	80062b6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006322:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006324:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006326:	2b00      	cmp	r3, #0
 8006328:	db6e      	blt.n	8006408 <prvTimerTask+0x164>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800632a:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800632c:	696b      	ldr	r3, [r5, #20]
 800632e:	b113      	cbz	r3, 8006336 <prvTimerTask+0x92>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006330:	1d28      	adds	r0, r5, #4
 8006332:	f7fe faf9 	bl	8004928 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006336:	f7ff fb2f 	bl	8005998 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800633a:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 800633c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 800633e:	4298      	cmp	r0, r3
 8006340:	d378      	bcc.n	8006434 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8006342:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006344:	6037      	str	r7, [r6, #0]
			switch( xMessage.xMessageID )
 8006346:	2b09      	cmp	r3, #9
 8006348:	d8e4      	bhi.n	8006314 <prvTimerTask+0x70>
 800634a:	e8df f003 	tbb	[pc, r3]
 800634e:	0505      	.short	0x0505
 8006350:	54354d05 	.word	0x54354d05
 8006354:	354d0505 	.word	0x354d0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006358:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800635c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800635e:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006362:	69a9      	ldr	r1, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006364:	612d      	str	r5, [r5, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006366:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800636a:	185a      	adds	r2, r3, r1
 800636c:	bf2c      	ite	cs
 800636e:	2001      	movcs	r0, #1
 8006370:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006372:	42ba      	cmp	r2, r7
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006374:	606a      	str	r2, [r5, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006376:	d87e      	bhi.n	8006476 <prvTimerTask+0x1d2>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006378:	1afb      	subs	r3, r7, r3
 800637a:	4299      	cmp	r1, r3
 800637c:	f200 80ad 	bhi.w	80064da <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006380:	6a2b      	ldr	r3, [r5, #32]
 8006382:	4628      	mov	r0, r5
 8006384:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006386:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 800638a:	0759      	lsls	r1, r3, #29
 800638c:	d5c2      	bpl.n	8006314 <prvTimerTask+0x70>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800638e:	2200      	movs	r2, #0
 8006390:	69ab      	ldr	r3, [r5, #24]
 8006392:	4628      	mov	r0, r5
 8006394:	9200      	str	r2, [sp, #0]
 8006396:	9a03      	ldr	r2, [sp, #12]
 8006398:	441a      	add	r2, r3
 800639a:	2300      	movs	r3, #0
 800639c:	4619      	mov	r1, r3
 800639e:	f7ff ff0d 	bl	80061bc <xTimerGenericCommand>
							configASSERT( xResult );
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d1b6      	bne.n	8006314 <prvTimerTask+0x70>
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	e7fe      	b.n	80063b6 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063b8:	f895 2028 	ldrb.w	r2, [r5, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063bc:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063be:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063c2:	61ab      	str	r3, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063c4:	f885 2028 	strb.w	r2, [r5, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8092 	beq.w	80064f2 <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80063ce:	443b      	add	r3, r7
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063d0:	1d29      	adds	r1, r5, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063d2:	612d      	str	r5, [r5, #16]
	if( xNextExpiryTime <= xTimeNow )
 80063d4:	42bb      	cmp	r3, r7
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063d6:	606b      	str	r3, [r5, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063d8:	bf94      	ite	ls
 80063da:	f8d9 0000 	ldrls.w	r0, [r9]
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063de:	f8d8 0000 	ldrhi.w	r0, [r8]
 80063e2:	f7fe fa89 	bl	80048f8 <vListInsert>
 80063e6:	e795      	b.n	8006314 <prvTimerTask+0x70>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063e8:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
					break;
 80063f4:	e78e      	b.n	8006314 <prvTimerTask+0x70>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80063f6:	f895 3028 	ldrb.w	r3, [r5, #40]	@ 0x28
 80063fa:	079a      	lsls	r2, r3, #30
 80063fc:	d552      	bpl.n	80064a4 <prvTimerTask+0x200>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fe:	f023 0301 	bic.w	r3, r3, #1
 8006402:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
 8006406:	e785      	b.n	8006314 <prvTimerTask+0x70>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006408:	9b03      	ldr	r3, [sp, #12]
 800640a:	9905      	ldr	r1, [sp, #20]
 800640c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800640e:	9b02      	ldr	r3, [sp, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f6ff af7f 	blt.w	8006314 <prvTimerTask+0x70>
 8006416:	e788      	b.n	800632a <prvTimerTask+0x86>
	vTaskSuspendAll();
 8006418:	f7ff fab6 	bl	8005988 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800641c:	f7ff fabc 	bl	8005998 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006420:	6832      	ldr	r2, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8006422:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8006424:	4290      	cmp	r0, r2
 8006426:	d21e      	bcs.n	8006466 <prvTimerTask+0x1c2>
		prvSwitchTimerLists();
 8006428:	f7ff fefe 	bl	8006228 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800642c:	6035      	str	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800642e:	f7ff fbff 	bl	8005c30 <xTaskResumeAll>
 8006432:	e76f      	b.n	8006314 <prvTimerTask+0x70>
		prvSwitchTimerLists();
 8006434:	f7ff fef8 	bl	8006228 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006438:	e783      	b.n	8006342 <prvTimerTask+0x9e>
 800643a:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800643c:	ebaa 0105 	sub.w	r1, sl, r5
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	f7ff f849 	bl	80054d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006446:	f7ff fbf3 	bl	8005c30 <xTaskResumeAll>
 800644a:	2800      	cmp	r0, #0
 800644c:	f47f af62 	bne.w	8006314 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
 8006450:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006454:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006458:	f8c2 3d04 	str.w	r3, [r2, #3332]	@ 0xd04
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	e756      	b.n	8006314 <prvTimerTask+0x70>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006466:	f8d9 2000 	ldr.w	r2, [r9]
	xLastTime = xTimeNow;
 800646a:	6035      	str	r5, [r6, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	fab2 f282 	clz	r2, r2
 8006472:	0952      	lsrs	r2, r2, #5
 8006474:	e7e2      	b.n	800643c <prvTimerTask+0x198>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006476:	42bb      	cmp	r3, r7
 8006478:	d901      	bls.n	800647e <prvTimerTask+0x1da>
 800647a:	2800      	cmp	r0, #0
 800647c:	d080      	beq.n	8006380 <prvTimerTask+0xdc>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800647e:	1d29      	adds	r1, r5, #4
 8006480:	f8d8 0000 	ldr.w	r0, [r8]
 8006484:	f7fe fa38 	bl	80048f8 <vListInsert>
	return xProcessTimerNow;
 8006488:	e744      	b.n	8006314 <prvTimerTask+0x70>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800648a:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800648c:	613f      	str	r7, [r7, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800648e:	eb0a 0201 	add.w	r2, sl, r1
	if( xNextExpiryTime <= xTimeNow )
 8006492:	4295      	cmp	r5, r2
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006494:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006496:	d209      	bcs.n	80064ac <prvTimerTask+0x208>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006498:	4659      	mov	r1, fp
 800649a:	f8d8 0000 	ldr.w	r0, [r8]
 800649e:	f7fe fa2b 	bl	80048f8 <vListInsert>
	return xProcessTimerNow;
 80064a2:	e734      	b.n	800630e <prvTimerTask+0x6a>
							vPortFree( pxTimer );
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 faad 	bl	8006a04 <vPortFree>
 80064aa:	e733      	b.n	8006314 <prvTimerTask+0x70>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064ac:	eba5 050a 	sub.w	r5, r5, sl
 80064b0:	42a9      	cmp	r1, r5
 80064b2:	d818      	bhi.n	80064e6 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064b4:	2300      	movs	r3, #0
 80064b6:	4652      	mov	r2, sl
 80064b8:	4638      	mov	r0, r7
 80064ba:	4619      	mov	r1, r3
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	f7ff fe7d 	bl	80061bc <xTimerGenericCommand>
			configASSERT( xResult );
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f47f af23 	bne.w	800630e <prvTimerTask+0x6a>
 80064c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	e7fe      	b.n	80064d8 <prvTimerTask+0x234>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064da:	1d29      	adds	r1, r5, #4
 80064dc:	f8d9 0000 	ldr.w	r0, [r9]
 80064e0:	f7fe fa0a 	bl	80048f8 <vListInsert>
	return xProcessTimerNow;
 80064e4:	e716      	b.n	8006314 <prvTimerTask+0x70>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064e6:	4659      	mov	r1, fp
 80064e8:	f8d9 0000 	ldr.w	r0, [r9]
 80064ec:	f7fe fa04 	bl	80048f8 <vListInsert>
	return xProcessTimerNow;
 80064f0:	e70d      	b.n	800630e <prvTimerTask+0x6a>
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006502:	e7fe      	b.n	8006502 <prvTimerTask+0x25e>
 8006504:	2400221c 	.word	0x2400221c
 8006508:	24002224 	.word	0x24002224
 800650c:	2400222c 	.word	0x2400222c
 8006510:	24002228 	.word	0x24002228

08006514 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006514:	4808      	ldr	r0, [pc, #32]	@ (8006538 <prvPortStartFirstTask+0x24>)
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	6800      	ldr	r0, [r0, #0]
 800651a:	f380 8808 	msr	MSP, r0
 800651e:	f04f 0000 	mov.w	r0, #0
 8006522:	f380 8814 	msr	CONTROL, r0
 8006526:	b662      	cpsie	i
 8006528:	b661      	cpsie	f
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	df00      	svc	0
 8006534:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006536:	0000      	.short	0x0000
 8006538:	e000ed08 	.word	0xe000ed08

0800653c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800653c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800654c <vPortEnableVFP+0x10>
 8006540:	6801      	ldr	r1, [r0, #0]
 8006542:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006546:	6001      	str	r1, [r0, #0]
 8006548:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800654a:	0000      	.short	0x0000
 800654c:	e000ed88 	.word	0xe000ed88

08006550 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8006550:	4b0e      	ldr	r3, [pc, #56]	@ (800658c <prvTaskExitError+0x3c>)
{
 8006552:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006554:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8006556:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8006558:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800655a:	3301      	adds	r3, #1
 800655c:	d008      	beq.n	8006570 <prvTaskExitError+0x20>
 800655e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	e7fe      	b.n	800656e <prvTaskExitError+0x1e>
 8006570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8006580:	9b01      	ldr	r3, [sp, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0fc      	beq.n	8006580 <prvTaskExitError+0x30>
}
 8006586:	b002      	add	sp, #8
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	24000024 	.word	0x24000024

08006590 <pxPortInitialiseStack>:
{
 8006590:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006592:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006596:	4809      	ldr	r0, [pc, #36]	@ (80065bc <pxPortInitialiseStack+0x2c>)
{
 8006598:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800659a:	f04f 7480 	mov.w	r4, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800659e:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065a2:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80065a6:	f1a3 0044 	sub.w	r0, r3, #68	@ 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065aa:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065ae:	f06f 0102 	mvn.w	r1, #2
}
 80065b2:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065b6:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80065ba:	4770      	bx	lr
 80065bc:	08006551 	.word	0x08006551

080065c0 <SVC_Handler>:
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	@ (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	24002128 	.word	0x24002128

080065e4 <vPortEnterCritical>:
 80065e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80065f4:	4a0b      	ldr	r2, [pc, #44]	@ (8006624 <vPortEnterCritical+0x40>)
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80065fa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80065fc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80065fe:	d000      	beq.n	8006602 <vPortEnterCritical+0x1e>
}
 8006600:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006602:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006606:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0f7      	beq.n	8006600 <vPortEnterCritical+0x1c>
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	e7fe      	b.n	8006620 <vPortEnterCritical+0x3c>
 8006622:	bf00      	nop
 8006624:	24000024 	.word	0x24000024

08006628 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006628:	4a08      	ldr	r2, [pc, #32]	@ (800664c <vPortExitCritical+0x24>)
 800662a:	6813      	ldr	r3, [r2, #0]
 800662c:	b943      	cbnz	r3, 8006640 <vPortExitCritical+0x18>
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	e7fe      	b.n	800663e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006640:	3b01      	subs	r3, #1
 8006642:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006644:	b90b      	cbnz	r3, 800664a <vPortExitCritical+0x22>
	__asm volatile
 8006646:	f383 8811 	msr	BASEPRI, r3
}
 800664a:	4770      	bx	lr
 800664c:	24000024 	.word	0x24000024

08006650 <PendSV_Handler>:
	__asm volatile
 8006650:	f3ef 8009 	mrs	r0, PSP
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <pxCurrentTCBConst>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	f01e 0f10 	tst.w	lr, #16
 8006660:	bf08      	it	eq
 8006662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666a:	6010      	str	r0, [r2, #0]
 800666c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006674:	f380 8811 	msr	BASEPRI, r0
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f7ff fb16 	bl	8005cb0 <vTaskSwitchContext>
 8006684:	f04f 0000 	mov.w	r0, #0
 8006688:	f380 8811 	msr	BASEPRI, r0
 800668c:	bc09      	pop	{r0, r3}
 800668e:	6819      	ldr	r1, [r3, #0]
 8006690:	6808      	ldr	r0, [r1, #0]
 8006692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006696:	f01e 0f10 	tst.w	lr, #16
 800669a:	bf08      	it	eq
 800669c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066a0:	f380 8809 	msr	PSP, r0
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	f3af 8000 	nop.w

080066b0 <pxCurrentTCBConst>:
 80066b0:	24002128 	.word	0x24002128

080066b4 <xPortSysTickHandler>:
{
 80066b4:	b508      	push	{r3, lr}
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80066c6:	f7ff f975 	bl	80059b4 <xTaskIncrementTick>
 80066ca:	b128      	cbz	r0, 80066d8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066cc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80066d8:	2300      	movs	r3, #0
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bd08      	pop	{r3, pc}

080066e0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80066e4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066e6:	4806      	ldr	r0, [pc, #24]	@ (8006700 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066e8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ea:	4906      	ldr	r1, [pc, #24]	@ (8006704 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066ec:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ee:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066f0:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066f2:	fba1 1303 	umull	r1, r3, r1, r3
 80066f6:	099b      	lsrs	r3, r3, #6
 80066f8:	3b01      	subs	r3, #1
 80066fa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066fc:	6110      	str	r0, [r2, #16]
}
 80066fe:	4770      	bx	lr
 8006700:	24000004 	.word	0x24000004
 8006704:	10624dd3 	.word	0x10624dd3

08006708 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006708:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800670c:	4a3d      	ldr	r2, [pc, #244]	@ (8006804 <xPortStartScheduler+0xfc>)
 800670e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8006712:	4291      	cmp	r1, r2
 8006714:	d041      	beq.n	800679a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006716:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800671a:	4b3b      	ldr	r3, [pc, #236]	@ (8006808 <xPortStartScheduler+0x100>)
 800671c:	429a      	cmp	r2, r3
 800671e:	d033      	beq.n	8006788 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006720:	4b3a      	ldr	r3, [pc, #232]	@ (800680c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006722:	f04f 0cff 	mov.w	ip, #255	@ 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006726:	483a      	ldr	r0, [pc, #232]	@ (8006810 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006728:	493a      	ldr	r1, [pc, #232]	@ (8006814 <xPortStartScheduler+0x10c>)
{
 800672a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800672c:	781a      	ldrb	r2, [r3, #0]
{
 800672e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006734:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006736:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800673a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800673c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006744:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006748:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800674c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006750:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006752:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006754:	d50f      	bpl.n	8006776 <xPortStartScheduler+0x6e>
 8006756:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006758:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800675c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006768:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800676c:	061b      	lsls	r3, r3, #24
 800676e:	d4f3      	bmi.n	8006758 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006770:	2903      	cmp	r1, #3
 8006772:	d01b      	beq.n	80067ac <xPortStartScheduler+0xa4>
 8006774:	6001      	str	r1, [r0, #0]
	__asm volatile
 8006776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677a:	f383 8811 	msr	BASEPRI, r3
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	e7fe      	b.n	8006786 <xPortStartScheduler+0x7e>
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006798:	e7fe      	b.n	8006798 <xPortStartScheduler+0x90>
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067aa:	e7fe      	b.n	80067aa <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067ac:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067ae:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b2:	4a16      	ldr	r2, [pc, #88]	@ (800680c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067b4:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067b8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80067ba:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067bc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80067c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067cc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80067d0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067d4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80067d8:	f7ff ff82 	bl	80066e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80067dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006818 <xPortStartScheduler+0x110>)
 80067de:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80067e0:	f7ff feac 	bl	800653c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067e4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80067e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067ec:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 80067f0:	f7ff fe90 	bl	8006514 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80067f4:	f7ff fa5c 	bl	8005cb0 <vTaskSwitchContext>
}
 80067f8:	4628      	mov	r0, r5
	prvTaskExitError();
 80067fa:	f7ff fea9 	bl	8006550 <prvTaskExitError>
}
 80067fe:	b003      	add	sp, #12
 8006800:	bd30      	pop	{r4, r5, pc}
 8006802:	bf00      	nop
 8006804:	410fc271 	.word	0x410fc271
 8006808:	410fc270 	.word	0x410fc270
 800680c:	e000e400 	.word	0xe000e400
 8006810:	24002258 	.word	0x24002258
 8006814:	2400225c 	.word	0x2400225c
 8006818:	24000024 	.word	0x24000024

0800681c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800681c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006820:	2b0f      	cmp	r3, #15
 8006822:	d90e      	bls.n	8006842 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006824:	4911      	ldr	r1, [pc, #68]	@ (800686c <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006826:	4a12      	ldr	r2, [pc, #72]	@ (8006870 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006828:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d908      	bls.n	8006842 <vPortValidateInterruptPriority+0x26>
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	e7fe      	b.n	8006840 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006842:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006846:	4a0b      	ldr	r2, [pc, #44]	@ (8006874 <vPortValidateInterruptPriority+0x58>)
 8006848:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800684c:	6812      	ldr	r2, [r2, #0]
 800684e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006852:	4293      	cmp	r3, r2
 8006854:	d908      	bls.n	8006868 <vPortValidateInterruptPriority+0x4c>
 8006856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	e7fe      	b.n	8006866 <vPortValidateInterruptPriority+0x4a>
	}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000e3f0 	.word	0xe000e3f0
 8006870:	2400225c 	.word	0x2400225c
 8006874:	24002258 	.word	0x24002258

08006878 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006878:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <prvInsertBlockIntoFreeList+0x58>)
{
 800687a:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800687c:	461a      	mov	r2, r3
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4283      	cmp	r3, r0
 8006882:	d3fb      	bcc.n	800687c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006884:	6854      	ldr	r4, [r2, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006886:	6841      	ldr	r1, [r0, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006888:	eb02 0c04 	add.w	ip, r2, r4
 800688c:	4560      	cmp	r0, ip
 800688e:	d013      	beq.n	80068b8 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006890:	1844      	adds	r4, r0, r1
 8006892:	42a3      	cmp	r3, r4
 8006894:	d006      	beq.n	80068a4 <prvInsertBlockIntoFreeList+0x2c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006896:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006898:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800689a:	bf18      	it	ne
 800689c:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800689e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a2:	4770      	bx	lr
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068a4:	4c0b      	ldr	r4, [pc, #44]	@ (80068d4 <prvInsertBlockIntoFreeList+0x5c>)
 80068a6:	6824      	ldr	r4, [r4, #0]
 80068a8:	42a3      	cmp	r3, r4
 80068aa:	d0f4      	beq.n	8006896 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ac:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068b0:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068b2:	6003      	str	r3, [r0, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068b4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068b6:	e7ef      	b.n	8006898 <prvInsertBlockIntoFreeList+0x20>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068b8:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068ba:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068bc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068be:	4283      	cmp	r3, r0
 80068c0:	d1ed      	bne.n	800689e <prvInsertBlockIntoFreeList+0x26>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068c2:	4804      	ldr	r0, [pc, #16]	@ (80068d4 <prvInsertBlockIntoFreeList+0x5c>)
 80068c4:	6800      	ldr	r0, [r0, #0]
 80068c6:	4283      	cmp	r3, r0
 80068c8:	d0e9      	beq.n	800689e <prvInsertBlockIntoFreeList+0x26>
		pxBlockToInsert = pxIterator;
 80068ca:	4610      	mov	r0, r2
 80068cc:	e7ee      	b.n	80068ac <prvInsertBlockIntoFreeList+0x34>
 80068ce:	bf00      	nop
 80068d0:	24002278 	.word	0x24002278
 80068d4:	24002274 	.word	0x24002274

080068d8 <pvPortMalloc>:
{
 80068d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		if( pxEnd == NULL )
 80068dc:	4d41      	ldr	r5, [pc, #260]	@ (80069e4 <pvPortMalloc+0x10c>)
{
 80068de:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80068e0:	f7ff f852 	bl	8005988 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d05c      	beq.n	80069a4 <pvPortMalloc+0xcc>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068ea:	4b3f      	ldr	r3, [pc, #252]	@ (80069e8 <pvPortMalloc+0x110>)
 80068ec:	681e      	ldr	r6, [r3, #0]
 80068ee:	4234      	tst	r4, r6
 80068f0:	d12e      	bne.n	8006950 <pvPortMalloc+0x78>
			if( xWantedSize > 0 )
 80068f2:	b36c      	cbz	r4, 8006950 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068f4:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 80068f6:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068fa:	d002      	beq.n	8006902 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068fc:	f021 0107 	bic.w	r1, r1, #7
 8006900:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006902:	b329      	cbz	r1, 8006950 <pvPortMalloc+0x78>
 8006904:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8006a00 <pvPortMalloc+0x128>
 8006908:	f8d8 7000 	ldr.w	r7, [r8]
 800690c:	428f      	cmp	r7, r1
 800690e:	d31f      	bcc.n	8006950 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8006910:	4836      	ldr	r0, [pc, #216]	@ (80069ec <pvPortMalloc+0x114>)
 8006912:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006914:	e003      	b.n	800691e <pvPortMalloc+0x46>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	b123      	cbz	r3, 8006924 <pvPortMalloc+0x4c>
					pxPreviousBlock = pxBlock;
 800691a:	4620      	mov	r0, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800691c:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	428a      	cmp	r2, r1
 8006922:	d3f8      	bcc.n	8006916 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	42a3      	cmp	r3, r4
 8006928:	d012      	beq.n	8006950 <pvPortMalloc+0x78>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800692a:	1a53      	subs	r3, r2, r1
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800692c:	6825      	ldr	r5, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800692e:	f8d0 9000 	ldr.w	r9, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006932:	2b10      	cmp	r3, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006934:	6005      	str	r5, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006936:	d916      	bls.n	8006966 <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006938:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800693a:	0742      	lsls	r2, r0, #29
 800693c:	d00e      	beq.n	800695c <pvPortMalloc+0x84>
 800693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	e7fe      	b.n	800694e <pvPortMalloc+0x76>
void *pvReturn = NULL;
 8006950:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 8006952:	f7ff f96d 	bl	8005c30 <xTaskResumeAll>
}
 8006956:	4628      	mov	r0, r5
 8006958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800695c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800695e:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006960:	f7ff ff8a 	bl	8006878 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006964:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006966:	4b22      	ldr	r3, [pc, #136]	@ (80069f0 <pvPortMalloc+0x118>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006968:	1abf      	subs	r7, r7, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	4332      	orrs	r2, r6
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800696c:	f109 0508 	add.w	r5, r9, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006970:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006972:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006976:	428f      	cmp	r7, r1
					xNumberOfSuccessfulAllocations++;
 8006978:	491e      	ldr	r1, [pc, #120]	@ (80069f4 <pvPortMalloc+0x11c>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800697a:	bf38      	it	cc
 800697c:	601f      	strcc	r7, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 8006984:	680b      	ldr	r3, [r1, #0]
 8006986:	3301      	adds	r3, #1
 8006988:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 800698a:	f7ff f951 	bl	8005c30 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698e:	076b      	lsls	r3, r5, #29
 8006990:	d0e1      	beq.n	8006956 <pvPortMalloc+0x7e>
 8006992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	e7fe      	b.n	80069a2 <pvPortMalloc+0xca>
	uxAddress = ( size_t ) ucHeap;
 80069a4:	4b14      	ldr	r3, [pc, #80]	@ (80069f8 <pvPortMalloc+0x120>)
	xStart.xBlockSize = ( size_t ) 0;
 80069a6:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 80069a8:	4a14      	ldr	r2, [pc, #80]	@ (80069fc <pvPortMalloc+0x124>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069aa:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069ae:	075e      	lsls	r6, r3, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069b0:	4e0e      	ldr	r6, [pc, #56]	@ (80069ec <pvPortMalloc+0x114>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b2:	f022 0207 	bic.w	r2, r2, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069b6:	bf18      	it	ne
 80069b8:	3307      	addne	r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80069ba:	6071      	str	r1, [r6, #4]
	pxEnd = ( void * ) uxAddress;
 80069bc:	602a      	str	r2, [r5, #0]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069be:	bf18      	it	ne
 80069c0:	f023 0307 	bicne.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069c4:	6033      	str	r3, [r6, #0]
 80069c6:	4618      	mov	r0, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069c8:	1ad3      	subs	r3, r2, r3
}
 80069ca:	463e      	mov	r6, r7
	pxEnd->pxNextFreeBlock = NULL;
 80069cc:	e9c2 1100 	strd	r1, r1, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069d0:	e9c0 2300 	strd	r2, r3, [r0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d4:	4a06      	ldr	r2, [pc, #24]	@ (80069f0 <pvPortMalloc+0x118>)
 80069d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d8:	4a09      	ldr	r2, [pc, #36]	@ (8006a00 <pvPortMalloc+0x128>)
 80069da:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069dc:	4b02      	ldr	r3, [pc, #8]	@ (80069e8 <pvPortMalloc+0x110>)
 80069de:	601f      	str	r7, [r3, #0]
}
 80069e0:	e785      	b.n	80068ee <pvPortMalloc+0x16>
 80069e2:	bf00      	nop
 80069e4:	24002274 	.word	0x24002274
 80069e8:	24002260 	.word	0x24002260
 80069ec:	24002278 	.word	0x24002278
 80069f0:	2400226c 	.word	0x2400226c
 80069f4:	24002268 	.word	0x24002268
 80069f8:	24002280 	.word	0x24002280
 80069fc:	24009a78 	.word	0x24009a78
 8006a00:	24002270 	.word	0x24002270

08006a04 <vPortFree>:
	if( pv != NULL )
 8006a04:	b1d0      	cbz	r0, 8006a3c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a06:	4a1c      	ldr	r2, [pc, #112]	@ (8006a78 <vPortFree+0x74>)
 8006a08:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	4213      	tst	r3, r2
 8006a10:	d00b      	beq.n	8006a2a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a12:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006a16:	b191      	cbz	r1, 8006a3e <vPortFree+0x3a>
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	e7fe      	b.n	8006a28 <vPortFree+0x24>
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a3a:	e7fe      	b.n	8006a3a <vPortFree+0x36>
 8006a3c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a3e:	ea23 0302 	bic.w	r3, r3, r2
{
 8006a42:	b500      	push	{lr}
 8006a44:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a46:	f840 3c04 	str.w	r3, [r0, #-4]
 8006a4a:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8006a4c:	f7fe ff9c 	bl	8005988 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a50:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <vPortFree+0x78>)
 8006a52:	9801      	ldr	r0, [sp, #4]
 8006a54:	6811      	ldr	r1, [r2, #0]
 8006a56:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a5a:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	440b      	add	r3, r1
 8006a5e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a60:	f7ff ff0a 	bl	8006878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a64:	4a06      	ldr	r2, [pc, #24]	@ (8006a80 <vPortFree+0x7c>)
 8006a66:	6813      	ldr	r3, [r2, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	6013      	str	r3, [r2, #0]
}
 8006a6c:	b003      	add	sp, #12
 8006a6e:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8006a72:	f7ff b8dd 	b.w	8005c30 <xTaskResumeAll>
 8006a76:	bf00      	nop
 8006a78:	24002260 	.word	0x24002260
 8006a7c:	24002270 	.word	0x24002270
 8006a80:	24002264 	.word	0x24002264

08006a84 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8006a88:	f7fd fc60 	bl	800434c <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8006a8c:	f7fd fba4 	bl	80041d8 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8006a90:	4b2c      	ldr	r3, [pc, #176]	@ (8006b44 <tcpip_thread+0xc0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	b113      	cbz	r3, 8006a9c <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 8006a96:	4a2c      	ldr	r2, [pc, #176]	@ (8006b48 <tcpip_thread+0xc4>)
 8006a98:	6810      	ldr	r0, [r2, #0]
 8006a9a:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006a9c:	4d2b      	ldr	r5, [pc, #172]	@ (8006b4c <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006a9e:	4f2c      	ldr	r7, [pc, #176]	@ (8006b50 <tcpip_thread+0xcc>)
 8006aa0:	4e2c      	ldr	r6, [pc, #176]	@ (8006b54 <tcpip_thread+0xd0>)
 8006aa2:	e00e      	b.n	8006ac2 <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 8006aa4:	b158      	cbz	r0, 8006abe <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 8006aa6:	f7fd fc15 	bl	80042d4 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006aaa:	4622      	mov	r2, r4
 8006aac:	a901      	add	r1, sp, #4
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f007 fb30 	bl	800e114 <sys_arch_mbox_fetch>
 8006ab4:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006ab6:	f7fd fb8f 	bl	80041d8 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8006aba:	3401      	adds	r4, #1
 8006abc:	d111      	bne.n	8006ae2 <tcpip_thread+0x5e>
    sys_check_timeouts();
 8006abe:	f005 fd9b 	bl	800c5f8 <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 8006ac2:	f7fd fc11 	bl	80042e8 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 8006ac6:	f005 fdbf 	bl	800c648 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006aca:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8006acc:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006ace:	d1e9      	bne.n	8006aa4 <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 8006ad0:	f7fd fc00 	bl	80042d4 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	a901      	add	r1, sp, #4
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f007 fb1b 	bl	800e114 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006ade:	f7fd fb7b 	bl	80041d8 <sys_lock_tcpip_core>
    if (msg == NULL) {
 8006ae2:	9c01      	ldr	r4, [sp, #4]
 8006ae4:	b17c      	cbz	r4, 8006b06 <tcpip_thread+0x82>
  switch (msg->type) {
 8006ae6:	7823      	ldrb	r3, [r4, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d01e      	beq.n	8006b2a <tcpip_thread+0xa6>
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d018      	beq.n	8006b22 <tcpip_thread+0x9e>
 8006af0:	b983      	cbnz	r3, 8006b14 <tcpip_thread+0x90>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006af2:	6860      	ldr	r0, [r4, #4]
 8006af4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8006af8:	4798      	blx	r3
 8006afa:	b9f0      	cbnz	r0, 8006b3a <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006afc:	4621      	mov	r1, r4
 8006afe:	2009      	movs	r0, #9
 8006b00:	f000 fcc4 	bl	800748c <memp_free>
      break;
 8006b04:	e7dd      	b.n	8006ac2 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006b06:	463b      	mov	r3, r7
 8006b08:	2291      	movs	r2, #145	@ 0x91
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4812      	ldr	r0, [pc, #72]	@ (8006b58 <tcpip_thread+0xd4>)
 8006b0e:	f007 fc6d 	bl	800e3ec <iprintf>
      continue;
 8006b12:	e7d6      	b.n	8006ac2 <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006b14:	463b      	mov	r3, r7
 8006b16:	22cf      	movs	r2, #207	@ 0xcf
 8006b18:	4631      	mov	r1, r6
 8006b1a:	480f      	ldr	r0, [pc, #60]	@ (8006b58 <tcpip_thread+0xd4>)
 8006b1c:	f007 fc66 	bl	800e3ec <iprintf>
      break;
 8006b20:	e7cf      	b.n	8006ac2 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006b22:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006b26:	4798      	blx	r3
      break;
 8006b28:	e7cb      	b.n	8006ac2 <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006b2a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006b2e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006b30:	4621      	mov	r1, r4
 8006b32:	2008      	movs	r0, #8
 8006b34:	f000 fcaa 	bl	800748c <memp_free>
      break;
 8006b38:	e7c3      	b.n	8006ac2 <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006b3a:	6860      	ldr	r0, [r4, #4]
 8006b3c:	f000 ffb0 	bl	8007aa0 <pbuf_free>
 8006b40:	e7dc      	b.n	8006afc <tcpip_thread+0x78>
 8006b42:	bf00      	nop
 8006b44:	24009a8c 	.word	0x24009a8c
 8006b48:	24009a88 	.word	0x24009a88
 8006b4c:	24009a84 	.word	0x24009a84
 8006b50:	0800f4f0 	.word	0x0800f4f0
 8006b54:	0800f520 	.word	0x0800f520
 8006b58:	0800f2f8 	.word	0x0800f2f8

08006b5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006b60:	4811      	ldr	r0, [pc, #68]	@ (8006ba8 <tcpip_inpkt+0x4c>)
{
 8006b62:	460e      	mov	r6, r1
 8006b64:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006b66:	f007 faf3 	bl	800e150 <sys_mbox_valid>
 8006b6a:	b178      	cbz	r0, 8006b8c <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006b6c:	2009      	movs	r0, #9
 8006b6e:	f000 fc47 	bl	8007400 <memp_malloc>
  if (msg == NULL) {
 8006b72:	4604      	mov	r4, r0
 8006b74:	b1a8      	cbz	r0, 8006ba2 <tcpip_inpkt+0x46>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8006b76:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8006b78:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8006b7a:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006b7c:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8006b7e:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006b80:	4809      	ldr	r0, [pc, #36]	@ (8006ba8 <tcpip_inpkt+0x4c>)
  msg->msg.inp.input_fn = input_fn;
 8006b82:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006b84:	f007 fab6 	bl	800e0f4 <sys_mbox_trypost>
 8006b88:	b938      	cbnz	r0, 8006b9a <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006b8c:	4b07      	ldr	r3, [pc, #28]	@ (8006bac <tcpip_inpkt+0x50>)
 8006b8e:	22fc      	movs	r2, #252	@ 0xfc
 8006b90:	4907      	ldr	r1, [pc, #28]	@ (8006bb0 <tcpip_inpkt+0x54>)
 8006b92:	4808      	ldr	r0, [pc, #32]	@ (8006bb4 <tcpip_inpkt+0x58>)
 8006b94:	f007 fc2a 	bl	800e3ec <iprintf>
 8006b98:	e7e8      	b.n	8006b6c <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	2009      	movs	r0, #9
 8006b9e:	f000 fc75 	bl	800748c <memp_free>
    return ERR_MEM;
 8006ba2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8006ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ba8:	24009a84 	.word	0x24009a84
 8006bac:	0800f4f0 	.word	0x0800f4f0
 8006bb0:	0800f540 	.word	0x0800f540
 8006bb4:	0800f2f8 	.word	0x0800f2f8

08006bb8 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006bb8:	f891 302d 	ldrb.w	r3, [r1, #45]	@ 0x2d
 8006bbc:	f013 0f18 	tst.w	r3, #24
 8006bc0:	d002      	beq.n	8006bc8 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006bc2:	4a03      	ldr	r2, [pc, #12]	@ (8006bd0 <tcpip_input+0x18>)
 8006bc4:	f7ff bfca 	b.w	8006b5c <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006bc8:	4a02      	ldr	r2, [pc, #8]	@ (8006bd4 <tcpip_input+0x1c>)
 8006bca:	f7ff bfc7 	b.w	8006b5c <tcpip_inpkt>
 8006bce:	bf00      	nop
 8006bd0:	0800dfbd 	.word	0x0800dfbd
 8006bd4:	0800d3b1 	.word	0x0800d3b1

08006bd8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006bd8:	b570      	push	{r4, r5, r6, lr}
 8006bda:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006bdc:	4811      	ldr	r0, [pc, #68]	@ (8006c24 <tcpip_try_callback+0x4c>)
{
 8006bde:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006be0:	f007 fab6 	bl	800e150 <sys_mbox_valid>
 8006be4:	b170      	cbz	r0, 8006c04 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006be6:	2008      	movs	r0, #8
 8006be8:	f000 fc0a 	bl	8007400 <memp_malloc>
  if (msg == NULL) {
 8006bec:	4604      	mov	r4, r0
 8006bee:	b1a8      	cbz	r0, 8006c1c <tcpip_try_callback+0x44>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006bf0:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006bf2:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8006bf4:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006bf8:	480a      	ldr	r0, [pc, #40]	@ (8006c24 <tcpip_try_callback+0x4c>)
  msg->type = TCPIP_MSG_CALLBACK;
 8006bfa:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006bfc:	f007 fa7a 	bl	800e0f4 <sys_mbox_trypost>
 8006c00:	b940      	cbnz	r0, 8006c14 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006c04:	4b08      	ldr	r3, [pc, #32]	@ (8006c28 <tcpip_try_callback+0x50>)
 8006c06:	f240 125d 	movw	r2, #349	@ 0x15d
 8006c0a:	4908      	ldr	r1, [pc, #32]	@ (8006c2c <tcpip_try_callback+0x54>)
 8006c0c:	4808      	ldr	r0, [pc, #32]	@ (8006c30 <tcpip_try_callback+0x58>)
 8006c0e:	f007 fbed 	bl	800e3ec <iprintf>
 8006c12:	e7e8      	b.n	8006be6 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006c14:	4621      	mov	r1, r4
 8006c16:	2008      	movs	r0, #8
 8006c18:	f000 fc38 	bl	800748c <memp_free>
    return ERR_MEM;
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 8006c20:	bd70      	pop	{r4, r5, r6, pc}
 8006c22:	bf00      	nop
 8006c24:	24009a84 	.word	0x24009a84
 8006c28:	0800f4f0 	.word	0x0800f4f0
 8006c2c:	0800f540 	.word	0x0800f540
 8006c30:	0800f2f8 	.word	0x0800f2f8

08006c34 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006c34:	b530      	push	{r4, r5, lr}
 8006c36:	b083      	sub	sp, #12
 8006c38:	4605      	mov	r5, r0
 8006c3a:	460c      	mov	r4, r1
  lwip_init();
 8006c3c:	f000 f8b2 	bl	8006da4 <lwip_init>

  tcpip_init_done = initfunc;
 8006c40:	4a15      	ldr	r2, [pc, #84]	@ (8006c98 <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006c42:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8006c44:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006c46:	4816      	ldr	r0, [pc, #88]	@ (8006ca0 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8006c48:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8006c4a:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006c4c:	f007 fa44 	bl	800e0d8 <sys_mbox_new>
 8006c50:	b970      	cbnz	r0, 8006c70 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006c52:	4814      	ldr	r0, [pc, #80]	@ (8006ca4 <tcpip_init+0x70>)
 8006c54:	f007 fa8c 	bl	800e170 <sys_mutex_new>
 8006c58:	b9b0      	cbnz	r0, 8006c88 <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006c5a:	2418      	movs	r4, #24
 8006c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c60:	2200      	movs	r2, #0
 8006c62:	4911      	ldr	r1, [pc, #68]	@ (8006ca8 <tcpip_init+0x74>)
 8006c64:	9400      	str	r4, [sp, #0]
 8006c66:	4811      	ldr	r0, [pc, #68]	@ (8006cac <tcpip_init+0x78>)
 8006c68:	f007 fa98 	bl	800e19c <sys_thread_new>
}
 8006c6c:	b003      	add	sp, #12
 8006c6e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006c70:	4b0f      	ldr	r3, [pc, #60]	@ (8006cb0 <tcpip_init+0x7c>)
 8006c72:	f240 2261 	movw	r2, #609	@ 0x261
 8006c76:	490f      	ldr	r1, [pc, #60]	@ (8006cb4 <tcpip_init+0x80>)
 8006c78:	480f      	ldr	r0, [pc, #60]	@ (8006cb8 <tcpip_init+0x84>)
 8006c7a:	f007 fbb7 	bl	800e3ec <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006c7e:	4809      	ldr	r0, [pc, #36]	@ (8006ca4 <tcpip_init+0x70>)
 8006c80:	f007 fa76 	bl	800e170 <sys_mutex_new>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d0e8      	beq.n	8006c5a <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006c88:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <tcpip_init+0x7c>)
 8006c8a:	f240 2265 	movw	r2, #613	@ 0x265
 8006c8e:	490b      	ldr	r1, [pc, #44]	@ (8006cbc <tcpip_init+0x88>)
 8006c90:	4809      	ldr	r0, [pc, #36]	@ (8006cb8 <tcpip_init+0x84>)
 8006c92:	f007 fbab 	bl	800e3ec <iprintf>
 8006c96:	e7e0      	b.n	8006c5a <tcpip_init+0x26>
 8006c98:	24009a8c 	.word	0x24009a8c
 8006c9c:	24009a88 	.word	0x24009a88
 8006ca0:	24009a84 	.word	0x24009a84
 8006ca4:	24009a80 	.word	0x24009a80
 8006ca8:	08006a85 	.word	0x08006a85
 8006cac:	0800f598 	.word	0x0800f598
 8006cb0:	0800f4f0 	.word	0x0800f4f0
 8006cb4:	0800f550 	.word	0x0800f550
 8006cb8:	0800f2f8 	.word	0x0800f2f8
 8006cbc:	0800f574 	.word	0x0800f574

08006cc0 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006cc0:	ba40      	rev16	r0, r0
}
 8006cc2:	b280      	uxth	r0, r0
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8006cc8:	ba00      	rev	r0, r0
 8006cca:	4770      	bx	lr

08006ccc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006ccc:	b530      	push	{r4, r5, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8006cce:	f04f 0e00 	mov.w	lr, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);
 8006cd2:	f000 0501 	and.w	r5, r0, #1

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006cd6:	4571      	cmp	r1, lr
 8006cd8:	dd05      	ble.n	8006ce6 <lwip_standard_chksum+0x1a>
 8006cda:	b125      	cbz	r5, 8006ce6 <lwip_standard_chksum+0x1a>
    ((u8_t *)&t)[1] = *pb++;
 8006cdc:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8006ce0:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8006ce2:	f363 2e1f 	bfi	lr, r3, #8, #24
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8006ce6:	2901      	cmp	r1, #1
 8006ce8:	dd27      	ble.n	8006d3a <lwip_standard_chksum+0x6e>
 8006cea:	3902      	subs	r1, #2
  u32_t sum = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	084c      	lsrs	r4, r1, #1
 8006cf0:	f104 0c01 	add.w	ip, r4, #1
 8006cf4:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8006cf8:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8006cfc:	4560      	cmp	r0, ip
    sum += *ps++;
 8006cfe:	4413      	add	r3, r2
  while (len > 1) {
 8006d00:	d1fa      	bne.n	8006cf8 <lwip_standard_chksum+0x2c>
 8006d02:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31
 8006d06:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006d0a:	2901      	cmp	r1, #1
 8006d0c:	d105      	bne.n	8006d1a <lwip_standard_chksum+0x4e>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006d0e:	f89c 2000 	ldrb.w	r2, [ip]
 8006d12:	f362 0e07 	bfi	lr, r2, #0, #8
 8006d16:	fa1f fe8e 	uxth.w	lr, lr
  }

  /* Add end bytes */
  sum += t;
 8006d1a:	449e      	add	lr, r3

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006d1c:	fa1f f38e 	uxth.w	r3, lr
 8006d20:	eb03 431e 	add.w	r3, r3, lr, lsr #16
  sum = FOLD_U32T(sum);
 8006d24:	b298      	uxth	r0, r3
 8006d26:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8006d2a:	b125      	cbz	r5, 8006d36 <lwip_standard_chksum+0x6a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006d2c:	0203      	lsls	r3, r0, #8
 8006d2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8006d36:	b280      	uxth	r0, r0
 8006d38:	bd30      	pop	{r4, r5, pc}
  ps = (const u16_t *)(const void *)pb;
 8006d3a:	4684      	mov	ip, r0
  u32_t sum = 0;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e7e4      	b.n	8006d0a <lwip_standard_chksum+0x3e>

08006d40 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006d40:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006d42:	f7ff ffc3 	bl	8006ccc <lwip_standard_chksum>
 8006d46:	43c0      	mvns	r0, r0
}
 8006d48:	b280      	uxth	r0, r0
 8006d4a:	bd08      	pop	{r3, pc}

08006d4c <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8006d4c:	b338      	cbz	r0, 8006d9e <inet_chksum_pbuf+0x52>
{
 8006d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int swapped = 0;
 8006d50:	2700      	movs	r7, #0
 8006d52:	4605      	mov	r5, r0
  acc = 0;
 8006d54:	463c      	mov	r4, r7
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006d56:	896e      	ldrh	r6, [r5, #10]
 8006d58:	6868      	ldr	r0, [r5, #4]
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	f7ff ffb6 	bl	8006ccc <lwip_standard_chksum>
 8006d60:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8006d62:	f016 0f01 	tst.w	r6, #1
    acc = FOLD_U32T(acc);
 8006d66:	b2a3      	uxth	r3, r4
 8006d68:	eb03 4414 	add.w	r4, r3, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8006d6c:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8006d70:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8006d74:	d004      	beq.n	8006d80 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	f087 0701 	eor.w	r7, r7, #1
 8006d7c:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8006d80:	682d      	ldr	r5, [r5, #0]
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	d1e7      	bne.n	8006d56 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8006d86:	b13f      	cbz	r7, 8006d98 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006d88:	0220      	lsls	r0, r4, #8
 8006d8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006d8e:	b280      	uxth	r0, r0
 8006d90:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8006d92:	43c0      	mvns	r0, r0
 8006d94:	b280      	uxth	r0, r0
}
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return (u16_t)~(acc & 0xffffUL);
 8006d98:	43e4      	mvns	r4, r4
 8006d9a:	b2a0      	uxth	r0, r4
}
 8006d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (q = p; q != NULL; q = q->next) {
 8006d9e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 8006da2:	4770      	bx	lr

08006da4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006da4:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006da6:	f007 f9d9 	bl	800e15c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006daa:	f000 f80d 	bl	8006dc8 <mem_init>
  memp_init();
 8006dae:	f000 fae5 	bl	800737c <memp_init>
  pbuf_init();
  netif_init();
 8006db2:	f000 fbbf 	bl	8007534 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006db6:	f005 fc5b 	bl	800c670 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006dba:	f001 fa27 	bl	800820c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8006dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8006dc2:	f005 bbfb 	b.w	800c5bc <sys_timeouts_init>
 8006dc6:	bf00      	nop

08006dc8 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006dc8:	4b13      	ldr	r3, [pc, #76]	@ (8006e18 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006dca:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006dce:	4813      	ldr	r0, [pc, #76]	@ (8006e1c <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8006dd0:	f647 51e8 	movw	r1, #32232	@ 0x7de8
{
 8006dd4:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006dd6:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 8006dd8:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 8006dda:	f8c2 1200 	str.w	r1, [r2, #512]	@ 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006dde:	4419      	add	r1, r3
 8006de0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e20 <mem_init+0x58>)
  mem->used = 0;
 8006de2:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006de4:	480f      	ldr	r0, [pc, #60]	@ (8006e24 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006de6:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8006de8:	2101      	movs	r1, #1
 8006dea:	4a0f      	ldr	r2, [pc, #60]	@ (8006e28 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 8006dec:	4c0f      	ldr	r4, [pc, #60]	@ (8006e2c <mem_init+0x64>)
 8006dee:	f8c0 4fe8 	str.w	r4, [r0, #4072]	@ 0xfe8
  ram_end->used = 1;
 8006df2:	f882 10ec 	strb.w	r1, [r2, #236]	@ 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006df6:	4a0e      	ldr	r2, [pc, #56]	@ (8006e30 <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006df8:	480e      	ldr	r0, [pc, #56]	@ (8006e34 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 8006dfa:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006dfc:	f007 f9b8 	bl	800e170 <sys_mutex_new>
 8006e00:	b900      	cbnz	r0, 8006e04 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006e02:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <mem_init+0x70>)
 8006e06:	f240 221f 	movw	r2, #543	@ 0x21f
 8006e0a:	490c      	ldr	r1, [pc, #48]	@ (8006e3c <mem_init+0x74>)
 8006e0c:	480c      	ldr	r0, [pc, #48]	@ (8006e40 <mem_init+0x78>)
}
 8006e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006e12:	f007 baeb 	b.w	800e3ec <iprintf>
 8006e16:	bf00      	nop
 8006e18:	30000200 	.word	0x30000200
 8006e1c:	24009ab4 	.word	0x24009ab4
 8006e20:	24009ab0 	.word	0x24009ab0
 8006e24:	30007000 	.word	0x30007000
 8006e28:	30007f00 	.word	0x30007f00
 8006e2c:	7de87de8 	.word	0x7de87de8
 8006e30:	24009aa8 	.word	0x24009aa8
 8006e34:	24009aac 	.word	0x24009aac
 8006e38:	0800f5a8 	.word	0x0800f5a8
 8006e3c:	0800f5d8 	.word	0x0800f5d8
 8006e40:	0800f2f8 	.word	0x0800f2f8

08006e44 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f000 809a 	beq.w	8006f7e <mem_free+0x13a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006e4a:	0783      	lsls	r3, r0, #30
{
 8006e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e50:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006e52:	f040 808f 	bne.w	8006f74 <mem_free+0x130>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006e56:	4e62      	ldr	r6, [pc, #392]	@ (8006fe0 <mem_free+0x19c>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006e58:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006e5c:	6833      	ldr	r3, [r6, #0]
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	d805      	bhi.n	8006e6e <mem_free+0x2a>
 8006e62:	4f60      	ldr	r7, [pc, #384]	@ (8006fe4 <mem_free+0x1a0>)
 8006e64:	f100 030c 	add.w	r3, r0, #12
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d20c      	bcs.n	8006e88 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fe8 <mem_free+0x1a4>)
 8006e70:	f240 227f 	movw	r2, #639	@ 0x27f
 8006e74:	495d      	ldr	r1, [pc, #372]	@ (8006fec <mem_free+0x1a8>)
 8006e76:	485e      	ldr	r0, [pc, #376]	@ (8006ff0 <mem_free+0x1ac>)
 8006e78:	f007 fab8 	bl	800e3ec <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006e7c:	f007 f9a4 	bl	800e1c8 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006e80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006e84:	f007 b9ac 	b.w	800e1e0 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8006e88:	485a      	ldr	r0, [pc, #360]	@ (8006ff4 <mem_free+0x1b0>)
 8006e8a:	f007 f97d 	bl	800e188 <sys_mutex_lock>
  if (!mem->used) {
 8006e8e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 809f 	beq.w	8006fd6 <mem_free+0x192>
  nmem = ptr_to_mem(mem->next);
 8006e98:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006e9c:	f647 51e8 	movw	r1, #32232	@ 0x7de8
  return (mem_size_t)((u8_t *)mem - ram);
 8006ea0:	6832      	ldr	r2, [r6, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006ea2:	428b      	cmp	r3, r1
  pmem = ptr_to_mem(mem->prev);
 8006ea4:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006ea8:	d808      	bhi.n	8006ebc <mem_free+0x78>
 8006eaa:	4288      	cmp	r0, r1
 8006eac:	d806      	bhi.n	8006ebc <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 8006eae:	1aa9      	subs	r1, r5, r2
 8006eb0:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006eb2:	4281      	cmp	r1, r0
 8006eb4:	d012      	beq.n	8006edc <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006eb6:	5a10      	ldrh	r0, [r2, r0]
 8006eb8:	4288      	cmp	r0, r1
 8006eba:	d00f      	beq.n	8006edc <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8006fe8 <mem_free+0x1a4>)
 8006ebe:	f240 2295 	movw	r2, #661	@ 0x295
 8006ec2:	494d      	ldr	r1, [pc, #308]	@ (8006ff8 <mem_free+0x1b4>)
 8006ec4:	484a      	ldr	r0, [pc, #296]	@ (8006ff0 <mem_free+0x1ac>)
 8006ec6:	f007 fa91 	bl	800e3ec <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006eca:	484a      	ldr	r0, [pc, #296]	@ (8006ff4 <mem_free+0x1b0>)
 8006ecc:	f007 f962 	bl	800e194 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8006ed0:	f007 f97a 	bl	800e1c8 <sys_arch_protect>
}
 8006ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006ed8:	f007 b982 	b.w	800e1e0 <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8006edc:	eb02 0c03 	add.w	ip, r2, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006ee0:	6838      	ldr	r0, [r7, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006ee2:	4584      	cmp	ip, r0
 8006ee4:	d003      	beq.n	8006eee <mem_free+0xaa>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006ee6:	f8bc c002 	ldrh.w	ip, [ip, #2]
 8006eea:	458c      	cmp	ip, r1
 8006eec:	d1e6      	bne.n	8006ebc <mem_free+0x78>
  if (mem < lfree) {
 8006eee:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8007014 <mem_free+0x1d0>
  mem->used = 0;
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	f804 1c04 	strb.w	r1, [r4, #-4]
  if (mem < lfree) {
 8006ef8:	f8d8 1000 	ldr.w	r1, [r8]
 8006efc:	42a9      	cmp	r1, r5
    lfree = mem;
 8006efe:	bf88      	it	hi
 8006f00:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f04:	4295      	cmp	r5, r2
 8006f06:	d33b      	bcc.n	8006f80 <mem_free+0x13c>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006f08:	4285      	cmp	r5, r0
 8006f0a:	d243      	bcs.n	8006f94 <mem_free+0x150>
  return (struct mem *)(void *)&ram[ptr];
 8006f0c:	6832      	ldr	r2, [r6, #0]
 8006f0e:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006f10:	429d      	cmp	r5, r3
 8006f12:	d014      	beq.n	8006f3e <mem_free+0xfa>
 8006f14:	7919      	ldrb	r1, [r3, #4]
 8006f16:	b991      	cbnz	r1, 8006f3e <mem_free+0xfa>
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	428b      	cmp	r3, r1
 8006f1c:	d00f      	beq.n	8006f3e <mem_free+0xfa>
    if (lfree == nmem) {
 8006f1e:	f8d8 1000 	ldr.w	r1, [r8]
 8006f22:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8006f24:	881b      	ldrh	r3, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f26:	f647 51e8 	movw	r1, #32232	@ 0x7de8
      lfree = mem;
 8006f2a:	bf08      	it	eq
 8006f2c:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f30:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8006f32:	f824 3c08 	strh.w	r3, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f36:	d002      	beq.n	8006f3e <mem_free+0xfa>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006f38:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8006f3a:	1aa9      	subs	r1, r5, r2
 8006f3c:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8006f3e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8006f42:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8006f44:	429d      	cmp	r5, r3
 8006f46:	d010      	beq.n	8006f6a <mem_free+0x126>
 8006f48:	7918      	ldrb	r0, [r3, #4]
 8006f4a:	b970      	cbnz	r0, 8006f6a <mem_free+0x126>
    if (lfree == mem) {
 8006f4c:	f8d8 0000 	ldr.w	r0, [r8]
 8006f50:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f52:	f647 50e8 	movw	r0, #32232	@ 0x7de8
      lfree = pmem;
 8006f56:	bf08      	it	eq
 8006f58:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8006f5c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f60:	4283      	cmp	r3, r0
    pmem->next = mem->next;
 8006f62:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f64:	d001      	beq.n	8006f6a <mem_free+0x126>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006f66:	441a      	add	r2, r3
 8006f68:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006f6a:	4822      	ldr	r0, [pc, #136]	@ (8006ff4 <mem_free+0x1b0>)
}
 8006f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006f70:	f007 b910 	b.w	800e194 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006f74:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe8 <mem_free+0x1a4>)
 8006f76:	f240 2273 	movw	r2, #627	@ 0x273
 8006f7a:	4920      	ldr	r1, [pc, #128]	@ (8006ffc <mem_free+0x1b8>)
 8006f7c:	e77b      	b.n	8006e76 <mem_free+0x32>
 8006f7e:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006f80:	4b19      	ldr	r3, [pc, #100]	@ (8006fe8 <mem_free+0x1a4>)
 8006f82:	f240 12df 	movw	r2, #479	@ 0x1df
 8006f86:	491e      	ldr	r1, [pc, #120]	@ (8007000 <mem_free+0x1bc>)
 8006f88:	4819      	ldr	r0, [pc, #100]	@ (8006ff0 <mem_free+0x1ac>)
 8006f8a:	f007 fa2f 	bl	800e3ec <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	429d      	cmp	r5, r3
 8006f92:	d306      	bcc.n	8006fa2 <mem_free+0x15e>
 8006f94:	4b14      	ldr	r3, [pc, #80]	@ (8006fe8 <mem_free+0x1a4>)
 8006f96:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006f9a:	491a      	ldr	r1, [pc, #104]	@ (8007004 <mem_free+0x1c0>)
 8006f9c:	4814      	ldr	r0, [pc, #80]	@ (8006ff0 <mem_free+0x1ac>)
 8006f9e:	f007 fa25 	bl	800e3ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006fa2:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006fa6:	b133      	cbz	r3, 8006fb6 <mem_free+0x172>
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <mem_free+0x1a4>)
 8006faa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006fae:	4916      	ldr	r1, [pc, #88]	@ (8007008 <mem_free+0x1c4>)
 8006fb0:	480f      	ldr	r0, [pc, #60]	@ (8006ff0 <mem_free+0x1ac>)
 8006fb2:	f007 fa1b 	bl	800e3ec <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006fb6:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006fba:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d9a4      	bls.n	8006f0c <mem_free+0xc8>
 8006fc2:	4b09      	ldr	r3, [pc, #36]	@ (8006fe8 <mem_free+0x1a4>)
 8006fc4:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006fc8:	4910      	ldr	r1, [pc, #64]	@ (800700c <mem_free+0x1c8>)
 8006fca:	4809      	ldr	r0, [pc, #36]	@ (8006ff0 <mem_free+0x1ac>)
 8006fcc:	f007 fa0e 	bl	800e3ec <iprintf>
  nmem = ptr_to_mem(mem->next);
 8006fd0:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006fd4:	e79a      	b.n	8006f0c <mem_free+0xc8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006fd6:	4b04      	ldr	r3, [pc, #16]	@ (8006fe8 <mem_free+0x1a4>)
 8006fd8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006fdc:	490c      	ldr	r1, [pc, #48]	@ (8007010 <mem_free+0x1cc>)
 8006fde:	e771      	b.n	8006ec4 <mem_free+0x80>
 8006fe0:	24009ab4 	.word	0x24009ab4
 8006fe4:	24009ab0 	.word	0x24009ab0
 8006fe8:	0800f5a8 	.word	0x0800f5a8
 8006fec:	0800f618 	.word	0x0800f618
 8006ff0:	0800f2f8 	.word	0x0800f2f8
 8006ff4:	24009aac 	.word	0x24009aac
 8006ff8:	0800f65c 	.word	0x0800f65c
 8006ffc:	0800f5f4 	.word	0x0800f5f4
 8007000:	0800f690 	.word	0x0800f690
 8007004:	0800f6a8 	.word	0x0800f6a8
 8007008:	0800f6c4 	.word	0x0800f6c4
 800700c:	0800f6e0 	.word	0x0800f6e0
 8007010:	0800f634 	.word	0x0800f634
 8007014:	24009aa8 	.word	0x24009aa8

08007018 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800701c:	1ccb      	adds	r3, r1, #3
 800701e:	f023 0303 	bic.w	r3, r3, #3
 8007022:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 8007024:	2b0c      	cmp	r3, #12
 8007026:	461d      	mov	r5, r3
 8007028:	bf38      	it	cc
 800702a:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800702c:	428d      	cmp	r5, r1
 800702e:	f0c0 8087 	bcc.w	8007140 <mem_trim+0x128>
 8007032:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 8007036:	4293      	cmp	r3, r2
 8007038:	f200 8082 	bhi.w	8007140 <mem_trim+0x128>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800703c:	4f4c      	ldr	r7, [pc, #304]	@ (8007170 <mem_trim+0x158>)
 800703e:	4604      	mov	r4, r0
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4283      	cmp	r3, r0
 8007044:	d841      	bhi.n	80070ca <mem_trim+0xb2>
 8007046:	4a4b      	ldr	r2, [pc, #300]	@ (8007174 <mem_trim+0x15c>)
 8007048:	6812      	ldr	r2, [r2, #0]
 800704a:	4282      	cmp	r2, r0
 800704c:	d93d      	bls.n	80070ca <mem_trim+0xb2>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800704e:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007052:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8007056:	eba8 0803 	sub.w	r8, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800705a:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800705c:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007060:	eba6 0608 	sub.w	r6, r6, r8
 8007064:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007066:	42b5      	cmp	r5, r6
 8007068:	d863      	bhi.n	8007132 <mem_trim+0x11a>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 800706a:	d02c      	beq.n	80070c6 <mem_trim+0xae>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800706c:	4842      	ldr	r0, [pc, #264]	@ (8007178 <mem_trim+0x160>)
 800706e:	f007 f88b 	bl	800e188 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007072:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 800707c:	f899 1004 	ldrb.w	r1, [r9, #4]
 8007080:	2900      	cmp	r1, #0
 8007082:	d136      	bne.n	80070f2 <mem_trim+0xda>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007084:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 8007088:	428a      	cmp	r2, r1
 800708a:	d067      	beq.n	800715c <mem_trim+0x144>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800708c:	3508      	adds	r5, #8
    if (lfree == mem2) {
 800708e:	493b      	ldr	r1, [pc, #236]	@ (800717c <mem_trim+0x164>)
    next = mem2->next;
 8007090:	f8b9 6000 	ldrh.w	r6, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007094:	4445      	add	r5, r8
    if (lfree == mem2) {
 8007096:	6808      	ldr	r0, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007098:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 800709a:	4548      	cmp	r0, r9
  return (struct mem *)(void *)&ram[ptr];
 800709c:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 80070a0:	bf08      	it	eq
 80070a2:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 80070a4:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 80070a6:	8016      	strh	r6, [r2, #0]
    mem2->used = 0;
 80070a8:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070aa:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    mem2->prev = ptr;
 80070ae:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 80070b2:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80070b6:	8812      	ldrh	r2, [r2, #0]
 80070b8:	428a      	cmp	r2, r1
 80070ba:	d001      	beq.n	80070c0 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80070bc:	441a      	add	r2, r3
 80070be:	8055      	strh	r5, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80070c0:	482d      	ldr	r0, [pc, #180]	@ (8007178 <mem_trim+0x160>)
 80070c2:	f007 f867 	bl	800e194 <sys_mutex_unlock>
    return rmem;
 80070c6:	4620      	mov	r0, r4
 80070c8:	e03b      	b.n	8007142 <mem_trim+0x12a>
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80070ca:	4b2d      	ldr	r3, [pc, #180]	@ (8007180 <mem_trim+0x168>)
 80070cc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80070d0:	492c      	ldr	r1, [pc, #176]	@ (8007184 <mem_trim+0x16c>)
 80070d2:	482d      	ldr	r0, [pc, #180]	@ (8007188 <mem_trim+0x170>)
 80070d4:	f007 f98a 	bl	800e3ec <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	42a3      	cmp	r3, r4
 80070dc:	d803      	bhi.n	80070e6 <mem_trim+0xce>
 80070de:	4a25      	ldr	r2, [pc, #148]	@ (8007174 <mem_trim+0x15c>)
 80070e0:	6812      	ldr	r2, [r2, #0]
 80070e2:	42a2      	cmp	r2, r4
 80070e4:	d8b3      	bhi.n	800704e <mem_trim+0x36>
    MEM_STATS_INC_LOCKED(illegal);
 80070e6:	f007 f86f 	bl	800e1c8 <sys_arch_protect>
 80070ea:	f007 f879 	bl	800e1e0 <sys_arch_unprotect>
    return rmem;
 80070ee:	4620      	mov	r0, r4
 80070f0:	e027      	b.n	8007142 <mem_trim+0x12a>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80070f2:	f105 0114 	add.w	r1, r5, #20
 80070f6:	42b1      	cmp	r1, r6
 80070f8:	d8e2      	bhi.n	80070c0 <mem_trim+0xa8>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80070fa:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80070fc:	f647 51e8 	movw	r1, #32232	@ 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007100:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007102:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007104:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007106:	d01e      	beq.n	8007146 <mem_trim+0x12e>
    if (mem2 < lfree) {
 8007108:	481c      	ldr	r0, [pc, #112]	@ (800717c <mem_trim+0x164>)
  return (struct mem *)(void *)&ram[ptr];
 800710a:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 800710c:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 800710e:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 8007110:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 8007112:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 8007114:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 8007118:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 800711a:	bf88      	it	hi
 800711c:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 800711e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007122:	880a      	ldrh	r2, [r1, #0]
 8007124:	f647 51e8 	movw	r1, #32232	@ 0x7de8
 8007128:	428a      	cmp	r2, r1
 800712a:	d0c9      	beq.n	80070c0 <mem_trim+0xa8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800712c:	4413      	add	r3, r2
 800712e:	805d      	strh	r5, [r3, #2]
 8007130:	e7c6      	b.n	80070c0 <mem_trim+0xa8>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007132:	4b13      	ldr	r3, [pc, #76]	@ (8007180 <mem_trim+0x168>)
 8007134:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007138:	4914      	ldr	r1, [pc, #80]	@ (800718c <mem_trim+0x174>)
 800713a:	4813      	ldr	r0, [pc, #76]	@ (8007188 <mem_trim+0x170>)
 800713c:	f007 f956 	bl	800e3ec <iprintf>
    return NULL;
 8007140:	2000      	movs	r0, #0
  return rmem;
}
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007146:	4b0e      	ldr	r3, [pc, #56]	@ (8007180 <mem_trim+0x168>)
 8007148:	f240 3216 	movw	r2, #790	@ 0x316
 800714c:	4910      	ldr	r1, [pc, #64]	@ (8007190 <mem_trim+0x178>)
 800714e:	480e      	ldr	r0, [pc, #56]	@ (8007188 <mem_trim+0x170>)
 8007150:	f007 f94c 	bl	800e3ec <iprintf>
    mem2->next = mem->next;
 8007154:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	e7d5      	b.n	8007108 <mem_trim+0xf0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800715c:	4b08      	ldr	r3, [pc, #32]	@ (8007180 <mem_trim+0x168>)
 800715e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007162:	490b      	ldr	r1, [pc, #44]	@ (8007190 <mem_trim+0x178>)
 8007164:	4808      	ldr	r0, [pc, #32]	@ (8007188 <mem_trim+0x170>)
 8007166:	f007 f941 	bl	800e3ec <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	e78e      	b.n	800708c <mem_trim+0x74>
 800716e:	bf00      	nop
 8007170:	24009ab4 	.word	0x24009ab4
 8007174:	24009ab0 	.word	0x24009ab0
 8007178:	24009aac 	.word	0x24009aac
 800717c:	24009aa8 	.word	0x24009aa8
 8007180:	0800f5a8 	.word	0x0800f5a8
 8007184:	0800f70c 	.word	0x0800f70c
 8007188:	0800f2f8 	.word	0x0800f2f8
 800718c:	0800f724 	.word	0x0800f724
 8007190:	0800f744 	.word	0x0800f744

08007194 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007194:	2800      	cmp	r0, #0
 8007196:	d06c      	beq.n	8007272 <mem_malloc+0xde>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007198:	1cc3      	adds	r3, r0, #3
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 80071a0:	2b0c      	cmp	r3, #12
{
 80071a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (size < MIN_SIZE_ALIGNED) {
 80071a6:	4698      	mov	r8, r3
 80071a8:	bf38      	it	cc
 80071aa:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80071ae:	4580      	cmp	r8, r0
 80071b0:	d327      	bcc.n	8007202 <mem_malloc+0x6e>
 80071b2:	f647 54e8 	movw	r4, #32232	@ 0x7de8
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	d823      	bhi.n	8007202 <mem_malloc+0x6e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071ba:	4f47      	ldr	r7, [pc, #284]	@ (80072d8 <mem_malloc+0x144>)
  return (mem_size_t)((u8_t *)mem - ram);
 80071bc:	f8df a13c 	ldr.w	sl, [pc, #316]	@ 80072fc <mem_malloc+0x168>
  sys_mutex_lock(&mem_mutex);
 80071c0:	4846      	ldr	r0, [pc, #280]	@ (80072dc <mem_malloc+0x148>)
 80071c2:	f006 ffe1 	bl	800e188 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071c6:	f8d7 c000 	ldr.w	ip, [r7]
  return (mem_size_t)((u8_t *)mem - ram);
 80071ca:	f8da 0000 	ldr.w	r0, [sl]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071ce:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 80071d2:	ebac 0300 	sub.w	r3, ip, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071d6:	b299      	uxth	r1, r3
 80071d8:	4571      	cmp	r1, lr
  return (mem_size_t)((u8_t *)mem - ram);
 80071da:	460b      	mov	r3, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071dc:	d20e      	bcs.n	80071fc <mem_malloc+0x68>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071de:	f06f 0907 	mvn.w	r9, #7
  return (struct mem *)(void *)&ram[ptr];
 80071e2:	1844      	adds	r4, r0, r1
      if ((!mem->used) &&
 80071e4:	461d      	mov	r5, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071e6:	5a43      	ldrh	r3, [r0, r1]
 80071e8:	eba9 0201 	sub.w	r2, r9, r1
      if ((!mem->used) &&
 80071ec:	7926      	ldrb	r6, [r4, #4]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071ee:	4619      	mov	r1, r3
      if ((!mem->used) &&
 80071f0:	b916      	cbnz	r6, 80071f8 <mem_malloc+0x64>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80071f2:	441a      	add	r2, r3
      if ((!mem->used) &&
 80071f4:	4542      	cmp	r2, r8
 80071f6:	d207      	bcs.n	8007208 <mem_malloc+0x74>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80071f8:	459e      	cmp	lr, r3
 80071fa:	d8f2      	bhi.n	80071e2 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80071fc:	4837      	ldr	r0, [pc, #220]	@ (80072dc <mem_malloc+0x148>)
 80071fe:	f006 ffc9 	bl	800e194 <sys_mutex_unlock>
    return NULL;
 8007202:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8007204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007208:	f108 0114 	add.w	r1, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800720c:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007210:	428a      	cmp	r2, r1
 8007212:	d32b      	bcc.n	800726c <mem_malloc+0xd8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007214:	eb05 0908 	add.w	r9, r5, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007218:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800721c:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007220:	4591      	cmp	r9, r2
 8007222:	d04c      	beq.n	80072be <mem_malloc+0x12a>
  return (struct mem *)(void *)&ram[ptr];
 8007224:	eb00 0209 	add.w	r2, r0, r9
          mem2->used = 0;
 8007228:	2100      	movs	r1, #0
 800722a:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800722c:	f820 3009 	strh.w	r3, [r0, r9]
          mem->used = 1;
 8007230:	2301      	movs	r3, #1
          mem2->prev = ptr;
 8007232:	8055      	strh	r5, [r2, #2]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007234:	f647 52e8 	movw	r2, #32232	@ 0x7de8
          mem->next = ptr2;
 8007238:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 800723c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800723e:	f830 3009 	ldrh.w	r3, [r0, r9]
 8007242:	4293      	cmp	r3, r2
 8007244:	d002      	beq.n	800724c <mem_malloc+0xb8>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007246:	4418      	add	r0, r3
 8007248:	f8a0 9002 	strh.w	r9, [r0, #2]
        if (mem == lfree) {
 800724c:	4564      	cmp	r4, ip
          while (cur->used && cur != ram_end) {
 800724e:	4d24      	ldr	r5, [pc, #144]	@ (80072e0 <mem_malloc+0x14c>)
        if (mem == lfree) {
 8007250:	d028      	beq.n	80072a4 <mem_malloc+0x110>
        sys_mutex_unlock(&mem_mutex);
 8007252:	4822      	ldr	r0, [pc, #136]	@ (80072dc <mem_malloc+0x148>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007254:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8007256:	f006 ff9d 	bl	800e194 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	4543      	cmp	r3, r8
 800725e:	d319      	bcc.n	8007294 <mem_malloc+0x100>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007260:	07a3      	lsls	r3, r4, #30
 8007262:	d108      	bne.n	8007276 <mem_malloc+0xe2>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007264:	f104 0008 	add.w	r0, r4, #8
}
 8007268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          mem->used = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	7123      	strb	r3, [r4, #4]
 8007270:	e7ec      	b.n	800724c <mem_malloc+0xb8>
    return NULL;
 8007272:	2000      	movs	r0, #0
}
 8007274:	4770      	bx	lr
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007276:	4b1b      	ldr	r3, [pc, #108]	@ (80072e4 <mem_malloc+0x150>)
 8007278:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800727c:	491a      	ldr	r1, [pc, #104]	@ (80072e8 <mem_malloc+0x154>)
 800727e:	481b      	ldr	r0, [pc, #108]	@ (80072ec <mem_malloc+0x158>)
 8007280:	f007 f8b4 	bl	800e3ec <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007284:	4b17      	ldr	r3, [pc, #92]	@ (80072e4 <mem_malloc+0x150>)
 8007286:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800728a:	4919      	ldr	r1, [pc, #100]	@ (80072f0 <mem_malloc+0x15c>)
 800728c:	4817      	ldr	r0, [pc, #92]	@ (80072ec <mem_malloc+0x158>)
 800728e:	f007 f8ad 	bl	800e3ec <iprintf>
 8007292:	e7e7      	b.n	8007264 <mem_malloc+0xd0>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007294:	4b13      	ldr	r3, [pc, #76]	@ (80072e4 <mem_malloc+0x150>)
 8007296:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800729a:	4916      	ldr	r1, [pc, #88]	@ (80072f4 <mem_malloc+0x160>)
 800729c:	4813      	ldr	r0, [pc, #76]	@ (80072ec <mem_malloc+0x158>)
 800729e:	f007 f8a5 	bl	800e3ec <iprintf>
 80072a2:	e7dd      	b.n	8007260 <mem_malloc+0xcc>
  return (struct mem *)(void *)&ram[ptr];
 80072a4:	f8da 0000 	ldr.w	r0, [sl]
          struct mem *cur = lfree;
 80072a8:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 80072aa:	6829      	ldr	r1, [r5, #0]
 80072ac:	e003      	b.n	80072b6 <mem_malloc+0x122>
  return (struct mem *)(void *)&ram[ptr];
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 80072b2:	791a      	ldrb	r2, [r3, #4]
 80072b4:	b10a      	cbz	r2, 80072ba <mem_malloc+0x126>
 80072b6:	4299      	cmp	r1, r3
 80072b8:	d1f9      	bne.n	80072ae <mem_malloc+0x11a>
          lfree = cur;
 80072ba:	603b      	str	r3, [r7, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80072bc:	e7c9      	b.n	8007252 <mem_malloc+0xbe>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80072be:	4b09      	ldr	r3, [pc, #36]	@ (80072e4 <mem_malloc+0x150>)
 80072c0:	f240 3287 	movw	r2, #903	@ 0x387
 80072c4:	490c      	ldr	r1, [pc, #48]	@ (80072f8 <mem_malloc+0x164>)
 80072c6:	4809      	ldr	r0, [pc, #36]	@ (80072ec <mem_malloc+0x158>)
 80072c8:	f007 f890 	bl	800e3ec <iprintf>
          mem2->next = mem->next;
 80072cc:	8823      	ldrh	r3, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 80072ce:	f8da 0000 	ldr.w	r0, [sl]
        if (mem == lfree) {
 80072d2:	f8d7 c000 	ldr.w	ip, [r7]
 80072d6:	e7a5      	b.n	8007224 <mem_malloc+0x90>
 80072d8:	24009aa8 	.word	0x24009aa8
 80072dc:	24009aac 	.word	0x24009aac
 80072e0:	24009ab0 	.word	0x24009ab0
 80072e4:	0800f5a8 	.word	0x0800f5a8
 80072e8:	0800f788 	.word	0x0800f788
 80072ec:	0800f2f8 	.word	0x0800f2f8
 80072f0:	0800f7b8 	.word	0x0800f7b8
 80072f4:	0800f758 	.word	0x0800f758
 80072f8:	0800f744 	.word	0x0800f744
 80072fc:	24009ab4 	.word	0x24009ab4

08007300 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007304:	f006 ff60 	bl	800e1c8 <sys_arch_protect>

  memp = *desc->tab;
 8007308:	68a3      	ldr	r3, [r4, #8]
 800730a:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800730c:	b18c      	cbz	r4, 8007332 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	4605      	mov	r5, r0
 8007312:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007314:	07a3      	lsls	r3, r4, #30
 8007316:	d104      	bne.n	8007322 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007318:	4628      	mov	r0, r5
 800731a:	f006 ff61 	bl	800e1e0 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800731e:	4620      	mov	r0, r4
 8007320:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007322:	4b06      	ldr	r3, [pc, #24]	@ (800733c <do_memp_malloc_pool+0x3c>)
 8007324:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007328:	4905      	ldr	r1, [pc, #20]	@ (8007340 <do_memp_malloc_pool+0x40>)
 800732a:	4806      	ldr	r0, [pc, #24]	@ (8007344 <do_memp_malloc_pool+0x44>)
 800732c:	f007 f85e 	bl	800e3ec <iprintf>
 8007330:	e7f2      	b.n	8007318 <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8007332:	f006 ff55 	bl	800e1e0 <sys_arch_unprotect>
}
 8007336:	4620      	mov	r0, r4
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	0800f7dc 	.word	0x0800f7dc
 8007340:	0800f80c 	.word	0x0800f80c
 8007344:	0800f2f8 	.word	0x0800f2f8

08007348 <memp_init_pool>:
{
 8007348:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 800734a:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 800734c:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800734e:	e9d0 3501 	ldrd	r3, r5, [r0, #4]
 8007352:	6029      	str	r1, [r5, #0]
  for (i = 0; i < desc->num; ++i) {
 8007354:	b17c      	cbz	r4, 8007376 <memp_init_pool+0x2e>
 8007356:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007358:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 800735c:	460a      	mov	r2, r1
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	e000      	b.n	8007366 <memp_init_pool+0x1e>
 8007364:	4603      	mov	r3, r0
 8007366:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007368:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800736a:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 800736e:	4619      	mov	r1, r3
 8007370:	42a2      	cmp	r2, r4
 8007372:	d1f7      	bne.n	8007364 <memp_init_pool+0x1c>
 8007374:	602b      	str	r3, [r5, #0]
}
 8007376:	bc30      	pop	{r4, r5}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <memp_init>:
{
 800737c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800737e:	f8df e054 	ldr.w	lr, [pc, #84]	@ 80073d4 <memp_init+0x58>
 8007382:	2404      	movs	r4, #4
 8007384:	4b11      	ldr	r3, [pc, #68]	@ (80073cc <memp_init+0x50>)
  *desc->tab = NULL;
 8007386:	2600      	movs	r6, #0
{
 8007388:	4d11      	ldr	r5, [pc, #68]	@ (80073d0 <memp_init+0x54>)
 800738a:	f10e 0734 	add.w	r7, lr, #52	@ 0x34
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800738e:	3303      	adds	r3, #3
    memp_init_pool(memp_pools[i]);
 8007390:	f85e 2b04 	ldr.w	r2, [lr], #4
  *desc->tab = NULL;
 8007394:	602e      	str	r6, [r5, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007396:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800739a:	b16c      	cbz	r4, 80073b8 <memp_init+0x3c>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800739c:	2100      	movs	r1, #0
 800739e:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 80073a2:	460a      	mov	r2, r1
 80073a4:	e000      	b.n	80073a8 <memp_init+0x2c>
 80073a6:	4603      	mov	r3, r0
 80073a8:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 80073aa:	6019      	str	r1, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80073ac:	eb03 000c 	add.w	r0, r3, ip
  for (i = 0; i < desc->num; ++i) {
 80073b0:	4619      	mov	r1, r3
 80073b2:	42a2      	cmp	r2, r4
 80073b4:	d1f7      	bne.n	80073a6 <memp_init+0x2a>
 80073b6:	602b      	str	r3, [r5, #0]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80073b8:	4577      	cmp	r7, lr
 80073ba:	d005      	beq.n	80073c8 <memp_init+0x4c>
    memp_init_pool(memp_pools[i]);
 80073bc:	f8de 2000 	ldr.w	r2, [lr]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80073c0:	e9d2 3501 	ldrd	r3, r5, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 80073c4:	8854      	ldrh	r4, [r2, #2]
 80073c6:	e7e2      	b.n	800738e <memp_init+0x12>
}
 80073c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	240104c0 	.word	0x240104c0
 80073d0:	240104bc 	.word	0x240104bc
 80073d4:	08011aa0 	.word	0x08011aa0

080073d8 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80073d8:	b108      	cbz	r0, 80073de <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80073da:	f7ff bf91 	b.w	8007300 <do_memp_malloc_pool>
{
 80073de:	b510      	push	{r4, lr}
 80073e0:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80073e2:	4b04      	ldr	r3, [pc, #16]	@ (80073f4 <memp_malloc_pool+0x1c>)
 80073e4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80073e8:	4903      	ldr	r1, [pc, #12]	@ (80073f8 <memp_malloc_pool+0x20>)
 80073ea:	4804      	ldr	r0, [pc, #16]	@ (80073fc <memp_malloc_pool+0x24>)
 80073ec:	f006 fffe 	bl	800e3ec <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80073f0:	4620      	mov	r0, r4
 80073f2:	bd10      	pop	{r4, pc}
 80073f4:	0800f7dc 	.word	0x0800f7dc
 80073f8:	0800f830 	.word	0x0800f830
 80073fc:	0800f2f8 	.word	0x0800f2f8

08007400 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007400:	280c      	cmp	r0, #12
{
 8007402:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007404:	d806      	bhi.n	8007414 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007406:	4b08      	ldr	r3, [pc, #32]	@ (8007428 <memp_malloc+0x28>)
 8007408:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 800740c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007410:	f7ff bf76 	b.w	8007300 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <memp_malloc+0x2c>)
 8007416:	f240 1257 	movw	r2, #343	@ 0x157
 800741a:	4905      	ldr	r1, [pc, #20]	@ (8007430 <memp_malloc+0x30>)
 800741c:	4805      	ldr	r0, [pc, #20]	@ (8007434 <memp_malloc+0x34>)
 800741e:	f006 ffe5 	bl	800e3ec <iprintf>
}
 8007422:	2000      	movs	r0, #0
 8007424:	bd08      	pop	{r3, pc}
 8007426:	bf00      	nop
 8007428:	08011aa0 	.word	0x08011aa0
 800742c:	0800f7dc 	.word	0x0800f7dc
 8007430:	0800f844 	.word	0x0800f844
 8007434:	0800f2f8 	.word	0x0800f2f8

08007438 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007438:	b1c0      	cbz	r0, 800746c <memp_free_pool+0x34>
{
 800743a:	b570      	push	{r4, r5, r6, lr}
 800743c:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 800743e:	b161      	cbz	r1, 800745a <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007440:	078b      	lsls	r3, r1, #30
 8007442:	4605      	mov	r5, r0
 8007444:	d10a      	bne.n	800745c <memp_free_pool+0x24>
  SYS_ARCH_PROTECT(old_level);
 8007446:	f006 febf 	bl	800e1c8 <sys_arch_protect>
  memp->next = *desc->tab;
 800744a:	68ab      	ldr	r3, [r5, #8]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007450:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 8007452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007456:	f006 bec3 	b.w	800e1e0 <sys_arch_unprotect>
}
 800745a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <memp_free_pool+0x44>)
 800745e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8007462:	4907      	ldr	r1, [pc, #28]	@ (8007480 <memp_free_pool+0x48>)
 8007464:	4807      	ldr	r0, [pc, #28]	@ (8007484 <memp_free_pool+0x4c>)
 8007466:	f006 ffc1 	bl	800e3ec <iprintf>
 800746a:	e7ec      	b.n	8007446 <memp_free_pool+0xe>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800746c:	4b03      	ldr	r3, [pc, #12]	@ (800747c <memp_free_pool+0x44>)
 800746e:	f240 1295 	movw	r2, #405	@ 0x195
 8007472:	4905      	ldr	r1, [pc, #20]	@ (8007488 <memp_free_pool+0x50>)
 8007474:	4803      	ldr	r0, [pc, #12]	@ (8007484 <memp_free_pool+0x4c>)
 8007476:	f006 bfb9 	b.w	800e3ec <iprintf>
 800747a:	bf00      	nop
 800747c:	0800f7dc 	.word	0x0800f7dc
 8007480:	0800f864 	.word	0x0800f864
 8007484:	0800f2f8 	.word	0x0800f2f8
 8007488:	0800f830 	.word	0x0800f830

0800748c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800748c:	280c      	cmp	r0, #12
 800748e:	d812      	bhi.n	80074b6 <memp_free+0x2a>
{
 8007490:	b570      	push	{r4, r5, r6, lr}
 8007492:	460c      	mov	r4, r1

  if (mem == NULL) {
 8007494:	b171      	cbz	r1, 80074b4 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007496:	4b0f      	ldr	r3, [pc, #60]	@ (80074d4 <memp_free+0x48>)
 8007498:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800749c:	078b      	lsls	r3, r1, #30
 800749e:	d111      	bne.n	80074c4 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 80074a0:	f006 fe92 	bl	800e1c8 <sys_arch_protect>
  memp->next = *desc->tab;
 80074a4:	68ab      	ldr	r3, [r5, #8]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80074aa:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80074ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80074b0:	f006 be96 	b.w	800e1e0 <sys_arch_unprotect>
}
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80074b6:	4b08      	ldr	r3, [pc, #32]	@ (80074d8 <memp_free+0x4c>)
 80074b8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80074bc:	4907      	ldr	r1, [pc, #28]	@ (80074dc <memp_free+0x50>)
 80074be:	4808      	ldr	r0, [pc, #32]	@ (80074e0 <memp_free+0x54>)
 80074c0:	f006 bf94 	b.w	800e3ec <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80074c4:	4b04      	ldr	r3, [pc, #16]	@ (80074d8 <memp_free+0x4c>)
 80074c6:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80074ca:	4906      	ldr	r1, [pc, #24]	@ (80074e4 <memp_free+0x58>)
 80074cc:	4804      	ldr	r0, [pc, #16]	@ (80074e0 <memp_free+0x54>)
 80074ce:	f006 ff8d 	bl	800e3ec <iprintf>
 80074d2:	e7e5      	b.n	80074a0 <memp_free+0x14>
 80074d4:	08011aa0 	.word	0x08011aa0
 80074d8:	0800f7dc 	.word	0x0800f7dc
 80074dc:	0800f884 	.word	0x0800f884
 80074e0:	0800f2f8 	.word	0x0800f2f8
 80074e4:	0800f864 	.word	0x0800f864

080074e8 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 80074e8:	f06f 000b 	mvn.w	r0, #11
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop

080074f0 <netif_issue_reports>:
{
 80074f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80074f2:	4604      	mov	r4, r0
 80074f4:	b150      	cbz	r0, 800750c <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80074f6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80074fa:	f003 0205 	and.w	r2, r3, #5
 80074fe:	2a05      	cmp	r2, #5
 8007500:	d103      	bne.n	800750a <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	b10a      	cbz	r2, 800750a <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007506:	071b      	lsls	r3, r3, #28
 8007508:	d408      	bmi.n	800751c <netif_issue_reports+0x2c>
}
 800750a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <netif_issue_reports+0x38>)
 800750e:	f240 326d 	movw	r2, #877	@ 0x36d
 8007512:	4906      	ldr	r1, [pc, #24]	@ (800752c <netif_issue_reports+0x3c>)
 8007514:	4806      	ldr	r0, [pc, #24]	@ (8007530 <netif_issue_reports+0x40>)
 8007516:	f006 ff69 	bl	800e3ec <iprintf>
 800751a:	e7ec      	b.n	80074f6 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 800751c:	1d21      	adds	r1, r4, #4
 800751e:	4620      	mov	r0, r4
}
 8007520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 8007524:	f005 bdfa 	b.w	800d11c <etharp_request>
 8007528:	0800f8a0 	.word	0x0800f8a0
 800752c:	0800f8d4 	.word	0x0800f8d4
 8007530:	0800f2f8 	.word	0x0800f2f8

08007534 <netif_init>:
}
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop

08007538 <netif_set_addr>:
{
 8007538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753a:	460d      	mov	r5, r1
 800753c:	b083      	sub	sp, #12
 800753e:	4604      	mov	r4, r0
 8007540:	4617      	mov	r7, r2
 8007542:	461e      	mov	r6, r3
  LWIP_ASSERT_CORE_LOCKED();
 8007544:	f7fc fed0 	bl	80042e8 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8007548:	b1e5      	cbz	r5, 8007584 <netif_set_addr+0x4c>
  if (netmask == NULL) {
 800754a:	b187      	cbz	r7, 800756e <netif_set_addr+0x36>
  if (gw == NULL) {
 800754c:	b196      	cbz	r6, 8007574 <netif_set_addr+0x3c>
  remove = ip4_addr_isany(ipaddr);
 800754e:	682b      	ldr	r3, [r5, #0]
 8007550:	b1a3      	cbz	r3, 800757c <netif_set_addr+0x44>
 8007552:	2100      	movs	r1, #0
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68a2      	ldr	r2, [r4, #8]
 8007558:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800755a:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800755c:	bf18      	it	ne
 800755e:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007560:	6833      	ldr	r3, [r6, #0]
 8007562:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007564:	bf18      	it	ne
 8007566:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8007568:	b181      	cbz	r1, 800758c <netif_set_addr+0x54>
}
 800756a:	b003      	add	sp, #12
 800756c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netmask = IP4_ADDR_ANY4;
 800756e:	4f1b      	ldr	r7, [pc, #108]	@ (80075dc <netif_set_addr+0xa4>)
  if (gw == NULL) {
 8007570:	2e00      	cmp	r6, #0
 8007572:	d1ec      	bne.n	800754e <netif_set_addr+0x16>
  remove = ip4_addr_isany(ipaddr);
 8007574:	682b      	ldr	r3, [r5, #0]
    gw = IP4_ADDR_ANY4;
 8007576:	4e19      	ldr	r6, [pc, #100]	@ (80075dc <netif_set_addr+0xa4>)
  remove = ip4_addr_isany(ipaddr);
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1ea      	bne.n	8007552 <netif_set_addr+0x1a>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800757c:	6862      	ldr	r2, [r4, #4]
 800757e:	b9da      	cbnz	r2, 80075b8 <netif_set_addr+0x80>
  remove = ip4_addr_isany(ipaddr);
 8007580:	2101      	movs	r1, #1
 8007582:	e7e7      	b.n	8007554 <netif_set_addr+0x1c>
    ipaddr = IP4_ADDR_ANY4;
 8007584:	4d15      	ldr	r5, [pc, #84]	@ (80075dc <netif_set_addr+0xa4>)
  if (netmask == NULL) {
 8007586:	2f00      	cmp	r7, #0
 8007588:	d1e0      	bne.n	800754c <netif_set_addr+0x14>
 800758a:	e7f0      	b.n	800756e <netif_set_addr+0x36>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800758c:	6863      	ldr	r3, [r4, #4]
 800758e:	682a      	ldr	r2, [r5, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d0ea      	beq.n	800756a <netif_set_addr+0x32>
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8007594:	a901      	add	r1, sp, #4
 8007596:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007598:	e9cd 3200 	strd	r3, r2, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800759c:	f002 f898 	bl	80096d0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80075a0:	a901      	add	r1, sp, #4
 80075a2:	4668      	mov	r0, sp
 80075a4:	f005 f98e 	bl	800c8c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80075a8:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80075aa:	2101      	movs	r1, #1
 80075ac:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80075ae:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80075b0:	f7ff ff9e 	bl	80074f0 <netif_issue_reports>
}
 80075b4:	b003      	add	sp, #12
 80075b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80075b8:	a901      	add	r1, sp, #4
 80075ba:	4668      	mov	r0, sp
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80075bc:	e9cd 2300 	strd	r2, r3, [sp]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80075c0:	f002 f886 	bl	80096d0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80075c4:	a901      	add	r1, sp, #4
 80075c6:	4668      	mov	r0, sp
 80075c8:	f005 f97c 	bl	800c8c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80075cc:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80075ce:	2101      	movs	r1, #1
 80075d0:	4620      	mov	r0, r4
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80075d2:	6063      	str	r3, [r4, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80075d4:	f7ff ff8c 	bl	80074f0 <netif_issue_reports>
    return 1; /* address changed */
 80075d8:	e7d2      	b.n	8007580 <netif_set_addr+0x48>
 80075da:	bf00      	nop
 80075dc:	08011bb0 	.word	0x08011bb0

080075e0 <netif_add>:
{
 80075e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	4606      	mov	r6, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	4615      	mov	r5, r2
 80075ea:	461f      	mov	r7, r3
 80075ec:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 80075f0:	f7fc fe7a 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80075f4:	2e00      	cmp	r6, #0
 80075f6:	d07e      	beq.n	80076f6 <netif_add+0x116>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80075f8:	f1b8 0f00 	cmp.w	r8, #0
 80075fc:	f000 8084 	beq.w	8007708 <netif_add+0x128>
  if (ipaddr == NULL) {
 8007600:	2c00      	cmp	r4, #0
 8007602:	d06f      	beq.n	80076e4 <netif_add+0x104>
  if (netmask == NULL) {
 8007604:	2d00      	cmp	r5, #0
 8007606:	d068      	beq.n	80076da <netif_add+0xfa>
  if (gw == NULL) {
 8007608:	2f00      	cmp	r7, #0
 800760a:	d069      	beq.n	80076e0 <netif_add+0x100>
  netif->state = state;
 800760c:	980a      	ldr	r0, [sp, #40]	@ 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 800760e:	463b      	mov	r3, r7
  netif->num = netif_num;
 8007610:	f8df b120 	ldr.w	fp, [pc, #288]	@ 8007734 <netif_add+0x154>
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007614:	462a      	mov	r2, r5
  netif->state = state;
 8007616:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007618:	4621      	mov	r1, r4
  netif->input = input;
 800761a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800761c:	6130      	str	r0, [r6, #16]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800761e:	2000      	movs	r0, #0
 8007620:	e9c6 0001 	strd	r0, r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->gw);
 8007624:	60f0      	str	r0, [r6, #12]
  netif->mtu = 0;
 8007626:	84b0      	strh	r0, [r6, #36]	@ 0x24
  netif->flags = 0;
 8007628:	f886 002d 	strb.w	r0, [r6, #45]	@ 0x2d
  netif->link_callback = NULL;
 800762c:	61f0      	str	r0, [r6, #28]
  netif->output = netif_null_output_ip4;
 800762e:	483a      	ldr	r0, [pc, #232]	@ (8007718 <netif_add+0x138>)
 8007630:	6170      	str	r0, [r6, #20]
  netif->num = netif_num;
 8007632:	f89b 0000 	ldrb.w	r0, [fp]
 8007636:	f886 0030 	strb.w	r0, [r6, #48]	@ 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ff7c 	bl	8007538 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007640:	4630      	mov	r0, r6
 8007642:	47c0      	blx	r8
 8007644:	2800      	cmp	r0, #0
 8007646:	d15d      	bne.n	8007704 <netif_add+0x124>
      if (netif->num == 255) {
 8007648:	f896 3030 	ldrb.w	r3, [r6, #48]	@ 0x30
 800764c:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 8007738 <netif_add+0x158>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007650:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007728 <netif_add+0x148>
 8007654:	f8df a0e4 	ldr.w	sl, [pc, #228]	@ 800773c <netif_add+0x15c>
 8007658:	4f30      	ldr	r7, [pc, #192]	@ (800771c <netif_add+0x13c>)
      if (netif->num == 255) {
 800765a:	2bff      	cmp	r3, #255	@ 0xff
 800765c:	d102      	bne.n	8007664 <netif_add+0x84>
        netif->num = 0;
 800765e:	2300      	movs	r3, #0
 8007660:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007664:	f8d9 4000 	ldr.w	r4, [r9]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d041      	beq.n	80076f0 <netif_add+0x110>
      num_netifs = 0;
 800766c:	2500      	movs	r5, #0
 800766e:	e007      	b.n	8007680 <netif_add+0xa0>
        if (netif2->num == netif->num) {
 8007670:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8007674:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800767c:	6824      	ldr	r4, [r4, #0]
 800767e:	b1f4      	cbz	r4, 80076be <netif_add+0xde>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007680:	42a6      	cmp	r6, r4
 8007682:	d014      	beq.n	80076ae <netif_add+0xce>
        num_netifs++;
 8007684:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007686:	2dff      	cmp	r5, #255	@ 0xff
 8007688:	ddf2      	ble.n	8007670 <netif_add+0x90>
 800768a:	4643      	mov	r3, r8
 800768c:	f240 128d 	movw	r2, #397	@ 0x18d
 8007690:	4923      	ldr	r1, [pc, #140]	@ (8007720 <netif_add+0x140>)
 8007692:	4638      	mov	r0, r7
 8007694:	f006 feaa 	bl	800e3ec <iprintf>
        if (netif2->num == netif->num) {
 8007698:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 800769c:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d1eb      	bne.n	800767c <netif_add+0x9c>
          netif->num++;
 80076a4:	3301      	adds	r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f886 3030 	strb.w	r3, [r6, #48]	@ 0x30
    } while (netif2 != NULL);
 80076ac:	e7d5      	b.n	800765a <netif_add+0x7a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80076ae:	4643      	mov	r3, r8
 80076b0:	f240 128b 	movw	r2, #395	@ 0x18b
 80076b4:	4651      	mov	r1, sl
 80076b6:	4638      	mov	r0, r7
 80076b8:	f006 fe98 	bl	800e3ec <iprintf>
 80076bc:	e7e2      	b.n	8007684 <netif_add+0xa4>
  netif->next = netif_list;
 80076be:	f8d9 4000 	ldr.w	r4, [r9]
  if (netif->num == 254) {
 80076c2:	2afe      	cmp	r2, #254	@ 0xfe
 80076c4:	d012      	beq.n	80076ec <netif_add+0x10c>
    netif_num = (u8_t)(netif->num + 1);
 80076c6:	1c53      	adds	r3, r2, #1
 80076c8:	b2db      	uxtb	r3, r3
  return netif;
 80076ca:	4630      	mov	r0, r6
  netif->next = netif_list;
 80076cc:	6034      	str	r4, [r6, #0]
 80076ce:	f88b 3000 	strb.w	r3, [fp]
  netif_list = netif;
 80076d2:	f8c9 6000 	str.w	r6, [r9]
}
 80076d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80076da:	4d12      	ldr	r5, [pc, #72]	@ (8007724 <netif_add+0x144>)
  if (gw == NULL) {
 80076dc:	2f00      	cmp	r7, #0
 80076de:	d195      	bne.n	800760c <netif_add+0x2c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80076e0:	4f10      	ldr	r7, [pc, #64]	@ (8007724 <netif_add+0x144>)
 80076e2:	e793      	b.n	800760c <netif_add+0x2c>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80076e4:	4c0f      	ldr	r4, [pc, #60]	@ (8007724 <netif_add+0x144>)
  if (netmask == NULL) {
 80076e6:	2d00      	cmp	r5, #0
 80076e8:	d18e      	bne.n	8007608 <netif_add+0x28>
 80076ea:	e7f6      	b.n	80076da <netif_add+0xfa>
    netif_num = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e7ec      	b.n	80076ca <netif_add+0xea>
  if (netif->num == 254) {
 80076f0:	f896 2030 	ldrb.w	r2, [r6, #48]	@ 0x30
 80076f4:	e7e5      	b.n	80076c2 <netif_add+0xe2>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80076f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <netif_add+0x148>)
 80076f8:	f240 1227 	movw	r2, #295	@ 0x127
 80076fc:	490b      	ldr	r1, [pc, #44]	@ (800772c <netif_add+0x14c>)
 80076fe:	4807      	ldr	r0, [pc, #28]	@ (800771c <netif_add+0x13c>)
 8007700:	f006 fe74 	bl	800e3ec <iprintf>
 8007704:	2000      	movs	r0, #0
 8007706:	e7e6      	b.n	80076d6 <netif_add+0xf6>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007708:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <netif_add+0x148>)
 800770a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800770e:	4908      	ldr	r1, [pc, #32]	@ (8007730 <netif_add+0x150>)
 8007710:	4802      	ldr	r0, [pc, #8]	@ (800771c <netif_add+0x13c>)
 8007712:	f006 fe6b 	bl	800e3ec <iprintf>
 8007716:	e7f5      	b.n	8007704 <netif_add+0x124>
 8007718:	080074e9 	.word	0x080074e9
 800771c:	0800f2f8 	.word	0x0800f2f8
 8007720:	0800f94c 	.word	0x0800f94c
 8007724:	08011bb0 	.word	0x08011bb0
 8007728:	0800f8a0 	.word	0x0800f8a0
 800772c:	0800f8f8 	.word	0x0800f8f8
 8007730:	0800f914 	.word	0x0800f914
 8007734:	24010543 	.word	0x24010543
 8007738:	24010548 	.word	0x24010548
 800773c:	0800f938 	.word	0x0800f938

08007740 <netif_set_default>:
{
 8007740:	b510      	push	{r4, lr}
 8007742:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007744:	f7fc fdd0 	bl	80042e8 <sys_check_core_locking>
  netif_default = netif;
 8007748:	4b01      	ldr	r3, [pc, #4]	@ (8007750 <netif_set_default+0x10>)
 800774a:	601c      	str	r4, [r3, #0]
}
 800774c:	bd10      	pop	{r4, pc}
 800774e:	bf00      	nop
 8007750:	24010544 	.word	0x24010544

08007754 <netif_set_up>:
{
 8007754:	b510      	push	{r4, lr}
 8007756:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007758:	f7fc fdc6 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800775c:	b174      	cbz	r4, 800777c <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800775e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	d500      	bpl.n	8007768 <netif_set_up+0x14>
}
 8007766:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007768:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800776c:	4620      	mov	r0, r4
 800776e:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007770:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8007774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007778:	f7ff beba 	b.w	80074f0 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800777c:	4b04      	ldr	r3, [pc, #16]	@ (8007790 <netif_set_up+0x3c>)
 800777e:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007782:	4904      	ldr	r1, [pc, #16]	@ (8007794 <netif_set_up+0x40>)
 8007784:	4804      	ldr	r0, [pc, #16]	@ (8007798 <netif_set_up+0x44>)
}
 8007786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800778a:	f006 be2f 	b.w	800e3ec <iprintf>
 800778e:	bf00      	nop
 8007790:	0800f8a0 	.word	0x0800f8a0
 8007794:	0800f97c 	.word	0x0800f97c
 8007798:	0800f2f8 	.word	0x0800f2f8

0800779c <netif_set_down>:
{
 800779c:	b510      	push	{r4, lr}
 800779e:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80077a0:	f7fc fda2 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80077a4:	b17c      	cbz	r4, 80077c6 <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 80077a6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80077aa:	07da      	lsls	r2, r3, #31
 80077ac:	d505      	bpl.n	80077ba <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80077ae:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80077b2:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80077b4:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80077b8:	d400      	bmi.n	80077bc <netif_set_down+0x20>
}
 80077ba:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 80077bc:	4620      	mov	r0, r4
}
 80077be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 80077c2:	f005 ba71 	b.w	800cca8 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80077c6:	4b04      	ldr	r3, [pc, #16]	@ (80077d8 <netif_set_down+0x3c>)
 80077c8:	f240 329b 	movw	r2, #923	@ 0x39b
 80077cc:	4903      	ldr	r1, [pc, #12]	@ (80077dc <netif_set_down+0x40>)
 80077ce:	4804      	ldr	r0, [pc, #16]	@ (80077e0 <netif_set_down+0x44>)
}
 80077d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80077d4:	f006 be0a 	b.w	800e3ec <iprintf>
 80077d8:	0800f8a0 	.word	0x0800f8a0
 80077dc:	0800f998 	.word	0x0800f998
 80077e0:	0800f2f8 	.word	0x0800f2f8

080077e4 <netif_set_link_up>:
{
 80077e4:	b510      	push	{r4, lr}
 80077e6:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80077e8:	f7fc fd7e 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80077ec:	b19c      	cbz	r4, 8007816 <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80077ee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80077f2:	075a      	lsls	r2, r3, #29
 80077f4:	d500      	bpl.n	80077f8 <netif_set_link_up+0x14>
}
 80077f6:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80077f8:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80077fc:	2103      	movs	r1, #3
 80077fe:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007800:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007804:	f7ff fe74 	bl	80074f0 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8007808:	69e3      	ldr	r3, [r4, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f3      	beq.n	80077f6 <netif_set_link_up+0x12>
 800780e:	4620      	mov	r0, r4
}
 8007810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8007814:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007816:	4b04      	ldr	r3, [pc, #16]	@ (8007828 <netif_set_link_up+0x44>)
 8007818:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800781c:	4903      	ldr	r1, [pc, #12]	@ (800782c <netif_set_link_up+0x48>)
 800781e:	4804      	ldr	r0, [pc, #16]	@ (8007830 <netif_set_link_up+0x4c>)
}
 8007820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007824:	f006 bde2 	b.w	800e3ec <iprintf>
 8007828:	0800f8a0 	.word	0x0800f8a0
 800782c:	0800f9b8 	.word	0x0800f9b8
 8007830:	0800f2f8 	.word	0x0800f2f8

08007834 <netif_set_link_down>:
{
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007838:	f7fc fd56 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800783c:	b174      	cbz	r4, 800785c <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800783e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8007842:	075a      	lsls	r2, r3, #29
 8007844:	d509      	bpl.n	800785a <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007846:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800784a:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800784c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007850:	b11a      	cbz	r2, 800785a <netif_set_link_down+0x26>
 8007852:	4620      	mov	r0, r4
}
 8007854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8007858:	4710      	bx	r2
}
 800785a:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800785c:	4b04      	ldr	r3, [pc, #16]	@ (8007870 <netif_set_link_down+0x3c>)
 800785e:	f240 4206 	movw	r2, #1030	@ 0x406
 8007862:	4904      	ldr	r1, [pc, #16]	@ (8007874 <netif_set_link_down+0x40>)
 8007864:	4804      	ldr	r0, [pc, #16]	@ (8007878 <netif_set_link_down+0x44>)
}
 8007866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800786a:	f006 bdbf 	b.w	800e3ec <iprintf>
 800786e:	bf00      	nop
 8007870:	0800f8a0 	.word	0x0800f8a0
 8007874:	0800f9dc 	.word	0x0800f9dc
 8007878:	0800f2f8 	.word	0x0800f2f8

0800787c <netif_set_link_callback>:
{
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4604      	mov	r4, r0
 8007880:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8007882:	f7fc fd31 	bl	80042e8 <sys_check_core_locking>
  if (netif) {
 8007886:	b104      	cbz	r4, 800788a <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 8007888:	61e5      	str	r5, [r4, #28]
}
 800788a:	bd38      	pop	{r3, r4, r5, pc}

0800788c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800788c:	b510      	push	{r4, lr}
 800788e:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8007890:	f7fc fd2a 	bl	80042e8 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8007894:	b164      	cbz	r4, 80078b0 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 8007896:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <netif_get_by_index+0x28>)
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	b910      	cbnz	r0, 80078a2 <netif_get_by_index+0x16>
 800789c:	e007      	b.n	80078ae <netif_get_by_index+0x22>
 800789e:	6800      	ldr	r0, [r0, #0]
 80078a0:	b128      	cbz	r0, 80078ae <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 80078a2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80078a6:	3301      	adds	r3, #1
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	42a3      	cmp	r3, r4
 80078ac:	d1f7      	bne.n	800789e <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 80078ae:	bd10      	pop	{r4, pc}
  return NULL;
 80078b0:	4620      	mov	r0, r4
}
 80078b2:	bd10      	pop	{r4, pc}
 80078b4:	24010548 	.word	0x24010548

080078b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80078b8:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80078ba:	f006 fc85 	bl	800e1c8 <sys_arch_protect>
 80078be:	4b09      	ldr	r3, [pc, #36]	@ (80078e4 <pbuf_free_ooseq_callback+0x2c>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
 80078c4:	f006 fc8c 	bl	800e1e0 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80078c8:	4b07      	ldr	r3, [pc, #28]	@ (80078e8 <pbuf_free_ooseq_callback+0x30>)
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	b910      	cbnz	r0, 80078d4 <pbuf_free_ooseq_callback+0x1c>
 80078ce:	e008      	b.n	80078e2 <pbuf_free_ooseq_callback+0x2a>
 80078d0:	68c0      	ldr	r0, [r0, #12]
 80078d2:	b130      	cbz	r0, 80078e2 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 80078d4:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0fa      	beq.n	80078d0 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 80078da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 80078de:	f001 bf21 	b.w	8009724 <tcp_free_ooseq>
}
 80078e2:	bd08      	pop	{r3, pc}
 80078e4:	2401054c 	.word	0x2401054c
 80078e8:	24010554 	.word	0x24010554

080078ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80078ec:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80078ee:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 80078f2:	2500      	movs	r5, #0
{
 80078f4:	4614      	mov	r4, r2
 80078f6:	4606      	mov	r6, r0
 80078f8:	f361 050f 	bfi	r5, r1, #0, #16
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	f361 451f 	bfi	r5, r1, #16, #16
 8007902:	d10c      	bne.n	800791e <pbuf_alloc_reference+0x32>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007904:	200b      	movs	r0, #11
 8007906:	f7ff fd7b 	bl	8007400 <memp_malloc>
  if (p == NULL) {
 800790a:	b138      	cbz	r0, 800791c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 800790c:	2300      	movs	r3, #0
  p->ref = 1;
 800790e:	2201      	movs	r2, #1
  p->payload = payload;
 8007910:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8007912:	6085      	str	r5, [r0, #8]
  p->next = NULL;
 8007914:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8007916:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8007918:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800791a:	81c2      	strh	r2, [r0, #14]
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
  return p;
}
 800791c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800791e:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <pbuf_alloc_reference+0x44>)
 8007920:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007924:	4903      	ldr	r1, [pc, #12]	@ (8007934 <pbuf_alloc_reference+0x48>)
 8007926:	4804      	ldr	r0, [pc, #16]	@ (8007938 <pbuf_alloc_reference+0x4c>)
 8007928:	f006 fd60 	bl	800e3ec <iprintf>
 800792c:	e7ea      	b.n	8007904 <pbuf_alloc_reference+0x18>
 800792e:	bf00      	nop
 8007930:	0800fa00 	.word	0x0800fa00
 8007934:	0800fa30 	.word	0x0800fa30
 8007938:	0800f2f8 	.word	0x0800f2f8

0800793c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800793c:	b430      	push	{r4, r5}
  u16_t offset = (u16_t)l;
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800793e:	3003      	adds	r0, #3
 8007940:	2400      	movs	r4, #0
{
 8007942:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8007946:	f361 040f 	bfi	r4, r1, #0, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800794a:	f020 0003 	bic.w	r0, r0, #3
{
 800794e:	9d02      	ldr	r5, [sp, #8]
 8007950:	f361 441f 	bfi	r4, r1, #16, #16
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007954:	4401      	add	r1, r0
 8007956:	4561      	cmp	r1, ip
 8007958:	d80d      	bhi.n	8007976 <pbuf_alloced_custom+0x3a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  }

  if (payload_mem != NULL) {
 800795a:	b105      	cbz	r5, 800795e <pbuf_alloced_custom+0x22>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800795c:	4405      	add	r5, r0
  p->next = NULL;
 800795e:	2100      	movs	r1, #0
  p->payload = payload;
 8007960:	605d      	str	r5, [r3, #4]
  p->flags = flags;
 8007962:	2502      	movs	r5, #2
  } else {
    payload = NULL;
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
  return &p->pbuf;
 8007964:	4618      	mov	r0, r3
  p->next = NULL;
 8007966:	6019      	str	r1, [r3, #0]
  p->ref = 1;
 8007968:	2101      	movs	r1, #1
  p->tot_len = tot_len;
 800796a:	609c      	str	r4, [r3, #8]
  p->flags = flags;
 800796c:	735d      	strb	r5, [r3, #13]
  p->type_internal = (u8_t)type;
 800796e:	731a      	strb	r2, [r3, #12]
  p->ref = 1;
 8007970:	81d9      	strh	r1, [r3, #14]
}
 8007972:	bc30      	pop	{r4, r5}
 8007974:	4770      	bx	lr
    return NULL;
 8007976:	2000      	movs	r0, #0
}
 8007978:	bc30      	pop	{r4, r5}
 800797a:	4770      	bx	lr

0800797c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800797c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800797e:	b1f0      	cbz	r0, 80079be <pbuf_add_header+0x42>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007980:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8007984:	d20b      	bcs.n	800799e <pbuf_add_header+0x22>
  if (header_size_increment == 0) {
 8007986:	b1c1      	cbz	r1, 80079ba <pbuf_add_header+0x3e>
  increment_magnitude = (u16_t)header_size_increment;
 8007988:	b28a      	uxth	r2, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800798a:	8903      	ldrh	r3, [r0, #8]
 800798c:	4413      	add	r3, r2
 800798e:	b29b      	uxth	r3, r3
 8007990:	429a      	cmp	r2, r3
 8007992:	d804      	bhi.n	800799e <pbuf_add_header+0x22>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007994:	f990 c00c 	ldrsb.w	ip, [r0, #12]
 8007998:	f1bc 0f00 	cmp.w	ip, #0
 800799c:	db01      	blt.n	80079a2 <pbuf_add_header+0x26>
    return 1;
 800799e:	2001      	movs	r0, #1
  return pbuf_add_header_impl(p, header_size_increment, 0);
}
 80079a0:	bd10      	pop	{r4, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 80079a2:	6844      	ldr	r4, [r0, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079a4:	f100 0c10 	add.w	ip, r0, #16
    payload = (u8_t *)p->payload - header_size_increment;
 80079a8:	1a61      	subs	r1, r4, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80079aa:	4561      	cmp	r1, ip
 80079ac:	d3f7      	bcc.n	800799e <pbuf_add_header+0x22>
  p->len = (u16_t)(p->len + increment_magnitude);
 80079ae:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
  p->payload = payload;
 80079b2:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80079b4:	4462      	add	r2, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80079b6:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80079b8:	8142      	strh	r2, [r0, #10]
    return 0;
 80079ba:	2000      	movs	r0, #0
}
 80079bc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80079be:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <pbuf_add_header+0x54>)
 80079c0:	f240 12df 	movw	r2, #479	@ 0x1df
 80079c4:	4903      	ldr	r1, [pc, #12]	@ (80079d4 <pbuf_add_header+0x58>)
 80079c6:	4804      	ldr	r0, [pc, #16]	@ (80079d8 <pbuf_add_header+0x5c>)
 80079c8:	f006 fd10 	bl	800e3ec <iprintf>
    return 1;
 80079cc:	2001      	movs	r0, #1
 80079ce:	e7e7      	b.n	80079a0 <pbuf_add_header+0x24>
 80079d0:	0800fa00 	.word	0x0800fa00
 80079d4:	0800fa44 	.word	0x0800fa44
 80079d8:	0800f2f8 	.word	0x0800f2f8

080079dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80079dc:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079de:	b188      	cbz	r0, 8007a04 <pbuf_remove_header+0x28>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80079e0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80079e4:	d215      	bcs.n	8007a12 <pbuf_remove_header+0x36>
    return 1;
  }
  if (header_size_decrement == 0) {
 80079e6:	b159      	cbz	r1, 8007a00 <pbuf_remove_header+0x24>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80079e8:	b28a      	uxth	r2, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80079ea:	8943      	ldrh	r3, [r0, #10]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d312      	bcc.n	8007a16 <pbuf_remove_header+0x3a>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079f0:	6844      	ldr	r4, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80079f2:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079f4:	440c      	add	r4, r1
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079f6:	8901      	ldrh	r1, [r0, #8]
  p->len = (u16_t)(p->len - increment_magnitude);
 80079f8:	8143      	strh	r3, [r0, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079fa:	1a8b      	subs	r3, r1, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80079fc:	6044      	str	r4, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80079fe:	8103      	strh	r3, [r0, #8]
    return 0;
 8007a00:	2000      	movs	r0, #0

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
}
 8007a02:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a04:	4b08      	ldr	r3, [pc, #32]	@ (8007a28 <pbuf_remove_header+0x4c>)
 8007a06:	f240 224b 	movw	r2, #587	@ 0x24b
 8007a0a:	4908      	ldr	r1, [pc, #32]	@ (8007a2c <pbuf_remove_header+0x50>)
 8007a0c:	4808      	ldr	r0, [pc, #32]	@ (8007a30 <pbuf_remove_header+0x54>)
 8007a0e:	f006 fced 	bl	800e3ec <iprintf>
    return 1;
 8007a12:	2001      	movs	r0, #1
}
 8007a14:	bd10      	pop	{r4, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007a16:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <pbuf_remove_header+0x4c>)
 8007a18:	f240 2255 	movw	r2, #597	@ 0x255
 8007a1c:	4905      	ldr	r1, [pc, #20]	@ (8007a34 <pbuf_remove_header+0x58>)
 8007a1e:	4804      	ldr	r0, [pc, #16]	@ (8007a30 <pbuf_remove_header+0x54>)
 8007a20:	f006 fce4 	bl	800e3ec <iprintf>
 8007a24:	e7f5      	b.n	8007a12 <pbuf_remove_header+0x36>
 8007a26:	bf00      	nop
 8007a28:	0800fa00 	.word	0x0800fa00
 8007a2c:	0800fa44 	.word	0x0800fa44
 8007a30:	0800f2f8 	.word	0x0800f2f8
 8007a34:	0800fa50 	.word	0x0800fa50

08007a38 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8007a38:	2900      	cmp	r1, #0
 8007a3a:	db19      	blt.n	8007a70 <pbuf_header_force+0x38>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a3c:	4603      	mov	r3, r0
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007a3e:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a40:	b1c8      	cbz	r0, 8007a76 <pbuf_header_force+0x3e>
  if (header_size_increment == 0) {
 8007a42:	b199      	cbz	r1, 8007a6c <pbuf_header_force+0x34>
  increment_magnitude = (u16_t)header_size_increment;
 8007a44:	b288      	uxth	r0, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a46:	891a      	ldrh	r2, [r3, #8]
 8007a48:	4402      	add	r2, r0
 8007a4a:	b292      	uxth	r2, r2
 8007a4c:	4290      	cmp	r0, r2
 8007a4e:	d819      	bhi.n	8007a84 <pbuf_header_force+0x4c>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a50:	f993 c00c 	ldrsb.w	ip, [r3, #12]
    payload = (u8_t *)p->payload - header_size_increment;
 8007a54:	685c      	ldr	r4, [r3, #4]
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a56:	f1bc 0f00 	cmp.w	ip, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8007a5a:	eba4 0101 	sub.w	r1, r4, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a5e:	db13      	blt.n	8007a88 <pbuf_header_force+0x50>
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a60:	f8b3 c00a 	ldrh.w	ip, [r3, #10]
  p->payload = payload;
 8007a64:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a66:	4460      	add	r0, ip
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a68:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a6a:	8158      	strh	r0, [r3, #10]
    return 0;
 8007a6c:	2000      	movs	r0, #0
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8007a6e:	bd10      	pop	{r4, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007a70:	4249      	negs	r1, r1
 8007a72:	f7ff bfb3 	b.w	80079dc <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a76:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <pbuf_header_force+0x5c>)
 8007a78:	f240 12df 	movw	r2, #479	@ 0x1df
 8007a7c:	4906      	ldr	r1, [pc, #24]	@ (8007a98 <pbuf_header_force+0x60>)
 8007a7e:	4807      	ldr	r0, [pc, #28]	@ (8007a9c <pbuf_header_force+0x64>)
 8007a80:	f006 fcb4 	bl	800e3ec <iprintf>
    return 1;
 8007a84:	2001      	movs	r0, #1
}
 8007a86:	bd10      	pop	{r4, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a88:	f103 0c10 	add.w	ip, r3, #16
 8007a8c:	4561      	cmp	r1, ip
 8007a8e:	d2e7      	bcs.n	8007a60 <pbuf_header_force+0x28>
 8007a90:	e7f8      	b.n	8007a84 <pbuf_header_force+0x4c>
 8007a92:	bf00      	nop
 8007a94:	0800fa00 	.word	0x0800fa00
 8007a98:	0800fa44 	.word	0x0800fa44
 8007a9c:	0800f2f8 	.word	0x0800f2f8

08007aa0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	d055      	beq.n	8007b56 <pbuf_free+0xb6>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007aaa:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007aac:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8007b70 <pbuf_free+0xd0>
 8007ab0:	f8df 90c8 	ldr.w	r9, [pc, #200]	@ 8007b7c <pbuf_free+0xdc>
 8007ab4:	4f2c      	ldr	r7, [pc, #176]	@ (8007b68 <pbuf_free+0xc8>)
 8007ab6:	e008      	b.n	8007aca <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007ab8:	692b      	ldr	r3, [r5, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d03d      	beq.n	8007b3a <pbuf_free+0x9a>
        pc->custom_free_function(p);
 8007abe:	4628      	mov	r0, r5
 8007ac0:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8007ac2:	3601      	adds	r6, #1
 8007ac4:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007ac6:	b1fc      	cbz	r4, 8007b08 <pbuf_free+0x68>
 8007ac8:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 8007aca:	f006 fb7d 	bl	800e1c8 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007ace:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 8007ad0:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007ad2:	b1e3      	cbz	r3, 8007b0e <pbuf_free+0x6e>
    ref = --(p->ref);
 8007ad4:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 8007ad6:	4620      	mov	r0, r4
    ref = --(p->ref);
 8007ad8:	b2dc      	uxtb	r4, r3
 8007ada:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007adc:	f006 fb80 	bl	800e1e0 <sys_arch_unprotect>
    if (ref == 0) {
 8007ae0:	b994      	cbnz	r4, 8007b08 <pbuf_free+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007ae2:	7b6a      	ldrb	r2, [r5, #13]
      q = p->next;
 8007ae4:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007ae6:	0792      	lsls	r2, r2, #30
      alloc_src = pbuf_get_allocsrc(p);
 8007ae8:	7b2b      	ldrb	r3, [r5, #12]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007aea:	d4e5      	bmi.n	8007ab8 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 8007aec:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d01d      	beq.n	8007b30 <pbuf_free+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d029      	beq.n	8007b4c <pbuf_free+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007af8:	b993      	cbnz	r3, 8007b20 <pbuf_free+0x80>
      count++;
 8007afa:	3601      	adds	r6, #1
          mem_free(p);
 8007afc:	4628      	mov	r0, r5
 8007afe:	f7ff f9a1 	bl	8006e44 <mem_free>
      count++;
 8007b02:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	d1df      	bne.n	8007ac8 <pbuf_free+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007b08:	4630      	mov	r0, r6
 8007b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007b0e:	4643      	mov	r3, r8
 8007b10:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007b14:	4649      	mov	r1, r9
 8007b16:	4638      	mov	r0, r7
 8007b18:	f006 fc68 	bl	800e3ec <iprintf>
    ref = --(p->ref);
 8007b1c:	7bab      	ldrb	r3, [r5, #14]
 8007b1e:	e7d9      	b.n	8007ad4 <pbuf_free+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007b20:	4643      	mov	r3, r8
 8007b22:	f240 320f 	movw	r2, #783	@ 0x30f
 8007b26:	4911      	ldr	r1, [pc, #68]	@ (8007b6c <pbuf_free+0xcc>)
 8007b28:	4638      	mov	r0, r7
 8007b2a:	f006 fc5f 	bl	800e3ec <iprintf>
 8007b2e:	e7c8      	b.n	8007ac2 <pbuf_free+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 8007b30:	4629      	mov	r1, r5
 8007b32:	200c      	movs	r0, #12
 8007b34:	f7ff fcaa 	bl	800748c <memp_free>
 8007b38:	e7c3      	b.n	8007ac2 <pbuf_free+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <pbuf_free+0xd0>)
 8007b3c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007b40:	490c      	ldr	r1, [pc, #48]	@ (8007b74 <pbuf_free+0xd4>)
 8007b42:	4809      	ldr	r0, [pc, #36]	@ (8007b68 <pbuf_free+0xc8>)
 8007b44:	f006 fc52 	bl	800e3ec <iprintf>
        pc->custom_free_function(p);
 8007b48:	692b      	ldr	r3, [r5, #16]
 8007b4a:	e7b8      	b.n	8007abe <pbuf_free+0x1e>
          memp_free(MEMP_PBUF, p);
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	200b      	movs	r0, #11
 8007b50:	f7ff fc9c 	bl	800748c <memp_free>
 8007b54:	e7b5      	b.n	8007ac2 <pbuf_free+0x22>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b56:	4b06      	ldr	r3, [pc, #24]	@ (8007b70 <pbuf_free+0xd0>)
 8007b58:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007b5c:	4906      	ldr	r1, [pc, #24]	@ (8007b78 <pbuf_free+0xd8>)
    return 0;
 8007b5e:	462e      	mov	r6, r5
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b60:	4801      	ldr	r0, [pc, #4]	@ (8007b68 <pbuf_free+0xc8>)
 8007b62:	f006 fc43 	bl	800e3ec <iprintf>
    return 0;
 8007b66:	e7cf      	b.n	8007b08 <pbuf_free+0x68>
 8007b68:	0800f2f8 	.word	0x0800f2f8
 8007b6c:	0800faac 	.word	0x0800faac
 8007b70:	0800fa00 	.word	0x0800fa00
 8007b74:	0800fa88 	.word	0x0800fa88
 8007b78:	0800fa44 	.word	0x0800fa44
 8007b7c:	0800fa70 	.word	0x0800fa70

08007b80 <pbuf_alloc>:
  switch (type) {
 8007b80:	f5b2 7fc1 	cmp.w	r2, #386	@ 0x182
{
 8007b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b88:	4688      	mov	r8, r1
 8007b8a:	b083      	sub	sp, #12
  switch (type) {
 8007b8c:	d041      	beq.n	8007c12 <pbuf_alloc+0x92>
 8007b8e:	d80f      	bhi.n	8007bb0 <pbuf_alloc+0x30>
 8007b90:	f022 0340 	bic.w	r3, r2, #64	@ 0x40
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d036      	beq.n	8007c06 <pbuf_alloc+0x86>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007b98:	4b46      	ldr	r3, [pc, #280]	@ (8007cb4 <pbuf_alloc+0x134>)
 8007b9a:	f240 1227 	movw	r2, #295	@ 0x127
 8007b9e:	4946      	ldr	r1, [pc, #280]	@ (8007cb8 <pbuf_alloc+0x138>)
 8007ba0:	4846      	ldr	r0, [pc, #280]	@ (8007cbc <pbuf_alloc+0x13c>)
 8007ba2:	f006 fc23 	bl	800e3ec <iprintf>
          return NULL;
 8007ba6:	2400      	movs	r4, #0
}
 8007ba8:	4620      	mov	r0, r4
 8007baa:	b003      	add	sp, #12
 8007bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 8007bb0:	f5b2 7f20 	cmp.w	r2, #640	@ 0x280
 8007bb4:	d1f0      	bne.n	8007b98 <pbuf_alloc+0x18>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007bb6:	1cc3      	adds	r3, r0, #3
 8007bb8:	1cca      	adds	r2, r1, #3
 8007bba:	4605      	mov	r5, r0
 8007bbc:	f022 0203 	bic.w	r2, r2, #3
 8007bc0:	f023 0303 	bic.w	r3, r3, #3
 8007bc4:	4413      	add	r3, r2
 8007bc6:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007bc8:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007bcc:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007bce:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007bd0:	d3e9      	bcc.n	8007ba6 <pbuf_alloc+0x26>
 8007bd2:	4282      	cmp	r2, r0
 8007bd4:	d8e7      	bhi.n	8007ba6 <pbuf_alloc+0x26>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007bd6:	f7ff fadd 	bl	8007194 <mem_malloc>
      if (p == NULL) {
 8007bda:	4604      	mov	r4, r0
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d0e3      	beq.n	8007ba8 <pbuf_alloc+0x28>
  p->next = NULL;
 8007be0:	2100      	movs	r1, #0
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007be2:	1943      	adds	r3, r0, r5
  p->type_internal = (u8_t)type;
 8007be4:	4836      	ldr	r0, [pc, #216]	@ (8007cc0 <pbuf_alloc+0x140>)
  p->tot_len = tot_len;
 8007be6:	460a      	mov	r2, r1
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007be8:	3313      	adds	r3, #19
  p->type_internal = (u8_t)type;
 8007bea:	60e0      	str	r0, [r4, #12]
}
 8007bec:	4620      	mov	r0, r4
  p->tot_len = tot_len;
 8007bee:	f368 020f 	bfi	r2, r8, #0, #16
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007bf2:	f023 0303 	bic.w	r3, r3, #3
  p->tot_len = tot_len;
 8007bf6:	f368 421f 	bfi	r2, r8, #16, #16
  p->payload = payload;
 8007bfa:	e9c4 1300 	strd	r1, r3, [r4]
  p->tot_len = tot_len;
 8007bfe:	60a2      	str	r2, [r4, #8]
}
 8007c00:	b003      	add	sp, #12
 8007c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8007c06:	2000      	movs	r0, #0
}
 8007c08:	b003      	add	sp, #12
 8007c0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8007c0e:	f7ff be6d 	b.w	80078ec <pbuf_alloc_reference>
  switch (type) {
 8007c12:	2100      	movs	r1, #0
 8007c14:	4681      	mov	r9, r0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c16:	f240 56ec 	movw	r6, #1516	@ 0x5ec
  p->type_internal = (u8_t)type;
 8007c1a:	4d2a      	ldr	r5, [pc, #168]	@ (8007cc4 <pbuf_alloc+0x144>)
  switch (type) {
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	e009      	b.n	8007c34 <pbuf_alloc+0xb4>
          last->next = q;
 8007c20:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 8007c22:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 8007c26:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 8007c2a:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 8007c2e:	f1b8 0f00 	cmp.w	r8, #0
 8007c32:	d0b9      	beq.n	8007ba8 <pbuf_alloc+0x28>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007c34:	200c      	movs	r0, #12
 8007c36:	460f      	mov	r7, r1
 8007c38:	f7ff fbe2 	bl	8007400 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c3c:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 8007c40:	f04f 0c00 	mov.w	ip, #0
        if (q == NULL) {
 8007c44:	4601      	mov	r1, r0
 8007c46:	b1b0      	cbz	r0, 8007c76 <pbuf_alloc+0xf6>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c48:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007c4c:	eb00 0209 	add.w	r2, r0, r9
  p->tot_len = tot_len;
 8007c50:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c54:	1af3      	subs	r3, r6, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007c56:	3213      	adds	r2, #19
  p->next = NULL;
 8007c58:	f8c0 c000 	str.w	ip, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c5c:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007c5e:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 8007c62:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c64:	4543      	cmp	r3, r8
  p->payload = payload;
 8007c66:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007c68:	bf28      	it	cs
 8007c6a:	4643      	movcs	r3, r8
  p->len = len;
 8007c6c:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8007c6e:	2c00      	cmp	r4, #0
 8007c70:	d1d6      	bne.n	8007c20 <pbuf_alloc+0xa0>
          p = q;
 8007c72:	4604      	mov	r4, r0
 8007c74:	e7d5      	b.n	8007c22 <pbuf_alloc+0xa2>
  queued = pbuf_free_ooseq_pending;
 8007c76:	4e14      	ldr	r6, [pc, #80]	@ (8007cc8 <pbuf_alloc+0x148>)
 8007c78:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 8007c7a:	f006 faa5 	bl	800e1c8 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007c7e:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8007c80:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007c82:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007c84:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007c86:	f006 faab 	bl	800e1e0 <sys_arch_unprotect>
  if (!queued) {
 8007c8a:	9901      	ldr	r1, [sp, #4]
 8007c8c:	b12d      	cbz	r5, 8007c9a <pbuf_alloc+0x11a>
          if (p) {
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d089      	beq.n	8007ba6 <pbuf_alloc+0x26>
            pbuf_free(p);
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ff04 	bl	8007aa0 <pbuf_free>
 8007c98:	e785      	b.n	8007ba6 <pbuf_alloc+0x26>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007c9a:	480c      	ldr	r0, [pc, #48]	@ (8007ccc <pbuf_alloc+0x14c>)
 8007c9c:	f7fe ff9c 	bl	8006bd8 <tcpip_try_callback>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0f4      	beq.n	8007c8e <pbuf_alloc+0x10e>
 8007ca4:	f006 fa90 	bl	800e1c8 <sys_arch_protect>
 8007ca8:	9901      	ldr	r1, [sp, #4]
 8007caa:	7031      	strb	r1, [r6, #0]
 8007cac:	f006 fa98 	bl	800e1e0 <sys_arch_unprotect>
 8007cb0:	e7ed      	b.n	8007c8e <pbuf_alloc+0x10e>
 8007cb2:	bf00      	nop
 8007cb4:	0800fa00 	.word	0x0800fa00
 8007cb8:	0800fac0 	.word	0x0800fac0
 8007cbc:	0800f2f8 	.word	0x0800f2f8
 8007cc0:	00010080 	.word	0x00010080
 8007cc4:	00010082 	.word	0x00010082
 8007cc8:	2401054c 	.word	0x2401054c
 8007ccc:	080078b9 	.word	0x080078b9

08007cd0 <pbuf_realloc>:
{
 8007cd0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007cd2:	4604      	mov	r4, r0
{
 8007cd4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d03b      	beq.n	8007d52 <pbuf_realloc+0x82>
  if (new_len >= p->tot_len) {
 8007cda:	8922      	ldrh	r2, [r4, #8]
 8007cdc:	42aa      	cmp	r2, r5
 8007cde:	d91f      	bls.n	8007d20 <pbuf_realloc+0x50>
  while (rem_len > q->len) {
 8007ce0:	8963      	ldrh	r3, [r4, #10]
 8007ce2:	429d      	cmp	r5, r3
 8007ce4:	d90d      	bls.n	8007d02 <pbuf_realloc+0x32>
 8007ce6:	1aa9      	subs	r1, r5, r2
 8007ce8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007cea:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 8007cec:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007cee:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8007cf0:	b29d      	uxth	r5, r3
    q = q->next;
 8007cf2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007cf4:	2c00      	cmp	r4, #0
 8007cf6:	d034      	beq.n	8007d62 <pbuf_realloc+0x92>
  while (rem_len > q->len) {
 8007cf8:	8963      	ldrh	r3, [r4, #10]
 8007cfa:	42ab      	cmp	r3, r5
 8007cfc:	d201      	bcs.n	8007d02 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007cfe:	8922      	ldrh	r2, [r4, #8]
 8007d00:	e7f3      	b.n	8007cea <pbuf_realloc+0x1a>
 8007d02:	2600      	movs	r6, #0
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007d04:	7b22      	ldrb	r2, [r4, #12]
 8007d06:	f365 060f 	bfi	r6, r5, #0, #16
 8007d0a:	0712      	lsls	r2, r2, #28
 8007d0c:	f365 461f 	bfi	r6, r5, #16, #16
 8007d10:	d007      	beq.n	8007d22 <pbuf_realloc+0x52>
  if (q->next != NULL) {
 8007d12:	6820      	ldr	r0, [r4, #0]
  q->tot_len = q->len;
 8007d14:	60a6      	str	r6, [r4, #8]
  if (q->next != NULL) {
 8007d16:	b108      	cbz	r0, 8007d1c <pbuf_realloc+0x4c>
    pbuf_free(q->next);
 8007d18:	f7ff fec2 	bl	8007aa0 <pbuf_free>
  q->next = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	6023      	str	r3, [r4, #0]
}
 8007d20:	bd70      	pop	{r4, r5, r6, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007d22:	42ab      	cmp	r3, r5
 8007d24:	d0f5      	beq.n	8007d12 <pbuf_realloc+0x42>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007d26:	7b63      	ldrb	r3, [r4, #13]
 8007d28:	079b      	lsls	r3, r3, #30
 8007d2a:	d4f2      	bmi.n	8007d12 <pbuf_realloc+0x42>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007d2c:	6863      	ldr	r3, [r4, #4]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	1b1b      	subs	r3, r3, r4
 8007d32:	18e9      	adds	r1, r5, r3
 8007d34:	b289      	uxth	r1, r1
 8007d36:	f7ff f96f 	bl	8007018 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d1e8      	bne.n	8007d12 <pbuf_realloc+0x42>
 8007d40:	4b0c      	ldr	r3, [pc, #48]	@ (8007d74 <pbuf_realloc+0xa4>)
 8007d42:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007d46:	490c      	ldr	r1, [pc, #48]	@ (8007d78 <pbuf_realloc+0xa8>)
 8007d48:	480c      	ldr	r0, [pc, #48]	@ (8007d7c <pbuf_realloc+0xac>)
 8007d4a:	f006 fb4f 	bl	800e3ec <iprintf>
  q->len = rem_len;
 8007d4e:	8164      	strh	r4, [r4, #10]
 8007d50:	deff      	udf	#255	@ 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007d52:	4b08      	ldr	r3, [pc, #32]	@ (8007d74 <pbuf_realloc+0xa4>)
 8007d54:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007d58:	4909      	ldr	r1, [pc, #36]	@ (8007d80 <pbuf_realloc+0xb0>)
 8007d5a:	4808      	ldr	r0, [pc, #32]	@ (8007d7c <pbuf_realloc+0xac>)
 8007d5c:	f006 fb46 	bl	800e3ec <iprintf>
 8007d60:	e7bb      	b.n	8007cda <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007d62:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <pbuf_realloc+0xa4>)
 8007d64:	f240 12af 	movw	r2, #431	@ 0x1af
 8007d68:	4906      	ldr	r1, [pc, #24]	@ (8007d84 <pbuf_realloc+0xb4>)
 8007d6a:	4804      	ldr	r0, [pc, #16]	@ (8007d7c <pbuf_realloc+0xac>)
 8007d6c:	f006 fb3e 	bl	800e3ec <iprintf>
  while (rem_len > q->len) {
 8007d70:	8963      	ldrh	r3, [r4, #10]
 8007d72:	deff      	udf	#255	@ 0xff
 8007d74:	0800fa00 	.word	0x0800fa00
 8007d78:	0800fb0c 	.word	0x0800fb0c
 8007d7c:	0800f2f8 	.word	0x0800f2f8
 8007d80:	0800fadc 	.word	0x0800fadc
 8007d84:	0800faf4 	.word	0x0800faf4

08007d88 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8007d88:	4603      	mov	r3, r0
 8007d8a:	b130      	cbz	r0, 8007d9a <pbuf_clen+0x12>
  len = 0;
 8007d8c:	2000      	movs	r0, #0
    ++len;
 8007d8e:	3001      	adds	r0, #1
    p = p->next;
 8007d90:	681b      	ldr	r3, [r3, #0]
    ++len;
 8007d92:	b280      	uxth	r0, r0
  while (p != NULL) {
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1fa      	bne.n	8007d8e <pbuf_clen+0x6>
 8007d98:	4770      	bx	lr
  }
  return len;
}
 8007d9a:	4770      	bx	lr

08007d9c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8007d9c:	b158      	cbz	r0, 8007db6 <pbuf_ref+0x1a>
{
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007da2:	f006 fa11 	bl	800e1c8 <sys_arch_protect>
 8007da6:	7ba3      	ldrb	r3, [r4, #14]
 8007da8:	3301      	adds	r3, #1
 8007daa:	73a3      	strb	r3, [r4, #14]
 8007dac:	f006 fa18 	bl	800e1e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007db0:	7ba3      	ldrb	r3, [r4, #14]
 8007db2:	b10b      	cbz	r3, 8007db8 <pbuf_ref+0x1c>
  }
}
 8007db4:	bd10      	pop	{r4, pc}
 8007db6:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007db8:	4b04      	ldr	r3, [pc, #16]	@ (8007dcc <pbuf_ref+0x30>)
 8007dba:	f240 3242 	movw	r2, #834	@ 0x342
 8007dbe:	4904      	ldr	r1, [pc, #16]	@ (8007dd0 <pbuf_ref+0x34>)
 8007dc0:	4804      	ldr	r0, [pc, #16]	@ (8007dd4 <pbuf_ref+0x38>)
}
 8007dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007dc6:	f006 bb11 	b.w	800e3ec <iprintf>
 8007dca:	bf00      	nop
 8007dcc:	0800fa00 	.word	0x0800fa00
 8007dd0:	0800fb28 	.word	0x0800fb28
 8007dd4:	0800f2f8 	.word	0x0800f2f8

08007dd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007dd8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d02d      	beq.n	8007e3a <pbuf_cat+0x62>
 8007dde:	460d      	mov	r5, r1
 8007de0:	2900      	cmp	r1, #0
 8007de2:	d02a      	beq.n	8007e3a <pbuf_cat+0x62>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007de4:	6803      	ldr	r3, [r0, #0]
 8007de6:	4604      	mov	r4, r0
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007de8:	8902      	ldrh	r2, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007dea:	b18b      	cbz	r3, 8007e10 <pbuf_cat+0x38>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007dec:	8922      	ldrh	r2, [r4, #8]
 8007dee:	8928      	ldrh	r0, [r5, #8]
 8007df0:	4402      	add	r2, r0
 8007df2:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007df4:	461c      	mov	r4, r3
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1f7      	bne.n	8007dec <pbuf_cat+0x14>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007dfc:	8922      	ldrh	r2, [r4, #8]
 8007dfe:	8963      	ldrh	r3, [r4, #10]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d108      	bne.n	8007e16 <pbuf_cat+0x3e>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007e04:	8922      	ldrh	r2, [r4, #8]
 8007e06:	892b      	ldrh	r3, [r5, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007e08:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007e0a:	441a      	add	r2, r3
 8007e0c:	8122      	strh	r2, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007e10:	8943      	ldrh	r3, [r0, #10]
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d0f7      	beq.n	8007e06 <pbuf_cat+0x2e>
 8007e16:	4b0d      	ldr	r3, [pc, #52]	@ (8007e4c <pbuf_cat+0x74>)
 8007e18:	f240 3262 	movw	r2, #866	@ 0x362
 8007e1c:	490c      	ldr	r1, [pc, #48]	@ (8007e50 <pbuf_cat+0x78>)
 8007e1e:	480d      	ldr	r0, [pc, #52]	@ (8007e54 <pbuf_cat+0x7c>)
 8007e20:	f006 fae4 	bl	800e3ec <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007e24:	6823      	ldr	r3, [r4, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0ec      	beq.n	8007e04 <pbuf_cat+0x2c>
 8007e2a:	4b08      	ldr	r3, [pc, #32]	@ (8007e4c <pbuf_cat+0x74>)
 8007e2c:	f240 3263 	movw	r2, #867	@ 0x363
 8007e30:	4909      	ldr	r1, [pc, #36]	@ (8007e58 <pbuf_cat+0x80>)
 8007e32:	4808      	ldr	r0, [pc, #32]	@ (8007e54 <pbuf_cat+0x7c>)
 8007e34:	f006 fada 	bl	800e3ec <iprintf>
 8007e38:	e7e4      	b.n	8007e04 <pbuf_cat+0x2c>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007e3a:	4b04      	ldr	r3, [pc, #16]	@ (8007e4c <pbuf_cat+0x74>)
 8007e3c:	f240 3259 	movw	r2, #857	@ 0x359
 8007e40:	4906      	ldr	r1, [pc, #24]	@ (8007e5c <pbuf_cat+0x84>)
 8007e42:	4804      	ldr	r0, [pc, #16]	@ (8007e54 <pbuf_cat+0x7c>)
}
 8007e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007e48:	f006 bad0 	b.w	800e3ec <iprintf>
 8007e4c:	0800fa00 	.word	0x0800fa00
 8007e50:	0800fb74 	.word	0x0800fb74
 8007e54:	0800f2f8 	.word	0x0800f2f8
 8007e58:	0800fba4 	.word	0x0800fba4
 8007e5c:	0800fb3c 	.word	0x0800fb3c

08007e60 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f000 80b5 	beq.w	8007fd4 <pbuf_copy+0x174>
 8007e6a:	fab1 f781 	clz	r7, r1
 8007e6e:	4688      	mov	r8, r1
 8007e70:	097f      	lsrs	r7, r7, #5
 8007e72:	2900      	cmp	r1, #0
 8007e74:	f000 80ae 	beq.w	8007fd4 <pbuf_copy+0x174>
 8007e78:	8902      	ldrh	r2, [r0, #8]
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	890b      	ldrh	r3, [r1, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	f0c0 80a8 	bcc.w	8007fd4 <pbuf_copy+0x174>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e84:	8943      	ldrh	r3, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8007e86:	463e      	mov	r6, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e88:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 8007fe8 <pbuf_copy+0x188>
 8007e8c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8008000 <pbuf_copy+0x1a0>
 8007e90:	f8df 915c 	ldr.w	r9, [pc, #348]	@ 8007ff0 <pbuf_copy+0x190>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e94:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8007e98:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e9a:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e9c:	1be4      	subs	r4, r4, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e9e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007ea2:	4430      	add	r0, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ea4:	429c      	cmp	r4, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007ea6:	4439      	add	r1, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007ea8:	bf28      	it	cs
 8007eaa:	461c      	movcs	r4, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007eac:	4622      	mov	r2, r4
    offset_to += len;
 8007eae:	4426      	add	r6, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007eb0:	f006 fb4c 	bl	800e54c <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007eb4:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 8007eb6:	4427      	add	r7, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007eb8:	42b3      	cmp	r3, r6
 8007eba:	d334      	bcc.n	8007f26 <pbuf_copy+0xc6>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007ebc:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8007ec0:	42ba      	cmp	r2, r7
 8007ec2:	d326      	bcc.n	8007f12 <pbuf_copy+0xb2>
    if (offset_from >= p_from->len) {
 8007ec4:	4297      	cmp	r7, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 8007ec6:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 8007ec8:	d216      	bcs.n	8007ef8 <pbuf_copy+0x98>
    if (offset_to == p_to->len) {
 8007eca:	429e      	cmp	r6, r3
 8007ecc:	d033      	beq.n	8007f36 <pbuf_copy+0xd6>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007ece:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8007ed2:	4291      	cmp	r1, r2
 8007ed4:	d061      	beq.n	8007f9a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007ed6:	892a      	ldrh	r2, [r5, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d1db      	bne.n	8007e94 <pbuf_copy+0x34>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007edc:	682a      	ldr	r2, [r5, #0]
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	d0d8      	beq.n	8007e94 <pbuf_copy+0x34>
 8007ee2:	4b41      	ldr	r3, [pc, #260]	@ (8007fe8 <pbuf_copy+0x188>)
 8007ee4:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007ee8:	4940      	ldr	r1, [pc, #256]	@ (8007fec <pbuf_copy+0x18c>)
 8007eea:	4841      	ldr	r0, [pc, #260]	@ (8007ff0 <pbuf_copy+0x190>)
 8007eec:	f006 fa7e 	bl	800e3ec <iprintf>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ef0:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8007ef4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8007ef8:	429e      	cmp	r6, r3
      p_from = p_from->next;
 8007efa:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 8007efe:	d026      	beq.n	8007f4e <pbuf_copy+0xee>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f00:	f1b8 0f00 	cmp.w	r8, #0
 8007f04:	d133      	bne.n	8007f6e <pbuf_copy+0x10e>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f06:	892a      	ldrh	r2, [r5, #8]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d02b      	beq.n	8007f64 <pbuf_copy+0x104>
  return ERR_OK;
 8007f0c:	2000      	movs	r0, #0
}
 8007f0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007f12:	f240 32da 	movw	r2, #986	@ 0x3da
 8007f16:	4653      	mov	r3, sl
 8007f18:	4936      	ldr	r1, [pc, #216]	@ (8007ff4 <pbuf_copy+0x194>)
 8007f1a:	4648      	mov	r0, r9
 8007f1c:	f006 fa66 	bl	800e3ec <iprintf>
    if (offset_from >= p_from->len) {
 8007f20:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8007f24:	e7ce      	b.n	8007ec4 <pbuf_copy+0x64>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007f26:	4653      	mov	r3, sl
 8007f28:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	4648      	mov	r0, r9
 8007f30:	f006 fa5c 	bl	800e3ec <iprintf>
 8007f34:	e7c2      	b.n	8007ebc <pbuf_copy+0x5c>
      p_to = p_to->next;
 8007f36:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	d03c      	beq.n	8007fb6 <pbuf_copy+0x156>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f3c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d136      	bne.n	8007fb2 <pbuf_copy+0x152>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f44:	f8d8 6000 	ldr.w	r6, [r8]
 8007f48:	bb5e      	cbnz	r6, 8007fa2 <pbuf_copy+0x142>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f4a:	896b      	ldrh	r3, [r5, #10]
 8007f4c:	e7c3      	b.n	8007ed6 <pbuf_copy+0x76>
      p_to = p_to->next;
 8007f4e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007f50:	b9ad      	cbnz	r5, 8007f7e <pbuf_copy+0x11e>
 8007f52:	f1b8 0f00 	cmp.w	r8, #0
 8007f56:	d12e      	bne.n	8007fb6 <pbuf_copy+0x156>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d0d7      	beq.n	8007f0c <pbuf_copy+0xac>
 8007f5c:	896b      	ldrh	r3, [r5, #10]
 8007f5e:	892a      	ldrh	r2, [r5, #8]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d1d3      	bne.n	8007f0c <pbuf_copy+0xac>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f64:	6828      	ldr	r0, [r5, #0]
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d1bb      	bne.n	8007ee2 <pbuf_copy+0x82>
}
 8007f6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f6e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 8007f72:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8007f76:	4291      	cmp	r1, r2
 8007f78:	d027      	beq.n	8007fca <pbuf_copy+0x16a>
 8007f7a:	2700      	movs	r7, #0
 8007f7c:	e7ab      	b.n	8007ed6 <pbuf_copy+0x76>
 8007f7e:	f1b8 0f00 	cmp.w	r8, #0
 8007f82:	d0e9      	beq.n	8007f58 <pbuf_copy+0xf8>
 8007f84:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8007f88:	2600      	movs	r6, #0
 8007f8a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d01b      	beq.n	8007fca <pbuf_copy+0x16a>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f92:	bb3d      	cbnz	r5, 8007fe4 <pbuf_copy+0x184>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007f94:	896b      	ldrh	r3, [r5, #10]
 8007f96:	462f      	mov	r7, r5
  } while (p_from);
 8007f98:	e77c      	b.n	8007e94 <pbuf_copy+0x34>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f9a:	f8d8 2000 	ldr.w	r2, [r8]
 8007f9e:	2a00      	cmp	r2, #0
 8007fa0:	d099      	beq.n	8007ed6 <pbuf_copy+0x76>
 8007fa2:	4b11      	ldr	r3, [pc, #68]	@ (8007fe8 <pbuf_copy+0x188>)
 8007fa4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007fa8:	4910      	ldr	r1, [pc, #64]	@ (8007fec <pbuf_copy+0x18c>)
 8007faa:	4811      	ldr	r0, [pc, #68]	@ (8007ff0 <pbuf_copy+0x190>)
 8007fac:	f006 fa1e 	bl	800e3ec <iprintf>
 8007fb0:	e79e      	b.n	8007ef0 <pbuf_copy+0x90>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	e7c9      	b.n	8007f4a <pbuf_copy+0xea>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007fe8 <pbuf_copy+0x188>)
 8007fb8:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007fbc:	490e      	ldr	r1, [pc, #56]	@ (8007ff8 <pbuf_copy+0x198>)
 8007fbe:	480c      	ldr	r0, [pc, #48]	@ (8007ff0 <pbuf_copy+0x190>)
 8007fc0:	f006 fa14 	bl	800e3ec <iprintf>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007fc4:	f06f 000f 	mvn.w	r0, #15
 8007fc8:	e7a1      	b.n	8007f0e <pbuf_copy+0xae>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007fca:	f8d8 3000 	ldr.w	r3, [r8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0df      	beq.n	8007f92 <pbuf_copy+0x132>
 8007fd2:	e7e6      	b.n	8007fa2 <pbuf_copy+0x142>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007fd4:	4b04      	ldr	r3, [pc, #16]	@ (8007fe8 <pbuf_copy+0x188>)
 8007fd6:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007fda:	4908      	ldr	r1, [pc, #32]	@ (8007ffc <pbuf_copy+0x19c>)
 8007fdc:	4804      	ldr	r0, [pc, #16]	@ (8007ff0 <pbuf_copy+0x190>)
 8007fde:	f006 fa05 	bl	800e3ec <iprintf>
 8007fe2:	e7ef      	b.n	8007fc4 <pbuf_copy+0x164>
 8007fe4:	2700      	movs	r7, #0
 8007fe6:	e7b0      	b.n	8007f4a <pbuf_copy+0xea>
 8007fe8:	0800fa00 	.word	0x0800fa00
 8007fec:	0800fc28 	.word	0x0800fc28
 8007ff0:	0800f2f8 	.word	0x0800f2f8
 8007ff4:	0800fbfc 	.word	0x0800fbfc
 8007ff8:	0800fc18 	.word	0x0800fc18
 8007ffc:	0800fbb4 	.word	0x0800fbb4
 8008000:	0800fbe4 	.word	0x0800fbe4

08008004 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008008:	2800      	cmp	r0, #0
 800800a:	d036      	beq.n	800807a <pbuf_copy_partial+0x76>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800800c:	460f      	mov	r7, r1
 800800e:	2900      	cmp	r1, #0
 8008010:	d03b      	beq.n	800808a <pbuf_copy_partial+0x86>
 8008012:	4605      	mov	r5, r0
 8008014:	4616      	mov	r6, r2
 8008016:	4619      	mov	r1, r3

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008018:	b152      	cbz	r2, 8008030 <pbuf_copy_partial+0x2c>
    if ((offset != 0) && (offset >= p->len)) {
 800801a:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 800801e:	b161      	cbz	r1, 800803a <pbuf_copy_partial+0x36>
 8008020:	4561      	cmp	r1, ip
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008022:	eba1 030c 	sub.w	r3, r1, ip
    if ((offset != 0) && (offset >= p->len)) {
 8008026:	d308      	bcc.n	800803a <pbuf_copy_partial+0x36>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008028:	682d      	ldr	r5, [r5, #0]
      offset = (u16_t)(offset - p->len);
 800802a:	b299      	uxth	r1, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800802c:	2d00      	cmp	r5, #0
 800802e:	d1f4      	bne.n	800801a <pbuf_copy_partial+0x16>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008030:	f04f 0800 	mov.w	r8, #0
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8008034:	4640      	mov	r0, r8
 8008036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
{
 800803a:	f04f 0800 	mov.w	r8, #0
 800803e:	e001      	b.n	8008044 <pbuf_copy_partial+0x40>
    if ((offset != 0) && (offset >= p->len)) {
 8008040:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
      buf_copy_len = (u16_t)(p->len - offset);
 8008044:	ebac 0401 	sub.w	r4, ip, r1
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008048:	686a      	ldr	r2, [r5, #4]
 800804a:	eb07 0008 	add.w	r0, r7, r8
      if (buf_copy_len > len) {
 800804e:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008050:	4411      	add	r1, r2
      if (buf_copy_len > len) {
 8008052:	42b4      	cmp	r4, r6
 8008054:	bf28      	it	cs
 8008056:	4634      	movcs	r4, r6
      len = (u16_t)(len - buf_copy_len);
 8008058:	1b36      	subs	r6, r6, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800805a:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800805c:	4444      	add	r4, r8
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800805e:	f006 fa75 	bl	800e54c <memcpy>
      len = (u16_t)(len - buf_copy_len);
 8008062:	b2b6      	uxth	r6, r6
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008064:	682d      	ldr	r5, [r5, #0]
      offset = 0;
 8008066:	2100      	movs	r1, #0
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008068:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800806c:	2e00      	cmp	r6, #0
 800806e:	d0e1      	beq.n	8008034 <pbuf_copy_partial+0x30>
 8008070:	2d00      	cmp	r5, #0
 8008072:	d1e5      	bne.n	8008040 <pbuf_copy_partial+0x3c>
}
 8008074:	4640      	mov	r0, r8
 8008076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800807a:	4b08      	ldr	r3, [pc, #32]	@ (800809c <pbuf_copy_partial+0x98>)
 800807c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008080:	4907      	ldr	r1, [pc, #28]	@ (80080a0 <pbuf_copy_partial+0x9c>)
 8008082:	4808      	ldr	r0, [pc, #32]	@ (80080a4 <pbuf_copy_partial+0xa0>)
 8008084:	f006 f9b2 	bl	800e3ec <iprintf>
 8008088:	e7d2      	b.n	8008030 <pbuf_copy_partial+0x2c>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800808a:	4b04      	ldr	r3, [pc, #16]	@ (800809c <pbuf_copy_partial+0x98>)
 800808c:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008090:	4905      	ldr	r1, [pc, #20]	@ (80080a8 <pbuf_copy_partial+0xa4>)
 8008092:	4804      	ldr	r0, [pc, #16]	@ (80080a4 <pbuf_copy_partial+0xa0>)
 8008094:	f006 f9aa 	bl	800e3ec <iprintf>
 8008098:	e7ca      	b.n	8008030 <pbuf_copy_partial+0x2c>
 800809a:	bf00      	nop
 800809c:	0800fa00 	.word	0x0800fa00
 80080a0:	0800fc54 	.word	0x0800fc54
 80080a4:	0800f2f8 	.word	0x0800f2f8
 80080a8:	0800fc74 	.word	0x0800fc74

080080ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4615      	mov	r5, r2
 80080b0:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80080b2:	8929      	ldrh	r1, [r5, #8]
 80080b4:	f7ff fd64 	bl	8007b80 <pbuf_alloc>
  if (q == NULL) {
 80080b8:	4604      	mov	r4, r0
 80080ba:	b118      	cbz	r0, 80080c4 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80080bc:	4629      	mov	r1, r5
 80080be:	f7ff fecf 	bl	8007e60 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80080c2:	b908      	cbnz	r0, 80080c8 <pbuf_clone+0x1c>
  return q;
}
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <pbuf_clone+0x30>)
 80080ca:	f240 5224 	movw	r2, #1316	@ 0x524
 80080ce:	4904      	ldr	r1, [pc, #16]	@ (80080e0 <pbuf_clone+0x34>)
 80080d0:	4804      	ldr	r0, [pc, #16]	@ (80080e4 <pbuf_clone+0x38>)
 80080d2:	f006 f98b 	bl	800e3ec <iprintf>
}
 80080d6:	4620      	mov	r0, r4
 80080d8:	bd38      	pop	{r3, r4, r5, pc}
 80080da:	bf00      	nop
 80080dc:	0800fa00 	.word	0x0800fa00
 80080e0:	0800fc98 	.word	0x0800fc98
 80080e4:	0800f2f8 	.word	0x0800f2f8

080080e8 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 80080e8:	b530      	push	{r4, r5, lr}
 80080ea:	4604      	mov	r4, r0
 80080ec:	461d      	mov	r5, r3
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80080ee:	8900      	ldrh	r0, [r0, #8]
 80080f0:	18cb      	adds	r3, r1, r3
 80080f2:	4298      	cmp	r0, r3
 80080f4:	da03      	bge.n	80080fe <pbuf_memcmp+0x16>
 80080f6:	e028      	b.n	800814a <pbuf_memcmp+0x62>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
    q = q->next;
 80080f8:	6824      	ldr	r4, [r4, #0]
    start = (u16_t)(start - q->len);
 80080fa:	b281      	uxth	r1, r0
  while ((q != NULL) && (q->len <= start)) {
 80080fc:	b124      	cbz	r4, 8008108 <pbuf_memcmp+0x20>
 80080fe:	8960      	ldrh	r0, [r4, #10]
 8008100:	4288      	cmp	r0, r1
    start = (u16_t)(start - q->len);
 8008102:	eba1 0000 	sub.w	r0, r1, r0
  while ((q != NULL) && (q->len <= start)) {
 8008106:	d9f7      	bls.n	80080f8 <pbuf_memcmp+0x10>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8008108:	b1ed      	cbz	r5, 8008146 <pbuf_memcmp+0x5e>
 800810a:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 800810e:	2000      	movs	r0, #0
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8008110:	eb01 0c00 	add.w	ip, r1, r0
  const struct pbuf *q = in;
 8008114:	4623      	mov	r3, r4
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8008116:	fa1f fc8c 	uxth.w	ip, ip
  while ((q != NULL) && (q->len <= offset_left)) {
 800811a:	b924      	cbnz	r4, 8008126 <pbuf_memcmp+0x3e>
 800811c:	e00b      	b.n	8008136 <pbuf_memcmp+0x4e>
    q = q->next;
 800811e:	681b      	ldr	r3, [r3, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8008120:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8008124:	b13b      	cbz	r3, 8008136 <pbuf_memcmp+0x4e>
 8008126:	895a      	ldrh	r2, [r3, #10]
 8008128:	4562      	cmp	r2, ip
    offset_left = (u16_t)(offset_left - q->len);
 800812a:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 800812e:	d9f6      	bls.n	800811e <pbuf_memcmp+0x36>
    return ((u8_t *)q->payload)[q_idx];
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f813 300c 	ldrb.w	r3, [r3, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 8008136:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800813a:	3001      	adds	r0, #1
    if (a != b) {
 800813c:	429a      	cmp	r2, r3
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 800813e:	b280      	uxth	r0, r0
    if (a != b) {
 8008140:	d102      	bne.n	8008148 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 8008142:	42a8      	cmp	r0, r5
 8008144:	d1e4      	bne.n	8008110 <pbuf_memcmp+0x28>
    }
  }
  return 0;
 8008146:	2000      	movs	r0, #0
}
 8008148:	bd30      	pop	{r4, r5, pc}
    return 0xffff;
 800814a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
}
 800814e:	bd30      	pop	{r4, r5, pc}

08008150 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008150:	b470      	push	{r4, r5, r6}
 8008152:	4e12      	ldr	r6, [pc, #72]	@ (800819c <tcp_new_port+0x4c>)
 8008154:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008158:	4d11      	ldr	r5, [pc, #68]	@ (80081a0 <tcp_new_port+0x50>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800815a:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800815e:	8831      	ldrh	r1, [r6, #0]
  tcp_port++;
 8008160:	3101      	adds	r1, #1
 8008162:	4c10      	ldr	r4, [pc, #64]	@ (80081a4 <tcp_new_port+0x54>)
 8008164:	b289      	uxth	r1, r1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008166:	4561      	cmp	r1, ip
 8008168:	bf08      	it	eq
 800816a:	f44f 4140 	moveq.w	r1, #49152	@ 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	b913      	cbnz	r3, 800817a <tcp_new_port+0x2a>
 8008174:	e00b      	b.n	800818e <tcp_new_port+0x3e>
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	b14b      	cbz	r3, 800818e <tcp_new_port+0x3e>
      if (pcb->local_port == tcp_port) {
 800817a:	8ada      	ldrh	r2, [r3, #22]
 800817c:	428a      	cmp	r2, r1
 800817e:	d1fa      	bne.n	8008176 <tcp_new_port+0x26>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008180:	3801      	subs	r0, #1
 8008182:	b280      	uxth	r0, r0
 8008184:	2800      	cmp	r0, #0
 8008186:	d1eb      	bne.n	8008160 <tcp_new_port+0x10>
 8008188:	8031      	strh	r1, [r6, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800818a:	bc70      	pop	{r4, r5, r6}
 800818c:	4770      	bx	lr
 800818e:	3404      	adds	r4, #4
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008190:	42ac      	cmp	r4, r5
 8008192:	d1ec      	bne.n	800816e <tcp_new_port+0x1e>
  return tcp_port;
 8008194:	4608      	mov	r0, r1
 8008196:	8031      	strh	r1, [r6, #0]
}
 8008198:	bc70      	pop	{r4, r5, r6}
 800819a:	4770      	bx	lr
 800819c:	2400002c 	.word	0x2400002c
 80081a0:	08011b80 	.word	0x08011b80
 80081a4:	08011b70 	.word	0x08011b70

080081a8 <tcp_close_shutdown_fin>:
{
 80081a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081aa:	4604      	mov	r4, r0
 80081ac:	b1f8      	cbz	r0, 80081ee <tcp_close_shutdown_fin+0x46>
  switch (pcb->state) {
 80081ae:	7d23      	ldrb	r3, [r4, #20]
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d005      	beq.n	80081c0 <tcp_close_shutdown_fin+0x18>
 80081b4:	2b07      	cmp	r3, #7
 80081b6:	d00d      	beq.n	80081d4 <tcp_close_shutdown_fin+0x2c>
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d001      	beq.n	80081c0 <tcp_close_shutdown_fin+0x18>
      return ERR_OK;
 80081bc:	2000      	movs	r0, #0
}
 80081be:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80081c0:	4620      	mov	r0, r4
 80081c2:	f003 fd4d 	bl	800bc60 <tcp_send_fin>
      if (err == ERR_OK) {
 80081c6:	b948      	cbnz	r0, 80081dc <tcp_close_shutdown_fin+0x34>
  if (err == ERR_OK) {
 80081c8:	2305      	movs	r3, #5
    tcp_output(pcb);
 80081ca:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 80081cc:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80081ce:	f003 feb5 	bl	800bf3c <tcp_output>
 80081d2:	e7f3      	b.n	80081bc <tcp_close_shutdown_fin+0x14>
      err = tcp_send_fin(pcb);
 80081d4:	4620      	mov	r0, r4
 80081d6:	f003 fd43 	bl	800bc60 <tcp_send_fin>
      if (err == ERR_OK) {
 80081da:	b130      	cbz	r0, 80081ea <tcp_close_shutdown_fin+0x42>
  } else if (err == ERR_MEM) {
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d1ee      	bne.n	80081be <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80081e0:	8b63      	ldrh	r3, [r4, #26]
 80081e2:	f043 0308 	orr.w	r3, r3, #8
 80081e6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80081e8:	e7e8      	b.n	80081bc <tcp_close_shutdown_fin+0x14>
 80081ea:	2309      	movs	r3, #9
 80081ec:	e7ed      	b.n	80081ca <tcp_close_shutdown_fin+0x22>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081ee:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <tcp_close_shutdown_fin+0x58>)
 80081f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80081f4:	4903      	ldr	r1, [pc, #12]	@ (8008204 <tcp_close_shutdown_fin+0x5c>)
 80081f6:	4804      	ldr	r0, [pc, #16]	@ (8008208 <tcp_close_shutdown_fin+0x60>)
 80081f8:	f006 f8f8 	bl	800e3ec <iprintf>
 80081fc:	e7d7      	b.n	80081ae <tcp_close_shutdown_fin+0x6>
 80081fe:	bf00      	nop
 8008200:	0800fcac 	.word	0x0800fcac
 8008204:	0800fcdc 	.word	0x0800fcdc
 8008208:	0800f2f8 	.word	0x0800f2f8

0800820c <tcp_init>:
{
 800820c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800820e:	f005 ffed 	bl	800e1ec <rand>
 8008212:	4b02      	ldr	r3, [pc, #8]	@ (800821c <tcp_init+0x10>)
 8008214:	4a02      	ldr	r2, [pc, #8]	@ (8008220 <tcp_init+0x14>)
 8008216:	4303      	orrs	r3, r0
 8008218:	8013      	strh	r3, [r2, #0]
}
 800821a:	bd08      	pop	{r3, pc}
 800821c:	ffffc000 	.word	0xffffc000
 8008220:	2400002c 	.word	0x2400002c

08008224 <tcp_free>:
{
 8008224:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008226:	7d03      	ldrb	r3, [r0, #20]
{
 8008228:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800822a:	2b01      	cmp	r3, #1
 800822c:	d005      	beq.n	800823a <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 800822e:	4621      	mov	r1, r4
 8008230:	2001      	movs	r0, #1
}
 8008232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008236:	f7ff b929 	b.w	800748c <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800823a:	4906      	ldr	r1, [pc, #24]	@ (8008254 <tcp_free+0x30>)
 800823c:	22d4      	movs	r2, #212	@ 0xd4
 800823e:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <tcp_free+0x34>)
 8008240:	4806      	ldr	r0, [pc, #24]	@ (800825c <tcp_free+0x38>)
 8008242:	f006 f8d3 	bl	800e3ec <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008246:	4621      	mov	r1, r4
 8008248:	2001      	movs	r0, #1
}
 800824a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800824e:	f7ff b91d 	b.w	800748c <memp_free>
 8008252:	bf00      	nop
 8008254:	0800fce8 	.word	0x0800fce8
 8008258:	0800fcac 	.word	0x0800fcac
 800825c:	0800f2f8 	.word	0x0800f2f8

08008260 <tcp_bind>:
{
 8008260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008264:	460f      	mov	r7, r1
 8008266:	4680      	mov	r8, r0
 8008268:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 800826a:	f7fc f83d 	bl	80042e8 <sys_check_core_locking>
  if (ipaddr == NULL) {
 800826e:	b1ff      	cbz	r7, 80082b0 <tcp_bind+0x50>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d044      	beq.n	8008300 <tcp_bind+0xa0>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008276:	f898 3014 	ldrb.w	r3, [r8, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d136      	bne.n	80082ec <tcp_bind+0x8c>
  if (port == 0) {
 800827e:	b36c      	cbz	r4, 80082dc <tcp_bind+0x7c>
 8008280:	4e24      	ldr	r6, [pc, #144]	@ (8008314 <tcp_bind+0xb4>)
 8008282:	f106 0110 	add.w	r1, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008286:	6833      	ldr	r3, [r6, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	b913      	cbnz	r3, 8008292 <tcp_bind+0x32>
 800828c:	e012      	b.n	80082b4 <tcp_bind+0x54>
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	b183      	cbz	r3, 80082b4 <tcp_bind+0x54>
        if (cpcb->local_port == port) {
 8008292:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8008296:	45a4      	cmp	ip, r4
 8008298:	d1f9      	bne.n	800828e <tcp_bind+0x2e>
                (ip_addr_isany(&cpcb->local_ip) ||
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	b122      	cbz	r2, 80082a8 <tcp_bind+0x48>
                 ip_addr_isany(ipaddr) ||
 800829e:	683d      	ldr	r5, [r7, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80082a0:	42aa      	cmp	r2, r5
 80082a2:	d001      	beq.n	80082a8 <tcp_bind+0x48>
 80082a4:	2d00      	cmp	r5, #0
 80082a6:	d1f2      	bne.n	800828e <tcp_bind+0x2e>
              return ERR_USE;
 80082a8:	f06f 0007 	mvn.w	r0, #7
}
 80082ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ipaddr = IP4_ADDR_ANY;
 80082b0:	4f19      	ldr	r7, [pc, #100]	@ (8008318 <tcp_bind+0xb8>)
 80082b2:	e7dd      	b.n	8008270 <tcp_bind+0x10>
 80082b4:	3604      	adds	r6, #4
    for (i = 0; i < max_pcb_list; i++) {
 80082b6:	428e      	cmp	r6, r1
 80082b8:	d1e5      	bne.n	8008286 <tcp_bind+0x26>
  if (!ip_addr_isany(ipaddr)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	b10b      	cbz	r3, 80082c2 <tcp_bind+0x62>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80082be:	f8c8 3000 	str.w	r3, [r8]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80082c2:	4b16      	ldr	r3, [pc, #88]	@ (800831c <tcp_bind+0xbc>)
  pcb->local_port = port;
 80082c4:	f8a8 4016 	strh.w	r4, [r8, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	f8c3 8000 	str.w	r8, [r3]
 80082ce:	f8c8 200c 	str.w	r2, [r8, #12]
 80082d2:	f004 f94f 	bl	800c574 <tcp_timer_needed>
  return ERR_OK;
 80082d6:	2000      	movs	r0, #0
}
 80082d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    port = tcp_new_port();
 80082dc:	f7ff ff38 	bl	8008150 <tcp_new_port>
    if (port == 0) {
 80082e0:	4604      	mov	r4, r0
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d1e9      	bne.n	80082ba <tcp_bind+0x5a>
      return ERR_BUF;
 80082e6:	f06f 0001 	mvn.w	r0, #1
 80082ea:	e7df      	b.n	80082ac <tcp_bind+0x4c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80082ec:	4b0c      	ldr	r3, [pc, #48]	@ (8008320 <tcp_bind+0xc0>)
 80082ee:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80082f2:	490c      	ldr	r1, [pc, #48]	@ (8008324 <tcp_bind+0xc4>)
 80082f4:	480c      	ldr	r0, [pc, #48]	@ (8008328 <tcp_bind+0xc8>)
 80082f6:	f006 f879 	bl	800e3ec <iprintf>
 80082fa:	f06f 0005 	mvn.w	r0, #5
 80082fe:	e7d5      	b.n	80082ac <tcp_bind+0x4c>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008300:	4b07      	ldr	r3, [pc, #28]	@ (8008320 <tcp_bind+0xc0>)
 8008302:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008306:	4909      	ldr	r1, [pc, #36]	@ (800832c <tcp_bind+0xcc>)
 8008308:	4807      	ldr	r0, [pc, #28]	@ (8008328 <tcp_bind+0xc8>)
 800830a:	f006 f86f 	bl	800e3ec <iprintf>
 800830e:	f06f 000f 	mvn.w	r0, #15
 8008312:	e7cb      	b.n	80082ac <tcp_bind+0x4c>
 8008314:	08011b70 	.word	0x08011b70
 8008318:	08011bb0 	.word	0x08011bb0
 800831c:	2401055c 	.word	0x2401055c
 8008320:	0800fcac 	.word	0x0800fcac
 8008324:	0800fd14 	.word	0x0800fd14
 8008328:	0800f2f8 	.word	0x0800f2f8
 800832c:	0800fcfc 	.word	0x0800fcfc

08008330 <tcp_listen_with_backlog_and_err>:
{
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	4604      	mov	r4, r0
 8008334:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 8008336:	f7fb ffd7 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800833a:	2c00      	cmp	r4, #0
 800833c:	d05d      	beq.n	80083fa <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800833e:	7d27      	ldrb	r7, [r4, #20]
 8008340:	2f00      	cmp	r7, #0
 8008342:	d147      	bne.n	80083d4 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008344:	2002      	movs	r0, #2
 8008346:	f7ff f85b 	bl	8007400 <memp_malloc>
  if (lpcb == NULL) {
 800834a:	4605      	mov	r5, r0
 800834c:	2800      	cmp	r0, #0
 800834e:	d051      	beq.n	80083f4 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 8008350:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 8008352:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008354:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008356:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8008358:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800835a:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800835c:	7d62      	ldrb	r2, [r4, #21]
 800835e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008360:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008362:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008364:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008366:	7ae2      	ldrb	r2, [r4, #11]
 8008368:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800836a:	7aa2      	ldrb	r2, [r4, #10]
 800836c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800836e:	6822      	ldr	r2, [r4, #0]
 8008370:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008372:	b99b      	cbnz	r3, 800839c <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008374:	7d23      	ldrb	r3, [r4, #20]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d020      	beq.n	80083bc <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800837a:	4621      	mov	r1, r4
 800837c:	2001      	movs	r0, #1
 800837e:	f7ff f885 	bl	800748c <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008382:	4b23      	ldr	r3, [pc, #140]	@ (8008410 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 8008384:	4923      	ldr	r1, [pc, #140]	@ (8008414 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008386:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8008388:	61a9      	str	r1, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800838a:	60ea      	str	r2, [r5, #12]
 800838c:	601d      	str	r5, [r3, #0]
 800838e:	f004 f8f1 	bl	800c574 <tcp_timer_needed>
  res = ERR_OK;
 8008392:	2300      	movs	r3, #0
  if (err != NULL) {
 8008394:	b106      	cbz	r6, 8008398 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 8008396:	7033      	strb	r3, [r6, #0]
}
 8008398:	4628      	mov	r0, r5
 800839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800839c:	4a1e      	ldr	r2, [pc, #120]	@ (8008418 <tcp_listen_with_backlog_and_err+0xe8>)
 800839e:	6813      	ldr	r3, [r2, #0]
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d012      	beq.n	80083ca <tcp_listen_with_backlog_and_err+0x9a>
 80083a4:	b12b      	cbz	r3, 80083b2 <tcp_listen_with_backlog_and_err+0x82>
 80083a6:	68d9      	ldr	r1, [r3, #12]
 80083a8:	42a1      	cmp	r1, r4
 80083aa:	d01e      	beq.n	80083ea <tcp_listen_with_backlog_and_err+0xba>
 80083ac:	460b      	mov	r3, r1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f9      	bne.n	80083a6 <tcp_listen_with_backlog_and_err+0x76>
 80083b2:	2300      	movs	r3, #0
 80083b4:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80083b6:	7d23      	ldrb	r3, [r4, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d1de      	bne.n	800837a <tcp_listen_with_backlog_and_err+0x4a>
 80083bc:	4b17      	ldr	r3, [pc, #92]	@ (800841c <tcp_listen_with_backlog_and_err+0xec>)
 80083be:	22d4      	movs	r2, #212	@ 0xd4
 80083c0:	4917      	ldr	r1, [pc, #92]	@ (8008420 <tcp_listen_with_backlog_and_err+0xf0>)
 80083c2:	4818      	ldr	r0, [pc, #96]	@ (8008424 <tcp_listen_with_backlog_and_err+0xf4>)
 80083c4:	f006 f812 	bl	800e3ec <iprintf>
 80083c8:	e7d7      	b.n	800837a <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80083ca:	68e3      	ldr	r3, [r4, #12]
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	2300      	movs	r3, #0
 80083d0:	60e3      	str	r3, [r4, #12]
 80083d2:	e7f0      	b.n	80083b6 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80083d4:	4b11      	ldr	r3, [pc, #68]	@ (800841c <tcp_listen_with_backlog_and_err+0xec>)
 80083d6:	f240 325a 	movw	r2, #858	@ 0x35a
 80083da:	4913      	ldr	r1, [pc, #76]	@ (8008428 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 80083dc:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80083de:	4811      	ldr	r0, [pc, #68]	@ (8008424 <tcp_listen_with_backlog_and_err+0xf4>)
 80083e0:	f006 f804 	bl	800e3ec <iprintf>
 80083e4:	f06f 030e 	mvn.w	r3, #14
 80083e8:	e7d4      	b.n	8008394 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80083ea:	68e2      	ldr	r2, [r4, #12]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	2300      	movs	r3, #0
 80083f0:	60e3      	str	r3, [r4, #12]
 80083f2:	e7e0      	b.n	80083b6 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 80083f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80083f8:	e7cc      	b.n	8008394 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80083fa:	4b08      	ldr	r3, [pc, #32]	@ (800841c <tcp_listen_with_backlog_and_err+0xec>)
 80083fc:	f240 3259 	movw	r2, #857	@ 0x359
 8008400:	490a      	ldr	r1, [pc, #40]	@ (800842c <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8008402:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008404:	4807      	ldr	r0, [pc, #28]	@ (8008424 <tcp_listen_with_backlog_and_err+0xf4>)
 8008406:	f005 fff1 	bl	800e3ec <iprintf>
 800840a:	f06f 030f 	mvn.w	r3, #15
 800840e:	e7c1      	b.n	8008394 <tcp_listen_with_backlog_and_err+0x64>
 8008410:	24010558 	.word	0x24010558
 8008414:	080090c9 	.word	0x080090c9
 8008418:	2401055c 	.word	0x2401055c
 800841c:	0800fcac 	.word	0x0800fcac
 8008420:	0800fce8 	.word	0x0800fce8
 8008424:	0800f2f8 	.word	0x0800f2f8
 8008428:	0800fd6c 	.word	0x0800fd6c
 800842c:	0800fd3c 	.word	0x0800fd3c

08008430 <tcp_listen_with_backlog>:
{
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008436:	f7fb ff57 	bl	80042e8 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800843a:	2200      	movs	r2, #0
 800843c:	4629      	mov	r1, r5
 800843e:	4620      	mov	r0, r4
}
 8008440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008444:	f7ff bf74 	b.w	8008330 <tcp_listen_with_backlog_and_err>

08008448 <tcp_update_rcv_ann_wnd>:
{
 8008448:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800844a:	4604      	mov	r4, r0
 800844c:	b1c8      	cbz	r0, 8008482 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800844e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008450:	f640 3c68 	movw	ip, #2920	@ 0xb68
 8008454:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008456:	f8b4 e032 	ldrh.w	lr, [r4, #50]	@ 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800845a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800845c:	1a58      	subs	r0, r3, r1
 800845e:	45e6      	cmp	lr, ip
 8008460:	4410      	add	r0, r2
 8008462:	bf94      	ite	ls
 8008464:	eba0 050e 	subls.w	r5, r0, lr
 8008468:	eba0 050c 	subhi.w	r5, r0, ip
 800846c:	2d00      	cmp	r5, #0
 800846e:	db01      	blt.n	8008474 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008470:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8008472:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008474:	1a53      	subs	r3, r2, r1
 8008476:	2b00      	cmp	r3, #0
 8008478:	dd0b      	ble.n	8008492 <tcp_update_rcv_ann_wnd+0x4a>
 800847a:	2300      	movs	r3, #0
    return 0;
 800847c:	4618      	mov	r0, r3
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800847e:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 8008480:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008482:	4b0c      	ldr	r3, [pc, #48]	@ (80084b4 <tcp_update_rcv_ann_wnd+0x6c>)
 8008484:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008488:	490b      	ldr	r1, [pc, #44]	@ (80084b8 <tcp_update_rcv_ann_wnd+0x70>)
 800848a:	480c      	ldr	r0, [pc, #48]	@ (80084bc <tcp_update_rcv_ann_wnd+0x74>)
 800848c:	f005 ffae 	bl	800e3ec <iprintf>
 8008490:	e7dd      	b.n	800844e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008492:	1a8d      	subs	r5, r1, r2
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008494:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8008498:	d203      	bcs.n	80084a2 <tcp_update_rcv_ann_wnd+0x5a>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800849a:	b2ab      	uxth	r3, r5
    return 0;
 800849c:	2000      	movs	r0, #0
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800849e:	8563      	strh	r3, [r4, #42]	@ 0x2a
}
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80084a2:	4b04      	ldr	r3, [pc, #16]	@ (80084b4 <tcp_update_rcv_ann_wnd+0x6c>)
 80084a4:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80084a8:	4905      	ldr	r1, [pc, #20]	@ (80084c0 <tcp_update_rcv_ann_wnd+0x78>)
 80084aa:	4804      	ldr	r0, [pc, #16]	@ (80084bc <tcp_update_rcv_ann_wnd+0x74>)
 80084ac:	f005 ff9e 	bl	800e3ec <iprintf>
 80084b0:	e7f3      	b.n	800849a <tcp_update_rcv_ann_wnd+0x52>
 80084b2:	bf00      	nop
 80084b4:	0800fcac 	.word	0x0800fcac
 80084b8:	0800fda4 	.word	0x0800fda4
 80084bc:	0800f2f8 	.word	0x0800f2f8
 80084c0:	0800fdc8 	.word	0x0800fdc8

080084c4 <tcp_recved>:
{
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4605      	mov	r5, r0
 80084c8:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 80084ca:	f7fb ff0d 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80084ce:	b33d      	cbz	r5, 8008520 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80084d0:	7d2b      	ldrb	r3, [r5, #20]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d01c      	beq.n	8008510 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80084d6:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 80084d8:	1919      	adds	r1, r3, r4
 80084da:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80084dc:	428b      	cmp	r3, r1
 80084de:	d803      	bhi.n	80084e8 <tcp_recved+0x24>
 80084e0:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d901      	bls.n	80084ec <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80084e8:	f241 61d0 	movw	r1, #5840	@ 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80084ec:	4628      	mov	r0, r5
 80084ee:	8529      	strh	r1, [r5, #40]	@ 0x28
 80084f0:	f7ff ffaa 	bl	8008448 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80084f4:	f240 53b3 	movw	r3, #1459	@ 0x5b3
 80084f8:	4298      	cmp	r0, r3
 80084fa:	d800      	bhi.n	80084fe <tcp_recved+0x3a>
}
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 80084fe:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8008500:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8008502:	f043 0302 	orr.w	r3, r3, #2
 8008506:	836b      	strh	r3, [r5, #26]
}
 8008508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800850c:	f003 bd16 	b.w	800bf3c <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008510:	4b08      	ldr	r3, [pc, #32]	@ (8008534 <tcp_recved+0x70>)
 8008512:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008516:	4908      	ldr	r1, [pc, #32]	@ (8008538 <tcp_recved+0x74>)
 8008518:	4808      	ldr	r0, [pc, #32]	@ (800853c <tcp_recved+0x78>)
 800851a:	f005 ff67 	bl	800e3ec <iprintf>
 800851e:	e7da      	b.n	80084d6 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008520:	4b04      	ldr	r3, [pc, #16]	@ (8008534 <tcp_recved+0x70>)
 8008522:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008526:	4906      	ldr	r1, [pc, #24]	@ (8008540 <tcp_recved+0x7c>)
 8008528:	4804      	ldr	r0, [pc, #16]	@ (800853c <tcp_recved+0x78>)
}
 800852a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800852e:	f005 bf5d 	b.w	800e3ec <iprintf>
 8008532:	bf00      	nop
 8008534:	0800fcac 	.word	0x0800fcac
 8008538:	0800fdfc 	.word	0x0800fdfc
 800853c:	0800f2f8 	.word	0x0800f2f8
 8008540:	0800fde4 	.word	0x0800fde4

08008544 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	4604      	mov	r4, r0
 8008548:	460e      	mov	r6, r1
 800854a:	4617      	mov	r7, r2
 800854c:	461d      	mov	r5, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800854e:	f7fb fecb 	bl	80042e8 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008552:	2c00      	cmp	r4, #0
 8008554:	f000 808a 	beq.w	800866c <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008558:	2e00      	cmp	r6, #0
 800855a:	d07d      	beq.n	8008658 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800855c:	7d23      	ldrb	r3, [r4, #20]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d16a      	bne.n	8008638 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008562:	6833      	ldr	r3, [r6, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008564:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 8008566:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008568:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800856a:	2800      	cmp	r0, #0
 800856c:	d049      	beq.n	8008602 <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 800856e:	f7ff f98d 	bl	800788c <netif_get_by_index>
 8008572:	4607      	mov	r7, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 8008574:	2f00      	cmp	r7, #0
 8008576:	d06c      	beq.n	8008652 <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008578:	6823      	ldr	r3, [r4, #0]
 800857a:	b90b      	cbnz	r3, 8008580 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008580:	8ae6      	ldrh	r6, [r4, #22]
  if (pcb->local_port == 0) {
 8008582:	b926      	cbnz	r6, 800858e <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 8008584:	f7ff fde4 	bl	8008150 <tcp_new_port>
 8008588:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800858a:	2800      	cmp	r0, #0
 800858c:	d05e      	beq.n	800864c <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800858e:	4b3b      	ldr	r3, [pc, #236]	@ (800867c <tcp_connect+0x138>)
 8008590:	4a3b      	ldr	r2, [pc, #236]	@ (8008680 <tcp_connect+0x13c>)
 8008592:	6811      	ldr	r1, [r2, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	440a      	add	r2, r1
 8008598:	601a      	str	r2, [r3, #0]
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800859a:	4b3a      	ldr	r3, [pc, #232]	@ (8008684 <tcp_connect+0x140>)
  pcb->snd_nxt = iss;
 800859c:	6522      	str	r2, [r4, #80]	@ 0x50
  pcb->lastack = iss - 1;
 800859e:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80085a0:	62a3      	str	r3, [r4, #40]	@ 0x28
  pcb->snd_wnd = TCP_WND;
 80085a2:	f241 63d0 	movw	r3, #5840	@ 0x16d0
  pcb->lastack = iss - 1;
 80085a6:	6462      	str	r2, [r4, #68]	@ 0x44
  pcb->snd_lbb = iss - 1;
 80085a8:	e9c4 2216 	strd	r2, r2, [r4, #88]	@ 0x58
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 80085ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
  pcb->snd_wnd = TCP_WND;
 80085ae:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
  pcb->rcv_nxt = 0;
 80085b2:	2300      	movs	r3, #0
 80085b4:	6263      	str	r3, [r4, #36]	@ 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80085b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d037      	beq.n	800862c <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80085bc:	2a28      	cmp	r2, #40	@ 0x28
 80085be:	bf38      	it	cc
 80085c0:	2228      	movcc	r2, #40	@ 0x28
 80085c2:	3a28      	subs	r2, #40	@ 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80085c4:	b292      	uxth	r2, r2
 80085c6:	f5b2 7f06 	cmp.w	r2, #536	@ 0x218
 80085ca:	bf28      	it	cs
 80085cc:	f44f 7206 	movcs.w	r2, #536	@ 0x218
  pcb->cwnd = 1;
 80085d0:	2301      	movs	r3, #1
  pcb->connected = connected;
 80085d2:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80085d6:	2102      	movs	r1, #2
 80085d8:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80085da:	8662      	strh	r2, [r4, #50]	@ 0x32
  pcb->cwnd = 1;
 80085dc:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80085e0:	f003 fa92 	bl	800bb08 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80085e4:	4605      	mov	r5, r0
 80085e6:	b9f8      	cbnz	r0, 8008628 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 80085e8:	2302      	movs	r3, #2
 80085ea:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80085ec:	b186      	cbz	r6, 8008610 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80085ee:	4a26      	ldr	r2, [pc, #152]	@ (8008688 <tcp_connect+0x144>)
 80085f0:	6813      	ldr	r3, [r2, #0]
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	d01d      	beq.n	8008632 <tcp_connect+0xee>
 80085f6:	b15b      	cbz	r3, 8008610 <tcp_connect+0xcc>
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	42a2      	cmp	r2, r4
 80085fc:	d006      	beq.n	800860c <tcp_connect+0xc8>
 80085fe:	4613      	mov	r3, r2
 8008600:	e7f9      	b.n	80085f6 <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008602:	1d20      	adds	r0, r4, #4
 8008604:	f004 fea0 	bl	800d348 <ip4_route>
 8008608:	4607      	mov	r7, r0
 800860a:	e7b3      	b.n	8008574 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800860c:	68e2      	ldr	r2, [r4, #12]
 800860e:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8008610:	4b1e      	ldr	r3, [pc, #120]	@ (800868c <tcp_connect+0x148>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	601c      	str	r4, [r3, #0]
 8008616:	60e2      	str	r2, [r4, #12]
 8008618:	f003 ffac 	bl	800c574 <tcp_timer_needed>
 800861c:	4b1c      	ldr	r3, [pc, #112]	@ (8008690 <tcp_connect+0x14c>)
 800861e:	2201      	movs	r2, #1
    tcp_output(pcb);
 8008620:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 8008622:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8008624:	f003 fc8a 	bl	800bf3c <tcp_output>
}
 8008628:	4628      	mov	r0, r5
 800862a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return sendmss;
 800862c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008630:	e7ce      	b.n	80085d0 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008632:	68e3      	ldr	r3, [r4, #12]
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	e7eb      	b.n	8008610 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008638:	4b16      	ldr	r3, [pc, #88]	@ (8008694 <tcp_connect+0x150>)
 800863a:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 800863e:	4916      	ldr	r1, [pc, #88]	@ (8008698 <tcp_connect+0x154>)
 8008640:	f06f 0509 	mvn.w	r5, #9
 8008644:	4815      	ldr	r0, [pc, #84]	@ (800869c <tcp_connect+0x158>)
 8008646:	f005 fed1 	bl	800e3ec <iprintf>
 800864a:	e7ed      	b.n	8008628 <tcp_connect+0xe4>
      return ERR_BUF;
 800864c:	f06f 0501 	mvn.w	r5, #1
 8008650:	e7ea      	b.n	8008628 <tcp_connect+0xe4>
    return ERR_RTE;
 8008652:	f06f 0503 	mvn.w	r5, #3
 8008656:	e7e7      	b.n	8008628 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008658:	4b0e      	ldr	r3, [pc, #56]	@ (8008694 <tcp_connect+0x150>)
 800865a:	f240 4236 	movw	r2, #1078	@ 0x436
 800865e:	4910      	ldr	r1, [pc, #64]	@ (80086a0 <tcp_connect+0x15c>)
 8008660:	480e      	ldr	r0, [pc, #56]	@ (800869c <tcp_connect+0x158>)
 8008662:	f005 fec3 	bl	800e3ec <iprintf>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008666:	f06f 050f 	mvn.w	r5, #15
 800866a:	e7dd      	b.n	8008628 <tcp_connect+0xe4>
 800866c:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <tcp_connect+0x150>)
 800866e:	f240 4235 	movw	r2, #1077	@ 0x435
 8008672:	490c      	ldr	r1, [pc, #48]	@ (80086a4 <tcp_connect+0x160>)
 8008674:	4809      	ldr	r0, [pc, #36]	@ (800869c <tcp_connect+0x158>)
 8008676:	f005 feb9 	bl	800e3ec <iprintf>
 800867a:	e7f4      	b.n	8008666 <tcp_connect+0x122>
 800867c:	24000028 	.word	0x24000028
 8008680:	24010560 	.word	0x24010560
 8008684:	16d016d0 	.word	0x16d016d0
 8008688:	2401055c 	.word	0x2401055c
 800868c:	24010554 	.word	0x24010554
 8008690:	2401054f 	.word	0x2401054f
 8008694:	0800fcac 	.word	0x0800fcac
 8008698:	0800fe5c 	.word	0x0800fe5c
 800869c:	0800f2f8 	.word	0x0800f2f8
 80086a0:	0800fe40 	.word	0x0800fe40
 80086a4:	0800fe24 	.word	0x0800fe24

080086a8 <tcp_segs_free>:
  while (seg != NULL) {
 80086a8:	b170      	cbz	r0, 80086c8 <tcp_segs_free+0x20>
{
 80086aa:	b538      	push	{r3, r4, r5, lr}
 80086ac:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 80086ae:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 80086b0:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 80086b2:	6868      	ldr	r0, [r5, #4]
 80086b4:	b108      	cbz	r0, 80086ba <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 80086b6:	f7ff f9f3 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80086ba:	4629      	mov	r1, r5
 80086bc:	2003      	movs	r0, #3
 80086be:	f7fe fee5 	bl	800748c <memp_free>
  while (seg != NULL) {
 80086c2:	2c00      	cmp	r4, #0
 80086c4:	d1f3      	bne.n	80086ae <tcp_segs_free+0x6>
}
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop

080086cc <tcp_seg_free>:
  if (seg != NULL) {
 80086cc:	b158      	cbz	r0, 80086e6 <tcp_seg_free+0x1a>
{
 80086ce:	b510      	push	{r4, lr}
 80086d0:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80086d2:	6840      	ldr	r0, [r0, #4]
 80086d4:	b108      	cbz	r0, 80086da <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80086d6:	f7ff f9e3 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80086da:	4621      	mov	r1, r4
 80086dc:	2003      	movs	r0, #3
}
 80086de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80086e2:	f7fe bed3 	b.w	800748c <memp_free>
 80086e6:	4770      	bx	lr

080086e8 <tcp_seg_copy>:
{
 80086e8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80086ea:	4605      	mov	r5, r0
 80086ec:	b188      	cbz	r0, 8008712 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80086ee:	2003      	movs	r0, #3
 80086f0:	f7fe fe86 	bl	8007400 <memp_malloc>
  if (cseg == NULL) {
 80086f4:	4604      	mov	r4, r0
 80086f6:	b150      	cbz	r0, 800870e <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80086f8:	6868      	ldr	r0, [r5, #4]
 80086fa:	6829      	ldr	r1, [r5, #0]
 80086fc:	68aa      	ldr	r2, [r5, #8]
 80086fe:	68eb      	ldr	r3, [r5, #12]
 8008700:	6060      	str	r0, [r4, #4]
 8008702:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 8008704:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008706:	60a2      	str	r2, [r4, #8]
 8008708:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 800870a:	f7ff fb47 	bl	8007d9c <pbuf_ref>
}
 800870e:	4620      	mov	r0, r4
 8008710:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008712:	4b04      	ldr	r3, [pc, #16]	@ (8008724 <tcp_seg_copy+0x3c>)
 8008714:	f240 6282 	movw	r2, #1666	@ 0x682
 8008718:	4903      	ldr	r1, [pc, #12]	@ (8008728 <tcp_seg_copy+0x40>)
 800871a:	4804      	ldr	r0, [pc, #16]	@ (800872c <tcp_seg_copy+0x44>)
 800871c:	f005 fe66 	bl	800e3ec <iprintf>
 8008720:	e7e5      	b.n	80086ee <tcp_seg_copy+0x6>
 8008722:	bf00      	nop
 8008724:	0800fcac 	.word	0x0800fcac
 8008728:	0800fe8c 	.word	0x0800fe8c
 800872c:	0800f2f8 	.word	0x0800f2f8

08008730 <tcp_arg>:
{
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4604      	mov	r4, r0
 8008734:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008736:	f7fb fdd7 	bl	80042e8 <sys_check_core_locking>
  if (pcb != NULL) {
 800873a:	b104      	cbz	r4, 800873e <tcp_arg+0xe>
    pcb->callback_arg = arg;
 800873c:	6125      	str	r5, [r4, #16]
}
 800873e:	bd38      	pop	{r3, r4, r5, pc}

08008740 <tcp_recv>:
{
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008746:	f7fb fdcf 	bl	80042e8 <sys_check_core_locking>
  if (pcb != NULL) {
 800874a:	b124      	cbz	r4, 8008756 <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800874c:	7d23      	ldrb	r3, [r4, #20]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d002      	beq.n	8008758 <tcp_recv+0x18>
    pcb->recv = recv;
 8008752:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
}
 8008756:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008758:	4b03      	ldr	r3, [pc, #12]	@ (8008768 <tcp_recv+0x28>)
 800875a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800875e:	4903      	ldr	r1, [pc, #12]	@ (800876c <tcp_recv+0x2c>)
 8008760:	4803      	ldr	r0, [pc, #12]	@ (8008770 <tcp_recv+0x30>)
 8008762:	f005 fe43 	bl	800e3ec <iprintf>
 8008766:	e7f4      	b.n	8008752 <tcp_recv+0x12>
 8008768:	0800fcac 	.word	0x0800fcac
 800876c:	0800fea8 	.word	0x0800fea8
 8008770:	0800f2f8 	.word	0x0800f2f8

08008774 <tcp_sent>:
{
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4604      	mov	r4, r0
 8008778:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800877a:	f7fb fdb5 	bl	80042e8 <sys_check_core_locking>
  if (pcb != NULL) {
 800877e:	b124      	cbz	r4, 800878a <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008780:	7d23      	ldrb	r3, [r4, #20]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d002      	beq.n	800878c <tcp_sent+0x18>
    pcb->sent = sent;
 8008786:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
}
 800878a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800878c:	4b03      	ldr	r3, [pc, #12]	@ (800879c <tcp_sent+0x28>)
 800878e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8008792:	4903      	ldr	r1, [pc, #12]	@ (80087a0 <tcp_sent+0x2c>)
 8008794:	4803      	ldr	r0, [pc, #12]	@ (80087a4 <tcp_sent+0x30>)
 8008796:	f005 fe29 	bl	800e3ec <iprintf>
 800879a:	e7f4      	b.n	8008786 <tcp_sent+0x12>
 800879c:	0800fcac 	.word	0x0800fcac
 80087a0:	0800fed0 	.word	0x0800fed0
 80087a4:	0800f2f8 	.word	0x0800f2f8

080087a8 <tcp_err>:
{
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4604      	mov	r4, r0
 80087ac:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 80087ae:	f7fb fd9b 	bl	80042e8 <sys_check_core_locking>
  if (pcb != NULL) {
 80087b2:	b124      	cbz	r4, 80087be <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80087b4:	7d23      	ldrb	r3, [r4, #20]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <tcp_err+0x18>
    pcb->errf = err;
 80087ba:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 80087be:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80087c0:	4b03      	ldr	r3, [pc, #12]	@ (80087d0 <tcp_err+0x28>)
 80087c2:	f640 020d 	movw	r2, #2061	@ 0x80d
 80087c6:	4903      	ldr	r1, [pc, #12]	@ (80087d4 <tcp_err+0x2c>)
 80087c8:	4803      	ldr	r0, [pc, #12]	@ (80087d8 <tcp_err+0x30>)
 80087ca:	f005 fe0f 	bl	800e3ec <iprintf>
 80087ce:	e7f4      	b.n	80087ba <tcp_err+0x12>
 80087d0:	0800fcac 	.word	0x0800fcac
 80087d4:	0800fef8 	.word	0x0800fef8
 80087d8:	0800f2f8 	.word	0x0800f2f8

080087dc <tcp_accept>:
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4604      	mov	r4, r0
 80087e0:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 80087e2:	f7fb fd81 	bl	80042e8 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80087e6:	b11c      	cbz	r4, 80087f0 <tcp_accept+0x14>
 80087e8:	7d23      	ldrb	r3, [r4, #20]
 80087ea:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 80087ec:	bf08      	it	eq
 80087ee:	61a5      	streq	r5, [r4, #24]
}
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop

080087f4 <tcp_poll>:
{
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4604      	mov	r4, r0
 80087f8:	460e      	mov	r6, r1
 80087fa:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 80087fc:	f7fb fd74 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008800:	b18c      	cbz	r4, 8008826 <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008802:	7d23      	ldrb	r3, [r4, #20]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d003      	beq.n	8008810 <tcp_poll+0x1c>
  pcb->poll = poll;
 8008808:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 800880c:	7765      	strb	r5, [r4, #29]
}
 800880e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008810:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <tcp_poll+0x44>)
 8008812:	f640 023e 	movw	r2, #2110	@ 0x83e
 8008816:	4909      	ldr	r1, [pc, #36]	@ (800883c <tcp_poll+0x48>)
 8008818:	4809      	ldr	r0, [pc, #36]	@ (8008840 <tcp_poll+0x4c>)
 800881a:	f005 fde7 	bl	800e3ec <iprintf>
  pcb->poll = poll;
 800881e:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  pcb->pollinterval = interval;
 8008822:	7765      	strb	r5, [r4, #29]
}
 8008824:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008826:	4b04      	ldr	r3, [pc, #16]	@ (8008838 <tcp_poll+0x44>)
 8008828:	f640 023d 	movw	r2, #2109	@ 0x83d
 800882c:	4905      	ldr	r1, [pc, #20]	@ (8008844 <tcp_poll+0x50>)
 800882e:	4804      	ldr	r0, [pc, #16]	@ (8008840 <tcp_poll+0x4c>)
}
 8008830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008834:	f005 bdda 	b.w	800e3ec <iprintf>
 8008838:	0800fcac 	.word	0x0800fcac
 800883c:	0800ff38 	.word	0x0800ff38
 8008840:	0800f2f8 	.word	0x0800f2f8
 8008844:	0800ff20 	.word	0x0800ff20

08008848 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008848:	2800      	cmp	r0, #0
 800884a:	d041      	beq.n	80088d0 <tcp_pcb_purge+0x88>
{
 800884c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 800884e:	7d03      	ldrb	r3, [r0, #20]
 8008850:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8008852:	2b0a      	cmp	r3, #10
 8008854:	d001      	beq.n	800885a <tcp_pcb_purge+0x12>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d800      	bhi.n	800885c <tcp_pcb_purge+0x14>
}
 800885a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 800885c:	6f80      	ldr	r0, [r0, #120]	@ 0x78
 800885e:	b118      	cbz	r0, 8008868 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 8008860:	f7ff f91e 	bl	8007aa0 <pbuf_free>
      pcb->refused_data = NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	67ab      	str	r3, [r5, #120]	@ 0x78
    if (pcb->ooseq != NULL) {
 8008868:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 800886a:	b164      	cbz	r4, 8008886 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 800886c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 800886e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008870:	6870      	ldr	r0, [r6, #4]
 8008872:	b108      	cbz	r0, 8008878 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 8008874:	f7ff f914 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008878:	4631      	mov	r1, r6
 800887a:	2003      	movs	r0, #3
 800887c:	f7fe fe06 	bl	800748c <memp_free>
  while (seg != NULL) {
 8008880:	2c00      	cmp	r4, #0
 8008882:	d1f3      	bne.n	800886c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8008884:	676c      	str	r4, [r5, #116]	@ 0x74
    pcb->rtime = -1;
 8008886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    tcp_segs_free(pcb->unsent);
 800888a:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
    pcb->rtime = -1;
 800888c:	862b      	strh	r3, [r5, #48]	@ 0x30
  while (seg != NULL) {
 800888e:	b15c      	cbz	r4, 80088a8 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 8008890:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008892:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008894:	6870      	ldr	r0, [r6, #4]
 8008896:	b108      	cbz	r0, 800889c <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 8008898:	f7ff f902 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800889c:	4631      	mov	r1, r6
 800889e:	2003      	movs	r0, #3
 80088a0:	f7fe fdf4 	bl	800748c <memp_free>
  while (seg != NULL) {
 80088a4:	2c00      	cmp	r4, #0
 80088a6:	d1f3      	bne.n	8008890 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 80088a8:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
  while (seg != NULL) {
 80088aa:	b15c      	cbz	r4, 80088c4 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 80088ac:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 80088ae:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 80088b0:	6870      	ldr	r0, [r6, #4]
 80088b2:	b108      	cbz	r0, 80088b8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 80088b4:	f7ff f8f4 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80088b8:	4631      	mov	r1, r6
 80088ba:	2003      	movs	r0, #3
 80088bc:	f7fe fde6 	bl	800748c <memp_free>
  while (seg != NULL) {
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d1f3      	bne.n	80088ac <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
    pcb->unsent_oversize = 0;
 80088ca:	f8a5 3068 	strh.w	r3, [r5, #104]	@ 0x68
}
 80088ce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80088d0:	4b03      	ldr	r3, [pc, #12]	@ (80088e0 <tcp_pcb_purge+0x98>)
 80088d2:	f640 0251 	movw	r2, #2129	@ 0x851
 80088d6:	4903      	ldr	r1, [pc, #12]	@ (80088e4 <tcp_pcb_purge+0x9c>)
 80088d8:	4803      	ldr	r0, [pc, #12]	@ (80088e8 <tcp_pcb_purge+0xa0>)
 80088da:	f005 bd87 	b.w	800e3ec <iprintf>
 80088de:	bf00      	nop
 80088e0:	0800fcac 	.word	0x0800fcac
 80088e4:	0800ff58 	.word	0x0800ff58
 80088e8:	0800f2f8 	.word	0x0800f2f8

080088ec <tcp_slowtmr>:
{
 80088ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80088f0:	4da8      	ldr	r5, [pc, #672]	@ (8008b94 <tcp_slowtmr+0x2a8>)
{
 80088f2:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80088f4:	4ea8      	ldr	r6, [pc, #672]	@ (8008b98 <tcp_slowtmr+0x2ac>)
  ++tcp_ticks;
 80088f6:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80088f8:	f8df b2cc 	ldr.w	fp, [pc, #716]	@ 8008bc8 <tcp_slowtmr+0x2dc>
  ++tcp_ticks;
 80088fc:	3301      	adds	r3, #1
 80088fe:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 8008900:	7833      	ldrb	r3, [r6, #0]
 8008902:	3301      	adds	r3, #1
 8008904:	7033      	strb	r3, [r6, #0]
  pcb = tcp_active_pcbs;
 8008906:	4ba5      	ldr	r3, [pc, #660]	@ (8008b9c <tcp_slowtmr+0x2b0>)
 8008908:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800890a:	2c00      	cmp	r4, #0
 800890c:	f000 8081 	beq.w	8008a12 <tcp_slowtmr+0x126>
  prev = NULL;
 8008910:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008912:	46b9      	mov	r9, r7
 8008914:	7d23      	ldrb	r3, [r4, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 80eb 	beq.w	8008af2 <tcp_slowtmr+0x206>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800891c:	2b01      	cmp	r3, #1
 800891e:	f000 80f3 	beq.w	8008b08 <tcp_slowtmr+0x21c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008922:	2b0a      	cmp	r3, #10
 8008924:	f000 80fb 	beq.w	8008b1e <tcp_slowtmr+0x232>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008928:	7832      	ldrb	r2, [r6, #0]
 800892a:	7fa3      	ldrb	r3, [r4, #30]
 800892c:	4293      	cmp	r3, r2
 800892e:	f000 8102 	beq.w	8008b36 <tcp_slowtmr+0x24a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008932:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8008934:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008936:	2b02      	cmp	r3, #2
 8008938:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800893c:	f000 80a0 	beq.w	8008a80 <tcp_slowtmr+0x194>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008940:	2a0b      	cmp	r2, #11
 8008942:	f240 80a9 	bls.w	8008a98 <tcp_slowtmr+0x1ac>
      ++pcb_remove;
 8008946:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 800894a:	2b06      	cmp	r3, #6
 800894c:	f000 80c2 	beq.w	8008ad4 <tcp_slowtmr+0x1e8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008950:	7a62      	ldrb	r2, [r4, #9]
 8008952:	0712      	lsls	r2, r2, #28
 8008954:	f140 8098 	bpl.w	8008a88 <tcp_slowtmr+0x19c>
 8008958:	2b04      	cmp	r3, #4
 800895a:	d002      	beq.n	8008962 <tcp_slowtmr+0x76>
 800895c:	2b07      	cmp	r3, #7
 800895e:	f040 8093 	bne.w	8008a88 <tcp_slowtmr+0x19c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008962:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8008966:	4b8e      	ldr	r3, [pc, #568]	@ (8008ba0 <tcp_slowtmr+0x2b4>)
 8008968:	4a8e      	ldr	r2, [pc, #568]	@ (8008ba4 <tcp_slowtmr+0x2b8>)
 800896a:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800896c:	6829      	ldr	r1, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800896e:	fba2 2303 	umull	r2, r3, r2, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008972:	6a22      	ldr	r2, [r4, #32]
 8008974:	1a89      	subs	r1, r1, r2
 8008976:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
 800897a:	f240 80e2 	bls.w	8008b42 <tcp_slowtmr+0x256>
        ++pcb_remove;
 800897e:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 8008982:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 8008986:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 800898a:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 800898c:	b19f      	cbz	r7, 80089b6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800898e:	682b      	ldr	r3, [r5, #0]
 8008990:	1a9a      	subs	r2, r3, r2
 8008992:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8008996:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800899a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800899e:	f080 8117 	bcs.w	8008bd0 <tcp_slowtmr+0x2e4>
    if (pcb->state == SYN_RCVD) {
 80089a2:	7d23      	ldrb	r3, [r4, #20]
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d055      	beq.n	8008a54 <tcp_slowtmr+0x168>
    if (pcb->state == LAST_ACK) {
 80089a8:	2b09      	cmp	r3, #9
 80089aa:	d158      	bne.n	8008a5e <tcp_slowtmr+0x172>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	6a22      	ldr	r2, [r4, #32]
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	2bf0      	cmp	r3, #240	@ 0xf0
 80089b4:	d953      	bls.n	8008a5e <tcp_slowtmr+0x172>
      tcp_pcb_purge(pcb);
 80089b6:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80089b8:	f8d4 7090 	ldr.w	r7, [r4, #144]	@ 0x90
      tcp_pcb_purge(pcb);
 80089bc:	f7ff ff44 	bl	8008848 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80089c0:	4b76      	ldr	r3, [pc, #472]	@ (8008b9c <tcp_slowtmr+0x2b0>)
 80089c2:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	f000 81af 	beq.w	8008d2a <tcp_slowtmr+0x43e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80089cc:	429c      	cmp	r4, r3
 80089ce:	f000 81d6 	beq.w	8008d7e <tcp_slowtmr+0x492>
        prev->next = pcb->next;
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 80089d8:	f1ba 0f00 	cmp.w	sl, #0
 80089dc:	f040 8178 	bne.w	8008cd0 <tcp_slowtmr+0x3e4>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089e0:	7d23      	ldrb	r3, [r4, #20]
 80089e2:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 80089e4:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80089e8:	f000 8184 	beq.w	8008cf4 <tcp_slowtmr+0x408>
  memp_free(MEMP_TCP_PCB, pcb);
 80089ec:	4621      	mov	r1, r4
 80089ee:	2001      	movs	r0, #1
 80089f0:	f7fe fd4c 	bl	800748c <memp_free>
      tcp_active_pcbs_changed = 0;
 80089f4:	4c6c      	ldr	r4, [pc, #432]	@ (8008ba8 <tcp_slowtmr+0x2bc>)
 80089f6:	2300      	movs	r3, #0
 80089f8:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80089fa:	b13f      	cbz	r7, 8008a0c <tcp_slowtmr+0x120>
 80089fc:	f06f 010c 	mvn.w	r1, #12
 8008a00:	4640      	mov	r0, r8
 8008a02:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 8008a04:	7823      	ldrb	r3, [r4, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f47f af7d 	bne.w	8008906 <tcp_slowtmr+0x1a>
      pcb = pcb->next;
 8008a0c:	4654      	mov	r4, sl
  while (pcb != NULL) {
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	d180      	bne.n	8008914 <tcp_slowtmr+0x28>
  pcb = tcp_tw_pcbs;
 8008a12:	4f66      	ldr	r7, [pc, #408]	@ (8008bac <tcp_slowtmr+0x2c0>)
 8008a14:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8008a16:	b1d4      	cbz	r4, 8008a4e <tcp_slowtmr+0x162>
  prev = NULL;
 8008a18:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008a1a:	f8df a1ac 	ldr.w	sl, [pc, #428]	@ 8008bc8 <tcp_slowtmr+0x2dc>
 8008a1e:	f8df 91ac 	ldr.w	r9, [pc, #428]	@ 8008bcc <tcp_slowtmr+0x2e0>
 8008a22:	f8df 8190 	ldr.w	r8, [pc, #400]	@ 8008bb4 <tcp_slowtmr+0x2c8>
 8008a26:	7d23      	ldrb	r3, [r4, #20]
 8008a28:	2b0a      	cmp	r3, #10
 8008a2a:	d006      	beq.n	8008a3a <tcp_slowtmr+0x14e>
 8008a2c:	4653      	mov	r3, sl
 8008a2e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008a32:	4649      	mov	r1, r9
 8008a34:	4640      	mov	r0, r8
 8008a36:	f005 fcd9 	bl	800e3ec <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008a3a:	682b      	ldr	r3, [r5, #0]
 8008a3c:	6a22      	ldr	r2, [r4, #32]
 8008a3e:	1a9b      	subs	r3, r3, r2
 8008a40:	2bf0      	cmp	r3, #240	@ 0xf0
 8008a42:	f200 811f 	bhi.w	8008c84 <tcp_slowtmr+0x398>
      prev = pcb;
 8008a46:	4626      	mov	r6, r4
      pcb = pcb->next;
 8008a48:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008a4a:	2c00      	cmp	r4, #0
 8008a4c:	d1eb      	bne.n	8008a26 <tcp_slowtmr+0x13a>
}
 8008a4e:	b007      	add	sp, #28
 8008a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	6a22      	ldr	r2, [r4, #32]
 8008a58:	1a9b      	subs	r3, r3, r2
 8008a5a:	2b28      	cmp	r3, #40	@ 0x28
 8008a5c:	d8ab      	bhi.n	80089b6 <tcp_slowtmr+0xca>
    if (pcb_remove) {
 8008a5e:	f1b8 0f00 	cmp.w	r8, #0
 8008a62:	d1a8      	bne.n	80089b6 <tcp_slowtmr+0xca>
      ++prev->polltmr;
 8008a64:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008a66:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8008a68:	3301      	adds	r3, #1
      pcb = pcb->next;
 8008a6a:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8008a6c:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8008a6e:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8008a70:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008a72:	d977      	bls.n	8008b64 <tcp_slowtmr+0x278>
      prev = pcb;
 8008a74:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008a76:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8008a78:	2c00      	cmp	r4, #0
 8008a7a:	f47f af4b 	bne.w	8008914 <tcp_slowtmr+0x28>
 8008a7e:	e7c8      	b.n	8008a12 <tcp_slowtmr+0x126>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008a80:	2a05      	cmp	r2, #5
 8008a82:	d909      	bls.n	8008a98 <tcp_slowtmr+0x1ac>
      ++pcb_remove;
 8008a84:	f04f 0801 	mov.w	r8, #1
    if (pcb->ooseq != NULL &&
 8008a88:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	f000 80f8 	beq.w	8008c80 <tcp_slowtmr+0x394>
 8008a90:	f04f 0a00 	mov.w	sl, #0
 8008a94:	6a22      	ldr	r2, [r4, #32]
 8008a96:	e77a      	b.n	800898e <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 8008a98:	f894 8099 	ldrb.w	r8, [r4, #153]	@ 0x99
 8008a9c:	f1b8 0f00 	cmp.w	r8, #0
 8008aa0:	f000 80a6 	beq.w	8008bf0 <tcp_slowtmr+0x304>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008aa4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8008aa6:	b133      	cbz	r3, 8008ab6 <tcp_slowtmr+0x1ca>
 8008aa8:	465b      	mov	r3, fp
 8008aaa:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8008aae:	4940      	ldr	r1, [pc, #256]	@ (8008bb0 <tcp_slowtmr+0x2c4>)
 8008ab0:	4840      	ldr	r0, [pc, #256]	@ (8008bb4 <tcp_slowtmr+0x2c8>)
 8008ab2:	f005 fc9b 	bl	800e3ec <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008ab6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8181 	beq.w	8008dc0 <tcp_slowtmr+0x4d4>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008abe:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 8008ac2:	2b0b      	cmp	r3, #11
 8008ac4:	f240 811d 	bls.w	8008d02 <tcp_slowtmr+0x416>
    if (pcb->state == FIN_WAIT_2) {
 8008ac8:	7d23      	ldrb	r3, [r4, #20]
      ++pcb_remove;
 8008aca:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 8008ace:	2b06      	cmp	r3, #6
 8008ad0:	f47f af3e 	bne.w	8008950 <tcp_slowtmr+0x64>
      if (pcb->flags & TF_RXCLOSED) {
 8008ad4:	8b63      	ldrh	r3, [r4, #26]
 8008ad6:	06d9      	lsls	r1, r3, #27
 8008ad8:	d53f      	bpl.n	8008b5a <tcp_slowtmr+0x26e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ada:	682b      	ldr	r3, [r5, #0]
 8008adc:	6a22      	ldr	r2, [r4, #32]
 8008ade:	1a9b      	subs	r3, r3, r2
 8008ae0:	2b28      	cmp	r3, #40	@ 0x28
 8008ae2:	d93a      	bls.n	8008b5a <tcp_slowtmr+0x26e>
          ++pcb_remove;
 8008ae4:	f108 0801 	add.w	r8, r8, #1
    pcb_reset = 0;
 8008ae8:	f04f 0a00 	mov.w	sl, #0
          ++pcb_remove;
 8008aec:	fa5f f888 	uxtb.w	r8, r8
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008af0:	e74b      	b.n	800898a <tcp_slowtmr+0x9e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008af2:	465b      	mov	r3, fp
 8008af4:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008af8:	492f      	ldr	r1, [pc, #188]	@ (8008bb8 <tcp_slowtmr+0x2cc>)
 8008afa:	482e      	ldr	r0, [pc, #184]	@ (8008bb4 <tcp_slowtmr+0x2c8>)
 8008afc:	f005 fc76 	bl	800e3ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008b00:	7d23      	ldrb	r3, [r4, #20]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	f47f af0d 	bne.w	8008922 <tcp_slowtmr+0x36>
 8008b08:	465b      	mov	r3, fp
 8008b0a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008b0e:	492b      	ldr	r1, [pc, #172]	@ (8008bbc <tcp_slowtmr+0x2d0>)
 8008b10:	4828      	ldr	r0, [pc, #160]	@ (8008bb4 <tcp_slowtmr+0x2c8>)
 8008b12:	f005 fc6b 	bl	800e3ec <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008b16:	7d23      	ldrb	r3, [r4, #20]
 8008b18:	2b0a      	cmp	r3, #10
 8008b1a:	f47f af05 	bne.w	8008928 <tcp_slowtmr+0x3c>
 8008b1e:	465b      	mov	r3, fp
 8008b20:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8008b24:	4926      	ldr	r1, [pc, #152]	@ (8008bc0 <tcp_slowtmr+0x2d4>)
 8008b26:	4823      	ldr	r0, [pc, #140]	@ (8008bb4 <tcp_slowtmr+0x2c8>)
 8008b28:	f005 fc60 	bl	800e3ec <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008b2c:	7832      	ldrb	r2, [r6, #0]
 8008b2e:	7fa3      	ldrb	r3, [r4, #30]
 8008b30:	4293      	cmp	r3, r2
 8008b32:	f47f aefe 	bne.w	8008932 <tcp_slowtmr+0x46>
      prev = pcb;
 8008b36:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008b38:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	f47f aeea 	bne.w	8008914 <tcp_slowtmr+0x28>
 8008b40:	e767      	b.n	8008a12 <tcp_slowtmr+0x126>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008b42:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8008b46:	4a1f      	ldr	r2, [pc, #124]	@ (8008bc4 <tcp_slowtmr+0x2d8>)
 8008b48:	fb02 0003 	mla	r0, r2, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8008b4c:	4b15      	ldr	r3, [pc, #84]	@ (8008ba4 <tcp_slowtmr+0x2b8>)
 8008b4e:	fba3 3000 	umull	r3, r0, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b52:	ebb1 1f50 	cmp.w	r1, r0, lsr #5
 8008b56:	f200 80af 	bhi.w	8008cb8 <tcp_slowtmr+0x3cc>
    if (pcb->ooseq != NULL &&
 8008b5a:	6f67      	ldr	r7, [r4, #116]	@ 0x74
 8008b5c:	2f00      	cmp	r7, #0
 8008b5e:	d197      	bne.n	8008a90 <tcp_slowtmr+0x1a4>
 8008b60:	46ba      	mov	sl, r7
 8008b62:	e77c      	b.n	8008a5e <tcp_slowtmr+0x172>
        tcp_active_pcbs_changed = 0;
 8008b64:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 8008ba8 <tcp_slowtmr+0x2bc>
        TCP_EVENT_POLL(prev, err);
 8008b68:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
        prev->polltmr = 0;
 8008b6c:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8008b70:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 8008b74:	b153      	cbz	r3, 8008b8c <tcp_slowtmr+0x2a0>
 8008b76:	4621      	mov	r1, r4
 8008b78:	6920      	ldr	r0, [r4, #16]
 8008b7a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8008b7c:	f899 3000 	ldrb.w	r3, [r9]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f47f aec0 	bne.w	8008906 <tcp_slowtmr+0x1a>
        if (err == ERR_OK) {
 8008b86:	2800      	cmp	r0, #0
 8008b88:	f47f af74 	bne.w	8008a74 <tcp_slowtmr+0x188>
          tcp_output(prev);
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f003 f9d5 	bl	800bf3c <tcp_output>
 8008b92:	e76f      	b.n	8008a74 <tcp_slowtmr+0x188>
 8008b94:	24010560 	.word	0x24010560
 8008b98:	2401054d 	.word	0x2401054d
 8008b9c:	24010554 	.word	0x24010554
 8008ba0:	000a4cb8 	.word	0x000a4cb8
 8008ba4:	10624dd3 	.word	0x10624dd3
 8008ba8:	2401054f 	.word	0x2401054f
 8008bac:	24010550 	.word	0x24010550
 8008bb0:	0800fffc 	.word	0x0800fffc
 8008bb4:	0800f2f8 	.word	0x0800f2f8
 8008bb8:	0800ff74 	.word	0x0800ff74
 8008bbc:	0800ffa0 	.word	0x0800ffa0
 8008bc0:	0800ffcc 	.word	0x0800ffcc
 8008bc4:	000124f8 	.word	0x000124f8
 8008bc8:	0800fcac 	.word	0x0800fcac
 8008bcc:	080100c0 	.word	0x080100c0
 8008bd0:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 8008bd2:	463c      	mov	r4, r7
    struct tcp_seg *next = seg->next;
 8008bd4:	683f      	ldr	r7, [r7, #0]
    if (seg->p != NULL) {
 8008bd6:	6860      	ldr	r0, [r4, #4]
 8008bd8:	b108      	cbz	r0, 8008bde <tcp_slowtmr+0x2f2>
      pbuf_free(seg->p);
 8008bda:	f7fe ff61 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008bde:	4621      	mov	r1, r4
 8008be0:	2003      	movs	r0, #3
 8008be2:	f7fe fc53 	bl	800748c <memp_free>
  while (seg != NULL) {
 8008be6:	2f00      	cmp	r7, #0
 8008be8:	d1f3      	bne.n	8008bd2 <tcp_slowtmr+0x2e6>
    pcb->ooseq = NULL;
 8008bea:	9c05      	ldr	r4, [sp, #20]
 8008bec:	6767      	str	r7, [r4, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008bee:	e6d8      	b.n	80089a2 <tcp_slowtmr+0xb6>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008bf0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	@ 0x30
 8008bf4:	f647 70fe 	movw	r0, #32766	@ 0x7ffe
 8008bf8:	b291      	uxth	r1, r2
 8008bfa:	4281      	cmp	r1, r0
 8008bfc:	d802      	bhi.n	8008c04 <tcp_slowtmr+0x318>
          ++pcb->rtime;
 8008bfe:	3101      	adds	r1, #1
 8008c00:	b20a      	sxth	r2, r1
 8008c02:	8622      	strh	r2, [r4, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008c04:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	@ 0x40
 8008c08:	4291      	cmp	r1, r2
 8008c0a:	f73f ae9e 	bgt.w	800894a <tcp_slowtmr+0x5e>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f003 f858 	bl	800bcc4 <tcp_rexmit_rto_prepare>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f040 80db 	bne.w	8008dd0 <tcp_slowtmr+0x4e4>
 8008c1a:	7d22      	ldrb	r2, [r4, #20]
            if (pcb->state != SYN_SENT) {
 8008c1c:	2a02      	cmp	r2, #2
 8008c1e:	d014      	beq.n	8008c4a <tcp_slowtmr+0x35e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008c20:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008c24:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	@ 0x3c
 8008c28:	2a0c      	cmp	r2, #12
 8008c2a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	@ 0x3e
 8008c2e:	bf28      	it	cs
 8008c30:	220c      	movcs	r2, #12
 8008c32:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008c36:	4974      	ldr	r1, [pc, #464]	@ (8008e08 <tcp_slowtmr+0x51c>)
 8008c38:	5c8a      	ldrb	r2, [r1, r2]
 8008c3a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008c3c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bfa8      	it	ge
 8008c44:	4613      	movge	r3, r2
 8008c46:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c4a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
            tcp_rexmit_rto_commit(pcb);
 8008c4c:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008c4e:	f8b4 1048 	ldrh.w	r1, [r4, #72]	@ 0x48
            pcb->cwnd = pcb->mss;
 8008c52:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	b29a      	uxth	r2, r3
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008c5a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
            pcb->ssthresh = eff_wnd >> 1;
 8008c5e:	428b      	cmp	r3, r1
 8008c60:	bf28      	it	cs
 8008c62:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	4293      	cmp	r3, r2
 8008c68:	bf38      	it	cc
 8008c6a:	4613      	movcc	r3, r2
 8008c6c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
            pcb->rtime = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	8623      	strh	r3, [r4, #48]	@ 0x30
            pcb->bytes_acked = 0;
 8008c74:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008c78:	f003 fb32 	bl	800c2e0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008c7c:	7d23      	ldrb	r3, [r4, #20]
 8008c7e:	e664      	b.n	800894a <tcp_slowtmr+0x5e>
 8008c80:	46ba      	mov	sl, r7
 8008c82:	e68e      	b.n	80089a2 <tcp_slowtmr+0xb6>
      tcp_pcb_purge(pcb);
 8008c84:	4620      	mov	r0, r4
 8008c86:	f7ff fddf 	bl	8008848 <tcp_pcb_purge>
      if (prev != NULL) {
 8008c8a:	2e00      	cmp	r6, #0
 8008c8c:	d07f      	beq.n	8008d8e <tcp_slowtmr+0x4a2>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	429c      	cmp	r4, r3
 8008c92:	f000 80a8 	beq.w	8008de6 <tcp_slowtmr+0x4fa>
        prev->next = pcb->next;
 8008c96:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 8008c9a:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c9e:	7d23      	ldrb	r3, [r4, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	f000 8086 	beq.w	8008db2 <tcp_slowtmr+0x4c6>
  memp_free(MEMP_TCP_PCB, pcb);
 8008ca6:	4621      	mov	r1, r4
      pcb = pcb->next;
 8008ca8:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 8008caa:	2001      	movs	r0, #1
 8008cac:	f7fe fbee 	bl	800748c <memp_free>
  while (pcb != NULL) {
 8008cb0:	2c00      	cmp	r4, #0
 8008cb2:	f47f aeb8 	bne.w	8008a26 <tcp_slowtmr+0x13a>
 8008cb6:	e6ca      	b.n	8008a4e <tcp_slowtmr+0x162>
        err = tcp_keepalive(pcb);
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f003 fb5d 	bl	800c378 <tcp_keepalive>
        if (err == ERR_OK) {
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f47f aee2 	bne.w	8008a88 <tcp_slowtmr+0x19c>
          pcb->keep_cnt_sent++;
 8008cc4:	f894 309b 	ldrb.w	r3, [r4, #155]	@ 0x9b
 8008cc8:	3301      	adds	r3, #1
 8008cca:	f884 309b 	strb.w	r3, [r4, #155]	@ 0x9b
 8008cce:	e6db      	b.n	8008a88 <tcp_slowtmr+0x19c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cd0:	8b23      	ldrh	r3, [r4, #24]
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008cd6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8008cd8:	9302      	str	r3, [sp, #8]
 8008cda:	8ae3      	ldrh	r3, [r4, #22]
 8008cdc:	9301      	str	r3, [sp, #4]
 8008cde:	1d23      	adds	r3, r4, #4
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	f003 f8b0 	bl	800be48 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008ce8:	7d23      	ldrb	r3, [r4, #20]
 8008cea:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 8008cec:	e9d4 a803 	ldrd	sl, r8, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008cf0:	f47f ae7c 	bne.w	80089ec <tcp_slowtmr+0x100>
 8008cf4:	465b      	mov	r3, fp
 8008cf6:	22d4      	movs	r2, #212	@ 0xd4
 8008cf8:	4944      	ldr	r1, [pc, #272]	@ (8008e0c <tcp_slowtmr+0x520>)
 8008cfa:	4845      	ldr	r0, [pc, #276]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008cfc:	f005 fb76 	bl	800e3ec <iprintf>
 8008d00:	e674      	b.n	80089ec <tcp_slowtmr+0x100>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008d02:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 8008d06:	4a43      	ldr	r2, [pc, #268]	@ (8008e14 <tcp_slowtmr+0x528>)
 8008d08:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 8008d0a:	f894 3098 	ldrb.w	r3, [r4, #152]	@ 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008d0e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d216      	bcs.n	8008d44 <tcp_slowtmr+0x458>
            pcb->persist_cnt++;
 8008d16:	3301      	adds	r3, #1
 8008d18:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 8008d1a:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 8008d1c:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8008d20:	d210      	bcs.n	8008d44 <tcp_slowtmr+0x458>
    if (pcb->state == FIN_WAIT_2) {
 8008d22:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	e60f      	b.n	800894a <tcp_slowtmr+0x5e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	d006      	beq.n	8008d3c <tcp_slowtmr+0x450>
 8008d2e:	465b      	mov	r3, fp
 8008d30:	f240 5271 	movw	r2, #1393	@ 0x571
 8008d34:	4938      	ldr	r1, [pc, #224]	@ (8008e18 <tcp_slowtmr+0x52c>)
 8008d36:	4836      	ldr	r0, [pc, #216]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008d38:	f005 fb58 	bl	800e3ec <iprintf>
        tcp_active_pcbs = pcb->next;
 8008d3c:	68e3      	ldr	r3, [r4, #12]
 8008d3e:	4a37      	ldr	r2, [pc, #220]	@ (8008e1c <tcp_slowtmr+0x530>)
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	e649      	b.n	80089d8 <tcp_slowtmr+0xec>
            if (pcb->snd_wnd == 0) {
 8008d44:	f8b4 7060 	ldrh.w	r7, [r4, #96]	@ 0x60
 8008d48:	b937      	cbnz	r7, 8008d58 <tcp_slowtmr+0x46c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f003 fb3a 	bl	800c3c4 <tcp_zero_window_probe>
 8008d50:	b140      	cbz	r0, 8008d64 <tcp_slowtmr+0x478>
    pcb_remove = 0;
 8008d52:	46b8      	mov	r8, r7
    if (pcb->state == FIN_WAIT_2) {
 8008d54:	7d23      	ldrb	r3, [r4, #20]
 8008d56:	e5f8      	b.n	800894a <tcp_slowtmr+0x5e>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8008d58:	4639      	mov	r1, r7
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f002 fdfa 	bl	800b954 <tcp_split_unsent_seg>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d048      	beq.n	8008df6 <tcp_slowtmr+0x50a>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d64:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
              pcb->persist_cnt = 0;
 8008d68:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008d6c:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8008d6e:	f884 8098 	strb.w	r8, [r4, #152]	@ 0x98
                pcb->persist_backoff++;
 8008d72:	bf9c      	itt	ls
 8008d74:	3301      	addls	r3, #1
 8008d76:	f884 3099 	strbls.w	r3, [r4, #153]	@ 0x99
    if (pcb->state == FIN_WAIT_2) {
 8008d7a:	7d23      	ldrb	r3, [r4, #20]
 8008d7c:	e5e5      	b.n	800894a <tcp_slowtmr+0x5e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008d7e:	4b28      	ldr	r3, [pc, #160]	@ (8008e20 <tcp_slowtmr+0x534>)
 8008d80:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008d84:	4927      	ldr	r1, [pc, #156]	@ (8008e24 <tcp_slowtmr+0x538>)
 8008d86:	4822      	ldr	r0, [pc, #136]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008d88:	f005 fb30 	bl	800e3ec <iprintf>
 8008d8c:	e621      	b.n	80089d2 <tcp_slowtmr+0xe6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d006      	beq.n	8008da2 <tcp_slowtmr+0x4b6>
 8008d94:	4b22      	ldr	r3, [pc, #136]	@ (8008e20 <tcp_slowtmr+0x534>)
 8008d96:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008d9a:	4923      	ldr	r1, [pc, #140]	@ (8008e28 <tcp_slowtmr+0x53c>)
 8008d9c:	481c      	ldr	r0, [pc, #112]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008d9e:	f005 fb25 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008da2:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 8008da4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008da8:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 8008daa:	f8c7 b000 	str.w	fp, [r7]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008dae:	f47f af7a 	bne.w	8008ca6 <tcp_slowtmr+0x3ba>
 8008db2:	4b1b      	ldr	r3, [pc, #108]	@ (8008e20 <tcp_slowtmr+0x534>)
 8008db4:	22d4      	movs	r2, #212	@ 0xd4
 8008db6:	4915      	ldr	r1, [pc, #84]	@ (8008e0c <tcp_slowtmr+0x520>)
 8008db8:	4815      	ldr	r0, [pc, #84]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008dba:	f005 fb17 	bl	800e3ec <iprintf>
 8008dbe:	e772      	b.n	8008ca6 <tcp_slowtmr+0x3ba>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008dc0:	4b17      	ldr	r3, [pc, #92]	@ (8008e20 <tcp_slowtmr+0x534>)
 8008dc2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008dc6:	4919      	ldr	r1, [pc, #100]	@ (8008e2c <tcp_slowtmr+0x540>)
 8008dc8:	4811      	ldr	r0, [pc, #68]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008dca:	f005 fb0f 	bl	800e3ec <iprintf>
 8008dce:	e676      	b.n	8008abe <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8008dd0:	7d23      	ldrb	r3, [r4, #20]
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008dd2:	6f21      	ldr	r1, [r4, #112]	@ 0x70
            if (pcb->state != SYN_SENT) {
 8008dd4:	461a      	mov	r2, r3
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	f47f adb7 	bne.w	800894a <tcp_slowtmr+0x5e>
 8008ddc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8008dde:	2900      	cmp	r1, #0
 8008de0:	f47f af1c 	bne.w	8008c1c <tcp_slowtmr+0x330>
 8008de4:	e5b1      	b.n	800894a <tcp_slowtmr+0x5e>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008de6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e20 <tcp_slowtmr+0x534>)
 8008de8:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008dec:	4910      	ldr	r1, [pc, #64]	@ (8008e30 <tcp_slowtmr+0x544>)
 8008dee:	4808      	ldr	r0, [pc, #32]	@ (8008e10 <tcp_slowtmr+0x524>)
 8008df0:	f005 fafc 	bl	800e3ec <iprintf>
 8008df4:	e74f      	b.n	8008c96 <tcp_slowtmr+0x3aa>
                if (tcp_output(pcb) == ERR_OK) {
 8008df6:	4620      	mov	r0, r4
 8008df8:	f003 f8a0 	bl	800bf3c <tcp_output>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d1b1      	bne.n	8008d64 <tcp_slowtmr+0x478>
    pcb_remove = 0;
 8008e00:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 8008e02:	7d23      	ldrb	r3, [r4, #20]
 8008e04:	e5a1      	b.n	800894a <tcp_slowtmr+0x5e>
 8008e06:	bf00      	nop
 8008e08:	08011b88 	.word	0x08011b88
 8008e0c:	0800fce8 	.word	0x0800fce8
 8008e10:	0800f2f8 	.word	0x0800f2f8
 8008e14:	08011b80 	.word	0x08011b80
 8008e18:	08010094 	.word	0x08010094
 8008e1c:	24010554 	.word	0x24010554
 8008e20:	0800fcac 	.word	0x0800fcac
 8008e24:	08010068 	.word	0x08010068
 8008e28:	08010118 	.word	0x08010118
 8008e2c:	08010030 	.word	0x08010030
 8008e30:	080100f0 	.word	0x080100f0

08008e34 <tcp_pcb_remove>:
{
 8008e34:	b538      	push	{r3, r4, r5, lr}
 8008e36:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008e38:	460c      	mov	r4, r1
 8008e3a:	2900      	cmp	r1, #0
 8008e3c:	d04a      	beq.n	8008ed4 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008e3e:	2d00      	cmp	r5, #0
 8008e40:	d051      	beq.n	8008ee6 <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d032      	beq.n	8008eae <tcp_pcb_remove+0x7a>
 8008e48:	b12b      	cbz	r3, 8008e56 <tcp_pcb_remove+0x22>
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	42a2      	cmp	r2, r4
 8008e4e:	d03e      	beq.n	8008ece <tcp_pcb_remove+0x9a>
 8008e50:	4613      	mov	r3, r2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f9      	bne.n	8008e4a <tcp_pcb_remove+0x16>
 8008e56:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8008e58:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008e5a:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8008e5c:	f7ff fcf4 	bl	8008848 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8008e60:	7d23      	ldrb	r3, [r4, #20]
 8008e62:	2b0a      	cmp	r3, #10
 8008e64:	d02d      	beq.n	8008ec2 <tcp_pcb_remove+0x8e>
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d01d      	beq.n	8008ea6 <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8008e6a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8008e6c:	07da      	lsls	r2, r3, #31
 8008e6e:	d421      	bmi.n	8008eb4 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008e70:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008e72:	b133      	cbz	r3, 8008e82 <tcp_pcb_remove+0x4e>
 8008e74:	4b20      	ldr	r3, [pc, #128]	@ (8008ef8 <tcp_pcb_remove+0xc4>)
 8008e76:	f640 0293 	movw	r2, #2195	@ 0x893
 8008e7a:	4920      	ldr	r1, [pc, #128]	@ (8008efc <tcp_pcb_remove+0xc8>)
 8008e7c:	4820      	ldr	r0, [pc, #128]	@ (8008f00 <tcp_pcb_remove+0xcc>)
 8008e7e:	f005 fab5 	bl	800e3ec <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008e82:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8008e84:	b133      	cbz	r3, 8008e94 <tcp_pcb_remove+0x60>
 8008e86:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef8 <tcp_pcb_remove+0xc4>)
 8008e88:	f640 0294 	movw	r2, #2196	@ 0x894
 8008e8c:	491d      	ldr	r1, [pc, #116]	@ (8008f04 <tcp_pcb_remove+0xd0>)
 8008e8e:	481c      	ldr	r0, [pc, #112]	@ (8008f00 <tcp_pcb_remove+0xcc>)
 8008e90:	f005 faac 	bl	800e3ec <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008e94:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8008e96:	b133      	cbz	r3, 8008ea6 <tcp_pcb_remove+0x72>
 8008e98:	4b17      	ldr	r3, [pc, #92]	@ (8008ef8 <tcp_pcb_remove+0xc4>)
 8008e9a:	f640 0296 	movw	r2, #2198	@ 0x896
 8008e9e:	491a      	ldr	r1, [pc, #104]	@ (8008f08 <tcp_pcb_remove+0xd4>)
 8008ea0:	4817      	ldr	r0, [pc, #92]	@ (8008f00 <tcp_pcb_remove+0xcc>)
 8008ea2:	f005 faa3 	bl	800e3ec <iprintf>
  pcb->state = CLOSED;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008eaa:	82e3      	strh	r3, [r4, #22]
}
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8008eae:	68e3      	ldr	r3, [r4, #12]
 8008eb0:	602b      	str	r3, [r5, #0]
 8008eb2:	e7d0      	b.n	8008e56 <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 8008eb4:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8008eb8:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008eba:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008ebc:	f003 f83e 	bl	800bf3c <tcp_output>
  if (pcb->state != LISTEN) {
 8008ec0:	7d23      	ldrb	r3, [r4, #20]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d0ef      	beq.n	8008ea6 <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008ec6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1d3      	bne.n	8008e74 <tcp_pcb_remove+0x40>
 8008ecc:	e7d9      	b.n	8008e82 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8008ece:	68e2      	ldr	r2, [r4, #12]
 8008ed0:	60da      	str	r2, [r3, #12]
 8008ed2:	e7c0      	b.n	8008e56 <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008ed4:	4b08      	ldr	r3, [pc, #32]	@ (8008ef8 <tcp_pcb_remove+0xc4>)
 8008ed6:	f640 0283 	movw	r2, #2179	@ 0x883
 8008eda:	490c      	ldr	r1, [pc, #48]	@ (8008f0c <tcp_pcb_remove+0xd8>)
 8008edc:	4808      	ldr	r0, [pc, #32]	@ (8008f00 <tcp_pcb_remove+0xcc>)
 8008ede:	f005 fa85 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008ee2:	2d00      	cmp	r5, #0
 8008ee4:	d1ad      	bne.n	8008e42 <tcp_pcb_remove+0xe>
 8008ee6:	4b04      	ldr	r3, [pc, #16]	@ (8008ef8 <tcp_pcb_remove+0xc4>)
 8008ee8:	f640 0284 	movw	r2, #2180	@ 0x884
 8008eec:	4908      	ldr	r1, [pc, #32]	@ (8008f10 <tcp_pcb_remove+0xdc>)
 8008eee:	4804      	ldr	r0, [pc, #16]	@ (8008f00 <tcp_pcb_remove+0xcc>)
 8008ef0:	f005 fa7c 	bl	800e3ec <iprintf>
 8008ef4:	e7a5      	b.n	8008e42 <tcp_pcb_remove+0xe>
 8008ef6:	bf00      	nop
 8008ef8:	0800fcac 	.word	0x0800fcac
 8008efc:	0801017c 	.word	0x0801017c
 8008f00:	0800f2f8 	.word	0x0800f2f8
 8008f04:	08010194 	.word	0x08010194
 8008f08:	080101b0 	.word	0x080101b0
 8008f0c:	08010140 	.word	0x08010140
 8008f10:	0801015c 	.word	0x0801015c

08008f14 <tcp_abandon>:
{
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	4605      	mov	r5, r0
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008f1e:	f7fb f9e3 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008f22:	2d00      	cmp	r5, #0
 8008f24:	f000 80a9 	beq.w	800907a <tcp_abandon+0x166>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008f28:	7d2b      	ldrb	r3, [r5, #20]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	f000 808c 	beq.w	8009048 <tcp_abandon+0x134>
  if (pcb->state == TIME_WAIT) {
 8008f30:	2b0a      	cmp	r3, #10
 8008f32:	f000 8094 	beq.w	800905e <tcp_abandon+0x14a>
    seqno = pcb->snd_nxt;
 8008f36:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
    ackno = pcb->rcv_nxt;
 8008f38:	f8d5 b024 	ldr.w	fp, [r5, #36]	@ 0x24
    errf = pcb->errf;
 8008f3c:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
    errf_arg = pcb->callback_arg;
 8008f40:	f8d5 9010 	ldr.w	r9, [r5, #16]
      if (pcb->local_port != 0) {
 8008f44:	f8b5 8016 	ldrh.w	r8, [r5, #22]
    seqno = pcb->snd_nxt;
 8008f48:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d144      	bne.n	8008fd8 <tcp_abandon+0xc4>
      if (pcb->local_port != 0) {
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	d149      	bne.n	8008fe8 <tcp_abandon+0xd4>
    u16_t local_port = 0;
 8008f54:	f04f 0800 	mov.w	r8, #0
    int send_rst = 0;
 8008f58:	4646      	mov	r6, r8
    if (pcb->unacked != NULL) {
 8008f5a:	6f2c      	ldr	r4, [r5, #112]	@ 0x70
 8008f5c:	b164      	cbz	r4, 8008f78 <tcp_abandon+0x64>
      pbuf_free(seg->p);
 8008f5e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008f60:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008f62:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008f66:	b108      	cbz	r0, 8008f6c <tcp_abandon+0x58>
      pbuf_free(seg->p);
 8008f68:	f7fe fd9a 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008f6c:	4651      	mov	r1, sl
 8008f6e:	2003      	movs	r0, #3
 8008f70:	f7fe fa8c 	bl	800748c <memp_free>
  while (seg != NULL) {
 8008f74:	2c00      	cmp	r4, #0
 8008f76:	d1f2      	bne.n	8008f5e <tcp_abandon+0x4a>
    if (pcb->unsent != NULL) {
 8008f78:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
 8008f7a:	b164      	cbz	r4, 8008f96 <tcp_abandon+0x82>
      pbuf_free(seg->p);
 8008f7c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008f7e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008f80:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008f84:	b108      	cbz	r0, 8008f8a <tcp_abandon+0x76>
      pbuf_free(seg->p);
 8008f86:	f7fe fd8b 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	2003      	movs	r0, #3
 8008f8e:	f7fe fa7d 	bl	800748c <memp_free>
  while (seg != NULL) {
 8008f92:	2c00      	cmp	r4, #0
 8008f94:	d1f2      	bne.n	8008f7c <tcp_abandon+0x68>
    if (pcb->ooseq != NULL) {
 8008f96:	6f6c      	ldr	r4, [r5, #116]	@ 0x74
 8008f98:	b164      	cbz	r4, 8008fb4 <tcp_abandon+0xa0>
      pbuf_free(seg->p);
 8008f9a:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008f9c:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008f9e:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008fa2:	b108      	cbz	r0, 8008fa8 <tcp_abandon+0x94>
      pbuf_free(seg->p);
 8008fa4:	f7fe fd7c 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008fa8:	4651      	mov	r1, sl
 8008faa:	2003      	movs	r0, #3
 8008fac:	f7fe fa6e 	bl	800748c <memp_free>
  while (seg != NULL) {
 8008fb0:	2c00      	cmp	r4, #0
 8008fb2:	d1f2      	bne.n	8008f9a <tcp_abandon+0x86>
    if (send_rst) {
 8008fb4:	bb3e      	cbnz	r6, 8009006 <tcp_abandon+0xf2>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008fb6:	7d2b      	ldrb	r3, [r5, #20]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d033      	beq.n	8009024 <tcp_abandon+0x110>
  memp_free(MEMP_TCP_PCB, pcb);
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	f7fe fa64 	bl	800748c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008fc4:	2f00      	cmp	r7, #0
 8008fc6:	d039      	beq.n	800903c <tcp_abandon+0x128>
 8008fc8:	f06f 010c 	mvn.w	r1, #12
 8008fcc:	4648      	mov	r0, r9
 8008fce:	463b      	mov	r3, r7
}
 8008fd0:	b007      	add	sp, #28
 8008fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008fd6:	4718      	bx	r3
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4830      	ldr	r0, [pc, #192]	@ (800909c <tcp_abandon+0x188>)
 8008fdc:	f7ff ff2a 	bl	8008e34 <tcp_pcb_remove>
 8008fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80090a0 <tcp_abandon+0x18c>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	701a      	strb	r2, [r3, #0]
 8008fe6:	e7b8      	b.n	8008f5a <tcp_abandon+0x46>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80090a4 <tcp_abandon+0x190>)
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	42ab      	cmp	r3, r5
 8008fee:	d028      	beq.n	8009042 <tcp_abandon+0x12e>
 8008ff0:	b133      	cbz	r3, 8009000 <tcp_abandon+0xec>
 8008ff2:	68da      	ldr	r2, [r3, #12]
 8008ff4:	42aa      	cmp	r2, r5
 8008ff6:	d001      	beq.n	8008ffc <tcp_abandon+0xe8>
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	e7f9      	b.n	8008ff0 <tcp_abandon+0xdc>
 8008ffc:	68ea      	ldr	r2, [r5, #12]
 8008ffe:	60da      	str	r2, [r3, #12]
 8009000:	2300      	movs	r3, #0
 8009002:	60eb      	str	r3, [r5, #12]
 8009004:	e7a6      	b.n	8008f54 <tcp_abandon+0x40>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009006:	f8cd 8004 	str.w	r8, [sp, #4]
 800900a:	465a      	mov	r2, fp
 800900c:	8b2b      	ldrh	r3, [r5, #24]
 800900e:	4628      	mov	r0, r5
 8009010:	9905      	ldr	r1, [sp, #20]
 8009012:	9302      	str	r3, [sp, #8]
 8009014:	1d2b      	adds	r3, r5, #4
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462b      	mov	r3, r5
 800901a:	f002 ff15 	bl	800be48 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800901e:	7d2b      	ldrb	r3, [r5, #20]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d1cb      	bne.n	8008fbc <tcp_abandon+0xa8>
 8009024:	4920      	ldr	r1, [pc, #128]	@ (80090a8 <tcp_abandon+0x194>)
 8009026:	22d4      	movs	r2, #212	@ 0xd4
 8009028:	4b20      	ldr	r3, [pc, #128]	@ (80090ac <tcp_abandon+0x198>)
 800902a:	4821      	ldr	r0, [pc, #132]	@ (80090b0 <tcp_abandon+0x19c>)
 800902c:	f005 f9de 	bl	800e3ec <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8009030:	4629      	mov	r1, r5
 8009032:	2001      	movs	r0, #1
 8009034:	f7fe fa2a 	bl	800748c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009038:	2f00      	cmp	r7, #0
 800903a:	d1c5      	bne.n	8008fc8 <tcp_abandon+0xb4>
}
 800903c:	b007      	add	sp, #28
 800903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009042:	68eb      	ldr	r3, [r5, #12]
 8009044:	6013      	str	r3, [r2, #0]
 8009046:	e7db      	b.n	8009000 <tcp_abandon+0xec>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009048:	4b18      	ldr	r3, [pc, #96]	@ (80090ac <tcp_abandon+0x198>)
 800904a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800904e:	4919      	ldr	r1, [pc, #100]	@ (80090b4 <tcp_abandon+0x1a0>)
 8009050:	4817      	ldr	r0, [pc, #92]	@ (80090b0 <tcp_abandon+0x19c>)
 8009052:	f005 f9cb 	bl	800e3ec <iprintf>
  if (pcb->state == TIME_WAIT) {
 8009056:	7d2b      	ldrb	r3, [r5, #20]
 8009058:	2b0a      	cmp	r3, #10
 800905a:	f47f af6c 	bne.w	8008f36 <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800905e:	4629      	mov	r1, r5
 8009060:	4815      	ldr	r0, [pc, #84]	@ (80090b8 <tcp_abandon+0x1a4>)
 8009062:	f7ff fee7 	bl	8008e34 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009066:	7d2b      	ldrb	r3, [r5, #20]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d010      	beq.n	800908e <tcp_abandon+0x17a>
  memp_free(MEMP_TCP_PCB, pcb);
 800906c:	4629      	mov	r1, r5
 800906e:	2001      	movs	r0, #1
}
 8009070:	b007      	add	sp, #28
 8009072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8009076:	f7fe ba09 	b.w	800748c <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800907a:	4b0c      	ldr	r3, [pc, #48]	@ (80090ac <tcp_abandon+0x198>)
 800907c:	f240 223d 	movw	r2, #573	@ 0x23d
 8009080:	490e      	ldr	r1, [pc, #56]	@ (80090bc <tcp_abandon+0x1a8>)
 8009082:	480b      	ldr	r0, [pc, #44]	@ (80090b0 <tcp_abandon+0x19c>)
}
 8009084:	b007      	add	sp, #28
 8009086:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800908a:	f005 b9af 	b.w	800e3ec <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800908e:	4b07      	ldr	r3, [pc, #28]	@ (80090ac <tcp_abandon+0x198>)
 8009090:	22d4      	movs	r2, #212	@ 0xd4
 8009092:	4905      	ldr	r1, [pc, #20]	@ (80090a8 <tcp_abandon+0x194>)
 8009094:	4806      	ldr	r0, [pc, #24]	@ (80090b0 <tcp_abandon+0x19c>)
 8009096:	f005 f9a9 	bl	800e3ec <iprintf>
 800909a:	e7e7      	b.n	800906c <tcp_abandon+0x158>
 800909c:	24010554 	.word	0x24010554
 80090a0:	2401054f 	.word	0x2401054f
 80090a4:	2401055c 	.word	0x2401055c
 80090a8:	0800fce8 	.word	0x0800fce8
 80090ac:	0800fcac 	.word	0x0800fcac
 80090b0:	0800f2f8 	.word	0x0800f2f8
 80090b4:	080101e4 	.word	0x080101e4
 80090b8:	24010550 	.word	0x24010550
 80090bc:	080101c8 	.word	0x080101c8

080090c0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80090c0:	2101      	movs	r1, #1
 80090c2:	f7ff bf27 	b.w	8008f14 <tcp_abandon>
 80090c6:	bf00      	nop

080090c8 <tcp_accept_null>:
{
 80090c8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80090ca:	460c      	mov	r4, r1
 80090cc:	b131      	cbz	r1, 80090dc <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 80090ce:	4620      	mov	r0, r4
 80090d0:	2101      	movs	r1, #1
 80090d2:	f7ff ff1f 	bl	8008f14 <tcp_abandon>
}
 80090d6:	f06f 000c 	mvn.w	r0, #12
 80090da:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80090dc:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <tcp_accept_null+0x30>)
 80090de:	f240 320f 	movw	r2, #783	@ 0x30f
 80090e2:	4906      	ldr	r1, [pc, #24]	@ (80090fc <tcp_accept_null+0x34>)
 80090e4:	4806      	ldr	r0, [pc, #24]	@ (8009100 <tcp_accept_null+0x38>)
 80090e6:	f005 f981 	bl	800e3ec <iprintf>
  tcp_abandon(pcb, 1);
 80090ea:	4620      	mov	r0, r4
 80090ec:	2101      	movs	r1, #1
 80090ee:	f7ff ff11 	bl	8008f14 <tcp_abandon>
}
 80090f2:	f06f 000c 	mvn.w	r0, #12
 80090f6:	bd10      	pop	{r4, pc}
 80090f8:	0800fcac 	.word	0x0800fcac
 80090fc:	08010218 	.word	0x08010218
 8009100:	0800f2f8 	.word	0x0800f2f8

08009104 <tcp_netif_ip_addr_changed_pcblist>:
{
 8009104:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009106:	4605      	mov	r5, r0
{
 8009108:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800910a:	b160      	cbz	r0, 8009126 <tcp_netif_ip_addr_changed_pcblist+0x22>
  while (pcb != NULL) {
 800910c:	b154      	cbz	r4, 8009124 <tcp_netif_ip_addr_changed_pcblist+0x20>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	4620      	mov	r0, r4
 8009112:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 8009114:	68e4      	ldr	r4, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009116:	429a      	cmp	r2, r3
 8009118:	d1f8      	bne.n	800910c <tcp_netif_ip_addr_changed_pcblist+0x8>
  tcp_abandon(pcb, 1);
 800911a:	2101      	movs	r1, #1
 800911c:	f7ff fefa 	bl	8008f14 <tcp_abandon>
  while (pcb != NULL) {
 8009120:	2c00      	cmp	r4, #0
 8009122:	d1f4      	bne.n	800910e <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8009124:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009126:	4b04      	ldr	r3, [pc, #16]	@ (8009138 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8009128:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800912c:	4903      	ldr	r1, [pc, #12]	@ (800913c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800912e:	4804      	ldr	r0, [pc, #16]	@ (8009140 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8009130:	f005 f95c 	bl	800e3ec <iprintf>
 8009134:	e7ea      	b.n	800910c <tcp_netif_ip_addr_changed_pcblist+0x8>
 8009136:	bf00      	nop
 8009138:	0800fcac 	.word	0x0800fcac
 800913c:	08010238 	.word	0x08010238
 8009140:	0800f2f8 	.word	0x0800f2f8

08009144 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009144:	4b10      	ldr	r3, [pc, #64]	@ (8009188 <tcp_kill_state+0x44>)
 8009146:	6819      	ldr	r1, [r3, #0]
 8009148:	b1e9      	cbz	r1, 8009186 <tcp_kill_state+0x42>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800914a:	4b10      	ldr	r3, [pc, #64]	@ (800918c <tcp_kill_state+0x48>)
  inactivity = 0;
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	4602      	mov	r2, r0
  inactive = NULL;
 8009152:	4660      	mov	r0, ip
{
 8009154:	b410      	push	{r4}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009156:	681c      	ldr	r4, [r3, #0]
 8009158:	e001      	b.n	800915e <tcp_kill_state+0x1a>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800915a:	68c9      	ldr	r1, [r1, #12]
 800915c:	b159      	cbz	r1, 8009176 <tcp_kill_state+0x32>
    if (pcb->state == state) {
 800915e:	7d0b      	ldrb	r3, [r1, #20]
 8009160:	4293      	cmp	r3, r2
 8009162:	d1fa      	bne.n	800915a <tcp_kill_state+0x16>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009164:	6a0b      	ldr	r3, [r1, #32]
 8009166:	1ae3      	subs	r3, r4, r3
 8009168:	459c      	cmp	ip, r3
 800916a:	d8f6      	bhi.n	800915a <tcp_kill_state+0x16>
        inactive = pcb;
 800916c:	4608      	mov	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800916e:	68c9      	ldr	r1, [r1, #12]
        inactivity = tcp_ticks - pcb->tmr;
 8009170:	469c      	mov	ip, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009172:	2900      	cmp	r1, #0
 8009174:	d1f3      	bne.n	800915e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8009176:	b118      	cbz	r0, 8009180 <tcp_kill_state+0x3c>
}
 8009178:	f85d 4b04 	ldr.w	r4, [sp], #4
    tcp_abandon(inactive, 0);
 800917c:	f7ff beca 	b.w	8008f14 <tcp_abandon>
}
 8009180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	4770      	bx	lr
 8009188:	24010554 	.word	0x24010554
 800918c:	24010560 	.word	0x24010560

08009190 <tcp_alloc>:
{
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	4606      	mov	r6, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009194:	f7fb f8a8 	bl	80042e8 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009198:	2001      	movs	r0, #1
 800919a:	f7fe f931 	bl	8007400 <memp_malloc>
  if (pcb == NULL) {
 800919e:	4604      	mov	r4, r0
 80091a0:	b318      	cbz	r0, 80091ea <tcp_alloc+0x5a>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80091a2:	229c      	movs	r2, #156	@ 0x9c
 80091a4:	2100      	movs	r1, #0
 80091a6:	4620      	mov	r0, r4
 80091a8:	f005 f942 	bl	800e430 <memset>
    pcb->tmr = tcp_ticks;
 80091ac:	4b42      	ldr	r3, [pc, #264]	@ (80092b8 <tcp_alloc+0x128>)
    pcb->last_timer = tcp_timer_ctr;
 80091ae:	4943      	ldr	r1, [pc, #268]	@ (80092bc <tcp_alloc+0x12c>)
    pcb->snd_buf = TCP_SND_BUF;
 80091b0:	f241 60d0 	movw	r0, #5840	@ 0x16d0
    pcb->tmr = tcp_ticks;
 80091b4:	681a      	ldr	r2, [r3, #0]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80091b6:	4b42      	ldr	r3, [pc, #264]	@ (80092c0 <tcp_alloc+0x130>)
    pcb->last_timer = tcp_timer_ctr;
 80091b8:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 80091ba:	6222      	str	r2, [r4, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80091bc:	62a3      	str	r3, [r4, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80091be:	23ff      	movs	r3, #255	@ 0xff
    pcb->cwnd = 1;
 80091c0:	4a40      	ldr	r2, [pc, #256]	@ (80092c4 <tcp_alloc+0x134>)
    pcb->snd_buf = TCP_SND_BUF;
 80091c2:	f8a4 0064 	strh.w	r0, [r4, #100]	@ 0x64
    pcb->last_timer = tcp_timer_ctr;
 80091c6:	77a1      	strb	r1, [r4, #30]
    pcb->recv = tcp_recv_null;
 80091c8:	483f      	ldr	r0, [pc, #252]	@ (80092c8 <tcp_alloc+0x138>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80091ca:	4940      	ldr	r1, [pc, #256]	@ (80092cc <tcp_alloc+0x13c>)
    pcb->cwnd = 1;
 80091cc:	64a2      	str	r2, [r4, #72]	@ 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80091ce:	f04f 1206 	mov.w	r2, #393222	@ 0x60006
    pcb->ttl = TCP_TTL;
 80091d2:	72e3      	strb	r3, [r4, #11]
    pcb->rtime = -1;
 80091d4:	4b3e      	ldr	r3, [pc, #248]	@ (80092d0 <tcp_alloc+0x140>)
    pcb->prio = prio;
 80091d6:	7566      	strb	r6, [r4, #21]
    pcb->recv = tcp_recv_null;
 80091d8:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80091dc:	f8c4 1094 	str.w	r1, [r4, #148]	@ 0x94
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80091e0:	f8c4 203e 	str.w	r2, [r4, #62]	@ 0x3e
    pcb->rtime = -1;
 80091e4:	6323      	str	r3, [r4, #48]	@ 0x30
}
 80091e6:	4620      	mov	r0, r4
 80091e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80091ea:	4f3a      	ldr	r7, [pc, #232]	@ (80092d4 <tcp_alloc+0x144>)
 80091ec:	683d      	ldr	r5, [r7, #0]
  while (pcb != NULL) {
 80091ee:	b15d      	cbz	r5, 8009208 <tcp_alloc+0x78>
    struct tcp_pcb *next = pcb->next;
 80091f0:	4628      	mov	r0, r5
 80091f2:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80091f4:	8b43      	ldrh	r3, [r0, #26]
 80091f6:	071a      	lsls	r2, r3, #28
 80091f8:	d5f9      	bpl.n	80091ee <tcp_alloc+0x5e>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80091fa:	f023 0308 	bic.w	r3, r3, #8
 80091fe:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009200:	f7fe ffd2 	bl	80081a8 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8009204:	2d00      	cmp	r5, #0
 8009206:	d1f3      	bne.n	80091f0 <tcp_alloc+0x60>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009208:	4b33      	ldr	r3, [pc, #204]	@ (80092d8 <tcp_alloc+0x148>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	b183      	cbz	r3, 8009230 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800920e:	4a2a      	ldr	r2, [pc, #168]	@ (80092b8 <tcp_alloc+0x128>)
  inactivity = 0;
 8009210:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009212:	6810      	ldr	r0, [r2, #0]
 8009214:	6a1a      	ldr	r2, [r3, #32]
 8009216:	1a82      	subs	r2, r0, r2
 8009218:	4291      	cmp	r1, r2
 800921a:	d801      	bhi.n	8009220 <tcp_alloc+0x90>
      inactive = pcb;
 800921c:	461c      	mov	r4, r3
      inactivity = tcp_ticks - pcb->tmr;
 800921e:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d1f6      	bne.n	8009214 <tcp_alloc+0x84>
  if (inactive != NULL) {
 8009226:	b11c      	cbz	r4, 8009230 <tcp_alloc+0xa0>
  tcp_abandon(pcb, 1);
 8009228:	2101      	movs	r1, #1
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff fe72 	bl	8008f14 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009230:	2001      	movs	r0, #1
 8009232:	f7fe f8e5 	bl	8007400 <memp_malloc>
    if (pcb == NULL) {
 8009236:	4604      	mov	r4, r0
 8009238:	2800      	cmp	r0, #0
 800923a:	d1b2      	bne.n	80091a2 <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 800923c:	2009      	movs	r0, #9
 800923e:	f7ff ff81 	bl	8009144 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009242:	2001      	movs	r0, #1
 8009244:	f7fe f8dc 	bl	8007400 <memp_malloc>
      if (pcb == NULL) {
 8009248:	4604      	mov	r4, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d1a9      	bne.n	80091a2 <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 800924e:	2008      	movs	r0, #8
 8009250:	f7ff ff78 	bl	8009144 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009254:	2001      	movs	r0, #1
 8009256:	f7fe f8d3 	bl	8007400 <memp_malloc>
        if (pcb == NULL) {
 800925a:	4604      	mov	r4, r0
 800925c:	2800      	cmp	r0, #0
 800925e:	d1a0      	bne.n	80091a2 <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009260:	0633      	lsls	r3, r6, #24
 8009262:	d426      	bmi.n	80092b2 <tcp_alloc+0x122>
  if (mprio == 0) {
 8009264:	b1ee      	cbz	r6, 80092a2 <tcp_alloc+0x112>
 8009266:	4633      	mov	r3, r6
  mprio--;
 8009268:	1e5a      	subs	r2, r3, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800926a:	683b      	ldr	r3, [r7, #0]
  mprio--;
 800926c:	b2d2      	uxtb	r2, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800926e:	b1c3      	cbz	r3, 80092a2 <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009270:	4911      	ldr	r1, [pc, #68]	@ (80092b8 <tcp_alloc+0x128>)
  inactivity = 0;
 8009272:	2500      	movs	r5, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009274:	680f      	ldr	r7, [r1, #0]
 8009276:	e005      	b.n	8009284 <tcp_alloc+0xf4>
 8009278:	6a18      	ldr	r0, [r3, #32]
      inactivity = tcp_ticks - pcb->tmr;
 800927a:	1a3d      	subs	r5, r7, r0
      mprio      = pcb->prio;
 800927c:	460a      	mov	r2, r1
      inactive   = pcb;
 800927e:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	b14b      	cbz	r3, 8009298 <tcp_alloc+0x108>
    if ((pcb->prio < mprio) ||
 8009284:	7d59      	ldrb	r1, [r3, #21]
 8009286:	428a      	cmp	r2, r1
 8009288:	d8f6      	bhi.n	8009278 <tcp_alloc+0xe8>
 800928a:	d1f9      	bne.n	8009280 <tcp_alloc+0xf0>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800928c:	6a18      	ldr	r0, [r3, #32]
 800928e:	eba7 0c00 	sub.w	ip, r7, r0
 8009292:	4565      	cmp	r5, ip
 8009294:	d8f4      	bhi.n	8009280 <tcp_alloc+0xf0>
 8009296:	e7f0      	b.n	800927a <tcp_alloc+0xea>
  if (inactive != NULL) {
 8009298:	b11c      	cbz	r4, 80092a2 <tcp_alloc+0x112>
  tcp_abandon(pcb, 1);
 800929a:	2101      	movs	r1, #1
 800929c:	4620      	mov	r0, r4
 800929e:	f7ff fe39 	bl	8008f14 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80092a2:	2001      	movs	r0, #1
 80092a4:	f7fe f8ac 	bl	8007400 <memp_malloc>
  if (pcb != NULL) {
 80092a8:	4604      	mov	r4, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	f47f af79 	bne.w	80091a2 <tcp_alloc+0x12>
 80092b0:	e799      	b.n	80091e6 <tcp_alloc+0x56>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80092b2:	237f      	movs	r3, #127	@ 0x7f
 80092b4:	e7d8      	b.n	8009268 <tcp_alloc+0xd8>
 80092b6:	bf00      	nop
 80092b8:	24010560 	.word	0x24010560
 80092bc:	2401054d 	.word	0x2401054d
 80092c0:	16d016d0 	.word	0x16d016d0
 80092c4:	16d00001 	.word	0x16d00001
 80092c8:	080094c5 	.word	0x080094c5
 80092cc:	006ddd00 	.word	0x006ddd00
 80092d0:	0218ffff 	.word	0x0218ffff
 80092d4:	24010554 	.word	0x24010554
 80092d8:	24010550 	.word	0x24010550

080092dc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80092dc:	2040      	movs	r0, #64	@ 0x40
 80092de:	f7ff bf57 	b.w	8009190 <tcp_alloc>
 80092e2:	bf00      	nop

080092e4 <tcp_close_shutdown>:
{
 80092e4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80092e6:	4604      	mov	r4, r0
{
 80092e8:	b085      	sub	sp, #20
 80092ea:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80092ec:	2800      	cmp	r0, #0
 80092ee:	f000 808a 	beq.w	8009406 <tcp_close_shutdown+0x122>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80092f2:	7d23      	ldrb	r3, [r4, #20]
 80092f4:	b11d      	cbz	r5, 80092fe <tcp_close_shutdown+0x1a>
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d022      	beq.n	8009340 <tcp_close_shutdown+0x5c>
 80092fa:	2b07      	cmp	r3, #7
 80092fc:	d020      	beq.n	8009340 <tcp_close_shutdown+0x5c>
  switch (pcb->state) {
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d03e      	beq.n	8009380 <tcp_close_shutdown+0x9c>
 8009302:	2b02      	cmp	r3, #2
 8009304:	d00b      	beq.n	800931e <tcp_close_shutdown+0x3a>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d15e      	bne.n	80093c8 <tcp_close_shutdown+0xe4>
      if (pcb->local_port != 0) {
 800930a:	8ae3      	ldrh	r3, [r4, #22]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d161      	bne.n	80093d4 <tcp_close_shutdown+0xf0>
  memp_free(MEMP_TCP_PCB, pcb);
 8009310:	4621      	mov	r1, r4
 8009312:	2001      	movs	r0, #1
 8009314:	f7fe f8ba 	bl	800748c <memp_free>
}
 8009318:	2000      	movs	r0, #0
 800931a:	b005      	add	sp, #20
 800931c:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800931e:	4621      	mov	r1, r4
 8009320:	484b      	ldr	r0, [pc, #300]	@ (8009450 <tcp_close_shutdown+0x16c>)
 8009322:	f7ff fd87 	bl	8008e34 <tcp_pcb_remove>
 8009326:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009328:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800932a:	4a4a      	ldr	r2, [pc, #296]	@ (8009454 <tcp_close_shutdown+0x170>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800932c:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800932e:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009330:	d1ee      	bne.n	8009310 <tcp_close_shutdown+0x2c>
 8009332:	4b49      	ldr	r3, [pc, #292]	@ (8009458 <tcp_close_shutdown+0x174>)
 8009334:	22d4      	movs	r2, #212	@ 0xd4
 8009336:	4949      	ldr	r1, [pc, #292]	@ (800945c <tcp_close_shutdown+0x178>)
 8009338:	4849      	ldr	r0, [pc, #292]	@ (8009460 <tcp_close_shutdown+0x17c>)
 800933a:	f005 f857 	bl	800e3ec <iprintf>
 800933e:	e7e7      	b.n	8009310 <tcp_close_shutdown+0x2c>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009340:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8009342:	2b00      	cmp	r3, #0
 8009344:	d03b      	beq.n	80093be <tcp_close_shutdown+0xda>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009346:	8b63      	ldrh	r3, [r4, #26]
 8009348:	06db      	lsls	r3, r3, #27
 800934a:	d56c      	bpl.n	8009426 <tcp_close_shutdown+0x142>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800934c:	8b21      	ldrh	r1, [r4, #24]
 800934e:	1d20      	adds	r0, r4, #4
 8009350:	8ae2      	ldrh	r2, [r4, #22]
 8009352:	4623      	mov	r3, r4
 8009354:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009358:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800935a:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800935c:	9000      	str	r0, [sp, #0]
 800935e:	4620      	mov	r0, r4
 8009360:	f002 fd72 	bl	800be48 <tcp_rst>
      tcp_pcb_purge(pcb);
 8009364:	4620      	mov	r0, r4
 8009366:	f7ff fa6f 	bl	8008848 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800936a:	4a39      	ldr	r2, [pc, #228]	@ (8009450 <tcp_close_shutdown+0x16c>)
 800936c:	6813      	ldr	r3, [r2, #0]
 800936e:	42a3      	cmp	r3, r4
 8009370:	d03a      	beq.n	80093e8 <tcp_close_shutdown+0x104>
 8009372:	2b00      	cmp	r3, #0
 8009374:	d03a      	beq.n	80093ec <tcp_close_shutdown+0x108>
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	42a2      	cmp	r2, r4
 800937a:	d051      	beq.n	8009420 <tcp_close_shutdown+0x13c>
 800937c:	4613      	mov	r3, r2
 800937e:	e7f8      	b.n	8009372 <tcp_close_shutdown+0x8e>
 8009380:	4938      	ldr	r1, [pc, #224]	@ (8009464 <tcp_close_shutdown+0x180>)
      pcb->listener = NULL;
 8009382:	2000      	movs	r0, #0
 8009384:	f101 050c 	add.w	r5, r1, #12
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009388:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800938c:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800938e:	b133      	cbz	r3, 800939e <tcp_close_shutdown+0xba>
    if (pcb->listener == lpcb) {
 8009390:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009392:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8009394:	bf08      	it	eq
 8009396:	67d8      	streq	r0, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1f8      	bne.n	8009390 <tcp_close_shutdown+0xac>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800939e:	428d      	cmp	r5, r1
 80093a0:	d1f2      	bne.n	8009388 <tcp_close_shutdown+0xa4>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80093a2:	4621      	mov	r1, r4
 80093a4:	4830      	ldr	r0, [pc, #192]	@ (8009468 <tcp_close_shutdown+0x184>)
 80093a6:	f7ff fd45 	bl	8008e34 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80093aa:	7d23      	ldrb	r3, [r4, #20]
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d045      	beq.n	800943c <tcp_close_shutdown+0x158>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80093b0:	4621      	mov	r1, r4
 80093b2:	2002      	movs	r0, #2
 80093b4:	f7fe f86a 	bl	800748c <memp_free>
}
 80093b8:	2000      	movs	r0, #0
 80093ba:	b005      	add	sp, #20
 80093bc:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80093be:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 80093c0:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d1be      	bne.n	8009346 <tcp_close_shutdown+0x62>
      return tcp_close_shutdown_fin(pcb);
 80093c8:	4620      	mov	r0, r4
}
 80093ca:	b005      	add	sp, #20
 80093cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80093d0:	f7fe beea 	b.w	80081a8 <tcp_close_shutdown_fin>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80093d4:	4a25      	ldr	r2, [pc, #148]	@ (800946c <tcp_close_shutdown+0x188>)
 80093d6:	6813      	ldr	r3, [r2, #0]
 80093d8:	42a3      	cmp	r3, r4
 80093da:	d036      	beq.n	800944a <tcp_close_shutdown+0x166>
 80093dc:	b1eb      	cbz	r3, 800941a <tcp_close_shutdown+0x136>
 80093de:	68da      	ldr	r2, [r3, #12]
 80093e0:	42a2      	cmp	r2, r4
 80093e2:	d018      	beq.n	8009416 <tcp_close_shutdown+0x132>
 80093e4:	4613      	mov	r3, r2
 80093e6:	e7f9      	b.n	80093dc <tcp_close_shutdown+0xf8>
      TCP_RMV_ACTIVE(pcb);
 80093e8:	68e3      	ldr	r3, [r4, #12]
 80093ea:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80093ec:	4b20      	ldr	r3, [pc, #128]	@ (8009470 <tcp_close_shutdown+0x18c>)
      TCP_RMV_ACTIVE(pcb);
 80093ee:	2000      	movs	r0, #0
 80093f0:	4a18      	ldr	r2, [pc, #96]	@ (8009454 <tcp_close_shutdown+0x170>)
 80093f2:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 80093f4:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 80093f6:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 80093f8:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 80093fa:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80093fc:	d01b      	beq.n	8009436 <tcp_close_shutdown+0x152>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80093fe:	7d23      	ldrb	r3, [r4, #20]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d185      	bne.n	8009310 <tcp_close_shutdown+0x2c>
 8009404:	e795      	b.n	8009332 <tcp_close_shutdown+0x4e>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009406:	4b14      	ldr	r3, [pc, #80]	@ (8009458 <tcp_close_shutdown+0x174>)
 8009408:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800940c:	4919      	ldr	r1, [pc, #100]	@ (8009474 <tcp_close_shutdown+0x190>)
 800940e:	4814      	ldr	r0, [pc, #80]	@ (8009460 <tcp_close_shutdown+0x17c>)
 8009410:	f004 ffec 	bl	800e3ec <iprintf>
 8009414:	e76d      	b.n	80092f2 <tcp_close_shutdown+0xe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009416:	68e2      	ldr	r2, [r4, #12]
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	2300      	movs	r3, #0
 800941c:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800941e:	e777      	b.n	8009310 <tcp_close_shutdown+0x2c>
      TCP_RMV_ACTIVE(pcb);
 8009420:	68e2      	ldr	r2, [r4, #12]
 8009422:	60da      	str	r2, [r3, #12]
 8009424:	e7e2      	b.n	80093ec <tcp_close_shutdown+0x108>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009426:	4b0c      	ldr	r3, [pc, #48]	@ (8009458 <tcp_close_shutdown+0x174>)
 8009428:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800942c:	4912      	ldr	r1, [pc, #72]	@ (8009478 <tcp_close_shutdown+0x194>)
 800942e:	480c      	ldr	r0, [pc, #48]	@ (8009460 <tcp_close_shutdown+0x17c>)
 8009430:	f004 ffdc 	bl	800e3ec <iprintf>
 8009434:	e78a      	b.n	800934c <tcp_close_shutdown+0x68>
        tcp_trigger_input_pcb_close();
 8009436:	f001 fd7b 	bl	800af30 <tcp_trigger_input_pcb_close>
 800943a:	e76d      	b.n	8009318 <tcp_close_shutdown+0x34>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800943c:	4b06      	ldr	r3, [pc, #24]	@ (8009458 <tcp_close_shutdown+0x174>)
 800943e:	22df      	movs	r2, #223	@ 0xdf
 8009440:	490e      	ldr	r1, [pc, #56]	@ (800947c <tcp_close_shutdown+0x198>)
 8009442:	4807      	ldr	r0, [pc, #28]	@ (8009460 <tcp_close_shutdown+0x17c>)
 8009444:	f004 ffd2 	bl	800e3ec <iprintf>
 8009448:	e7b2      	b.n	80093b0 <tcp_close_shutdown+0xcc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800944a:	68e3      	ldr	r3, [r4, #12]
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	e7e4      	b.n	800941a <tcp_close_shutdown+0x136>
 8009450:	24010554 	.word	0x24010554
 8009454:	2401054f 	.word	0x2401054f
 8009458:	0800fcac 	.word	0x0800fcac
 800945c:	0800fce8 	.word	0x0800fce8
 8009460:	0800f2f8 	.word	0x0800f2f8
 8009464:	08011b70 	.word	0x08011b70
 8009468:	24010558 	.word	0x24010558
 800946c:	2401055c 	.word	0x2401055c
 8009470:	24010564 	.word	0x24010564
 8009474:	0801026c 	.word	0x0801026c
 8009478:	0801028c 	.word	0x0801028c
 800947c:	080102a8 	.word	0x080102a8

08009480 <tcp_close>:
{
 8009480:	b510      	push	{r4, lr}
 8009482:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009484:	f7fa ff30 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009488:	b164      	cbz	r4, 80094a4 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800948a:	7d23      	ldrb	r3, [r4, #20]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d003      	beq.n	8009498 <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009490:	8b63      	ldrh	r3, [r4, #26]
 8009492:	f043 0310 	orr.w	r3, r3, #16
 8009496:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 8009498:	4620      	mov	r0, r4
 800949a:	2101      	movs	r1, #1
}
 800949c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 80094a0:	f7ff bf20 	b.w	80092e4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80094a4:	4b04      	ldr	r3, [pc, #16]	@ (80094b8 <tcp_close+0x38>)
 80094a6:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80094aa:	4904      	ldr	r1, [pc, #16]	@ (80094bc <tcp_close+0x3c>)
 80094ac:	4804      	ldr	r0, [pc, #16]	@ (80094c0 <tcp_close+0x40>)
 80094ae:	f004 ff9d 	bl	800e3ec <iprintf>
}
 80094b2:	f06f 000f 	mvn.w	r0, #15
 80094b6:	bd10      	pop	{r4, pc}
 80094b8:	0800fcac 	.word	0x0800fcac
 80094bc:	080102c4 	.word	0x080102c4
 80094c0:	0800f2f8 	.word	0x0800f2f8

080094c4 <tcp_recv_null>:
{
 80094c4:	b510      	push	{r4, lr}
 80094c6:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80094c8:	b1f1      	cbz	r1, 8009508 <tcp_recv_null+0x44>
  if (p != NULL) {
 80094ca:	4614      	mov	r4, r2
 80094cc:	4608      	mov	r0, r1
 80094ce:	b142      	cbz	r2, 80094e2 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 80094d0:	8911      	ldrh	r1, [r2, #8]
 80094d2:	f7fe fff7 	bl	80084c4 <tcp_recved>
    pbuf_free(p);
 80094d6:	4620      	mov	r0, r4
 80094d8:	f7fe fae2 	bl	8007aa0 <pbuf_free>
  return ERR_OK;
 80094dc:	2000      	movs	r0, #0
}
 80094de:	b002      	add	sp, #8
 80094e0:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1fa      	bne.n	80094dc <tcp_recv_null+0x18>
 80094e6:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80094e8:	f7fa fefe 	bl	80042e8 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 80094ec:	9801      	ldr	r0, [sp, #4]
 80094ee:	7d03      	ldrb	r3, [r0, #20]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d003      	beq.n	80094fc <tcp_recv_null+0x38>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80094f4:	8b43      	ldrh	r3, [r0, #26]
 80094f6:	f043 0310 	orr.w	r3, r3, #16
 80094fa:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80094fc:	2101      	movs	r1, #1
}
 80094fe:	b002      	add	sp, #8
 8009500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 8009504:	f7ff beee 	b.w	80092e4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009508:	4b04      	ldr	r3, [pc, #16]	@ (800951c <tcp_recv_null+0x58>)
 800950a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800950e:	4904      	ldr	r1, [pc, #16]	@ (8009520 <tcp_recv_null+0x5c>)
 8009510:	4804      	ldr	r0, [pc, #16]	@ (8009524 <tcp_recv_null+0x60>)
 8009512:	f004 ff6b 	bl	800e3ec <iprintf>
 8009516:	f06f 000f 	mvn.w	r0, #15
 800951a:	e7e0      	b.n	80094de <tcp_recv_null+0x1a>
 800951c:	0800fcac 	.word	0x0800fcac
 8009520:	080102dc 	.word	0x080102dc
 8009524:	0800f2f8 	.word	0x0800f2f8

08009528 <tcp_process_refused_data>:
{
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800952a:	b380      	cbz	r0, 800958e <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 800952c:	6f85      	ldr	r5, [r0, #120]	@ 0x78
    pcb->refused_data = NULL;
 800952e:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009530:	f8d0 6084 	ldr.w	r6, [r0, #132]	@ 0x84
 8009534:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8009536:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 8009538:	6783      	str	r3, [r0, #120]	@ 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800953a:	b156      	cbz	r6, 8009552 <tcp_process_refused_data+0x2a>
 800953c:	4601      	mov	r1, r0
 800953e:	462a      	mov	r2, r5
 8009540:	6900      	ldr	r0, [r0, #16]
 8009542:	47b0      	blx	r6
    if (err == ERR_OK) {
 8009544:	b158      	cbz	r0, 800955e <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 8009546:	300d      	adds	r0, #13
 8009548:	d01e      	beq.n	8009588 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 800954a:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 800954e:	67a5      	str	r5, [r4, #120]	@ 0x78
}
 8009550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 8009552:	8929      	ldrh	r1, [r5, #8]
 8009554:	f7fe ffb6 	bl	80084c4 <tcp_recved>
    pbuf_free(p);
 8009558:	4628      	mov	r0, r5
 800955a:	f7fe faa1 	bl	8007aa0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800955e:	06bb      	lsls	r3, r7, #26
 8009560:	d510      	bpl.n	8009584 <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009562:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009564:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8009568:	4293      	cmp	r3, r2
 800956a:	d001      	beq.n	8009570 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 800956c:	3301      	adds	r3, #1
 800956e:	8523      	strh	r3, [r4, #40]	@ 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009570:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8009574:	b135      	cbz	r5, 8009584 <tcp_process_refused_data+0x5c>
 8009576:	2300      	movs	r3, #0
 8009578:	4621      	mov	r1, r4
 800957a:	6920      	ldr	r0, [r4, #16]
 800957c:	461a      	mov	r2, r3
 800957e:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 8009580:	300d      	adds	r0, #13
 8009582:	d001      	beq.n	8009588 <tcp_process_refused_data+0x60>
  return ERR_OK;
 8009584:	2000      	movs	r0, #0
}
 8009586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8009588:	f06f 000c 	mvn.w	r0, #12
}
 800958c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800958e:	4b05      	ldr	r3, [pc, #20]	@ (80095a4 <tcp_process_refused_data+0x7c>)
 8009590:	f240 6209 	movw	r2, #1545	@ 0x609
 8009594:	4904      	ldr	r1, [pc, #16]	@ (80095a8 <tcp_process_refused_data+0x80>)
 8009596:	4805      	ldr	r0, [pc, #20]	@ (80095ac <tcp_process_refused_data+0x84>)
 8009598:	f004 ff28 	bl	800e3ec <iprintf>
 800959c:	f06f 000f 	mvn.w	r0, #15
}
 80095a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a2:	bf00      	nop
 80095a4:	0800fcac 	.word	0x0800fcac
 80095a8:	080102f8 	.word	0x080102f8
 80095ac:	0800f2f8 	.word	0x0800f2f8

080095b0 <tcp_fasttmr>:
{
 80095b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ++tcp_timer_ctr;
 80095b4:	4d1c      	ldr	r5, [pc, #112]	@ (8009628 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 80095b6:	2700      	movs	r7, #0
 80095b8:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8009630 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 80095bc:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80095be:	4e1b      	ldr	r6, [pc, #108]	@ (800962c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80095c0:	3301      	adds	r3, #1
 80095c2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80095c4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80095c8:	b1b4      	cbz	r4, 80095f8 <tcp_fasttmr+0x48>
    if (pcb->last_timer != tcp_timer_ctr) {
 80095ca:	7fa3      	ldrb	r3, [r4, #30]
 80095cc:	782a      	ldrb	r2, [r5, #0]
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d014      	beq.n	80095fc <tcp_fasttmr+0x4c>
      if (pcb->flags & TF_ACK_DELAY) {
 80095d2:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 80095d4:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80095d6:	07d9      	lsls	r1, r3, #31
 80095d8:	d419      	bmi.n	800960e <tcp_fasttmr+0x5e>
      if (pcb->flags & TF_CLOSEPEND) {
 80095da:	071a      	lsls	r2, r3, #28
 80095dc:	d410      	bmi.n	8009600 <tcp_fasttmr+0x50>
      if (pcb->refused_data != NULL) {
 80095de:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
        tcp_process_refused_data(pcb);
 80095e0:	4620      	mov	r0, r4
      next = pcb->next;
 80095e2:	68e4      	ldr	r4, [r4, #12]
      if (pcb->refused_data != NULL) {
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0ef      	beq.n	80095c8 <tcp_fasttmr+0x18>
        tcp_active_pcbs_changed = 0;
 80095e8:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80095ea:	f7ff ff9d 	bl	8009528 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80095ee:	7833      	ldrb	r3, [r6, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e7      	bne.n	80095c4 <tcp_fasttmr+0x14>
  while (pcb != NULL) {
 80095f4:	2c00      	cmp	r4, #0
 80095f6:	d1e8      	bne.n	80095ca <tcp_fasttmr+0x1a>
}
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pcb = pcb->next;
 80095fc:	68e4      	ldr	r4, [r4, #12]
 80095fe:	e7e3      	b.n	80095c8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009600:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8009604:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009606:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009608:	f7fe fdce 	bl	80081a8 <tcp_close_shutdown_fin>
 800960c:	e7e7      	b.n	80095de <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 800960e:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8009612:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009614:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009616:	f002 fc91 	bl	800bf3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800961a:	8b63      	ldrh	r3, [r4, #26]
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	b29b      	uxth	r3, r3
 8009622:	8363      	strh	r3, [r4, #26]
 8009624:	e7d9      	b.n	80095da <tcp_fasttmr+0x2a>
 8009626:	bf00      	nop
 8009628:	2401054d 	.word	0x2401054d
 800962c:	2401054f 	.word	0x2401054f
 8009630:	24010554 	.word	0x24010554

08009634 <tcp_tmr>:
{
 8009634:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009636:	f7ff ffbb 	bl	80095b0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800963a:	4a06      	ldr	r2, [pc, #24]	@ (8009654 <tcp_tmr+0x20>)
 800963c:	7813      	ldrb	r3, [r2, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	b2db      	uxtb	r3, r3
 8009642:	7013      	strb	r3, [r2, #0]
 8009644:	07db      	lsls	r3, r3, #31
 8009646:	d400      	bmi.n	800964a <tcp_tmr+0x16>
}
 8009648:	bd08      	pop	{r3, pc}
 800964a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800964e:	f7ff b94d 	b.w	80088ec <tcp_slowtmr>
 8009652:	bf00      	nop
 8009654:	2401054e 	.word	0x2401054e

08009658 <tcp_next_iss>:
{
 8009658:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800965a:	b130      	cbz	r0, 800966a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 800965c:	4b07      	ldr	r3, [pc, #28]	@ (800967c <tcp_next_iss+0x24>)
 800965e:	4a08      	ldr	r2, [pc, #32]	@ (8009680 <tcp_next_iss+0x28>)
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	6812      	ldr	r2, [r2, #0]
 8009664:	4410      	add	r0, r2
 8009666:	6018      	str	r0, [r3, #0]
}
 8009668:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800966a:	4b06      	ldr	r3, [pc, #24]	@ (8009684 <tcp_next_iss+0x2c>)
 800966c:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009670:	4905      	ldr	r1, [pc, #20]	@ (8009688 <tcp_next_iss+0x30>)
 8009672:	4806      	ldr	r0, [pc, #24]	@ (800968c <tcp_next_iss+0x34>)
 8009674:	f004 feba 	bl	800e3ec <iprintf>
 8009678:	e7f0      	b.n	800965c <tcp_next_iss+0x4>
 800967a:	bf00      	nop
 800967c:	24000028 	.word	0x24000028
 8009680:	24010560 	.word	0x24010560
 8009684:	0800fcac 	.word	0x0800fcac
 8009688:	08010320 	.word	0x08010320
 800968c:	0800f2f8 	.word	0x0800f2f8

08009690 <tcp_eff_send_mss_netif>:
{
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4605      	mov	r5, r0
 8009694:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009696:	b162      	cbz	r2, 80096b2 <tcp_eff_send_mss_netif+0x22>
    if (outif == NULL) {
 8009698:	b14c      	cbz	r4, 80096ae <tcp_eff_send_mss_netif+0x1e>
    mtu = outif->mtu;
 800969a:	8ca3      	ldrh	r3, [r4, #36]	@ 0x24
  if (mtu != 0) {
 800969c:	b13b      	cbz	r3, 80096ae <tcp_eff_send_mss_netif+0x1e>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800969e:	2b28      	cmp	r3, #40	@ 0x28
 80096a0:	bf38      	it	cc
 80096a2:	2328      	movcc	r3, #40	@ 0x28
 80096a4:	3b28      	subs	r3, #40	@ 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	429d      	cmp	r5, r3
 80096aa:	bf28      	it	cs
 80096ac:	461d      	movcs	r5, r3
}
 80096ae:	4628      	mov	r0, r5
 80096b0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80096b2:	4b04      	ldr	r3, [pc, #16]	@ (80096c4 <tcp_eff_send_mss_netif+0x34>)
 80096b4:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80096b8:	4903      	ldr	r1, [pc, #12]	@ (80096c8 <tcp_eff_send_mss_netif+0x38>)
 80096ba:	4804      	ldr	r0, [pc, #16]	@ (80096cc <tcp_eff_send_mss_netif+0x3c>)
 80096bc:	f004 fe96 	bl	800e3ec <iprintf>
 80096c0:	e7ea      	b.n	8009698 <tcp_eff_send_mss_netif+0x8>
 80096c2:	bf00      	nop
 80096c4:	0800fcac 	.word	0x0800fcac
 80096c8:	0801033c 	.word	0x0801033c
 80096cc:	0800f2f8 	.word	0x0800f2f8

080096d0 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80096d0:	b308      	cbz	r0, 8009716 <tcp_netif_ip_addr_changed+0x46>
{
 80096d2:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80096d4:	6803      	ldr	r3, [r0, #0]
 80096d6:	4604      	mov	r4, r0
 80096d8:	b903      	cbnz	r3, 80096dc <tcp_netif_ip_addr_changed+0xc>
}
 80096da:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80096dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009718 <tcp_netif_ip_addr_changed+0x48>)
 80096de:	460d      	mov	r5, r1
 80096e0:	6819      	ldr	r1, [r3, #0]
 80096e2:	f7ff fd0f 	bl	8009104 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80096e6:	4b0d      	ldr	r3, [pc, #52]	@ (800971c <tcp_netif_ip_addr_changed+0x4c>)
 80096e8:	4620      	mov	r0, r4
 80096ea:	6819      	ldr	r1, [r3, #0]
 80096ec:	f7ff fd0a 	bl	8009104 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	d0f2      	beq.n	80096da <tcp_netif_ip_addr_changed+0xa>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0ef      	beq.n	80096da <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80096fa:	4b09      	ldr	r3, [pc, #36]	@ (8009720 <tcp_netif_ip_addr_changed+0x50>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0eb      	beq.n	80096da <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009702:	6819      	ldr	r1, [r3, #0]
 8009704:	6822      	ldr	r2, [r4, #0]
 8009706:	4291      	cmp	r1, r2
 8009708:	d101      	bne.n	800970e <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800970a:	682a      	ldr	r2, [r5, #0]
 800970c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f6      	bne.n	8009702 <tcp_netif_ip_addr_changed+0x32>
}
 8009714:	bd38      	pop	{r3, r4, r5, pc}
 8009716:	4770      	bx	lr
 8009718:	24010554 	.word	0x24010554
 800971c:	2401055c 	.word	0x2401055c
 8009720:	24010558 	.word	0x24010558

08009724 <tcp_free_ooseq>:
{
 8009724:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 8009726:	6f44      	ldr	r4, [r0, #116]	@ 0x74
 8009728:	b16c      	cbz	r4, 8009746 <tcp_free_ooseq+0x22>
 800972a:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 800972c:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800972e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8009730:	6868      	ldr	r0, [r5, #4]
 8009732:	b108      	cbz	r0, 8009738 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 8009734:	f7fe f9b4 	bl	8007aa0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009738:	4629      	mov	r1, r5
 800973a:	2003      	movs	r0, #3
 800973c:	f7fd fea6 	bl	800748c <memp_free>
  while (seg != NULL) {
 8009740:	2c00      	cmp	r4, #0
 8009742:	d1f3      	bne.n	800972c <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 8009744:	6774      	str	r4, [r6, #116]	@ 0x74
}
 8009746:	bd70      	pop	{r4, r5, r6, pc}

08009748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800974a:	4605      	mov	r5, r0
{
 800974c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800974e:	2800      	cmp	r0, #0
 8009750:	d035      	beq.n	80097be <tcp_oos_insert_segment+0x76>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009752:	68eb      	ldr	r3, [r5, #12]
 8009754:	8998      	ldrh	r0, [r3, #12]
 8009756:	f7fd fab3 	bl	8006cc0 <lwip_htons>
 800975a:	07c2      	lsls	r2, r0, #31
 800975c:	d429      	bmi.n	80097b2 <tcp_oos_insert_segment+0x6a>
 800975e:	4e1c      	ldr	r6, [pc, #112]	@ (80097d0 <tcp_oos_insert_segment+0x88>)
 8009760:	e005      	b.n	800976e <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 8009762:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8009764:	4620      	mov	r0, r4
 8009766:	f7fe ffb1 	bl	80086cc <tcp_seg_free>
    while (next &&
 800976a:	463c      	mov	r4, r7
 800976c:	b327      	cbz	r7, 80097b8 <tcp_oos_insert_segment+0x70>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800976e:	68e1      	ldr	r1, [r4, #12]
 8009770:	892b      	ldrh	r3, [r5, #8]
 8009772:	6837      	ldr	r7, [r6, #0]
 8009774:	6848      	ldr	r0, [r1, #4]
 8009776:	443b      	add	r3, r7
 8009778:	8922      	ldrh	r2, [r4, #8]
 800977a:	1a1b      	subs	r3, r3, r0
 800977c:	1a9a      	subs	r2, r3, r2
    while (next &&
 800977e:	2a00      	cmp	r2, #0
 8009780:	db0d      	blt.n	800979e <tcp_oos_insert_segment+0x56>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009782:	8988      	ldrh	r0, [r1, #12]
 8009784:	f7fd fa9c 	bl	8006cc0 <lwip_htons>
 8009788:	07c3      	lsls	r3, r0, #31
 800978a:	d5ea      	bpl.n	8009762 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800978c:	68eb      	ldr	r3, [r5, #12]
 800978e:	2001      	movs	r0, #1
 8009790:	899f      	ldrh	r7, [r3, #12]
 8009792:	f7fd fa95 	bl	8006cc0 <lwip_htons>
 8009796:	68eb      	ldr	r3, [r5, #12]
 8009798:	4307      	orrs	r7, r0
 800979a:	819f      	strh	r7, [r3, #12]
 800979c:	e7e1      	b.n	8009762 <tcp_oos_insert_segment+0x1a>
    }
    if (next &&
 800979e:	2b00      	cmp	r3, #0
 80097a0:	dd05      	ble.n	80097ae <tcp_oos_insert_segment+0x66>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80097a2:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80097a4:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80097a6:	b289      	uxth	r1, r1
 80097a8:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80097aa:	f7fe fa91 	bl	8007cd0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80097ae:	602c      	str	r4, [r5, #0]
}
 80097b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80097b2:	4620      	mov	r0, r4
 80097b4:	f7fe ff78 	bl	80086a8 <tcp_segs_free>
    next = NULL;
 80097b8:	2400      	movs	r4, #0
  cseg->next = next;
 80097ba:	602c      	str	r4, [r5, #0]
}
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80097be:	4b05      	ldr	r3, [pc, #20]	@ (80097d4 <tcp_oos_insert_segment+0x8c>)
 80097c0:	f240 421f 	movw	r2, #1055	@ 0x41f
 80097c4:	4904      	ldr	r1, [pc, #16]	@ (80097d8 <tcp_oos_insert_segment+0x90>)
 80097c6:	4805      	ldr	r0, [pc, #20]	@ (80097dc <tcp_oos_insert_segment+0x94>)
 80097c8:	f004 fe10 	bl	800e3ec <iprintf>
 80097cc:	e7c1      	b.n	8009752 <tcp_oos_insert_segment+0xa>
 80097ce:	bf00      	nop
 80097d0:	24010578 	.word	0x24010578
 80097d4:	08010364 	.word	0x08010364
 80097d8:	08010398 	.word	0x08010398
 80097dc:	0800f2f8 	.word	0x0800f2f8

080097e0 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80097e0:	4b0d      	ldr	r3, [pc, #52]	@ (8009818 <tcp_input_delayed_close+0x38>)
{
 80097e2:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 80097e4:	781b      	ldrb	r3, [r3, #0]
{
 80097e6:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80097e8:	f013 0010 	ands.w	r0, r3, #16
 80097ec:	d100      	bne.n	80097f0 <tcp_input_delayed_close+0x10>
}
 80097ee:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 80097f0:	8b63      	ldrh	r3, [r4, #26]
 80097f2:	06db      	lsls	r3, r3, #27
 80097f4:	d406      	bmi.n	8009804 <tcp_input_delayed_close+0x24>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80097f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80097fa:	b11b      	cbz	r3, 8009804 <tcp_input_delayed_close+0x24>
 80097fc:	f06f 010e 	mvn.w	r1, #14
 8009800:	6920      	ldr	r0, [r4, #16]
 8009802:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009804:	4621      	mov	r1, r4
 8009806:	4805      	ldr	r0, [pc, #20]	@ (800981c <tcp_input_delayed_close+0x3c>)
 8009808:	f7ff fb14 	bl	8008e34 <tcp_pcb_remove>
    tcp_free(pcb);
 800980c:	4620      	mov	r0, r4
 800980e:	f7fe fd09 	bl	8008224 <tcp_free>
 8009812:	2001      	movs	r0, #1
}
 8009814:	bd10      	pop	{r4, pc}
 8009816:	bf00      	nop
 8009818:	2401056c 	.word	0x2401056c
 800981c:	24010554 	.word	0x24010554

08009820 <tcp_free_acked_segments.isra.0>:
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009820:	2900      	cmp	r1, #0
 8009822:	d054      	beq.n	80098ce <tcp_free_acked_segments.isra.0+0xae>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009828:	4682      	mov	sl, r0
 800982a:	460d      	mov	r5, r1
 800982c:	4690      	mov	r8, r2
 800982e:	4e29      	ldr	r6, [pc, #164]	@ (80098d4 <tcp_free_acked_segments.isra.0+0xb4>)
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009830:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80098e0 <tcp_free_acked_segments.isra.0+0xc0>
 8009834:	4f28      	ldr	r7, [pc, #160]	@ (80098d8 <tcp_free_acked_segments.isra.0+0xb8>)
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009836:	68eb      	ldr	r3, [r5, #12]
 8009838:	6858      	ldr	r0, [r3, #4]
 800983a:	f7fd fa45 	bl	8006cc8 <lwip_htonl>
 800983e:	68eb      	ldr	r3, [r5, #12]
 8009840:	4604      	mov	r4, r0
 8009842:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8009846:	8998      	ldrh	r0, [r3, #12]
 8009848:	f7fd fa3a 	bl	8006cc0 <lwip_htons>
 800984c:	6833      	ldr	r3, [r6, #0]
 800984e:	f010 0003 	ands.w	r0, r0, #3
 8009852:	eba4 0403 	sub.w	r4, r4, r3
 8009856:	bf18      	it	ne
 8009858:	2001      	movne	r0, #1
 800985a:	445c      	add	r4, fp
 800985c:	4404      	add	r4, r0
  while (seg_list != NULL &&
 800985e:	2c00      	cmp	r4, #0
 8009860:	dc32      	bgt.n	80098c8 <tcp_free_acked_segments.isra.0+0xa8>
    seg_list = seg_list->next;
 8009862:	e9d5 b000 	ldrd	fp, r0, [r5]
    clen = pbuf_clen(next->p);
 8009866:	f7fe fa8f 	bl	8007d88 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800986a:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
    clen = pbuf_clen(next->p);
 800986e:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009870:	4298      	cmp	r0, r3
 8009872:	d81f      	bhi.n	80098b4 <tcp_free_acked_segments.isra.0+0x94>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009874:	4919      	ldr	r1, [pc, #100]	@ (80098dc <tcp_free_acked_segments.isra.0+0xbc>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009876:	1b1b      	subs	r3, r3, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009878:	892a      	ldrh	r2, [r5, #8]
    tcp_seg_free(next);
 800987a:	4628      	mov	r0, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800987c:	880c      	ldrh	r4, [r1, #0]
 800987e:	465d      	mov	r5, fp
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009880:	f8aa 3066 	strh.w	r3, [sl, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009884:	1913      	adds	r3, r2, r4
 8009886:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 8009888:	f7fe ff20 	bl	80086cc <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800988c:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 8009890:	b113      	cbz	r3, 8009898 <tcp_free_acked_segments.isra.0+0x78>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009892:	ea58 030b 	orrs.w	r3, r8, fp
 8009896:	d003      	beq.n	80098a0 <tcp_free_acked_segments.isra.0+0x80>
  while (seg_list != NULL &&
 8009898:	f1bb 0f00 	cmp.w	fp, #0
 800989c:	d1cb      	bne.n	8009836 <tcp_free_acked_segments.isra.0+0x16>
 800989e:	e006      	b.n	80098ae <tcp_free_acked_segments.isra.0+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80098a0:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <tcp_free_acked_segments.isra.0+0xc0>)
 80098a2:	f240 4261 	movw	r2, #1121	@ 0x461
 80098a6:	490f      	ldr	r1, [pc, #60]	@ (80098e4 <tcp_free_acked_segments.isra.0+0xc4>)
 80098a8:	480b      	ldr	r0, [pc, #44]	@ (80098d8 <tcp_free_acked_segments.isra.0+0xb8>)
 80098aa:	f004 fd9f 	bl	800e3ec <iprintf>
  while (seg_list != NULL &&
 80098ae:	2000      	movs	r0, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 80098b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80098b4:	464b      	mov	r3, r9
 80098b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80098ba:	490b      	ldr	r1, [pc, #44]	@ (80098e8 <tcp_free_acked_segments.isra.0+0xc8>)
 80098bc:	4638      	mov	r0, r7
 80098be:	f004 fd95 	bl	800e3ec <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80098c2:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 80098c6:	e7d5      	b.n	8009874 <tcp_free_acked_segments.isra.0+0x54>
 80098c8:	4628      	mov	r0, r5
}
 80098ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ce:	2000      	movs	r0, #0
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	24010574 	.word	0x24010574
 80098d8:	0800f2f8 	.word	0x0800f2f8
 80098dc:	24010570 	.word	0x24010570
 80098e0:	08010364 	.word	0x08010364
 80098e4:	080103e8 	.word	0x080103e8
 80098e8:	080103c0 	.word	0x080103c0

080098ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80098ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80098f0:	7d03      	ldrb	r3, [r0, #20]
{
 80098f2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	f240 810e 	bls.w	8009b16 <tcp_receive+0x22a>

  if (flags & TCP_ACK) {
 80098fa:	4bb3      	ldr	r3, [pc, #716]	@ (8009bc8 <tcp_receive+0x2dc>)
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80098fc:	4db3      	ldr	r5, [pc, #716]	@ (8009bcc <tcp_receive+0x2e0>)
  if (flags & TCP_ACK) {
 80098fe:	781a      	ldrb	r2, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009900:	682b      	ldr	r3, [r5, #0]
  if (flags & TCP_ACK) {
 8009902:	06d0      	lsls	r0, r2, #27
 8009904:	f100 808f 	bmi.w	8009a26 <tcp_receive+0x13a>
 8009908:	4fb1      	ldr	r7, [pc, #708]	@ (8009bd0 <tcp_receive+0x2e4>)

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800990a:	8839      	ldrh	r1, [r7, #0]
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800990c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800990e:	682b      	ldr	r3, [r5, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009910:	2900      	cmp	r1, #0
 8009912:	d078      	beq.n	8009a06 <tcp_receive+0x11a>
 8009914:	7d20      	ldrb	r0, [r4, #20]
 8009916:	2806      	cmp	r0, #6
 8009918:	d875      	bhi.n	8009a06 <tcp_receive+0x11a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800991a:	eba2 0803 	sub.w	r8, r2, r3
 800991e:	f1b8 0f01 	cmp.w	r8, #1
 8009922:	d406      	bmi.n	8009932 <tcp_receive+0x46>
 8009924:	f1c3 0001 	rsb	r0, r3, #1
 8009928:	1a41      	subs	r1, r0, r1
 800992a:	4411      	add	r1, r2
 800992c:	2900      	cmp	r1, #0
 800992e:	f340 815f 	ble.w	8009bf0 <tcp_receive+0x304>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009932:	1a99      	subs	r1, r3, r2
 8009934:	2900      	cmp	r1, #0
 8009936:	f2c0 8142 	blt.w	8009bbe <tcp_receive+0x2d2>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800993a:	f103 0e01 	add.w	lr, r3, #1
 800993e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8009940:	ebae 0102 	sub.w	r1, lr, r2
 8009944:	1a09      	subs	r1, r1, r0
 8009946:	2900      	cmp	r1, #0
 8009948:	dc31      	bgt.n	80099ae <tcp_receive+0xc2>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800994a:	429a      	cmp	r2, r3
 800994c:	f000 844c 	beq.w	800a1e8 <tcp_receive+0x8fc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009950:	f8d4 8074 	ldr.w	r8, [r4, #116]	@ 0x74
 8009954:	f1b8 0f00 	cmp.w	r8, #0
 8009958:	f000 8369 	beq.w	800a02e <tcp_receive+0x742>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800995c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8009960:	6842      	ldr	r2, [r0, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	f000 8342 	beq.w	8009fec <tcp_receive+0x700>
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009968:	1a99      	subs	r1, r3, r2
 800996a:	2900      	cmp	r1, #0
 800996c:	f2c0 83c2 	blt.w	800a0f4 <tcp_receive+0x808>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009970:	f8d8 6000 	ldr.w	r6, [r8]
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009974:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
              if (next->next == NULL &&
 8009978:	b1ae      	cbz	r6, 80099a6 <tcp_receive+0xba>
            if (seqno == next->tcphdr->seqno) {
 800997a:	68f0      	ldr	r0, [r6, #12]
 800997c:	6842      	ldr	r2, [r0, #4]
 800997e:	429a      	cmp	r2, r3
 8009980:	f000 8337 	beq.w	8009ff2 <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009984:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009988:	6849      	ldr	r1, [r1, #4]
 800998a:	ebac 0101 	sub.w	r1, ip, r1
 800998e:	2900      	cmp	r1, #0
 8009990:	db04      	blt.n	800999c <tcp_receive+0xb0>
 8009992:	ebae 0102 	sub.w	r1, lr, r2
 8009996:	2900      	cmp	r1, #0
 8009998:	f340 829b 	ble.w	8009ed2 <tcp_receive+0x5e6>
 800999c:	46b0      	mov	r8, r6
              if (next->next == NULL &&
 800999e:	f8d8 6000 	ldr.w	r6, [r8]
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d1e9      	bne.n	800997a <tcp_receive+0x8e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80099a6:	1a9a      	subs	r2, r3, r2
              if (next->next == NULL &&
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	f300 82b2 	bgt.w	8009f12 <tcp_receive+0x626>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80099ae:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 80099b0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 80099b4:	f002 ba90 	b.w	800bed8 <tcp_send_empty_ack>
      if (tcplen == 0) {
 80099b8:	4f85      	ldr	r7, [pc, #532]	@ (8009bd0 <tcp_receive+0x2e4>)
 80099ba:	8839      	ldrh	r1, [r7, #0]
 80099bc:	2900      	cmp	r1, #0
 80099be:	f040 80f3 	bne.w	8009ba8 <tcp_receive+0x2bc>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80099c2:	44e6      	add	lr, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80099c4:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 80099c6:	f8b4 c060 	ldrh.w	ip, [r4, #96]	@ 0x60
 80099ca:	4461      	add	r1, ip
 80099cc:	4571      	cmp	r1, lr
 80099ce:	f040 80eb 	bne.w	8009ba8 <tcp_receive+0x2bc>
          if (pcb->rtime >= 0) {
 80099d2:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
            if (pcb->lastack == ackno) {
 80099d4:	0409      	lsls	r1, r1, #16
 80099d6:	f100 80e7 	bmi.w	8009ba8 <tcp_receive+0x2bc>
 80099da:	4290      	cmp	r0, r2
 80099dc:	f040 80e4 	bne.w	8009ba8 <tcp_receive+0x2bc>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80099e0:	f894 1043 	ldrb.w	r1, [r4, #67]	@ 0x43
 80099e4:	29ff      	cmp	r1, #255	@ 0xff
 80099e6:	f000 8390 	beq.w	800a10a <tcp_receive+0x81e>
                ++pcb->dupacks;
 80099ea:	3101      	adds	r1, #1
 80099ec:	b2c9      	uxtb	r1, r1
              if (pcb->dupacks > 3) {
 80099ee:	2903      	cmp	r1, #3
                ++pcb->dupacks;
 80099f0:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
              if (pcb->dupacks > 3) {
 80099f4:	f200 8389 	bhi.w	800a10a <tcp_receive+0x81e>
              if (pcb->dupacks >= 3) {
 80099f8:	f000 8392 	beq.w	800a120 <tcp_receive+0x834>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80099fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099fe:	2900      	cmp	r1, #0
 8009a00:	f040 80ac 	bne.w	8009b5c <tcp_receive+0x270>
 8009a04:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009a06:	1a99      	subs	r1, r3, r2
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	db06      	blt.n	8009a1a <tcp_receive+0x12e>
 8009a0c:	f1c2 0201 	rsb	r2, r2, #1
 8009a10:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8009a12:	1a52      	subs	r2, r2, r1
 8009a14:	441a      	add	r2, r3
 8009a16:	2a00      	cmp	r2, #0
 8009a18:	dd03      	ble.n	8009a22 <tcp_receive+0x136>
      tcp_ack_now(pcb);
 8009a1a:	8b63      	ldrh	r3, [r4, #26]
 8009a1c:	f043 0302 	orr.w	r3, r3, #2
 8009a20:	8363      	strh	r3, [r4, #26]
}
 8009a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a26:	e9d4 1c15 	ldrd	r1, ip, [r4, #84]	@ 0x54
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a2a:	4e6a      	ldr	r6, [pc, #424]	@ (8009bd4 <tcp_receive+0x2e8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a2c:	1ac8      	subs	r0, r1, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009a2e:	f8b4 e060 	ldrh.w	lr, [r4, #96]	@ 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a32:	6832      	ldr	r2, [r6, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009a34:	2800      	cmp	r0, #0
 8009a36:	db7a      	blt.n	8009b2e <tcp_receive+0x242>
 8009a38:	4299      	cmp	r1, r3
 8009a3a:	d074      	beq.n	8009b26 <tcp_receive+0x23a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009a3c:	4594      	cmp	ip, r2
 8009a3e:	f000 80b7 	beq.w	8009bb0 <tcp_receive+0x2c4>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009a42:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009a44:	1a11      	subs	r1, r2, r0
 8009a46:	2900      	cmp	r1, #0
 8009a48:	ddb6      	ble.n	80099b8 <tcp_receive+0xcc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a4a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dc7b      	bgt.n	8009b4a <tcp_receive+0x25e>
      if (pcb->flags & TF_INFR) {
 8009a52:	8b63      	ldrh	r3, [r4, #26]
 8009a54:	0758      	lsls	r0, r3, #29
 8009a56:	d509      	bpl.n	8009a6c <tcp_receive+0x180>
        tcp_clear_flags(pcb, TF_INFR);
 8009a58:	f023 0304 	bic.w	r3, r3, #4
 8009a5c:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009a5e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8009a62:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a6c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	@ 0x3c
 8009a70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      pcb->lastack = ackno;
 8009a72:	6462      	str	r2, [r4, #68]	@ 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a74:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8009a78:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009a7a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
      if (pcb->state >= ESTABLISHED) {
 8009a7e:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 8009a80:	f04f 0300 	mov.w	r3, #0
 8009a84:	f8a4 3042 	strh.w	r3, [r4, #66]	@ 0x42
      if (pcb->state >= ESTABLISHED) {
 8009a88:	d913      	bls.n	8009ab2 <tcp_receive+0x1c6>
        if (pcb->cwnd < pcb->ssthresh) {
 8009a8a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009a8e:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 8009a90:	f8b4 204a 	ldrh.w	r2, [r4, #74]	@ 0x4a
 8009a94:	429a      	cmp	r2, r3
 8009a96:	f200 8146 	bhi.w	8009d26 <tcp_receive+0x43a>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a9a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	@ 0x6a
 8009a9e:	4411      	add	r1, r2
 8009aa0:	b289      	uxth	r1, r1
 8009aa2:	428a      	cmp	r2, r1
 8009aa4:	f200 8292 	bhi.w	8009fcc <tcp_receive+0x6e0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009aa8:	428b      	cmp	r3, r1
 8009aaa:	f240 8291 	bls.w	8009fd0 <tcp_receive+0x6e4>
 8009aae:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	@ 0x6c
 8009ab8:	f7ff feb2 	bl	8009820 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009abc:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009abe:	4602      	mov	r2, r0
 8009ac0:	6720      	str	r0, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f7ff feac 	bl	8009820 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 8009ac8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009aca:	66e0      	str	r0, [r4, #108]	@ 0x6c
      if (pcb->unacked == NULL) {
 8009acc:	fab2 f382 	clz	r3, r2
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	425b      	negs	r3, r3
 8009ad4:	8623      	strh	r3, [r4, #48]	@ 0x30
      pcb->polltmr = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f000 8120 	beq.w	8009d20 <tcp_receive+0x434>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8009bd8 <tcp_receive+0x2ec>)
 8009ae2:	8819      	ldrh	r1, [r3, #0]
 8009ae4:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 8009ae8:	440b      	add	r3, r1
 8009aea:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
      if (pcb->flags & TF_RTO) {
 8009aee:	8b63      	ldrh	r3, [r4, #26]
 8009af0:	0519      	lsls	r1, r3, #20
 8009af2:	d52d      	bpl.n	8009b50 <tcp_receive+0x264>
        if (pcb->unacked == NULL) {
 8009af4:	2a00      	cmp	r2, #0
 8009af6:	f000 812d 	beq.w	8009d54 <tcp_receive+0x468>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009afa:	68d3      	ldr	r3, [r2, #12]
 8009afc:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8009afe:	6858      	ldr	r0, [r3, #4]
 8009b00:	f7fd f8e2 	bl	8006cc8 <lwip_htonl>
 8009b04:	1a3f      	subs	r7, r7, r0
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	dc22      	bgt.n	8009b50 <tcp_receive+0x264>
          tcp_clear_flags(pcb, TF_RTO);
 8009b0a:	8b63      	ldrh	r3, [r4, #26]
 8009b0c:	4f30      	ldr	r7, [pc, #192]	@ (8009bd0 <tcp_receive+0x2e4>)
 8009b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b12:	8363      	strh	r3, [r4, #26]
 8009b14:	e01d      	b.n	8009b52 <tcp_receive+0x266>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009b16:	4b31      	ldr	r3, [pc, #196]	@ (8009bdc <tcp_receive+0x2f0>)
 8009b18:	f240 427c 	movw	r2, #1148	@ 0x47c
 8009b1c:	4930      	ldr	r1, [pc, #192]	@ (8009be0 <tcp_receive+0x2f4>)
 8009b1e:	4831      	ldr	r0, [pc, #196]	@ (8009be4 <tcp_receive+0x2f8>)
 8009b20:	f004 fc64 	bl	800e3ec <iprintf>
 8009b24:	e6e9      	b.n	80098fa <tcp_receive+0xe>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009b26:	ebac 0102 	sub.w	r1, ip, r2
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	da86      	bge.n	8009a3c <tcp_receive+0x150>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009b2e:	492e      	ldr	r1, [pc, #184]	@ (8009be8 <tcp_receive+0x2fc>)
 8009b30:	6809      	ldr	r1, [r1, #0]
 8009b32:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009b34:	f8b4 0062 	ldrh.w	r0, [r4, #98]	@ 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009b38:	f8a4 1060 	strh.w	r1, [r4, #96]	@ 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009b3c:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 8009b3e:	e9c4 3215 	strd	r3, r2, [r4, #84]	@ 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009b42:	bf38      	it	cc
 8009b44:	f8a4 1062 	strhcc.w	r1, [r4, #98]	@ 0x62
      pcb->snd_wl1 = seqno;
 8009b48:	e77b      	b.n	8009a42 <tcp_receive+0x156>
      tcp_send_empty_ack(pcb);
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f002 f9c4 	bl	800bed8 <tcp_send_empty_ack>
 8009b50:	4f1f      	ldr	r7, [pc, #124]	@ (8009bd0 <tcp_receive+0x2e4>)
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009b52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b54:	2900      	cmp	r1, #0
 8009b56:	f43f aed8 	beq.w	800990a <tcp_receive+0x1e>
 8009b5a:	6832      	ldr	r2, [r6, #0]
 8009b5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009b5e:	1a9b      	subs	r3, r3, r2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f6bf aed2 	bge.w	800990a <tcp_receive+0x1e>
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b66:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	@ 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009b6a:	b289      	uxth	r1, r1
 8009b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bec <tcp_receive+0x300>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b6e:	f3c2 00cf 	ubfx	r0, r2, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009b72:	881e      	ldrh	r6, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8009b74:	1a33      	subs	r3, r6, r0
 8009b76:	1a5b      	subs	r3, r3, r1
 8009b78:	b29b      	uxth	r3, r3
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b7a:	441a      	add	r2, r3
      if (m < 0) {
 8009b7c:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 8009b80:	b212      	sxth	r2, r2
 8009b82:	87a2      	strh	r2, [r4, #60]	@ 0x3c
      if (m < 0) {
 8009b84:	d002      	beq.n	8009b8c <tcp_receive+0x2a0>
        m = (s16_t) - m;
 8009b86:	1b80      	subs	r0, r0, r6
 8009b88:	4401      	add	r1, r0
 8009b8a:	b28b      	uxth	r3, r1
      m = (s16_t)(m - (pcb->sv >> 2));
 8009b8c:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	@ 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b90:	eba1 01a1 	sub.w	r1, r1, r1, asr #2
 8009b94:	440b      	add	r3, r1
 8009b96:	b29b      	uxth	r3, r3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009b98:	eb03 02e2 	add.w	r2, r3, r2, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8009b9c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      pcb->rttest = 0;
 8009b9e:	2300      	movs	r3, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ba0:	f8a4 2040 	strh.w	r2, [r4, #64]	@ 0x40
      pcb->rttest = 0;
 8009ba4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ba6:	e6b0      	b.n	800990a <tcp_receive+0x1e>
        pcb->dupacks = 0;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bae:	e7d0      	b.n	8009b52 <tcp_receive+0x266>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009bb0:	490d      	ldr	r1, [pc, #52]	@ (8009be8 <tcp_receive+0x2fc>)
 8009bb2:	6809      	ldr	r1, [r1, #0]
 8009bb4:	89c9      	ldrh	r1, [r1, #14]
 8009bb6:	458e      	cmp	lr, r1
 8009bb8:	f4bf af43 	bcs.w	8009a42 <tcp_receive+0x156>
 8009bbc:	e7ba      	b.n	8009b34 <tcp_receive+0x248>
        tcp_ack_now(pcb);
 8009bbe:	8b63      	ldrh	r3, [r4, #26]
 8009bc0:	f043 0302 	orr.w	r3, r3, #2
 8009bc4:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009bc6:	e6f2      	b.n	80099ae <tcp_receive+0xc2>
 8009bc8:	2401056d 	.word	0x2401056d
 8009bcc:	24010578 	.word	0x24010578
 8009bd0:	2401056e 	.word	0x2401056e
 8009bd4:	24010574 	.word	0x24010574
 8009bd8:	24010570 	.word	0x24010570
 8009bdc:	08010364 	.word	0x08010364
 8009be0:	08010408 	.word	0x08010408
 8009be4:	0800f2f8 	.word	0x0800f2f8
 8009be8:	24010588 	.word	0x24010588
 8009bec:	24010560 	.word	0x24010560
      struct pbuf *p = inseg.p;
 8009bf0:	f8df 946c 	ldr.w	r9, [pc, #1132]	@ 800a060 <tcp_receive+0x774>
 8009bf4:	f8d9 6004 	ldr.w	r6, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	f000 8162 	beq.w	8009ec2 <tcp_receive+0x5d6>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009bfe:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8009c02:	4598      	cmp	r8, r3
 8009c04:	f200 80c1 	bhi.w	8009d8a <tcp_receive+0x49e>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c08:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8009c0c:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009c10:	891a      	ldrh	r2, [r3, #8]
 8009c12:	4542      	cmp	r2, r8
 8009c14:	f0c0 80ae 	bcc.w	8009d74 <tcp_receive+0x488>
      inseg.len -= off;
 8009c18:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c1c:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 8009c20:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009c24:	b292      	uxth	r2, r2
      inseg.len -= off;
 8009c26:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 8009c2a:	8973      	ldrh	r3, [r6, #10]
 8009c2c:	4598      	cmp	r8, r3
 8009c2e:	d90a      	bls.n	8009c46 <tcp_receive+0x35a>
        p->len = 0;
 8009c30:	2100      	movs	r1, #0
        off -= p->len;
 8009c32:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 8009c36:	8171      	strh	r1, [r6, #10]
        p->tot_len = new_tot_len;
 8009c38:	8132      	strh	r2, [r6, #8]
        p = p->next;
 8009c3a:	6836      	ldr	r6, [r6, #0]
        off -= p->len;
 8009c3c:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 8009c40:	8973      	ldrh	r3, [r6, #10]
 8009c42:	4543      	cmp	r3, r8
 8009c44:	d3f5      	bcc.n	8009c32 <tcp_receive+0x346>
      pbuf_remove_header(p, off);
 8009c46:	4641      	mov	r1, r8
 8009c48:	4630      	mov	r0, r6
 8009c4a:	f7fd fec7 	bl	80079dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009c4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c50:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c58:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f43f aea7 	beq.w	80099ae <tcp_receive+0xc2>
        tcplen = TCP_TCPLEN(&inseg);
 8009c60:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c64:	f8b9 6008 	ldrh.w	r6, [r9, #8]
 8009c68:	8998      	ldrh	r0, [r3, #12]
 8009c6a:	f7fd f829 	bl	8006cc0 <lwip_htons>
 8009c6e:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009c72:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009c74:	bf18      	it	ne
 8009c76:	2301      	movne	r3, #1
 8009c78:	4433      	add	r3, r6
 8009c7a:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8009c7c:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8009c7e:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009c80:	f0c0 81f4 	bcc.w	800a06c <tcp_receive+0x780>
        if (pcb->ooseq != NULL) {
 8009c84:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f000 808e 	beq.w	8009da8 <tcp_receive+0x4bc>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c8c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c90:	8998      	ldrh	r0, [r3, #12]
 8009c92:	f7fd f815 	bl	8006cc0 <lwip_htons>
 8009c96:	07c2      	lsls	r2, r0, #31
 8009c98:	f100 8083 	bmi.w	8009da2 <tcp_receive+0x4b6>
            struct tcp_seg *next = pcb->ooseq;
 8009c9c:	6f66      	ldr	r6, [r4, #116]	@ 0x74
        pcb->rcv_nxt = seqno + tcplen;
 8009c9e:	883a      	ldrh	r2, [r7, #0]
 8009ca0:	6829      	ldr	r1, [r5, #0]
            while (next &&
 8009ca2:	b956      	cbnz	r6, 8009cba <tcp_receive+0x3ce>
 8009ca4:	e27a      	b.n	800a19c <tcp_receive+0x8b0>
              next = next->next;
 8009ca6:	f8d6 8000 	ldr.w	r8, [r6]
              tcp_seg_free(tmp);
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7fe fd0e 	bl	80086cc <tcp_seg_free>
            while (next &&
 8009cb0:	4646      	mov	r6, r8
 8009cb2:	f1b8 0f00 	cmp.w	r8, #0
 8009cb6:	f000 826f 	beq.w	800a198 <tcp_receive+0x8ac>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009cba:	68f0      	ldr	r0, [r6, #12]
 8009cbc:	883a      	ldrh	r2, [r7, #0]
 8009cbe:	f8d5 e000 	ldr.w	lr, [r5]
 8009cc2:	8933      	ldrh	r3, [r6, #8]
 8009cc4:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009cc8:	eb02 010e 	add.w	r1, r2, lr
 8009ccc:	4463      	add	r3, ip
 8009cce:	1acb      	subs	r3, r1, r3
            while (next &&
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f2c0 8229 	blt.w	800a128 <tcp_receive+0x83c>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cd6:	8980      	ldrh	r0, [r0, #12]
 8009cd8:	f7fc fff2 	bl	8006cc0 <lwip_htons>
 8009cdc:	07c3      	lsls	r3, r0, #31
 8009cde:	d5e2      	bpl.n	8009ca6 <tcp_receive+0x3ba>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009ce0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ce4:	8998      	ldrh	r0, [r3, #12]
 8009ce6:	f7fc ffeb 	bl	8006cc0 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cea:	0780      	lsls	r0, r0, #30
 8009cec:	d4db      	bmi.n	8009ca6 <tcp_receive+0x3ba>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009cee:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009cf2:	2001      	movs	r0, #1
 8009cf4:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009cf8:	f7fc ffe2 	bl	8006cc0 <lwip_htons>
 8009cfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009d00:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 8009d04:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009d08:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009d0a:	b280      	uxth	r0, r0
 8009d0c:	f7fc ffd8 	bl	8006cc0 <lwip_htons>
 8009d10:	f010 0303 	ands.w	r3, r0, #3
 8009d14:	bf18      	it	ne
 8009d16:	2301      	movne	r3, #1
 8009d18:	4498      	add	r8, r3
 8009d1a:	f8a7 8000 	strh.w	r8, [r7]
 8009d1e:	e7c2      	b.n	8009ca6 <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 8009d20:	f8a4 0068 	strh.w	r0, [r4, #104]	@ 0x68
 8009d24:	e6dc      	b.n	8009ae0 <tcp_receive+0x1f4>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009d26:	8b62      	ldrh	r2, [r4, #26]
 8009d28:	f412 6f00 	tst.w	r2, #2048	@ 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009d2c:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009d2e:	bf0c      	ite	eq
 8009d30:	2002      	moveq	r0, #2
 8009d32:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009d34:	fb12 f200 	smulbb	r2, r2, r0
 8009d38:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8009d3a:	428a      	cmp	r2, r1
 8009d3c:	bf94      	ite	ls
 8009d3e:	1898      	addls	r0, r3, r2
 8009d40:	1858      	addhi	r0, r3, r1
 8009d42:	b282      	uxth	r2, r0
 8009d44:	4293      	cmp	r3, r2
 8009d46:	f240 814c 	bls.w	8009fe2 <tcp_receive+0x6f6>
 8009d4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d4e:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8009d52:	e6ae      	b.n	8009ab2 <tcp_receive+0x1c6>
          if ((pcb->unsent == NULL) ||
 8009d54:	b148      	cbz	r0, 8009d6a <tcp_receive+0x47e>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009d56:	68c3      	ldr	r3, [r0, #12]
 8009d58:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8009d5a:	6858      	ldr	r0, [r3, #4]
 8009d5c:	f7fc ffb4 	bl	8006cc8 <lwip_htonl>
 8009d60:	1a3f      	subs	r7, r7, r0
          if ((pcb->unsent == NULL) ||
 8009d62:	2f00      	cmp	r7, #0
 8009d64:	f73f aef4 	bgt.w	8009b50 <tcp_receive+0x264>
            tcp_clear_flags(pcb, TF_RTO);
 8009d68:	8b63      	ldrh	r3, [r4, #26]
 8009d6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d6e:	4fb4      	ldr	r7, [pc, #720]	@ (800a040 <tcp_receive+0x754>)
 8009d70:	8363      	strh	r3, [r4, #26]
 8009d72:	e6ee      	b.n	8009b52 <tcp_receive+0x266>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009d74:	4bb3      	ldr	r3, [pc, #716]	@ (800a044 <tcp_receive+0x758>)
 8009d76:	f240 5297 	movw	r2, #1431	@ 0x597
 8009d7a:	49b3      	ldr	r1, [pc, #716]	@ (800a048 <tcp_receive+0x75c>)
 8009d7c:	48b3      	ldr	r0, [pc, #716]	@ (800a04c <tcp_receive+0x760>)
 8009d7e:	f004 fb35 	bl	800e3ec <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009d82:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009d86:	891a      	ldrh	r2, [r3, #8]
 8009d88:	e746      	b.n	8009c18 <tcp_receive+0x32c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009d8a:	4bae      	ldr	r3, [pc, #696]	@ (800a044 <tcp_receive+0x758>)
 8009d8c:	f240 5295 	movw	r2, #1429	@ 0x595
 8009d90:	49af      	ldr	r1, [pc, #700]	@ (800a050 <tcp_receive+0x764>)
 8009d92:	48ae      	ldr	r0, [pc, #696]	@ (800a04c <tcp_receive+0x760>)
 8009d94:	f004 fb2a 	bl	800e3ec <iprintf>
 8009d98:	e736      	b.n	8009c08 <tcp_receive+0x31c>
              pcb->ooseq = pcb->ooseq->next;
 8009d9a:	6803      	ldr	r3, [r0, #0]
 8009d9c:	6763      	str	r3, [r4, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8009d9e:	f7fe fc95 	bl	80086cc <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009da2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d1f8      	bne.n	8009d9a <tcp_receive+0x4ae>
        pcb->rcv_nxt = seqno + tcplen;
 8009da8:	883a      	ldrh	r2, [r7, #0]
 8009daa:	6829      	ldr	r1, [r5, #0]
 8009dac:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009dae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8009db0:	6261      	str	r1, [r4, #36]	@ 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009db2:	4293      	cmp	r3, r2
 8009db4:	f0c0 8194 	bcc.w	800a0e0 <tcp_receive+0x7f4>
        pcb->rcv_wnd -= tcplen;
 8009db8:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 8009dba:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009dbc:	8523      	strh	r3, [r4, #40]	@ 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009dbe:	f7fe fb43 	bl	8008448 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009dc2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009dc6:	891a      	ldrh	r2, [r3, #8]
 8009dc8:	b122      	cbz	r2, 8009dd4 <tcp_receive+0x4e8>
          recv_data = inseg.p;
 8009dca:	4aa2      	ldr	r2, [pc, #648]	@ (800a054 <tcp_receive+0x768>)
 8009dcc:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009dd4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009dd8:	8998      	ldrh	r0, [r3, #12]
 8009dda:	f7fc ff71 	bl	8006cc0 <lwip_htons>
 8009dde:	07c2      	lsls	r2, r0, #31
 8009de0:	d504      	bpl.n	8009dec <tcp_receive+0x500>
          recv_flags |= TF_GOT_FIN;
 8009de2:	4a9d      	ldr	r2, [pc, #628]	@ (800a058 <tcp_receive+0x76c>)
 8009de4:	7813      	ldrb	r3, [r2, #0]
 8009de6:	f043 0320 	orr.w	r3, r3, #32
 8009dea:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8009dec:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	f000 8114 	beq.w	800a01c <tcp_receive+0x730>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009df4:	f8df 924c 	ldr.w	r9, [pc, #588]	@ 800a044 <tcp_receive+0x758>
 8009df8:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 800a068 <tcp_receive+0x77c>
 8009dfc:	4f93      	ldr	r7, [pc, #588]	@ (800a04c <tcp_receive+0x760>)
 8009dfe:	e035      	b.n	8009e6c <tcp_receive+0x580>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e00:	68f3      	ldr	r3, [r6, #12]
 8009e02:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8009e06:	8998      	ldrh	r0, [r3, #12]
 8009e08:	f7fc ff5a 	bl	8006cc0 <lwip_htons>
 8009e0c:	f010 0003 	ands.w	r0, r0, #3
 8009e10:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8009e12:	bf18      	it	ne
 8009e14:	2001      	movne	r0, #1
 8009e16:	4450      	add	r0, sl
 8009e18:	1a1b      	subs	r3, r3, r0
          tcp_update_rcv_ann_wnd(pcb);
 8009e1a:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e1c:	8523      	strh	r3, [r4, #40]	@ 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009e1e:	f7fe fb13 	bl	8008448 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009e22:	6871      	ldr	r1, [r6, #4]
 8009e24:	890b      	ldrh	r3, [r1, #8]
 8009e26:	b143      	cbz	r3, 8009e3a <tcp_receive+0x54e>
            if (recv_data) {
 8009e28:	4b8a      	ldr	r3, [pc, #552]	@ (800a054 <tcp_receive+0x768>)
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f000 80db 	beq.w	8009fe8 <tcp_receive+0x6fc>
              pbuf_cat(recv_data, cseg->p);
 8009e32:	f7fd ffd1 	bl	8007dd8 <pbuf_cat>
            cseg->p = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	6073      	str	r3, [r6, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009e3a:	68f3      	ldr	r3, [r6, #12]
 8009e3c:	8998      	ldrh	r0, [r3, #12]
 8009e3e:	f7fc ff3f 	bl	8006cc0 <lwip_htons>
 8009e42:	07c3      	lsls	r3, r0, #31
 8009e44:	d509      	bpl.n	8009e5a <tcp_receive+0x56e>
            recv_flags |= TF_GOT_FIN;
 8009e46:	4a84      	ldr	r2, [pc, #528]	@ (800a058 <tcp_receive+0x76c>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009e48:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8009e4a:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009e4c:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8009e4e:	f043 0320 	orr.w	r3, r3, #32
 8009e52:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009e54:	d101      	bne.n	8009e5a <tcp_receive+0x56e>
              pcb->state = CLOSE_WAIT;
 8009e56:	2307      	movs	r3, #7
 8009e58:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009e5a:	6833      	ldr	r3, [r6, #0]
          tcp_seg_free(cseg);
 8009e5c:	4630      	mov	r0, r6
          pcb->ooseq = cseg->next;
 8009e5e:	6763      	str	r3, [r4, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009e60:	f7fe fc34 	bl	80086cc <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009e64:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	f000 80d8 	beq.w	800a01c <tcp_receive+0x730>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009e6c:	68f2      	ldr	r2, [r6, #12]
        while (pcb->ooseq != NULL &&
 8009e6e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009e70:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009e72:	428b      	cmp	r3, r1
 8009e74:	f040 80d2 	bne.w	800a01c <tcp_receive+0x730>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009e78:	602b      	str	r3, [r5, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e7a:	8990      	ldrh	r0, [r2, #12]
 8009e7c:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 8009e80:	f7fc ff1e 	bl	8006cc0 <lwip_htons>
 8009e84:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e86:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e8a:	f8b6 b008 	ldrh.w	fp, [r6, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e8e:	bf18      	it	ne
 8009e90:	2001      	movne	r0, #1
 8009e92:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e94:	68f3      	ldr	r3, [r6, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e96:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e98:	f8b4 a028 	ldrh.w	sl, [r4, #40]	@ 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e9c:	6260      	str	r0, [r4, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e9e:	8998      	ldrh	r0, [r3, #12]
 8009ea0:	f7fc ff0e 	bl	8006cc0 <lwip_htons>
 8009ea4:	f010 0003 	ands.w	r0, r0, #3
 8009ea8:	bf18      	it	ne
 8009eaa:	2001      	movne	r0, #1
 8009eac:	4458      	add	r0, fp
 8009eae:	4582      	cmp	sl, r0
 8009eb0:	d2a6      	bcs.n	8009e00 <tcp_receive+0x514>
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	f240 622b 	movw	r2, #1579	@ 0x62b
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f004 fa96 	bl	800e3ec <iprintf>
 8009ec0:	e79e      	b.n	8009e00 <tcp_receive+0x514>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009ec2:	4b60      	ldr	r3, [pc, #384]	@ (800a044 <tcp_receive+0x758>)
 8009ec4:	f240 5294 	movw	r2, #1428	@ 0x594
 8009ec8:	4964      	ldr	r1, [pc, #400]	@ (800a05c <tcp_receive+0x770>)
 8009eca:	4860      	ldr	r0, [pc, #384]	@ (800a04c <tcp_receive+0x760>)
 8009ecc:	f004 fa8e 	bl	800e3ec <iprintf>
 8009ed0:	e695      	b.n	8009bfe <tcp_receive+0x312>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ed2:	4863      	ldr	r0, [pc, #396]	@ (800a060 <tcp_receive+0x774>)
 8009ed4:	f7fe fc08 	bl	80086e8 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009ed8:	4607      	mov	r7, r0
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f ad67 	beq.w	80099ae <tcp_receive+0xc2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009ee0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ee4:	682a      	ldr	r2, [r5, #0]
 8009ee6:	6859      	ldr	r1, [r3, #4]
 8009ee8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009eec:	440b      	add	r3, r1
 8009eee:	1a9b      	subs	r3, r3, r2
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	dd07      	ble.n	8009f04 <tcp_receive+0x618>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009ef4:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8009ef6:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009efa:	b291      	uxth	r1, r2
 8009efc:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009f00:	f7fd fee6 	bl	8007cd0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8009f04:	4631      	mov	r1, r6
 8009f06:	4638      	mov	r0, r7
                    prev->next = cseg;
 8009f08:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009f0c:	f7ff fc1c 	bl	8009748 <tcp_oos_insert_segment>
 8009f10:	e54d      	b.n	80099ae <tcp_receive+0xc2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f12:	8980      	ldrh	r0, [r0, #12]
 8009f14:	f7fc fed4 	bl	8006cc0 <lwip_htons>
 8009f18:	07c1      	lsls	r1, r0, #31
 8009f1a:	f53f ad48 	bmi.w	80099ae <tcp_receive+0xc2>
                next->next = tcp_seg_copy(&inseg);
 8009f1e:	4850      	ldr	r0, [pc, #320]	@ (800a060 <tcp_receive+0x774>)
 8009f20:	f7fe fbe2 	bl	80086e8 <tcp_seg_copy>
 8009f24:	f8c8 0000 	str.w	r0, [r8]
                if (next->next != NULL) {
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	f43f ad40 	beq.w	80099ae <tcp_receive+0xc2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009f2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f32:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8009f36:	6859      	ldr	r1, [r3, #4]
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	440a      	add	r2, r1
 8009f3c:	1ad2      	subs	r2, r2, r3
 8009f3e:	2a00      	cmp	r2, #0
 8009f40:	dd07      	ble.n	8009f52 <tcp_receive+0x666>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009f42:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8009f44:	f8d8 0004 	ldr.w	r0, [r8, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009f48:	b299      	uxth	r1, r3
 8009f4a:	f8a8 1008 	strh.w	r1, [r8, #8]
                    pbuf_realloc(next->p, next->len);
 8009f4e:	f7fd febf 	bl	8007cd0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f52:	682a      	ldr	r2, [r5, #0]
 8009f54:	883b      	ldrh	r3, [r7, #0]
 8009f56:	4413      	add	r3, r2
 8009f58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f77f ad24 	ble.w	80099ae <tcp_receive+0xc2>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f66:	f8d8 3000 	ldr.w	r3, [r8]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	8998      	ldrh	r0, [r3, #12]
 8009f6e:	f7fc fea7 	bl	8006cc0 <lwip_htons>
 8009f72:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f74:	f8d8 3000 	ldr.w	r3, [r8]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f78:	f100 8124 	bmi.w	800a1c4 <tcp_receive+0x8d8>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009f7c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8009f7e:	682a      	ldr	r2, [r5, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 8009f80:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009f82:	1a89      	subs	r1, r1, r2
 8009f84:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009f86:	4411      	add	r1, r2
 8009f88:	b289      	uxth	r1, r1
 8009f8a:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009f8c:	f7fd fea0 	bl	8007cd0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009f90:	f8d8 3000 	ldr.w	r3, [r8]
 8009f94:	891e      	ldrh	r6, [r3, #8]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	8998      	ldrh	r0, [r3, #12]
 8009f9a:	f7fc fe91 	bl	8006cc0 <lwip_htons>
 8009f9e:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fa2:	6829      	ldr	r1, [r5, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8009fa4:	bf18      	it	ne
 8009fa6:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fa8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
                    tcplen = TCP_TCPLEN(next->next);
 8009faa:	4433      	add	r3, r6
 8009fac:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fae:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8009fb0:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4299      	cmp	r1, r3
 8009fb8:	f43f acf9 	beq.w	80099ae <tcp_receive+0xc2>
 8009fbc:	4b21      	ldr	r3, [pc, #132]	@ (800a044 <tcp_receive+0x758>)
 8009fbe:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009fc2:	4928      	ldr	r1, [pc, #160]	@ (800a064 <tcp_receive+0x778>)
 8009fc4:	4821      	ldr	r0, [pc, #132]	@ (800a04c <tcp_receive+0x760>)
 8009fc6:	f004 fa11 	bl	800e3ec <iprintf>
 8009fca:	e4f0      	b.n	80099ae <tcp_receive+0xc2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009fcc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009fd0:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009fd2:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009fd4:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009fd6:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009fda:	b292      	uxth	r2, r2
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	f63f aeb4 	bhi.w	8009d4a <tcp_receive+0x45e>
 8009fe2:	f8a4 2048 	strh.w	r2, [r4, #72]	@ 0x48
 8009fe6:	e564      	b.n	8009ab2 <tcp_receive+0x1c6>
              recv_data = cseg->p;
 8009fe8:	6019      	str	r1, [r3, #0]
 8009fea:	e724      	b.n	8009e36 <tcp_receive+0x54a>
 8009fec:	4646      	mov	r6, r8
 8009fee:	f04f 0800 	mov.w	r8, #0
              if (inseg.len > next->len) {
 8009ff2:	481b      	ldr	r0, [pc, #108]	@ (800a060 <tcp_receive+0x774>)
 8009ff4:	8933      	ldrh	r3, [r6, #8]
 8009ff6:	8902      	ldrh	r2, [r0, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	f67f acd8 	bls.w	80099ae <tcp_receive+0xc2>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ffe:	f7fe fb73 	bl	80086e8 <tcp_seg_copy>
                if (cseg != NULL) {
 800a002:	2800      	cmp	r0, #0
 800a004:	f43f acd3 	beq.w	80099ae <tcp_receive+0xc2>
                  if (prev != NULL) {
 800a008:	f1b8 0f00 	cmp.w	r8, #0
 800a00c:	f000 80d8 	beq.w	800a1c0 <tcp_receive+0x8d4>
                    prev->next = cseg;
 800a010:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 800a014:	4631      	mov	r1, r6
 800a016:	f7ff fb97 	bl	8009748 <tcp_oos_insert_segment>
 800a01a:	e4c8      	b.n	80099ae <tcp_receive+0xc2>
        tcp_ack(pcb);
 800a01c:	8b63      	ldrh	r3, [r4, #26]
 800a01e:	07d8      	lsls	r0, r3, #31
 800a020:	d50a      	bpl.n	800a038 <tcp_receive+0x74c>
 800a022:	f023 0301 	bic.w	r3, r3, #1
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	8363      	strh	r3, [r4, #26]
 800a02c:	e4f9      	b.n	8009a22 <tcp_receive+0x136>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a02e:	480c      	ldr	r0, [pc, #48]	@ (800a060 <tcp_receive+0x774>)
 800a030:	f7fe fb5a 	bl	80086e8 <tcp_seg_copy>
 800a034:	6760      	str	r0, [r4, #116]	@ 0x74
 800a036:	e4ba      	b.n	80099ae <tcp_receive+0xc2>
        tcp_ack(pcb);
 800a038:	f043 0301 	orr.w	r3, r3, #1
 800a03c:	8363      	strh	r3, [r4, #26]
 800a03e:	e4f0      	b.n	8009a22 <tcp_receive+0x136>
 800a040:	2401056e 	.word	0x2401056e
 800a044:	08010364 	.word	0x08010364
 800a048:	08010444 	.word	0x08010444
 800a04c:	0800f2f8 	.word	0x0800f2f8
 800a050:	08010434 	.word	0x08010434
 800a054:	24010568 	.word	0x24010568
 800a058:	2401056c 	.word	0x2401056c
 800a05c:	08010424 	.word	0x08010424
 800a060:	2401058c 	.word	0x2401058c
 800a064:	08010454 	.word	0x08010454
 800a068:	080104e8 	.word	0x080104e8
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a06c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a070:	8998      	ldrh	r0, [r3, #12]
 800a072:	f7fc fe25 	bl	8006cc0 <lwip_htons>
 800a076:	07c6      	lsls	r6, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a078:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a07c:	f100 8090 	bmi.w	800a1a0 <tcp_receive+0x8b4>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a080:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a082:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a084:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a088:	f7fc fe1a 	bl	8006cc0 <lwip_htons>
 800a08c:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 800a08e:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a092:	d503      	bpl.n	800a09c <tcp_receive+0x7b0>
            inseg.len -= 1;
 800a094:	3901      	subs	r1, #1
 800a096:	b289      	uxth	r1, r1
 800a098:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800a09c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a0a0:	f7fd fe16 	bl	8007cd0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a0a4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a0a8:	f8b9 6008 	ldrh.w	r6, [r9, #8]
 800a0ac:	8998      	ldrh	r0, [r3, #12]
 800a0ae:	f7fc fe07 	bl	8006cc0 <lwip_htons>
 800a0b2:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a0b6:	682a      	ldr	r2, [r5, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800a0b8:	bf18      	it	ne
 800a0ba:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a0bc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800a0be:	4433      	add	r3, r6
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a0c4:	4413      	add	r3, r2
 800a0c6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800a0c8:	440a      	add	r2, r1
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	f43f adda 	beq.w	8009c84 <tcp_receive+0x398>
 800a0d0:	4b47      	ldr	r3, [pc, #284]	@ (800a1f0 <tcp_receive+0x904>)
 800a0d2:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800a0d6:	4947      	ldr	r1, [pc, #284]	@ (800a1f4 <tcp_receive+0x908>)
 800a0d8:	4847      	ldr	r0, [pc, #284]	@ (800a1f8 <tcp_receive+0x90c>)
 800a0da:	f004 f987 	bl	800e3ec <iprintf>
 800a0de:	e5d1      	b.n	8009c84 <tcp_receive+0x398>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a0e0:	4b43      	ldr	r3, [pc, #268]	@ (800a1f0 <tcp_receive+0x904>)
 800a0e2:	f240 6207 	movw	r2, #1543	@ 0x607
 800a0e6:	4945      	ldr	r1, [pc, #276]	@ (800a1fc <tcp_receive+0x910>)
 800a0e8:	4843      	ldr	r0, [pc, #268]	@ (800a1f8 <tcp_receive+0x90c>)
 800a0ea:	f004 f97f 	bl	800e3ec <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a0ee:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800a0f0:	883a      	ldrh	r2, [r7, #0]
 800a0f2:	e661      	b.n	8009db8 <tcp_receive+0x4cc>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a0f4:	4842      	ldr	r0, [pc, #264]	@ (800a200 <tcp_receive+0x914>)
 800a0f6:	f7fe faf7 	bl	80086e8 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f43f ac57 	beq.w	80099ae <tcp_receive+0xc2>
                    tcp_oos_insert_segment(cseg, next);
 800a100:	4641      	mov	r1, r8
                    pcb->ooseq = cseg;
 800a102:	6760      	str	r0, [r4, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a104:	f7ff fb20 	bl	8009748 <tcp_oos_insert_segment>
 800a108:	e451      	b.n	80099ae <tcp_receive+0xc2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a10a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	@ 0x48
 800a10e:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800a110:	4413      	add	r3, r2
 800a112:	b29b      	uxth	r3, r3
 800a114:	429a      	cmp	r2, r3
 800a116:	d901      	bls.n	800a11c <tcp_receive+0x830>
 800a118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a11c:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
                tcp_rexmit_fast(pcb);
 800a120:	4620      	mov	r0, r4
 800a122:	f001 fe57 	bl	800bdd4 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a126:	e514      	b.n	8009b52 <tcp_receive+0x266>
                TCP_SEQ_GT(seqno + tcplen,
 800a128:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dc01      	bgt.n	800a134 <tcp_receive+0x848>
            pcb->ooseq = next;
 800a130:	6766      	str	r6, [r4, #116]	@ 0x74
 800a132:	e63c      	b.n	8009dae <tcp_receive+0x4c2>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a134:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a138:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a13c:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a140:	8998      	ldrh	r0, [r3, #12]
 800a142:	f7fc fdbd 	bl	8006cc0 <lwip_htons>
 800a146:	0781      	lsls	r1, r0, #30
 800a148:	d504      	bpl.n	800a154 <tcp_receive+0x868>
                inseg.len -= 1;
 800a14a:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800a14e:	3b01      	subs	r3, #1
 800a150:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a154:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 800a158:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a15c:	f7fd fdb8 	bl	8007cd0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a160:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a164:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 800a168:	8998      	ldrh	r0, [r3, #12]
 800a16a:	f7fc fda9 	bl	8006cc0 <lwip_htons>
 800a16e:	f010 0303 	ands.w	r3, r0, #3
 800a172:	bf18      	it	ne
 800a174:	2301      	movne	r3, #1
 800a176:	eb08 0203 	add.w	r2, r8, r3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a17a:	68f3      	ldr	r3, [r6, #12]
              tcplen = TCP_TCPLEN(&inseg);
 800a17c:	b292      	uxth	r2, r2
 800a17e:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a180:	6859      	ldr	r1, [r3, #4]
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	4413      	add	r3, r2
 800a186:	428b      	cmp	r3, r1
 800a188:	d0d2      	beq.n	800a130 <tcp_receive+0x844>
 800a18a:	4b19      	ldr	r3, [pc, #100]	@ (800a1f0 <tcp_receive+0x904>)
 800a18c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800a190:	491c      	ldr	r1, [pc, #112]	@ (800a204 <tcp_receive+0x918>)
 800a192:	4819      	ldr	r0, [pc, #100]	@ (800a1f8 <tcp_receive+0x90c>)
 800a194:	f004 f92a 	bl	800e3ec <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800a198:	883a      	ldrh	r2, [r7, #0]
 800a19a:	6829      	ldr	r1, [r5, #0]
 800a19c:	4411      	add	r1, r2
 800a19e:	e7c7      	b.n	800a130 <tcp_receive+0x844>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a1a0:	899e      	ldrh	r6, [r3, #12]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f426 567c 	bic.w	r6, r6, #16128	@ 0x3f00
 800a1a8:	f7fc fd8a 	bl	8006cc0 <lwip_htons>
 800a1ac:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800a1b0:	f7fc fd86 	bl	8006cc0 <lwip_htons>
 800a1b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a1b8:	4330      	orrs	r0, r6
 800a1ba:	8198      	strh	r0, [r3, #12]
 800a1bc:	b280      	uxth	r0, r0
 800a1be:	e760      	b.n	800a082 <tcp_receive+0x796>
                    pcb->ooseq = cseg;
 800a1c0:	6760      	str	r0, [r4, #116]	@ 0x74
 800a1c2:	e727      	b.n	800a014 <tcp_receive+0x728>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	899e      	ldrh	r6, [r3, #12]
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f426 567c 	bic.w	r6, r6, #16128	@ 0x3f00
 800a1ce:	f7fc fd77 	bl	8006cc0 <lwip_htons>
 800a1d2:	f000 003e 	and.w	r0, r0, #62	@ 0x3e
 800a1d6:	f7fc fd73 	bl	8006cc0 <lwip_htons>
 800a1da:	f8d8 3000 	ldr.w	r3, [r8]
 800a1de:	ea40 0206 	orr.w	r2, r0, r6
 800a1e2:	68d9      	ldr	r1, [r3, #12]
 800a1e4:	818a      	strh	r2, [r1, #12]
 800a1e6:	e6c9      	b.n	8009f7c <tcp_receive+0x690>
 800a1e8:	f8df 9014 	ldr.w	r9, [pc, #20]	@ 800a200 <tcp_receive+0x914>
 800a1ec:	e538      	b.n	8009c60 <tcp_receive+0x374>
 800a1ee:	bf00      	nop
 800a1f0:	08010364 	.word	0x08010364
 800a1f4:	08010454 	.word	0x08010454
 800a1f8:	0800f2f8 	.word	0x0800f2f8
 800a1fc:	080104c8 	.word	0x080104c8
 800a200:	2401058c 	.word	0x2401058c
 800a204:	0801048c 	.word	0x0801048c

0800a208 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a20c:	4604      	mov	r4, r0
 800a20e:	2800      	cmp	r0, #0
 800a210:	f000 808e 	beq.w	800a330 <tcp_parseopt+0x128>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a214:	4b55      	ldr	r3, [pc, #340]	@ (800a36c <tcp_parseopt+0x164>)
 800a216:	881e      	ldrh	r6, [r3, #0]
 800a218:	2e00      	cmp	r6, #0
 800a21a:	d037      	beq.n	800a28c <tcp_parseopt+0x84>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a21c:	4b54      	ldr	r3, [pc, #336]	@ (800a370 <tcp_parseopt+0x168>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a21e:	2200      	movs	r2, #0
 800a220:	f8df e164 	ldr.w	lr, [pc, #356]	@ 800a388 <tcp_parseopt+0x180>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a224:	681d      	ldr	r5, [r3, #0]
 800a226:	4611      	mov	r1, r2
 800a228:	4b52      	ldr	r3, [pc, #328]	@ (800a374 <tcp_parseopt+0x16c>)
    return opts[optidx];
 800a22a:	4f53      	ldr	r7, [pc, #332]	@ (800a378 <tcp_parseopt+0x170>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a22c:	f8b3 c000 	ldrh.w	ip, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a230:	f8ae 2000 	strh.w	r2, [lr]
tcp_parseopt(struct tcp_pcb *pcb)
 800a234:	4608      	mov	r0, r1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a236:	428e      	cmp	r6, r1
 800a238:	f240 808b 	bls.w	800a352 <tcp_parseopt+0x14a>
  u16_t optidx = tcp_optidx++;
 800a23c:	1c4b      	adds	r3, r1, #1
 800a23e:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a240:	b1d5      	cbz	r5, 800a278 <tcp_parseopt+0x70>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a242:	eba3 020c 	sub.w	r2, r3, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a246:	fa1f f880 	uxth.w	r8, r0
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a24a:	3a01      	subs	r2, #1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a24c:	45c4      	cmp	ip, r8
    return tcphdr_opt2[idx];
 800a24e:	b2d2      	uxtb	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a250:	d812      	bhi.n	800a278 <tcp_parseopt+0x70>
    return tcphdr_opt2[idx];
 800a252:	5caa      	ldrb	r2, [r5, r2]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 800a254:	2a01      	cmp	r2, #1
 800a256:	d073      	beq.n	800a340 <tcp_parseopt+0x138>
 800a258:	2a02      	cmp	r2, #2
 800a25a:	d019      	beq.n	800a290 <tcp_parseopt+0x88>
 800a25c:	b1a2      	cbz	r2, 800a288 <tcp_parseopt+0x80>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a25e:	b10d      	cbz	r5, 800a264 <tcp_parseopt+0x5c>
 800a260:	459c      	cmp	ip, r3
 800a262:	d953      	bls.n	800a30c <tcp_parseopt+0x104>
    return opts[optidx];
 800a264:	4a44      	ldr	r2, [pc, #272]	@ (800a378 <tcp_parseopt+0x170>)
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	4413      	add	r3, r2
 800a26a:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d978      	bls.n	800a362 <tcp_parseopt+0x15a>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a270:	440b      	add	r3, r1
 800a272:	b299      	uxth	r1, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a274:	2201      	movs	r2, #1
 800a276:	e7dd      	b.n	800a234 <tcp_parseopt+0x2c>
    return opts[optidx];
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	4402      	add	r2, r0
 800a27c:	7d12      	ldrb	r2, [r2, #20]
      switch (opt) {
 800a27e:	2a01      	cmp	r2, #1
 800a280:	d1ea      	bne.n	800a258 <tcp_parseopt+0x50>
 800a282:	3001      	adds	r0, #1
  u16_t optidx = tcp_optidx++;
 800a284:	4619      	mov	r1, r3
 800a286:	e7d6      	b.n	800a236 <tcp_parseopt+0x2e>
 800a288:	f8ae 3000 	strh.w	r3, [lr]
      }
    }
  }
}
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  u16_t optidx = tcp_optidx++;
 800a290:	1c8a      	adds	r2, r1, #2
 800a292:	b292      	uxth	r2, r2
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a294:	b10d      	cbz	r5, 800a29a <tcp_parseopt+0x92>
 800a296:	459c      	cmp	ip, r3
 800a298:	d911      	bls.n	800a2be <tcp_parseopt+0xb6>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a29a:	4837      	ldr	r0, [pc, #220]	@ (800a378 <tcp_parseopt+0x170>)
 800a29c:	6800      	ldr	r0, [r0, #0]
    return opts[optidx];
 800a29e:	4403      	add	r3, r0
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a2a0:	7d1b      	ldrb	r3, [r3, #20]
 800a2a2:	2b04      	cmp	r3, #4
 800a2a4:	d15a      	bne.n	800a35c <tcp_parseopt+0x154>
 800a2a6:	1c53      	adds	r3, r2, #1
 800a2a8:	42b3      	cmp	r3, r6
 800a2aa:	da57      	bge.n	800a35c <tcp_parseopt+0x154>
  u16_t optidx = tcp_optidx++;
 800a2ac:	1ccb      	adds	r3, r1, #3
 800a2ae:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2b0:	b985      	cbnz	r5, 800a2d4 <tcp_parseopt+0xcc>
    return opts[optidx];
 800a2b2:	4402      	add	r2, r0
  u16_t optidx = tcp_optidx++;
 800a2b4:	3104      	adds	r1, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2b6:	7d12      	ldrb	r2, [r2, #20]
  u16_t optidx = tcp_optidx++;
 800a2b8:	b289      	uxth	r1, r1
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2ba:	0212      	lsls	r2, r2, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2bc:	e018      	b.n	800a2f0 <tcp_parseopt+0xe8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a2be:	eba3 030c 	sub.w	r3, r3, ip
    return tcphdr_opt2[idx];
 800a2c2:	b2db      	uxtb	r3, r3
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a2c4:	5ceb      	ldrb	r3, [r5, r3]
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d148      	bne.n	800a35c <tcp_parseopt+0x154>
 800a2ca:	1c53      	adds	r3, r2, #1
 800a2cc:	42b3      	cmp	r3, r6
 800a2ce:	da45      	bge.n	800a35c <tcp_parseopt+0x154>
  u16_t optidx = tcp_optidx++;
 800a2d0:	1ccb      	adds	r3, r1, #3
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	3104      	adds	r1, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2d6:	4594      	cmp	ip, r2
  u16_t optidx = tcp_optidx++;
 800a2d8:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2da:	d81c      	bhi.n	800a316 <tcp_parseopt+0x10e>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a2dc:	eba2 020c 	sub.w	r2, r2, ip
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2e0:	459c      	cmp	ip, r3
    return tcphdr_opt2[idx];
 800a2e2:	b2d2      	uxtb	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a2e4:	5caa      	ldrb	r2, [r5, r2]
 800a2e6:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2ea:	d91c      	bls.n	800a326 <tcp_parseopt+0x11e>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a2ec:	4822      	ldr	r0, [pc, #136]	@ (800a378 <tcp_parseopt+0x170>)
 800a2ee:	6800      	ldr	r0, [r0, #0]
    return opts[optidx];
 800a2f0:	4418      	add	r0, r3
 800a2f2:	7d03      	ldrb	r3, [r0, #20]
          mss |= tcp_get_next_optbyte();
 800a2f4:	4313      	orrs	r3, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a2f6:	f240 58b3 	movw	r8, #1459	@ 0x5b3
 800a2fa:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 800a2fe:	1e5a      	subs	r2, r3, #1
 800a300:	b292      	uxth	r2, r2
 800a302:	4542      	cmp	r2, r8
 800a304:	bf88      	it	hi
 800a306:	4603      	movhi	r3, r0
 800a308:	8663      	strh	r3, [r4, #50]	@ 0x32
          break;
 800a30a:	e7b3      	b.n	800a274 <tcp_parseopt+0x6c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a30c:	eba3 030c 	sub.w	r3, r3, ip
    return tcphdr_opt2[idx];
 800a310:	b2db      	uxtb	r3, r3
 800a312:	5ceb      	ldrb	r3, [r5, r3]
 800a314:	e7aa      	b.n	800a26c <tcp_parseopt+0x64>
    return opts[optidx];
 800a316:	4818      	ldr	r0, [pc, #96]	@ (800a378 <tcp_parseopt+0x170>)
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a318:	459c      	cmp	ip, r3
    return opts[optidx];
 800a31a:	6800      	ldr	r0, [r0, #0]
 800a31c:	4402      	add	r2, r0
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a31e:	7d12      	ldrb	r2, [r2, #20]
 800a320:	ea4f 2202 	mov.w	r2, r2, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a324:	d8e2      	bhi.n	800a2ec <tcp_parseopt+0xe4>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a326:	eba3 030c 	sub.w	r3, r3, ip
    return tcphdr_opt2[idx];
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	5ceb      	ldrb	r3, [r5, r3]
 800a32e:	e7e1      	b.n	800a2f4 <tcp_parseopt+0xec>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a330:	4b12      	ldr	r3, [pc, #72]	@ (800a37c <tcp_parseopt+0x174>)
 800a332:	f240 727d 	movw	r2, #1917	@ 0x77d
 800a336:	4912      	ldr	r1, [pc, #72]	@ (800a380 <tcp_parseopt+0x178>)
 800a338:	4812      	ldr	r0, [pc, #72]	@ (800a384 <tcp_parseopt+0x17c>)
 800a33a:	f004 f857 	bl	800e3ec <iprintf>
 800a33e:	e769      	b.n	800a214 <tcp_parseopt+0xc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a340:	429e      	cmp	r6, r3
 800a342:	f100 0001 	add.w	r0, r0, #1
  u16_t optidx = tcp_optidx++;
 800a346:	f103 0201 	add.w	r2, r3, #1
 800a34a:	4619      	mov	r1, r3
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a34c:	d903      	bls.n	800a356 <tcp_parseopt+0x14e>
  u16_t optidx = tcp_optidx++;
 800a34e:	b293      	uxth	r3, r2
 800a350:	e777      	b.n	800a242 <tcp_parseopt+0x3a>
 800a352:	2a00      	cmp	r2, #0
 800a354:	d09a      	beq.n	800a28c <tcp_parseopt+0x84>
 800a356:	f8ae 1000 	strh.w	r1, [lr]
 800a35a:	e797      	b.n	800a28c <tcp_parseopt+0x84>
 800a35c:	f8ae 2000 	strh.w	r2, [lr]
 800a360:	e794      	b.n	800a28c <tcp_parseopt+0x84>
 800a362:	3102      	adds	r1, #2
 800a364:	f8ae 1000 	strh.w	r1, [lr]
 800a368:	e790      	b.n	800a28c <tcp_parseopt+0x84>
 800a36a:	bf00      	nop
 800a36c:	24010586 	.word	0x24010586
 800a370:	24010580 	.word	0x24010580
 800a374:	24010584 	.word	0x24010584
 800a378:	24010588 	.word	0x24010588
 800a37c:	08010364 	.word	0x08010364
 800a380:	08010510 	.word	0x08010510
 800a384:	0800f2f8 	.word	0x0800f2f8
 800a388:	2401057c 	.word	0x2401057c

0800a38c <tcp_input>:
{
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	4604      	mov	r4, r0
 800a392:	b087      	sub	sp, #28
  LWIP_ASSERT_CORE_LOCKED();
 800a394:	f7f9 ffa8 	bl	80042e8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a398:	2c00      	cmp	r4, #0
 800a39a:	f000 80d5 	beq.w	800a548 <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800a39e:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800a3a0:	4e6d      	ldr	r6, [pc, #436]	@ (800a558 <tcp_input+0x1cc>)
 800a3a2:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800a3a4:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800a3a6:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800a3a8:	d805      	bhi.n	800a3b6 <tcp_input+0x2a>
  pbuf_free(p);
 800a3aa:	4620      	mov	r0, r4
}
 800a3ac:	b007      	add	sp, #28
 800a3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a3b2:	f7fd bb75 	b.w	8007aa0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a3b6:	4f69      	ldr	r7, [pc, #420]	@ (800a55c <tcp_input+0x1d0>)
 800a3b8:	6839      	ldr	r1, [r7, #0]
 800a3ba:	6978      	ldr	r0, [r7, #20]
 800a3bc:	f003 f96c 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d1f1      	bne.n	800a3aa <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a3cc:	2be0      	cmp	r3, #224	@ 0xe0
 800a3ce:	d0ec      	beq.n	800a3aa <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a3d0:	6833      	ldr	r3, [r6, #0]
 800a3d2:	8998      	ldrh	r0, [r3, #12]
 800a3d4:	f7fc fc74 	bl	8006cc0 <lwip_htons>
 800a3d8:	0a81      	lsrs	r1, r0, #10
 800a3da:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a3de:	2913      	cmp	r1, #19
 800a3e0:	d9e3      	bls.n	800a3aa <tcp_input+0x1e>
 800a3e2:	8923      	ldrh	r3, [r4, #8]
 800a3e4:	428b      	cmp	r3, r1
 800a3e6:	d3e0      	bcc.n	800a3aa <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a3e8:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800a3ec:	8962      	ldrh	r2, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a3ee:	f8df 91a0 	ldr.w	r9, [pc, #416]	@ 800a590 <tcp_input+0x204>
 800a3f2:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800a3f4:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a594 <tcp_input+0x208>
  if (p->len >= hdrlen_bytes) {
 800a3f8:	428a      	cmp	r2, r1
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a3fa:	f8a9 3000 	strh.w	r3, [r9]
  tcphdr_opt2 = NULL;
 800a3fe:	f8c8 5000 	str.w	r5, [r8]
  if (p->len >= hdrlen_bytes) {
 800a402:	f080 819d 	bcs.w	800a740 <tcp_input+0x3b4>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 837b 	beq.w	800ab04 <tcp_input+0x778>
    pbuf_remove_header(p, TCP_HLEN);
 800a40e:	2114      	movs	r1, #20
 800a410:	4620      	mov	r0, r4
 800a412:	f7fd fae3 	bl	80079dc <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a416:	8965      	ldrh	r5, [r4, #10]
 800a418:	4b51      	ldr	r3, [pc, #324]	@ (800a560 <tcp_input+0x1d4>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800a41a:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a41c:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a420:	4629      	mov	r1, r5
    tcphdr_opt1len = p->len;
 800a422:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a424:	f7fd fada 	bl	80079dc <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a428:	ebaa 0905 	sub.w	r9, sl, r5
    if (opt2len > p->next->len) {
 800a42c:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a42e:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800a432:	8943      	ldrh	r3, [r0, #10]
 800a434:	454b      	cmp	r3, r9
 800a436:	d3b8      	bcc.n	800a3aa <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a438:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a43a:	4649      	mov	r1, r9
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a43c:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800a440:	f7fd facc 	bl	80079dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a444:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a446:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a448:	442b      	add	r3, r5
 800a44a:	eba3 030a 	sub.w	r3, r3, sl
 800a44e:	b29b      	uxth	r3, r3
 800a450:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a452:	2a00      	cmp	r2, #0
 800a454:	f040 835d 	bne.w	800ab12 <tcp_input+0x786>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	8912      	ldrh	r2, [r2, #8]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d005      	beq.n	800a46c <tcp_input+0xe0>
 800a460:	4b40      	ldr	r3, [pc, #256]	@ (800a564 <tcp_input+0x1d8>)
 800a462:	22e0      	movs	r2, #224	@ 0xe0
 800a464:	4940      	ldr	r1, [pc, #256]	@ (800a568 <tcp_input+0x1dc>)
 800a466:	4841      	ldr	r0, [pc, #260]	@ (800a56c <tcp_input+0x1e0>)
 800a468:	f003 ffc0 	bl	800e3ec <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a46c:	6835      	ldr	r5, [r6, #0]
 800a46e:	8828      	ldrh	r0, [r5, #0]
 800a470:	f7fc fc26 	bl	8006cc0 <lwip_htons>
 800a474:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a476:	6835      	ldr	r5, [r6, #0]
 800a478:	8868      	ldrh	r0, [r5, #2]
 800a47a:	f7fc fc21 	bl	8006cc0 <lwip_htons>
 800a47e:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a480:	6835      	ldr	r5, [r6, #0]
 800a482:	6868      	ldr	r0, [r5, #4]
 800a484:	f7fc fc20 	bl	8006cc8 <lwip_htonl>
 800a488:	4b39      	ldr	r3, [pc, #228]	@ (800a570 <tcp_input+0x1e4>)
 800a48a:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a48c:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a48e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a490:	68a8      	ldr	r0, [r5, #8]
 800a492:	f7fc fc19 	bl	8006cc8 <lwip_htonl>
 800a496:	4b37      	ldr	r3, [pc, #220]	@ (800a574 <tcp_input+0x1e8>)
 800a498:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a49a:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a49c:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a49e:	89e8      	ldrh	r0, [r5, #14]
 800a4a0:	f7fc fc0e 	bl	8006cc0 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a4a4:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a4a6:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a4a8:	8998      	ldrh	r0, [r3, #12]
 800a4aa:	f7fc fc09 	bl	8006cc0 <lwip_htons>
 800a4ae:	4932      	ldr	r1, [pc, #200]	@ (800a578 <tcp_input+0x1ec>)
 800a4b0:	f000 033f 	and.w	r3, r0, #63	@ 0x3f
  tcplen = p->tot_len;
 800a4b4:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a4b6:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a4b8:	0781      	lsls	r1, r0, #30
 800a4ba:	f040 8147 	bne.w	800a74c <tcp_input+0x3c0>
  tcplen = p->tot_len;
 800a4be:	4b2f      	ldr	r3, [pc, #188]	@ (800a57c <tcp_input+0x1f0>)
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a4c4:	4b2e      	ldr	r3, [pc, #184]	@ (800a580 <tcp_input+0x1f4>)
 800a4c6:	681d      	ldr	r5, [r3, #0]
 800a4c8:	2d00      	cmp	r5, #0
 800a4ca:	f000 80e8 	beq.w	800a69e <tcp_input+0x312>
  prev = NULL;
 800a4ce:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a4d2:	f8df a090 	ldr.w	sl, [pc, #144]	@ 800a564 <tcp_input+0x1d8>
 800a4d6:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 800a598 <tcp_input+0x20c>
 800a4da:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a56c <tcp_input+0x1e0>
 800a4de:	e017      	b.n	800a510 <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a4e0:	2b0a      	cmp	r3, #10
 800a4e2:	d021      	beq.n	800a528 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d028      	beq.n	800a53a <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4e8:	7a2a      	ldrb	r2, [r5, #8]
 800a4ea:	b132      	cbz	r2, 800a4fa <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4f2:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d104      	bne.n	800a504 <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800a4fa:	6833      	ldr	r3, [r6, #0]
 800a4fc:	8b29      	ldrh	r1, [r5, #24]
 800a4fe:	881a      	ldrh	r2, [r3, #0]
 800a500:	4291      	cmp	r1, r2
 800a502:	d04b      	beq.n	800a59c <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a504:	68eb      	ldr	r3, [r5, #12]
 800a506:	46a8      	mov	r8, r5
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f000 80c8 	beq.w	800a69e <tcp_input+0x312>
 800a50e:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a510:	7d2b      	ldrb	r3, [r5, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e4      	bne.n	800a4e0 <tcp_input+0x154>
 800a516:	4653      	mov	r3, sl
 800a518:	22fb      	movs	r2, #251	@ 0xfb
 800a51a:	4659      	mov	r1, fp
 800a51c:	4648      	mov	r0, r9
 800a51e:	f003 ff65 	bl	800e3ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a522:	7d2b      	ldrb	r3, [r5, #20]
 800a524:	2b0a      	cmp	r3, #10
 800a526:	d1dd      	bne.n	800a4e4 <tcp_input+0x158>
 800a528:	4653      	mov	r3, sl
 800a52a:	22fc      	movs	r2, #252	@ 0xfc
 800a52c:	4915      	ldr	r1, [pc, #84]	@ (800a584 <tcp_input+0x1f8>)
 800a52e:	4648      	mov	r0, r9
 800a530:	f003 ff5c 	bl	800e3ec <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a534:	7d2b      	ldrb	r3, [r5, #20]
 800a536:	2b01      	cmp	r3, #1
 800a538:	d1d6      	bne.n	800a4e8 <tcp_input+0x15c>
 800a53a:	4653      	mov	r3, sl
 800a53c:	22fd      	movs	r2, #253	@ 0xfd
 800a53e:	4912      	ldr	r1, [pc, #72]	@ (800a588 <tcp_input+0x1fc>)
 800a540:	4648      	mov	r0, r9
 800a542:	f003 ff53 	bl	800e3ec <iprintf>
 800a546:	e7cf      	b.n	800a4e8 <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a548:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <tcp_input+0x1d8>)
 800a54a:	2283      	movs	r2, #131	@ 0x83
 800a54c:	490f      	ldr	r1, [pc, #60]	@ (800a58c <tcp_input+0x200>)
 800a54e:	4807      	ldr	r0, [pc, #28]	@ (800a56c <tcp_input+0x1e0>)
 800a550:	f003 ff4c 	bl	800e3ec <iprintf>
 800a554:	e723      	b.n	800a39e <tcp_input+0x12>
 800a556:	bf00      	nop
 800a558:	24010588 	.word	0x24010588
 800a55c:	24009a90 	.word	0x24009a90
 800a560:	24010584 	.word	0x24010584
 800a564:	08010364 	.word	0x08010364
 800a568:	08010560 	.word	0x08010560
 800a56c:	0800f2f8 	.word	0x0800f2f8
 800a570:	24010578 	.word	0x24010578
 800a574:	24010574 	.word	0x24010574
 800a578:	2401056d 	.word	0x2401056d
 800a57c:	2401056e 	.word	0x2401056e
 800a580:	24010554 	.word	0x24010554
 800a584:	080105a8 	.word	0x080105a8
 800a588:	080105d4 	.word	0x080105d4
 800a58c:	0801052c 	.word	0x0801052c
 800a590:	24010586 	.word	0x24010586
 800a594:	24010580 	.word	0x24010580
 800a598:	08010580 	.word	0x08010580
    if (pcb->remote_port == tcphdr->src &&
 800a59c:	885b      	ldrh	r3, [r3, #2]
 800a59e:	8aea      	ldrh	r2, [r5, #22]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d1af      	bne.n	800a504 <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800a5a4:	686a      	ldr	r2, [r5, #4]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d1ab      	bne.n	800a504 <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a5ac:	682a      	ldr	r2, [r5, #0]
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d1a7      	bne.n	800a504 <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a5b4:	68eb      	ldr	r3, [r5, #12]
 800a5b6:	42ab      	cmp	r3, r5
 800a5b8:	f000 843f 	beq.w	800ae3a <tcp_input+0xaae>
      if (prev != NULL) {
 800a5bc:	f1b8 0f00 	cmp.w	r8, #0
 800a5c0:	d009      	beq.n	800a5d6 <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800a5c2:	4a6f      	ldr	r2, [pc, #444]	@ (800a780 <tcp_input+0x3f4>)
        prev->next = pcb->next;
 800a5c4:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800a5c8:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800a5ca:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800a5cc:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a5ce:	68eb      	ldr	r3, [r5, #12]
 800a5d0:	42ab      	cmp	r3, r5
 800a5d2:	f000 8440 	beq.w	800ae56 <tcp_input+0xaca>
    inseg.next = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4f6a      	ldr	r7, [pc, #424]	@ (800a784 <tcp_input+0x3f8>)
    recv_data = NULL;
 800a5da:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 800a7a0 <tcp_input+0x414>
    recv_flags = 0;
 800a5de:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 800a7a4 <tcp_input+0x418>
    recv_acked = 0;
 800a5e2:	f8df a1c4 	ldr.w	sl, [pc, #452]	@ 800a7a8 <tcp_input+0x41c>
    inseg.next = NULL;
 800a5e6:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800a5e8:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800a5ec:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800a5f0:	f8aa 3000 	strh.w	r3, [sl]
    if (flags & TCP_PSH) {
 800a5f4:	4b64      	ldr	r3, [pc, #400]	@ (800a788 <tcp_input+0x3fc>)
    inseg.len = p->tot_len;
 800a5f6:	8922      	ldrh	r2, [r4, #8]
    if (flags & TCP_PSH) {
 800a5f8:	781b      	ldrb	r3, [r3, #0]
    inseg.len = p->tot_len;
 800a5fa:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800a5fc:	0719      	lsls	r1, r3, #28
    inseg.tcphdr = tcphdr;
 800a5fe:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800a600:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800a602:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800a604:	d503      	bpl.n	800a60e <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800a606:	7b62      	ldrb	r2, [r4, #13]
 800a608:	f042 0201 	orr.w	r2, r2, #1
 800a60c:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800a60e:	6faa      	ldr	r2, [r5, #120]	@ 0x78
 800a610:	2a00      	cmp	r2, #0
 800a612:	f000 826e 	beq.w	800aaf2 <tcp_input+0x766>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a616:	4628      	mov	r0, r5
 800a618:	f7fe ff86 	bl	8009528 <tcp_process_refused_data>
 800a61c:	300d      	adds	r0, #13
 800a61e:	f000 826b 	beq.w	800aaf8 <tcp_input+0x76c>
 800a622:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800a624:	b123      	cbz	r3, 800a630 <tcp_input+0x2a4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a626:	9b05      	ldr	r3, [sp, #20]
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f040 8264 	bne.w	800aaf8 <tcp_input+0x76c>
  if (flags & TCP_RST) {
 800a630:	4b55      	ldr	r3, [pc, #340]	@ (800a788 <tcp_input+0x3fc>)
    tcp_input_pcb = pcb;
 800a632:	4c56      	ldr	r4, [pc, #344]	@ (800a78c <tcp_input+0x400>)
  if (flags & TCP_RST) {
 800a634:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800a636:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800a638:	075a      	lsls	r2, r3, #29
 800a63a:	f140 814e 	bpl.w	800a8da <tcp_input+0x54e>
    if (pcb->state == SYN_SENT) {
 800a63e:	7d29      	ldrb	r1, [r5, #20]
 800a640:	2902      	cmp	r1, #2
 800a642:	f000 82d9 	beq.w	800abf8 <tcp_input+0x86c>
      if (seqno == pcb->rcv_nxt) {
 800a646:	4b52      	ldr	r3, [pc, #328]	@ (800a790 <tcp_input+0x404>)
 800a648:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	f000 840b 	beq.w	800ae68 <tcp_input+0xadc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a652:	1a9b      	subs	r3, r3, r2
 800a654:	d404      	bmi.n	800a660 <tcp_input+0x2d4>
 800a656:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 800a658:	1a9b      	subs	r3, r3, r2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f340 833f 	ble.w	800acde <tcp_input+0x952>
      if (recv_flags & TF_RESET) {
 800a660:	f899 3000 	ldrb.w	r3, [r9]
 800a664:	071a      	lsls	r2, r3, #28
 800a666:	f140 825c 	bpl.w	800ab22 <tcp_input+0x796>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a66a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800a66e:	b11b      	cbz	r3, 800a678 <tcp_input+0x2ec>
 800a670:	f06f 010d 	mvn.w	r1, #13
 800a674:	6928      	ldr	r0, [r5, #16]
 800a676:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a678:	4841      	ldr	r0, [pc, #260]	@ (800a780 <tcp_input+0x3f4>)
 800a67a:	4629      	mov	r1, r5
 800a67c:	f7fe fbda 	bl	8008e34 <tcp_pcb_remove>
        tcp_free(pcb);
 800a680:	4628      	mov	r0, r5
 800a682:	f7fd fdcf 	bl	8008224 <tcp_free>
    tcp_input_pcb = NULL;
 800a686:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800a688:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800a68a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800a68c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800a690:	b110      	cbz	r0, 800a698 <tcp_input+0x30c>
      pbuf_free(inseg.p);
 800a692:	f7fd fa05 	bl	8007aa0 <pbuf_free>
      inseg.p = NULL;
 800a696:	607d      	str	r5, [r7, #4]
}
 800a698:	b007      	add	sp, #28
 800a69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a69e:	4b3d      	ldr	r3, [pc, #244]	@ (800a794 <tcp_input+0x408>)
 800a6a0:	681d      	ldr	r5, [r3, #0]
 800a6a2:	2d00      	cmp	r5, #0
 800a6a4:	d05b      	beq.n	800a75e <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a6a6:	f8df 8104 	ldr.w	r8, [pc, #260]	@ 800a7ac <tcp_input+0x420>
 800a6aa:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800a7b0 <tcp_input+0x424>
 800a6ae:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800a7b4 <tcp_input+0x428>
 800a6b2:	e002      	b.n	800a6ba <tcp_input+0x32e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a6b4:	68ed      	ldr	r5, [r5, #12]
 800a6b6:	2d00      	cmp	r5, #0
 800a6b8:	d051      	beq.n	800a75e <tcp_input+0x3d2>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a6ba:	7d2b      	ldrb	r3, [r5, #20]
 800a6bc:	2b0a      	cmp	r3, #10
 800a6be:	4643      	mov	r3, r8
 800a6c0:	d005      	beq.n	800a6ce <tcp_input+0x342>
 800a6c2:	f240 121f 	movw	r2, #287	@ 0x11f
 800a6c6:	4651      	mov	r1, sl
 800a6c8:	4648      	mov	r0, r9
 800a6ca:	f003 fe8f 	bl	800e3ec <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a6ce:	7a2a      	ldrb	r2, [r5, #8]
 800a6d0:	b132      	cbz	r2, 800a6e0 <tcp_input+0x354>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a6d8:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d1e9      	bne.n	800a6b4 <tcp_input+0x328>
      if (pcb->remote_port == tcphdr->src &&
 800a6e0:	6833      	ldr	r3, [r6, #0]
 800a6e2:	8b29      	ldrh	r1, [r5, #24]
 800a6e4:	881a      	ldrh	r2, [r3, #0]
 800a6e6:	4291      	cmp	r1, r2
 800a6e8:	d1e4      	bne.n	800a6b4 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800a6ea:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a6ec:	8aeb      	ldrh	r3, [r5, #22]
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d1e0      	bne.n	800a6b4 <tcp_input+0x328>
          pcb->local_port == tcphdr->dest &&
 800a6f2:	6868      	ldr	r0, [r5, #4]
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4290      	cmp	r0, r2
 800a6f8:	d1dc      	bne.n	800a6b4 <tcp_input+0x328>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a6fa:	6828      	ldr	r0, [r5, #0]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	4290      	cmp	r0, r2
 800a700:	d1d8      	bne.n	800a6b4 <tcp_input+0x328>
  if (flags & TCP_RST) {
 800a702:	4a21      	ldr	r2, [pc, #132]	@ (800a788 <tcp_input+0x3fc>)
 800a704:	7810      	ldrb	r0, [r2, #0]
 800a706:	0742      	lsls	r2, r0, #29
 800a708:	f53f ae4f 	bmi.w	800a3aa <tcp_input+0x1e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a70c:	9a05      	ldr	r2, [sp, #20]
  if (flags & TCP_SYN) {
 800a70e:	0787      	lsls	r7, r0, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a710:	8816      	ldrh	r6, [r2, #0]
  if (flags & TCP_SYN) {
 800a712:	f140 83b4 	bpl.w	800ae7e <tcp_input+0xaf2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a716:	4a1e      	ldr	r2, [pc, #120]	@ (800a790 <tcp_input+0x404>)
 800a718:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800a71a:	6812      	ldr	r2, [r2, #0]
 800a71c:	1a10      	subs	r0, r2, r0
 800a71e:	d404      	bmi.n	800a72a <tcp_input+0x39e>
 800a720:	8d2f      	ldrh	r7, [r5, #40]	@ 0x28
 800a722:	1bc0      	subs	r0, r0, r7
 800a724:	2800      	cmp	r0, #0
 800a726:	f340 83c9 	ble.w	800aebc <tcp_input+0xb30>
  if ((tcplen > 0)) {
 800a72a:	2e00      	cmp	r6, #0
 800a72c:	f43f ae3d 	beq.w	800a3aa <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800a730:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800a732:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800a734:	f043 0302 	orr.w	r3, r3, #2
 800a738:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800a73a:	f001 fbff 	bl	800bf3c <tcp_output>
        pbuf_free(p);
 800a73e:	e634      	b.n	800a3aa <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800a740:	4a15      	ldr	r2, [pc, #84]	@ (800a798 <tcp_input+0x40c>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a742:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800a744:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a746:	f7fd f949 	bl	80079dc <pbuf_remove_header>
 800a74a:	e68f      	b.n	800a46c <tcp_input+0xe0>
    tcplen++;
 800a74c:	1c53      	adds	r3, r2, #1
 800a74e:	4913      	ldr	r1, [pc, #76]	@ (800a79c <tcp_input+0x410>)
 800a750:	b29b      	uxth	r3, r3
 800a752:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800a754:	429a      	cmp	r2, r3
    tcplen++;
 800a756:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a758:	f67f aeb4 	bls.w	800a4c4 <tcp_input+0x138>
 800a75c:	e625      	b.n	800a3aa <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a75e:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 800a7b8 <tcp_input+0x42c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a762:	f8d6 c000 	ldr.w	ip, [r6]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a766:	f8d8 2000 	ldr.w	r2, [r8]
 800a76a:	2a00      	cmp	r2, #0
 800a76c:	f000 8229 	beq.w	800abc2 <tcp_input+0x836>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a770:	6878      	ldr	r0, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a772:	4615      	mov	r5, r2
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a774:	f8d7 e014 	ldr.w	lr, [r7, #20]
    prev = NULL;
 800a778:	2100      	movs	r1, #0
 800a77a:	4692      	mov	sl, r2
 800a77c:	e024      	b.n	800a7c8 <tcp_input+0x43c>
 800a77e:	bf00      	nop
 800a780:	24010554 	.word	0x24010554
 800a784:	2401058c 	.word	0x2401058c
 800a788:	2401056d 	.word	0x2401056d
 800a78c:	24010564 	.word	0x24010564
 800a790:	24010578 	.word	0x24010578
 800a794:	24010550 	.word	0x24010550
 800a798:	24010584 	.word	0x24010584
 800a79c:	2401056e 	.word	0x2401056e
 800a7a0:	24010568 	.word	0x24010568
 800a7a4:	2401056c 	.word	0x2401056c
 800a7a8:	24010570 	.word	0x24010570
 800a7ac:	08010364 	.word	0x08010364
 800a7b0:	08010654 	.word	0x08010654
 800a7b4:	0800f2f8 	.word	0x0800f2f8
 800a7b8:	24010558 	.word	0x24010558
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a7bc:	68eb      	ldr	r3, [r5, #12]
 800a7be:	4629      	mov	r1, r5
 800a7c0:	461d      	mov	r5, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f000 81fd 	beq.w	800abc2 <tcp_input+0x836>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7c8:	7a2a      	ldrb	r2, [r5, #8]
 800a7ca:	b12a      	cbz	r2, 800a7d8 <tcp_input+0x44c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a7cc:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800a7d0:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d1f1      	bne.n	800a7bc <tcp_input+0x430>
      if (lpcb->local_port == tcphdr->dest) {
 800a7d8:	f8b5 9016 	ldrh.w	r9, [r5, #22]
 800a7dc:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800a7e0:	4599      	cmp	r9, r3
 800a7e2:	d1eb      	bne.n	800a7bc <tcp_input+0x430>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a7e4:	682b      	ldr	r3, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a7e6:	b10b      	cbz	r3, 800a7ec <tcp_input+0x460>
 800a7e8:	4573      	cmp	r3, lr
 800a7ea:	d1e7      	bne.n	800a7bc <tcp_input+0x430>
      if (prev != NULL) {
 800a7ec:	4652      	mov	r2, sl
 800a7ee:	b121      	cbz	r1, 800a7fa <tcp_input+0x46e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a7f0:	68eb      	ldr	r3, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a7f2:	f8c8 5000 	str.w	r5, [r8]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a7f6:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a7f8:	60ea      	str	r2, [r5, #12]
  if (flags & TCP_RST) {
 800a7fa:	4ba9      	ldr	r3, [pc, #676]	@ (800aaa0 <tcp_input+0x714>)
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	075a      	lsls	r2, r3, #29
 800a800:	f53f add3 	bmi.w	800a3aa <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800a804:	f013 0810 	ands.w	r8, r3, #16
 800a808:	f040 826e 	bne.w	800ace8 <tcp_input+0x95c>
  } else if (flags & TCP_SYN) {
 800a80c:	0798      	lsls	r0, r3, #30
 800a80e:	f57f adcc 	bpl.w	800a3aa <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800a812:	7d68      	ldrb	r0, [r5, #21]
 800a814:	f7fe fcbc 	bl	8009190 <tcp_alloc>
    if (npcb == NULL) {
 800a818:	4681      	mov	r9, r0
 800a81a:	2800      	cmp	r0, #0
 800a81c:	f000 82cc 	beq.w	800adb8 <tcp_input+0xa2c>
    npcb->remote_port = tcphdr->src;
 800a820:	6831      	ldr	r1, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a822:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800a826:	4607      	mov	r7, r0
 800a828:	f847 2b04 	str.w	r2, [r7], #4
 800a82c:	6043      	str	r3, [r0, #4]
    npcb->rcv_nxt = seqno + 1;
 800a82e:	4b9d      	ldr	r3, [pc, #628]	@ (800aaa4 <tcp_input+0x718>)
 800a830:	681a      	ldr	r2, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800a832:	780b      	ldrb	r3, [r1, #0]
 800a834:	7849      	ldrb	r1, [r1, #1]
    npcb->rcv_nxt = seqno + 1;
 800a836:	3201      	adds	r2, #1
    npcb->remote_port = tcphdr->src;
 800a838:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800a83c:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800a83e:	6242      	str	r2, [r0, #36]	@ 0x24
    npcb->remote_port = tcphdr->src;
 800a840:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a842:	2303      	movs	r3, #3
    npcb->local_port = pcb->local_port;
 800a844:	82c1      	strh	r1, [r0, #22]
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a846:	62c2      	str	r2, [r0, #44]	@ 0x2c
    npcb->state = SYN_RCVD;
 800a848:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800a84a:	f7fe ff05 	bl	8009658 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a84e:	4b95      	ldr	r3, [pc, #596]	@ (800aaa4 <tcp_input+0x718>)
    npcb->snd_nxt = iss;
 800a850:	f8c9 0050 	str.w	r0, [r9, #80]	@ 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a854:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 800a856:	692b      	ldr	r3, [r5, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a858:	3a01      	subs	r2, #1
    npcb->lastack = iss;
 800a85a:	f8c9 0044 	str.w	r0, [r9, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a85e:	f8c9 005c 	str.w	r0, [r9, #92]	@ 0x5c
    npcb->listener = pcb;
 800a862:	f8c9 507c 	str.w	r5, [r9, #124]	@ 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a866:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->snd_wl2 = iss;
 800a86a:	e9c9 2015 	strd	r2, r0, [r9, #84]	@ 0x54
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a86e:	7a6b      	ldrb	r3, [r5, #9]
    TCP_REG_ACTIVE(npcb);
 800a870:	4a8d      	ldr	r2, [pc, #564]	@ (800aaa8 <tcp_input+0x71c>)
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a872:	f003 030c 	and.w	r3, r3, #12
 800a876:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a87a:	7a2b      	ldrb	r3, [r5, #8]
 800a87c:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	f8c2 9000 	str.w	r9, [r2]
 800a886:	f8c9 300c 	str.w	r3, [r9, #12]
 800a88a:	f001 fe73 	bl	800c574 <tcp_timer_needed>
 800a88e:	4b87      	ldr	r3, [pc, #540]	@ (800aaac <tcp_input+0x720>)
 800a890:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800a892:	4648      	mov	r0, r9
    TCP_REG_ACTIVE(npcb);
 800a894:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a896:	f7ff fcb7 	bl	800a208 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a89a:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a89c:	4638      	mov	r0, r7
 800a89e:	f8b9 5032 	ldrh.w	r5, [r9, #50]	@ 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a8a2:	89da      	ldrh	r2, [r3, #14]
 800a8a4:	4643      	mov	r3, r8
 800a8a6:	f362 030f 	bfi	r3, r2, #0, #16
 800a8aa:	f362 431f 	bfi	r3, r2, #16, #16
 800a8ae:	f8c9 3060 	str.w	r3, [r9, #96]	@ 0x60
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8b2:	f002 fd49 	bl	800d348 <ip4_route>
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4601      	mov	r1, r0
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f7fe fee8 	bl	8009690 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8c0:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a8c2:	f8a9 0032 	strh.w	r0, [r9, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a8c6:	4648      	mov	r0, r9
 800a8c8:	f001 f91e 	bl	800bb08 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f040 827e 	bne.w	800adce <tcp_input+0xa42>
    tcp_output(npcb);
 800a8d2:	4648      	mov	r0, r9
 800a8d4:	f001 fb32 	bl	800bf3c <tcp_output>
 800a8d8:	e567      	b.n	800a3aa <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a8da:	079b      	lsls	r3, r3, #30
        tcp_ack_now(pcb);
 800a8dc:	8b6a      	ldrh	r2, [r5, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a8de:	d504      	bpl.n	800a8ea <tcp_input+0x55e>
 800a8e0:	7d2b      	ldrb	r3, [r5, #20]
 800a8e2:	3b02      	subs	r3, #2
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	f200 819c 	bhi.w	800ac22 <tcp_input+0x896>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a8ea:	06d0      	lsls	r0, r2, #27
 800a8ec:	d402      	bmi.n	800a8f4 <tcp_input+0x568>
    pcb->tmr = tcp_ticks;
 800a8ee:	4b70      	ldr	r3, [pc, #448]	@ (800aab0 <tcp_input+0x724>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	622b      	str	r3, [r5, #32]
  pcb->persist_probe = 0;
 800a8f4:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 800a8f6:	4628      	mov	r0, r5
  pcb->persist_probe = 0;
 800a8f8:	f8a5 309a 	strh.w	r3, [r5, #154]	@ 0x9a
  tcp_parseopt(pcb);
 800a8fc:	f7ff fc84 	bl	800a208 <tcp_parseopt>
  switch (pcb->state) {
 800a900:	7d2b      	ldrb	r3, [r5, #20]
 800a902:	3b02      	subs	r3, #2
 800a904:	2b07      	cmp	r3, #7
 800a906:	f63f aeab 	bhi.w	800a660 <tcp_input+0x2d4>
 800a90a:	e8df f003 	tbb	[pc, r3]
 800a90e:	1334      	.short	0x1334
 800a910:	04748f04 	.word	0x04748f04
 800a914:	5ba8      	.short	0x5ba8
      tcp_receive(pcb);
 800a916:	4628      	mov	r0, r5
 800a918:	f7fe ffe8 	bl	80098ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a91c:	f899 3000 	ldrb.w	r3, [r9]
 800a920:	0699      	lsls	r1, r3, #26
 800a922:	f57f ae9d 	bpl.w	800a660 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800a926:	8b6b      	ldrh	r3, [r5, #26]
 800a928:	f043 0302 	orr.w	r3, r3, #2
 800a92c:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800a92e:	2307      	movs	r3, #7
 800a930:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800a932:	e695      	b.n	800a660 <tcp_input+0x2d4>
      if (flags & TCP_ACK) {
 800a934:	4b5a      	ldr	r3, [pc, #360]	@ (800aaa0 <tcp_input+0x714>)
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	06da      	lsls	r2, r3, #27
 800a93a:	f140 8210 	bpl.w	800ad5e <tcp_input+0x9d2>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a93e:	4b5d      	ldr	r3, [pc, #372]	@ (800aab4 <tcp_input+0x728>)
 800a940:	6819      	ldr	r1, [r3, #0]
 800a942:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800a944:	43db      	mvns	r3, r3
 800a946:	42cb      	cmn	r3, r1
 800a948:	d404      	bmi.n	800a954 <tcp_input+0x5c8>
 800a94a:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a94c:	1acb      	subs	r3, r1, r3
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f340 8243 	ble.w	800adda <tcp_input+0xa4e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a954:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a956:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a958:	8810      	ldrh	r0, [r2, #0]
 800a95a:	4a52      	ldr	r2, [pc, #328]	@ (800aaa4 <tcp_input+0x718>)
 800a95c:	6812      	ldr	r2, [r2, #0]
 800a95e:	4402      	add	r2, r0
 800a960:	8818      	ldrh	r0, [r3, #0]
 800a962:	9002      	str	r0, [sp, #8]
 800a964:	4628      	mov	r0, r5
 800a966:	885b      	ldrh	r3, [r3, #2]
 800a968:	9301      	str	r3, [sp, #4]
 800a96a:	4b53      	ldr	r3, [pc, #332]	@ (800aab8 <tcp_input+0x72c>)
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	3304      	adds	r3, #4
 800a970:	f001 fa6a 	bl	800be48 <tcp_rst>
    if (err != ERR_ABRT) {
 800a974:	e674      	b.n	800a660 <tcp_input+0x2d4>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a976:	4b4a      	ldr	r3, [pc, #296]	@ (800aaa0 <tcp_input+0x714>)
 800a978:	781a      	ldrb	r2, [r3, #0]
 800a97a:	f002 0312 	and.w	r3, r2, #18
 800a97e:	2b12      	cmp	r3, #18
 800a980:	f000 8153 	beq.w	800ac2a <tcp_input+0x89e>
      else if (flags & TCP_ACK) {
 800a984:	06d1      	lsls	r1, r2, #27
 800a986:	f57f ae6b 	bpl.w	800a660 <tcp_input+0x2d4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a98a:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a98c:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a98e:	8811      	ldrh	r1, [r2, #0]
 800a990:	4a44      	ldr	r2, [pc, #272]	@ (800aaa4 <tcp_input+0x718>)
 800a992:	8818      	ldrh	r0, [r3, #0]
 800a994:	6812      	ldr	r2, [r2, #0]
 800a996:	440a      	add	r2, r1
 800a998:	4946      	ldr	r1, [pc, #280]	@ (800aab4 <tcp_input+0x728>)
 800a99a:	6809      	ldr	r1, [r1, #0]
 800a99c:	9002      	str	r0, [sp, #8]
 800a99e:	4628      	mov	r0, r5
 800a9a0:	885b      	ldrh	r3, [r3, #2]
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	4b44      	ldr	r3, [pc, #272]	@ (800aab8 <tcp_input+0x72c>)
 800a9a6:	9300      	str	r3, [sp, #0]
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	f001 fa4d 	bl	800be48 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a9ae:	f895 3042 	ldrb.w	r3, [r5, #66]	@ 0x42
 800a9b2:	2b05      	cmp	r3, #5
 800a9b4:	f63f ae54 	bhi.w	800a660 <tcp_input+0x2d4>
          pcb->rtime = 0;
 800a9b8:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a9ba:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800a9bc:	862b      	strh	r3, [r5, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a9be:	f001 fcad 	bl	800c31c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a9c2:	e64d      	b.n	800a660 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	f7fe ff91 	bl	80098ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a9ca:	4b35      	ldr	r3, [pc, #212]	@ (800aaa0 <tcp_input+0x714>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	06d9      	lsls	r1, r3, #27
 800a9d0:	f57f ae46 	bpl.w	800a660 <tcp_input+0x2d4>
 800a9d4:	4b37      	ldr	r3, [pc, #220]	@ (800aab4 <tcp_input+0x728>)
 800a9d6:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a9d8:	681a      	ldr	r2, [r3, #0]
        recv_flags |= TF_CLOSED;
 800a9da:	f899 3000 	ldrb.w	r3, [r9]
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a9de:	4291      	cmp	r1, r2
 800a9e0:	f47f ae3e 	bne.w	800a660 <tcp_input+0x2d4>
 800a9e4:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800a9e6:	2a00      	cmp	r2, #0
 800a9e8:	f47f ae3a 	bne.w	800a660 <tcp_input+0x2d4>
        recv_flags |= TF_CLOSED;
 800a9ec:	f043 0310 	orr.w	r3, r3, #16
 800a9f0:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800a9f4:	e634      	b.n	800a660 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f7fe ff78 	bl	80098ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9fc:	f899 3000 	ldrb.w	r3, [r9]
 800aa00:	069e      	lsls	r6, r3, #26
 800aa02:	f57f ae2d 	bpl.w	800a660 <tcp_input+0x2d4>
        tcp_ack_now(pcb);
 800aa06:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800aa08:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800aa0a:	f043 0302 	orr.w	r3, r3, #2
 800aa0e:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800aa10:	f7fd ff1a 	bl	8008848 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa14:	4b24      	ldr	r3, [pc, #144]	@ (800aaa8 <tcp_input+0x71c>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	d05b      	beq.n	800aad4 <tcp_input+0x748>
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d05c      	beq.n	800aada <tcp_input+0x74e>
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	42aa      	cmp	r2, r5
 800aa24:	f000 8206 	beq.w	800ae34 <tcp_input+0xaa8>
 800aa28:	4613      	mov	r3, r2
 800aa2a:	e7f7      	b.n	800aa1c <tcp_input+0x690>
      tcp_receive(pcb);
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f7fe ff5d 	bl	80098ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa32:	f899 3000 	ldrb.w	r3, [r9]
 800aa36:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa3a:	4b19      	ldr	r3, [pc, #100]	@ (800aaa0 <tcp_input+0x714>)
      if (recv_flags & TF_GOT_FIN) {
 800aa3c:	f000 817e 	beq.w	800ad3c <tcp_input+0x9b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa40:	781a      	ldrb	r2, [r3, #0]
          tcp_ack_now(pcb);
 800aa42:	8b6b      	ldrh	r3, [r5, #26]
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa44:	06d2      	lsls	r2, r2, #27
          tcp_ack_now(pcb);
 800aa46:	f043 0302 	orr.w	r3, r3, #2
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa4a:	d504      	bpl.n	800aa56 <tcp_input+0x6ca>
 800aa4c:	4a19      	ldr	r2, [pc, #100]	@ (800aab4 <tcp_input+0x728>)
 800aa4e:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	4291      	cmp	r1, r2
 800aa54:	d032      	beq.n	800aabc <tcp_input+0x730>
          tcp_ack_now(pcb);
 800aa56:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800aa58:	2308      	movs	r3, #8
 800aa5a:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800aa5c:	e600      	b.n	800a660 <tcp_input+0x2d4>
      tcp_receive(pcb);
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f7fe ff44 	bl	80098ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa64:	4b0e      	ldr	r3, [pc, #56]	@ (800aaa0 <tcp_input+0x714>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	06d8      	lsls	r0, r3, #27
 800aa6a:	f57f adf9 	bpl.w	800a660 <tcp_input+0x2d4>
 800aa6e:	4b11      	ldr	r3, [pc, #68]	@ (800aab4 <tcp_input+0x728>)
 800aa70:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	f47f adf3 	bne.w	800a660 <tcp_input+0x2d4>
 800aa7a:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f47f adef 	bne.w	800a660 <tcp_input+0x2d4>
        tcp_pcb_purge(pcb);
 800aa82:	4628      	mov	r0, r5
 800aa84:	f7fd fee0 	bl	8008848 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa88:	4b07      	ldr	r3, [pc, #28]	@ (800aaa8 <tcp_input+0x71c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	d021      	beq.n	800aad4 <tcp_input+0x748>
 800aa90:	b31b      	cbz	r3, 800aada <tcp_input+0x74e>
 800aa92:	68da      	ldr	r2, [r3, #12]
 800aa94:	42aa      	cmp	r2, r5
 800aa96:	f000 81cd 	beq.w	800ae34 <tcp_input+0xaa8>
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	e7f8      	b.n	800aa90 <tcp_input+0x704>
 800aa9e:	bf00      	nop
 800aaa0:	2401056d 	.word	0x2401056d
 800aaa4:	24010578 	.word	0x24010578
 800aaa8:	24010554 	.word	0x24010554
 800aaac:	2401054f 	.word	0x2401054f
 800aab0:	24010560 	.word	0x24010560
 800aab4:	24010574 	.word	0x24010574
 800aab8:	24009aa0 	.word	0x24009aa0
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aabc:	6eea      	ldr	r2, [r5, #108]	@ 0x6c
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	d1c9      	bne.n	800aa56 <tcp_input+0x6ca>
          tcp_ack_now(pcb);
 800aac2:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800aac4:	4628      	mov	r0, r5
 800aac6:	f7fd febf 	bl	8008848 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aaca:	4bac      	ldr	r3, [pc, #688]	@ (800ad7c <tcp_input+0x9f0>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	42ab      	cmp	r3, r5
 800aad0:	f040 81e0 	bne.w	800ae94 <tcp_input+0xb08>
        TCP_RMV_ACTIVE(pcb);
 800aad4:	68eb      	ldr	r3, [r5, #12]
 800aad6:	4aa9      	ldr	r2, [pc, #676]	@ (800ad7c <tcp_input+0x9f0>)
 800aad8:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aada:	4ba9      	ldr	r3, [pc, #676]	@ (800ad80 <tcp_input+0x9f4>)
        pcb->state = TIME_WAIT;
 800aadc:	220a      	movs	r2, #10
 800aade:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	601d      	str	r5, [r3, #0]
 800aae4:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800aae6:	2201      	movs	r2, #1
 800aae8:	4ba6      	ldr	r3, [pc, #664]	@ (800ad84 <tcp_input+0x9f8>)
 800aaea:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aaec:	f001 fd42 	bl	800c574 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800aaf0:	e5b6      	b.n	800a660 <tcp_input+0x2d4>
    tcp_input_pcb = pcb;
 800aaf2:	4ca5      	ldr	r4, [pc, #660]	@ (800ad88 <tcp_input+0x9fc>)
 800aaf4:	6025      	str	r5, [r4, #0]
  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800aaf6:	e59f      	b.n	800a638 <tcp_input+0x2ac>
        if (pcb->rcv_ann_wnd == 0) {
 800aaf8:	8d6b      	ldrh	r3, [r5, #42]	@ 0x2a
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f000 808d 	beq.w	800ac1a <tcp_input+0x88e>
 800ab00:	4ca1      	ldr	r4, [pc, #644]	@ (800ad88 <tcp_input+0x9fc>)
 800ab02:	e5c0      	b.n	800a686 <tcp_input+0x2fa>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ab04:	4ba1      	ldr	r3, [pc, #644]	@ (800ad8c <tcp_input+0xa00>)
 800ab06:	22c2      	movs	r2, #194	@ 0xc2
 800ab08:	49a1      	ldr	r1, [pc, #644]	@ (800ad90 <tcp_input+0xa04>)
 800ab0a:	48a2      	ldr	r0, [pc, #648]	@ (800ad94 <tcp_input+0xa08>)
 800ab0c:	f003 fc6e 	bl	800e3ec <iprintf>
 800ab10:	e47d      	b.n	800a40e <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab12:	4b9e      	ldr	r3, [pc, #632]	@ (800ad8c <tcp_input+0xa00>)
 800ab14:	22df      	movs	r2, #223	@ 0xdf
 800ab16:	49a0      	ldr	r1, [pc, #640]	@ (800ad98 <tcp_input+0xa0c>)
 800ab18:	489e      	ldr	r0, [pc, #632]	@ (800ad94 <tcp_input+0xa08>)
 800ab1a:	f003 fc67 	bl	800e3ec <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ab1e:	8923      	ldrh	r3, [r4, #8]
 800ab20:	e49a      	b.n	800a458 <tcp_input+0xcc>
        if (recv_acked > 0) {
 800ab22:	f8ba 2000 	ldrh.w	r2, [sl]
 800ab26:	b15a      	cbz	r2, 800ab40 <tcp_input+0x7b4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ab28:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ab2c:	b12b      	cbz	r3, 800ab3a <tcp_input+0x7ae>
 800ab2e:	4629      	mov	r1, r5
 800ab30:	6928      	ldr	r0, [r5, #16]
 800ab32:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800ab34:	300d      	adds	r0, #13
 800ab36:	f43f ada6 	beq.w	800a686 <tcp_input+0x2fa>
          recv_acked = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	f8aa 3000 	strh.w	r3, [sl]
        if (tcp_input_delayed_close(pcb)) {
 800ab40:	4628      	mov	r0, r5
 800ab42:	f7fe fe4d 	bl	80097e0 <tcp_input_delayed_close>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f47f ad9d 	bne.w	800a686 <tcp_input+0x2fa>
        if (recv_data != NULL) {
 800ab4c:	f8d8 2000 	ldr.w	r2, [r8]
 800ab50:	b1fa      	cbz	r2, 800ab92 <tcp_input+0x806>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ab52:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800ab54:	b143      	cbz	r3, 800ab68 <tcp_input+0x7dc>
 800ab56:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ab5a:	4b8c      	ldr	r3, [pc, #560]	@ (800ad8c <tcp_input+0xa00>)
 800ab5c:	498f      	ldr	r1, [pc, #572]	@ (800ad9c <tcp_input+0xa10>)
 800ab5e:	488d      	ldr	r0, [pc, #564]	@ (800ad94 <tcp_input+0xa08>)
 800ab60:	f003 fc44 	bl	800e3ec <iprintf>
            pbuf_free(recv_data);
 800ab64:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800ab68:	8b6b      	ldrh	r3, [r5, #26]
 800ab6a:	f013 0310 	ands.w	r3, r3, #16
 800ab6e:	f040 80de 	bne.w	800ad2e <tcp_input+0x9a2>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ab72:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800ab76:	2e00      	cmp	r6, #0
 800ab78:	f000 8118 	beq.w	800adac <tcp_input+0xa20>
 800ab7c:	4629      	mov	r1, r5
 800ab7e:	6928      	ldr	r0, [r5, #16]
 800ab80:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800ab82:	f110 0f0d 	cmn.w	r0, #13
 800ab86:	f43f ad7e 	beq.w	800a686 <tcp_input+0x2fa>
          if (err != ERR_OK) {
 800ab8a:	b110      	cbz	r0, 800ab92 <tcp_input+0x806>
            pcb->refused_data = recv_data;
 800ab8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab90:	67ab      	str	r3, [r5, #120]	@ 0x78
        if (recv_flags & TF_GOT_FIN) {
 800ab92:	f899 3000 	ldrb.w	r3, [r9]
 800ab96:	069b      	lsls	r3, r3, #26
 800ab98:	d507      	bpl.n	800abaa <tcp_input+0x81e>
          if (pcb->refused_data != NULL) {
 800ab9a:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 80b1 	beq.w	800ad04 <tcp_input+0x978>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aba2:	7b5a      	ldrb	r2, [r3, #13]
 800aba4:	f042 0220 	orr.w	r2, r2, #32
 800aba8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800abaa:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800abac:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800abae:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800abb0:	f7fe fe16 	bl	80097e0 <tcp_input_delayed_close>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f47f ad66 	bne.w	800a686 <tcp_input+0x2fa>
        tcp_output(pcb);
 800abba:	4628      	mov	r0, r5
 800abbc:	f001 f9be 	bl	800bf3c <tcp_output>
 800abc0:	e561      	b.n	800a686 <tcp_input+0x2fa>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800abc2:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800abc6:	f7fc f87b 	bl	8006cc0 <lwip_htons>
 800abca:	f010 0004 	ands.w	r0, r0, #4
 800abce:	f47f abec 	bne.w	800a3aa <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abd2:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800abd4:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abd6:	8811      	ldrh	r1, [r2, #0]
 800abd8:	4a71      	ldr	r2, [pc, #452]	@ (800ada0 <tcp_input+0xa14>)
 800abda:	881d      	ldrh	r5, [r3, #0]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	440a      	add	r2, r1
 800abe0:	4970      	ldr	r1, [pc, #448]	@ (800ada4 <tcp_input+0xa18>)
 800abe2:	6809      	ldr	r1, [r1, #0]
 800abe4:	9502      	str	r5, [sp, #8]
 800abe6:	885b      	ldrh	r3, [r3, #2]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	4b6f      	ldr	r3, [pc, #444]	@ (800ada8 <tcp_input+0xa1c>)
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	3304      	adds	r3, #4
 800abf0:	f001 f92a 	bl	800be48 <tcp_rst>
 800abf4:	f7ff bbd9 	b.w	800a3aa <tcp_input+0x1e>
      if (ackno == pcb->snd_nxt) {
 800abf8:	4b6a      	ldr	r3, [pc, #424]	@ (800ada4 <tcp_input+0xa18>)
 800abfa:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	f47f ad2e 	bne.w	800a660 <tcp_input+0x2d4>
      recv_flags |= TF_RESET;
 800ac04:	f899 3000 	ldrb.w	r3, [r9]
 800ac08:	f043 0308 	orr.w	r3, r3, #8
 800ac0c:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ac10:	8b6b      	ldrh	r3, [r5, #26]
 800ac12:	f023 0301 	bic.w	r3, r3, #1
 800ac16:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800ac18:	e522      	b.n	800a660 <tcp_input+0x2d4>
          tcp_send_empty_ack(pcb);
 800ac1a:	4628      	mov	r0, r5
 800ac1c:	f001 f95c 	bl	800bed8 <tcp_send_empty_ack>
 800ac20:	e76e      	b.n	800ab00 <tcp_input+0x774>
    tcp_ack_now(pcb);
 800ac22:	f042 0202 	orr.w	r2, r2, #2
 800ac26:	836a      	strh	r2, [r5, #26]
    if (err != ERR_ABRT) {
 800ac28:	e51a      	b.n	800a660 <tcp_input+0x2d4>
          && (ackno == pcb->lastack + 1)) {
 800ac2a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800ac2c:	495d      	ldr	r1, [pc, #372]	@ (800ada4 <tcp_input+0xa18>)
 800ac2e:	3301      	adds	r3, #1
 800ac30:	6809      	ldr	r1, [r1, #0]
 800ac32:	428b      	cmp	r3, r1
 800ac34:	f47f aea6 	bne.w	800a984 <tcp_input+0x5f8>
        pcb->lastack = ackno;
 800ac38:	646b      	str	r3, [r5, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ac3a:	2200      	movs	r2, #0
        pcb->rcv_nxt = seqno + 1;
 800ac3c:	4b58      	ldr	r3, [pc, #352]	@ (800ada0 <tcp_input+0xa14>)
        pcb->snd_wnd = tcphdr->wnd;
 800ac3e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800ac40:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac42:	f8b5 b032 	ldrh.w	fp, [r5, #50]	@ 0x32
        pcb->rcv_nxt = seqno + 1;
 800ac46:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac48:	3b01      	subs	r3, #1
        pcb->rcv_nxt = seqno + 1;
 800ac4a:	6269      	str	r1, [r5, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ac4c:	62e9      	str	r1, [r5, #44]	@ 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800ac4e:	89c1      	ldrh	r1, [r0, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ac50:	656b      	str	r3, [r5, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ac52:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800ac54:	f361 020f 	bfi	r2, r1, #0, #16
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac58:	18ee      	adds	r6, r5, r3
        pcb->state = ESTABLISHED;
 800ac5a:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd = tcphdr->wnd;
 800ac5c:	f361 421f 	bfi	r2, r1, #16, #16
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac60:	4630      	mov	r0, r6
        pcb->snd_wnd = tcphdr->wnd;
 800ac62:	662a      	str	r2, [r5, #96]	@ 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac64:	f002 fb70 	bl	800d348 <ip4_route>
 800ac68:	4632      	mov	r2, r6
 800ac6a:	4601      	mov	r1, r0
 800ac6c:	4658      	mov	r0, fp
 800ac6e:	f7fe fd0f 	bl	8009690 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac72:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ac76:	0041      	lsls	r1, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ac78:	4602      	mov	r2, r0
 800ac7a:	8668      	strh	r0, [r5, #50]	@ 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac7c:	0080      	lsls	r0, r0, #2
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	460e      	mov	r6, r1
 800ac82:	bf38      	it	cc
 800ac84:	461e      	movcc	r6, r3
 800ac86:	ebb6 0f82 	cmp.w	r6, r2, lsl #2
 800ac8a:	f240 8131 	bls.w	800aef0 <tcp_input+0xb64>
 800ac8e:	b283      	uxth	r3, r0
 800ac90:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac94:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 8121 	beq.w	800aee0 <tcp_input+0xb54>
        --pcb->snd_queuelen;
 800ac9e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	@ 0x66
        rseg = pcb->unacked;
 800aca2:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
        --pcb->snd_queuelen;
 800aca4:	3b01      	subs	r3, #1
 800aca6:	f8a5 3066 	strh.w	r3, [r5, #102]	@ 0x66
        if (rseg == NULL) {
 800acaa:	2e00      	cmp	r6, #0
 800acac:	f000 8113 	beq.w	800aed6 <tcp_input+0xb4a>
          pcb->unacked = rseg->next;
 800acb0:	6833      	ldr	r3, [r6, #0]
 800acb2:	672b      	str	r3, [r5, #112]	@ 0x70
        tcp_seg_free(rseg);
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7fd fd09 	bl	80086cc <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800acba:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8107 	beq.w	800aed0 <tcp_input+0xb44>
          pcb->nrtx = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
 800acc8:	862b      	strh	r3, [r5, #48]	@ 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800acca:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800acce:	b133      	cbz	r3, 800acde <tcp_input+0x952>
 800acd0:	2200      	movs	r2, #0
 800acd2:	4629      	mov	r1, r5
 800acd4:	6928      	ldr	r0, [r5, #16]
 800acd6:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800acd8:	300d      	adds	r0, #13
 800acda:	f43f acd4 	beq.w	800a686 <tcp_input+0x2fa>
        tcp_ack_now(pcb);
 800acde:	8b6b      	ldrh	r3, [r5, #26]
 800ace0:	f043 0302 	orr.w	r3, r3, #2
 800ace4:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800ace6:	e4bb      	b.n	800a660 <tcp_input+0x2d4>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	4628      	mov	r0, r5
 800acec:	881a      	ldrh	r2, [r3, #0]
 800acee:	4b2c      	ldr	r3, [pc, #176]	@ (800ada0 <tcp_input+0xa14>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	441a      	add	r2, r3
 800acf4:	4b2b      	ldr	r3, [pc, #172]	@ (800ada4 <tcp_input+0xa18>)
 800acf6:	6819      	ldr	r1, [r3, #0]
 800acf8:	f8bc 3000 	ldrh.w	r3, [ip]
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	f8bc 3002 	ldrh.w	r3, [ip, #2]
 800ad02:	e771      	b.n	800abe8 <tcp_input+0x85c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ad04:	8d2b      	ldrh	r3, [r5, #40]	@ 0x28
 800ad06:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d001      	beq.n	800ad12 <tcp_input+0x986>
              pcb->rcv_wnd++;
 800ad0e:	3301      	adds	r3, #1
 800ad10:	852b      	strh	r3, [r5, #40]	@ 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ad12:	f8d5 6084 	ldr.w	r6, [r5, #132]	@ 0x84
 800ad16:	2e00      	cmp	r6, #0
 800ad18:	f43f af47 	beq.w	800abaa <tcp_input+0x81e>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4629      	mov	r1, r5
 800ad20:	6928      	ldr	r0, [r5, #16]
 800ad22:	461a      	mov	r2, r3
 800ad24:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800ad26:	300d      	adds	r0, #13
 800ad28:	f47f af3f 	bne.w	800abaa <tcp_input+0x81e>
 800ad2c:	e4ab      	b.n	800a686 <tcp_input+0x2fa>
            pbuf_free(recv_data);
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fc feb6 	bl	8007aa0 <pbuf_free>
            tcp_abort(pcb);
 800ad34:	4628      	mov	r0, r5
 800ad36:	f7fe f9c3 	bl	80090c0 <tcp_abort>
            goto aborted;
 800ad3a:	e4a4      	b.n	800a686 <tcp_input+0x2fa>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	06db      	lsls	r3, r3, #27
 800ad40:	f57f ac8e 	bpl.w	800a660 <tcp_input+0x2d4>
 800ad44:	4b17      	ldr	r3, [pc, #92]	@ (800ada4 <tcp_input+0xa18>)
 800ad46:	6d2a      	ldr	r2, [r5, #80]	@ 0x50
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	f47f ac88 	bne.w	800a660 <tcp_input+0x2d4>
 800ad50:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f47f ac84 	bne.w	800a660 <tcp_input+0x2d4>
        pcb->state = FIN_WAIT_2;
 800ad58:	2306      	movs	r3, #6
 800ad5a:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800ad5c:	e480      	b.n	800a660 <tcp_input+0x2d4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ad5e:	0798      	lsls	r0, r3, #30
 800ad60:	f57f ac7e 	bpl.w	800a660 <tcp_input+0x2d4>
 800ad64:	4b0e      	ldr	r3, [pc, #56]	@ (800ada0 <tcp_input+0xa14>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	f47f ac77 	bne.w	800a660 <tcp_input+0x2d4>
        tcp_rexmit(pcb);
 800ad72:	4628      	mov	r0, r5
 800ad74:	f000 ffea 	bl	800bd4c <tcp_rexmit>
    if (err != ERR_ABRT) {
 800ad78:	e472      	b.n	800a660 <tcp_input+0x2d4>
 800ad7a:	bf00      	nop
 800ad7c:	24010554 	.word	0x24010554
 800ad80:	24010550 	.word	0x24010550
 800ad84:	2401054f 	.word	0x2401054f
 800ad88:	24010564 	.word	0x24010564
 800ad8c:	08010364 	.word	0x08010364
 800ad90:	08010544 	.word	0x08010544
 800ad94:	0800f2f8 	.word	0x0800f2f8
 800ad98:	08010554 	.word	0x08010554
 800ad9c:	080106f0 	.word	0x080106f0
 800ada0:	24010578 	.word	0x24010578
 800ada4:	24010574 	.word	0x24010574
 800ada8:	24009aa0 	.word	0x24009aa0
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800adac:	4633      	mov	r3, r6
 800adae:	4630      	mov	r0, r6
 800adb0:	4629      	mov	r1, r5
 800adb2:	f7fe fb87 	bl	80094c4 <tcp_recv_null>
 800adb6:	e6e4      	b.n	800ab82 <tcp_input+0x7f6>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800adb8:	69ab      	ldr	r3, [r5, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f43f aaf5 	beq.w	800a3aa <tcp_input+0x1e>
 800adc0:	4601      	mov	r1, r0
 800adc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adc6:	6928      	ldr	r0, [r5, #16]
 800adc8:	4798      	blx	r3
 800adca:	f7ff baee 	b.w	800a3aa <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800adce:	4641      	mov	r1, r8
 800add0:	4648      	mov	r0, r9
 800add2:	f7fe f89f 	bl	8008f14 <tcp_abandon>
      return;
 800add6:	f7ff bae8 	b.w	800a3aa <tcp_input+0x1e>
          pcb->state = ESTABLISHED;
 800adda:	2304      	movs	r3, #4
 800addc:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800adde:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0a7      	beq.n	800ad34 <tcp_input+0x9a8>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d05c      	beq.n	800aea4 <tcp_input+0xb18>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800adea:	2200      	movs	r2, #0
 800adec:	4629      	mov	r1, r5
 800adee:	6928      	ldr	r0, [r5, #16]
 800adf0:	4798      	blx	r3
          if (err != ERR_OK) {
 800adf2:	4603      	mov	r3, r0
 800adf4:	2800      	cmp	r0, #0
 800adf6:	d167      	bne.n	800aec8 <tcp_input+0xb3c>
          tcp_receive(pcb);
 800adf8:	4628      	mov	r0, r5
 800adfa:	f7fe fd77 	bl	80098ec <tcp_receive>
          if (recv_acked != 0) {
 800adfe:	f8ba 3000 	ldrh.w	r3, [sl]
 800ae02:	b113      	cbz	r3, 800ae0a <tcp_input+0xa7e>
            recv_acked--;
 800ae04:	3b01      	subs	r3, #1
 800ae06:	f8aa 3000 	strh.w	r3, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae0a:	8e69      	ldrh	r1, [r5, #50]	@ 0x32
 800ae0c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ae10:	004a      	lsls	r2, r1, #1
 800ae12:	0088      	lsls	r0, r1, #2
 800ae14:	429a      	cmp	r2, r3
 800ae16:	4616      	mov	r6, r2
 800ae18:	bf38      	it	cc
 800ae1a:	461e      	movcc	r6, r3
 800ae1c:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800ae20:	d934      	bls.n	800ae8c <tcp_input+0xb00>
 800ae22:	b283      	uxth	r3, r0
 800ae24:	f8a5 3048 	strh.w	r3, [r5, #72]	@ 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ae28:	f899 3000 	ldrb.w	r3, [r9]
 800ae2c:	069e      	lsls	r6, r3, #26
 800ae2e:	f57f ac17 	bpl.w	800a660 <tcp_input+0x2d4>
 800ae32:	e578      	b.n	800a926 <tcp_input+0x59a>
        TCP_RMV_ACTIVE(pcb);
 800ae34:	68ea      	ldr	r2, [r5, #12]
 800ae36:	60da      	str	r2, [r3, #12]
 800ae38:	e64f      	b.n	800aada <tcp_input+0x74e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ae3a:	4b33      	ldr	r3, [pc, #204]	@ (800af08 <tcp_input+0xb7c>)
 800ae3c:	f240 120d 	movw	r2, #269	@ 0x10d
 800ae40:	4932      	ldr	r1, [pc, #200]	@ (800af0c <tcp_input+0xb80>)
 800ae42:	4833      	ldr	r0, [pc, #204]	@ (800af10 <tcp_input+0xb84>)
 800ae44:	f003 fad2 	bl	800e3ec <iprintf>
      if (prev != NULL) {
 800ae48:	f1b8 0f00 	cmp.w	r8, #0
 800ae4c:	f43f abbf 	beq.w	800a5ce <tcp_input+0x242>
 800ae50:	68eb      	ldr	r3, [r5, #12]
 800ae52:	f7ff bbb6 	b.w	800a5c2 <tcp_input+0x236>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ae56:	4b2c      	ldr	r3, [pc, #176]	@ (800af08 <tcp_input+0xb7c>)
 800ae58:	f240 1215 	movw	r2, #277	@ 0x115
 800ae5c:	492d      	ldr	r1, [pc, #180]	@ (800af14 <tcp_input+0xb88>)
 800ae5e:	482c      	ldr	r0, [pc, #176]	@ (800af10 <tcp_input+0xb84>)
 800ae60:	f003 fac4 	bl	800e3ec <iprintf>
  if (pcb == NULL) {
 800ae64:	f7ff bbb7 	b.w	800a5d6 <tcp_input+0x24a>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	f47f aecb 	bne.w	800ac04 <tcp_input+0x878>
 800ae6e:	4b26      	ldr	r3, [pc, #152]	@ (800af08 <tcp_input+0xb7c>)
 800ae70:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ae74:	4928      	ldr	r1, [pc, #160]	@ (800af18 <tcp_input+0xb8c>)
 800ae76:	4826      	ldr	r0, [pc, #152]	@ (800af10 <tcp_input+0xb84>)
 800ae78:	f003 fab8 	bl	800e3ec <iprintf>
 800ae7c:	e6c2      	b.n	800ac04 <tcp_input+0x878>
  } else if (flags & TCP_FIN) {
 800ae7e:	07c1      	lsls	r1, r0, #31
 800ae80:	f57f ac53 	bpl.w	800a72a <tcp_input+0x39e>
    pcb->tmr = tcp_ticks;
 800ae84:	4b25      	ldr	r3, [pc, #148]	@ (800af1c <tcp_input+0xb90>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	622b      	str	r3, [r5, #32]
 800ae8a:	e44e      	b.n	800a72a <tcp_input+0x39e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	bf88      	it	hi
 800ae90:	b293      	uxthhi	r3, r2
 800ae92:	e7c7      	b.n	800ae24 <tcp_input+0xa98>
          TCP_RMV_ACTIVE(pcb);
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f43f ae20 	beq.w	800aada <tcp_input+0x74e>
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	42aa      	cmp	r2, r5
 800ae9e:	d0c9      	beq.n	800ae34 <tcp_input+0xaa8>
 800aea0:	4613      	mov	r3, r2
 800aea2:	e7f7      	b.n	800ae94 <tcp_input+0xb08>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800aea4:	4b18      	ldr	r3, [pc, #96]	@ (800af08 <tcp_input+0xb7c>)
 800aea6:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800aeaa:	491d      	ldr	r1, [pc, #116]	@ (800af20 <tcp_input+0xb94>)
 800aeac:	4818      	ldr	r0, [pc, #96]	@ (800af10 <tcp_input+0xb84>)
 800aeae:	f003 fa9d 	bl	800e3ec <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800aeb2:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d197      	bne.n	800adea <tcp_input+0xa5e>
 800aeba:	e73b      	b.n	800ad34 <tcp_input+0x9a8>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aebc:	9102      	str	r1, [sp, #8]
 800aebe:	4432      	add	r2, r6
 800aec0:	4918      	ldr	r1, [pc, #96]	@ (800af24 <tcp_input+0xb98>)
 800aec2:	4628      	mov	r0, r5
 800aec4:	6809      	ldr	r1, [r1, #0]
 800aec6:	e68f      	b.n	800abe8 <tcp_input+0x85c>
            if (err != ERR_ABRT) {
 800aec8:	330d      	adds	r3, #13
 800aeca:	f43f abdc 	beq.w	800a686 <tcp_input+0x2fa>
 800aece:	e731      	b.n	800ad34 <tcp_input+0x9a8>
          pcb->rtime = -1;
 800aed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aed4:	e6f8      	b.n	800acc8 <tcp_input+0x93c>
          rseg = pcb->unsent;
 800aed6:	6eee      	ldr	r6, [r5, #108]	@ 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aed8:	b176      	cbz	r6, 800aef8 <tcp_input+0xb6c>
          pcb->unsent = rseg->next;
 800aeda:	6833      	ldr	r3, [r6, #0]
 800aedc:	66eb      	str	r3, [r5, #108]	@ 0x6c
 800aede:	e6e9      	b.n	800acb4 <tcp_input+0x928>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800aee0:	4b09      	ldr	r3, [pc, #36]	@ (800af08 <tcp_input+0xb7c>)
 800aee2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800aee6:	4910      	ldr	r1, [pc, #64]	@ (800af28 <tcp_input+0xb9c>)
 800aee8:	4809      	ldr	r0, [pc, #36]	@ (800af10 <tcp_input+0xb84>)
 800aeea:	f003 fa7f 	bl	800e3ec <iprintf>
 800aeee:	e6d6      	b.n	800ac9e <tcp_input+0x912>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800aef0:	4299      	cmp	r1, r3
 800aef2:	bf88      	it	hi
 800aef4:	b28b      	uxthhi	r3, r1
 800aef6:	e6cb      	b.n	800ac90 <tcp_input+0x904>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800aef8:	4b03      	ldr	r3, [pc, #12]	@ (800af08 <tcp_input+0xb7c>)
 800aefa:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800aefe:	490b      	ldr	r1, [pc, #44]	@ (800af2c <tcp_input+0xba0>)
 800af00:	4803      	ldr	r0, [pc, #12]	@ (800af10 <tcp_input+0xb84>)
 800af02:	f003 fa73 	bl	800e3ec <iprintf>
 800af06:	e7e8      	b.n	800aeda <tcp_input+0xb4e>
 800af08:	08010364 	.word	0x08010364
 800af0c:	080105fc 	.word	0x080105fc
 800af10:	0800f2f8 	.word	0x0800f2f8
 800af14:	08010628 	.word	0x08010628
 800af18:	08010684 	.word	0x08010684
 800af1c:	24010560 	.word	0x24010560
 800af20:	080106d0 	.word	0x080106d0
 800af24:	24010574 	.word	0x24010574
 800af28:	080106a4 	.word	0x080106a4
 800af2c:	080106bc 	.word	0x080106bc

0800af30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800af30:	4a02      	ldr	r2, [pc, #8]	@ (800af3c <tcp_trigger_input_pcb_close+0xc>)
 800af32:	7813      	ldrb	r3, [r2, #0]
 800af34:	f043 0310 	orr.w	r3, r3, #16
 800af38:	7013      	strb	r3, [r2, #0]
}
 800af3a:	4770      	bx	lr
 800af3c:	2401056c 	.word	0x2401056c

0800af40 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800af40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af44:	2600      	movs	r6, #0
 800af46:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800af48:	460c      	mov	r4, r1
 800af4a:	4681      	mov	r9, r0
 800af4c:	f361 060f 	bfi	r6, r1, #0, #16
 800af50:	4615      	mov	r5, r2
 800af52:	4698      	mov	r8, r3
 800af54:	f89d a02c 	ldrb.w	sl, [sp, #44]	@ 0x2c
 800af58:	f361 461f 	bfi	r6, r1, #16, #16
 800af5c:	f89d b030 	ldrb.w	fp, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800af60:	2f00      	cmp	r7, #0
 800af62:	d033      	beq.n	800afcc <tcp_pbuf_prealloc+0x8c>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800af64:	42ac      	cmp	r4, r5
 800af66:	d20e      	bcs.n	800af86 <tcp_pbuf_prealloc+0x46>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800af68:	f01a 0f02 	tst.w	sl, #2
 800af6c:	d008      	beq.n	800af80 <tcp_pbuf_prealloc+0x40>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800af6e:	f204 51b7 	addw	r1, r4, #1463	@ 0x5b7
 800af72:	f021 0103 	bic.w	r1, r1, #3
 800af76:	42a9      	cmp	r1, r5
 800af78:	bf28      	it	cs
 800af7a:	4629      	movcs	r1, r5
 800af7c:	b289      	uxth	r1, r1
 800af7e:	e003      	b.n	800af88 <tcp_pbuf_prealloc+0x48>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800af80:	8b7b      	ldrh	r3, [r7, #26]
 800af82:	065b      	lsls	r3, r3, #25
 800af84:	d518      	bpl.n	800afb8 <tcp_pbuf_prealloc+0x78>
  u16_t alloc = length;
 800af86:	4621      	mov	r1, r4
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800af88:	4648      	mov	r0, r9
 800af8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af8e:	f7fc fdf7 	bl	8007b80 <pbuf_alloc>
  if (p == NULL) {
 800af92:	4605      	mov	r5, r0
 800af94:	b168      	cbz	r0, 800afb2 <tcp_pbuf_prealloc+0x72>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800af96:	6803      	ldr	r3, [r0, #0]
 800af98:	b133      	cbz	r3, 800afa8 <tcp_pbuf_prealloc+0x68>
 800af9a:	4b10      	ldr	r3, [pc, #64]	@ (800afdc <tcp_pbuf_prealloc+0x9c>)
 800af9c:	f240 120b 	movw	r2, #267	@ 0x10b
 800afa0:	490f      	ldr	r1, [pc, #60]	@ (800afe0 <tcp_pbuf_prealloc+0xa0>)
 800afa2:	4810      	ldr	r0, [pc, #64]	@ (800afe4 <tcp_pbuf_prealloc+0xa4>)
 800afa4:	f003 fa22 	bl	800e3ec <iprintf>
  *oversize = p->len - length;
 800afa8:	896b      	ldrh	r3, [r5, #10]
 800afaa:	1b1b      	subs	r3, r3, r4
 800afac:	f8a8 3000 	strh.w	r3, [r8]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800afb0:	60ae      	str	r6, [r5, #8]
  return p;
}
 800afb2:	4628      	mov	r0, r5
 800afb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800afb8:	f1bb 0f00 	cmp.w	fp, #0
 800afbc:	d0d7      	beq.n	800af6e <tcp_pbuf_prealloc+0x2e>
         (!first_seg ||
 800afbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1d4      	bne.n	800af6e <tcp_pbuf_prealloc+0x2e>
          pcb->unsent != NULL ||
 800afc4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1d1      	bne.n	800af6e <tcp_pbuf_prealloc+0x2e>
 800afca:	e7dc      	b.n	800af86 <tcp_pbuf_prealloc+0x46>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800afcc:	4b03      	ldr	r3, [pc, #12]	@ (800afdc <tcp_pbuf_prealloc+0x9c>)
 800afce:	22e9      	movs	r2, #233	@ 0xe9
 800afd0:	4905      	ldr	r1, [pc, #20]	@ (800afe8 <tcp_pbuf_prealloc+0xa8>)
 800afd2:	4804      	ldr	r0, [pc, #16]	@ (800afe4 <tcp_pbuf_prealloc+0xa4>)
 800afd4:	f003 fa0a 	bl	800e3ec <iprintf>
 800afd8:	e7c4      	b.n	800af64 <tcp_pbuf_prealloc+0x24>
 800afda:	bf00      	nop
 800afdc:	0801070c 	.word	0x0801070c
 800afe0:	08010760 	.word	0x08010760
 800afe4:	0800f2f8 	.word	0x0800f2f8
 800afe8:	08010740 	.word	0x08010740

0800afec <tcp_create_segment>:
{
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	460e      	mov	r6, r1
 800aff2:	f89d a020 	ldrb.w	sl, [sp, #32]
 800aff6:	4690      	mov	r8, r2
 800aff8:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800affa:	4607      	mov	r7, r0
 800affc:	2800      	cmp	r0, #0
 800affe:	d047      	beq.n	800b090 <tcp_create_segment+0xa4>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b000:	2e00      	cmp	r6, #0
 800b002:	d04d      	beq.n	800b0a0 <tcp_create_segment+0xb4>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b004:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b008:	2003      	movs	r0, #3
 800b00a:	f7fc f9f9 	bl	8007400 <memp_malloc>
 800b00e:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b010:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b014:	2800      	cmp	r0, #0
 800b016:	d051      	beq.n	800b0bc <tcp_create_segment+0xd0>
  seg->flags = optflags;
 800b018:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b01c:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b01e:	8932      	ldrh	r2, [r6, #8]
  seg->p = p;
 800b020:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b022:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800b024:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b026:	d32b      	bcc.n	800b080 <tcp_create_segment+0x94>
  seg->len = p->tot_len - optlen;
 800b028:	1b52      	subs	r2, r2, r5
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b02a:	4630      	mov	r0, r6
 800b02c:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800b02e:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b030:	f7fc fca4 	bl	800797c <pbuf_add_header>
 800b034:	4606      	mov	r6, r0
 800b036:	2800      	cmp	r0, #0
 800b038:	d139      	bne.n	800b0ae <tcp_create_segment+0xc2>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b03a:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b03c:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b03e:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b040:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b044:	f505 45a0 	add.w	r5, r5, #20480	@ 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b048:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b04c:	f7fb fe38 	bl	8006cc0 <lwip_htons>
 800b050:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b054:	8b38      	ldrh	r0, [r7, #24]
 800b056:	68e7      	ldr	r7, [r4, #12]
 800b058:	f7fb fe32 	bl	8006cc0 <lwip_htons>
 800b05c:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b05e:	4648      	mov	r0, r9
 800b060:	68e7      	ldr	r7, [r4, #12]
 800b062:	f7fb fe31 	bl	8006cc8 <lwip_htonl>
 800b066:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b068:	ea48 0005 	orr.w	r0, r8, r5
 800b06c:	68e7      	ldr	r7, [r4, #12]
 800b06e:	f7fb fe27 	bl	8006cc0 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800b072:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b074:	81b8      	strh	r0, [r7, #12]
}
 800b076:	4620      	mov	r0, r4
  seg->tcphdr->urgp = 0;
 800b078:	749e      	strb	r6, [r3, #18]
 800b07a:	74de      	strb	r6, [r3, #19]
}
 800b07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b080:	22b0      	movs	r2, #176	@ 0xb0
 800b082:	4b10      	ldr	r3, [pc, #64]	@ (800b0c4 <tcp_create_segment+0xd8>)
 800b084:	4910      	ldr	r1, [pc, #64]	@ (800b0c8 <tcp_create_segment+0xdc>)
 800b086:	4811      	ldr	r0, [pc, #68]	@ (800b0cc <tcp_create_segment+0xe0>)
 800b088:	f003 f9b0 	bl	800e3ec <iprintf>
  seg->len = p->tot_len - optlen;
 800b08c:	8932      	ldrh	r2, [r6, #8]
 800b08e:	e7cb      	b.n	800b028 <tcp_create_segment+0x3c>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b090:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <tcp_create_segment+0xd8>)
 800b092:	22a3      	movs	r2, #163	@ 0xa3
 800b094:	490e      	ldr	r1, [pc, #56]	@ (800b0d0 <tcp_create_segment+0xe4>)
 800b096:	480d      	ldr	r0, [pc, #52]	@ (800b0cc <tcp_create_segment+0xe0>)
 800b098:	f003 f9a8 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b09c:	2e00      	cmp	r6, #0
 800b09e:	d1b1      	bne.n	800b004 <tcp_create_segment+0x18>
 800b0a0:	4b08      	ldr	r3, [pc, #32]	@ (800b0c4 <tcp_create_segment+0xd8>)
 800b0a2:	22a4      	movs	r2, #164	@ 0xa4
 800b0a4:	490b      	ldr	r1, [pc, #44]	@ (800b0d4 <tcp_create_segment+0xe8>)
 800b0a6:	4809      	ldr	r0, [pc, #36]	@ (800b0cc <tcp_create_segment+0xe0>)
 800b0a8:	f003 f9a0 	bl	800e3ec <iprintf>
 800b0ac:	e7aa      	b.n	800b004 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f7fd fb0c 	bl	80086cc <tcp_seg_free>
    return NULL;
 800b0b4:	2400      	movs	r4, #0
}
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7fc fcef 	bl	8007aa0 <pbuf_free>
    return NULL;
 800b0c2:	e7f7      	b.n	800b0b4 <tcp_create_segment+0xc8>
 800b0c4:	0801070c 	.word	0x0801070c
 800b0c8:	080107b8 	.word	0x080107b8
 800b0cc:	0800f2f8 	.word	0x0800f2f8
 800b0d0:	08010774 	.word	0x08010774
 800b0d4:	08010794 	.word	0x08010794

0800b0d8 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b0d8:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b0da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b0de:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b0e0:	4606      	mov	r6, r0
 800b0e2:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b0e4:	2022      	movs	r0, #34	@ 0x22
 800b0e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800b0ea:	461c      	mov	r4, r3
 800b0ec:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800b0f0:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800b0f4:	f8bd 8028 	ldrh.w	r8, [sp, #40]	@ 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b0f8:	f7fc fd42 	bl	8007b80 <pbuf_alloc>
  if (p != NULL) {
 800b0fc:	4605      	mov	r5, r0
 800b0fe:	b300      	cbz	r0, 800b142 <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b100:	8943      	ldrh	r3, [r0, #10]
 800b102:	2b13      	cmp	r3, #19
 800b104:	d920      	bls.n	800b148 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800b106:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800b108:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800b10a:	f7fb fdd9 	bl	8006cc0 <lwip_htons>
 800b10e:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b110:	4650      	mov	r0, sl
 800b112:	f7fb fdd5 	bl	8006cc0 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800b116:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800b118:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800b11a:	4630      	mov	r0, r6
 800b11c:	f7fb fdd4 	bl	8006cc8 <lwip_htonl>
 800b120:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b122:	f449 40a0 	orr.w	r0, r9, #20480	@ 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800b126:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b128:	f7fb fdca 	bl	8006cc0 <lwip_htons>
 800b12c:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800b12e:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b130:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b132:	f7fb fdc5 	bl	8006cc0 <lwip_htons>
    tcphdr->chksum = 0;
 800b136:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800b138:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800b13a:	7423      	strb	r3, [r4, #16]
 800b13c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800b13e:	74a3      	strb	r3, [r4, #18]
 800b140:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800b142:	4628      	mov	r0, r5
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b148:	4b03      	ldr	r3, [pc, #12]	@ (800b158 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800b14a:	f240 7223 	movw	r2, #1827	@ 0x723
 800b14e:	4903      	ldr	r1, [pc, #12]	@ (800b15c <tcp_output_alloc_header_common.constprop.0+0x84>)
 800b150:	4803      	ldr	r0, [pc, #12]	@ (800b160 <tcp_output_alloc_header_common.constprop.0+0x88>)
 800b152:	f003 f94b 	bl	800e3ec <iprintf>
 800b156:	e7d6      	b.n	800b106 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800b158:	0801070c 	.word	0x0801070c
 800b15c:	080107d0 	.word	0x080107d0
 800b160:	0800f2f8 	.word	0x0800f2f8

0800b164 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	460d      	mov	r5, r1
 800b168:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b16a:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800b16c:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b16e:	b190      	cbz	r0, 800b196 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b170:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800b172:	2310      	movs	r3, #16
 800b174:	4632      	mov	r2, r6
 800b176:	4629      	mov	r1, r5
 800b178:	e9cd 3001 	strd	r3, r0, [sp, #4]
 800b17c:	8b20      	ldrh	r0, [r4, #24]
 800b17e:	8ae3      	ldrh	r3, [r4, #22]
 800b180:	9000      	str	r0, [sp, #0]
 800b182:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800b184:	f7ff ffa8 	bl	800b0d8 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b188:	b118      	cbz	r0, 800b192 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b18a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800b18c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b18e:	4413      	add	r3, r2
 800b190:	62e3      	str	r3, [r4, #44]	@ 0x2c
  }
  return p;
}
 800b192:	b004      	add	sp, #16
 800b194:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b196:	4b04      	ldr	r3, [pc, #16]	@ (800b1a8 <tcp_output_alloc_header.constprop.0+0x44>)
 800b198:	f240 7242 	movw	r2, #1858	@ 0x742
 800b19c:	4903      	ldr	r1, [pc, #12]	@ (800b1ac <tcp_output_alloc_header.constprop.0+0x48>)
 800b19e:	4804      	ldr	r0, [pc, #16]	@ (800b1b0 <tcp_output_alloc_header.constprop.0+0x4c>)
 800b1a0:	f003 f924 	bl	800e3ec <iprintf>
 800b1a4:	e7e4      	b.n	800b170 <tcp_output_alloc_header.constprop.0+0xc>
 800b1a6:	bf00      	nop
 800b1a8:	0801070c 	.word	0x0801070c
 800b1ac:	08010800 	.word	0x08010800
 800b1b0:	0800f2f8 	.word	0x0800f2f8

0800b1b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b1ba:	460d      	mov	r5, r1
{
 800b1bc:	4617      	mov	r7, r2
 800b1be:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b1c0:	b1f9      	cbz	r1, 800b202 <tcp_output_control_segment+0x4e>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b1c2:	b334      	cbz	r4, 800b212 <tcp_output_control_segment+0x5e>
 800b1c4:	7a20      	ldrb	r0, [r4, #8]
 800b1c6:	b9a8      	cbnz	r0, 800b1f4 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f002 f8bd 	bl	800d348 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b1ce:	b1a8      	cbz	r0, 800b1fc <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b1d0:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b1d2:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b1d4:	9400      	str	r4, [sp, #0]
 800b1d6:	2406      	movs	r4, #6
 800b1d8:	9002      	str	r0, [sp, #8]
 800b1da:	4632      	mov	r2, r6
 800b1dc:	9401      	str	r4, [sp, #4]
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f002 fa47 	bl	800d674 <ip4_output_if>
 800b1e6:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f7fc fc59 	bl	8007aa0 <pbuf_free>
  return err;
}
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	b005      	add	sp, #20
 800b1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800b1f4:	f7fc fb4a 	bl	800788c <netif_get_by_index>
  if (netif == NULL) {
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d1e9      	bne.n	800b1d0 <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800b1fc:	f06f 0403 	mvn.w	r4, #3
 800b200:	e7f2      	b.n	800b1e8 <tcp_output_control_segment+0x34>
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b202:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <tcp_output_control_segment+0x6c>)
 800b204:	f240 7287 	movw	r2, #1927	@ 0x787
 800b208:	4906      	ldr	r1, [pc, #24]	@ (800b224 <tcp_output_control_segment+0x70>)
 800b20a:	4807      	ldr	r0, [pc, #28]	@ (800b228 <tcp_output_control_segment+0x74>)
 800b20c:	f003 f8ee 	bl	800e3ec <iprintf>
 800b210:	e7d7      	b.n	800b1c2 <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800b212:	4630      	mov	r0, r6
 800b214:	f002 f898 	bl	800d348 <ip4_route>
  if (netif == NULL) {
 800b218:	2800      	cmp	r0, #0
 800b21a:	d0ef      	beq.n	800b1fc <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800b21c:	23ff      	movs	r3, #255	@ 0xff
 800b21e:	e7d9      	b.n	800b1d4 <tcp_output_control_segment+0x20>
 800b220:	0801070c 	.word	0x0801070c
 800b224:	08010828 	.word	0x08010828
 800b228:	0800f2f8 	.word	0x0800f2f8

0800b22c <tcp_write>:
{
 800b22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800b230:	2400      	movs	r4, #0
{
 800b232:	b091      	sub	sp, #68	@ 0x44
 800b234:	9107      	str	r1, [sp, #28]
 800b236:	9309      	str	r3, [sp, #36]	@ 0x24
  u16_t oversize = 0;
 800b238:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f000 8331 	beq.w	800b8a4 <tcp_write+0x678>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b242:	f8b0 3062 	ldrh.w	r3, [r0, #98]	@ 0x62
 800b246:	4692      	mov	sl, r2
 800b248:	8e42      	ldrh	r2, [r0, #50]	@ 0x32
 800b24a:	4680      	mov	r8, r0
 800b24c:	085b      	lsrs	r3, r3, #1
 800b24e:	4293      	cmp	r3, r2
 800b250:	bf28      	it	cs
 800b252:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf18      	it	ne
 800b258:	461a      	movne	r2, r3
 800b25a:	9205      	str	r2, [sp, #20]
  LWIP_ASSERT_CORE_LOCKED();
 800b25c:	f7f9 f844 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b260:	9b07      	ldr	r3, [sp, #28]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 8301 	beq.w	800b86a <tcp_write+0x63e>
  if ((pcb->state != ESTABLISHED) &&
 800b268:	f898 3014 	ldrb.w	r3, [r8, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b26c:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800b26e:	2a02      	cmp	r2, #2
 800b270:	d902      	bls.n	800b278 <tcp_write+0x4c>
 800b272:	2b07      	cmp	r3, #7
 800b274:	f040 8272 	bne.w	800b75c <tcp_write+0x530>
  } else if (len == 0) {
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	f000 80a9 	beq.w	800b3d2 <tcp_write+0x1a6>
  if (len > pcb->snd_buf) {
 800b280:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800b284:	4553      	cmp	r3, sl
 800b286:	f0c0 82c8 	bcc.w	800b81a <tcp_write+0x5ee>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b28a:	f8b8 6066 	ldrh.w	r6, [r8, #102]	@ 0x66
 800b28e:	2e0f      	cmp	r6, #15
 800b290:	f200 82c3 	bhi.w	800b81a <tcp_write+0x5ee>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b294:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
  if (pcb->snd_queuelen != 0) {
 800b298:	2e00      	cmp	r6, #0
 800b29a:	f000 808d 	beq.w	800b3b8 <tcp_write+0x18c>
  if (pcb->unsent != NULL) {
 800b29e:	f8d8 206c 	ldr.w	r2, [r8, #108]	@ 0x6c
 800b2a2:	4691      	mov	r9, r2
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 820d 	beq.w	800b6c4 <tcp_write+0x498>
  if (pcb->unsent != NULL) {
 800b2aa:	4691      	mov	r9, r2
 800b2ac:	2a00      	cmp	r2, #0
 800b2ae:	f000 80af 	beq.w	800b410 <tcp_write+0x1e4>
 800b2b2:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1fb      	bne.n	800b2b4 <tcp_write+0x88>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b2bc:	7a94      	ldrb	r4, [r2, #10]
 800b2be:	4699      	mov	r9, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b2c0:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b2c2:	00a4      	lsls	r4, r4, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b2c4:	9905      	ldr	r1, [sp, #20]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b2c6:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b2c8:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b2cc:	191a      	adds	r2, r3, r4
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	f2c0 81ec 	blt.w	800b6ac <tcp_write+0x480>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	1b12      	subs	r2, r2, r4
    oversize = pcb->unsent_oversize;
 800b2d8:	f8b8 4068 	ldrh.w	r4, [r8, #104]	@ 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b2dc:	1ad2      	subs	r2, r2, r3
    oversize = pcb->unsent_oversize;
 800b2de:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b2e2:	b295      	uxth	r5, r2
    if (oversize > 0) {
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	f000 8086 	beq.w	800b3f6 <tcp_write+0x1ca>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b2ea:	42ac      	cmp	r4, r5
 800b2ec:	f200 8130 	bhi.w	800b550 <tcp_write+0x324>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b2f0:	4554      	cmp	r4, sl
 800b2f2:	4623      	mov	r3, r4
 800b2f4:	bf28      	it	cs
 800b2f6:	4653      	movcs	r3, sl
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	42ab      	cmp	r3, r5
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	bf28      	it	cs
 800b300:	462a      	movcs	r2, r5
      oversize -= oversize_used;
 800b302:	1aa4      	subs	r4, r4, r2
      space -= oversize_used;
 800b304:	1aab      	subs	r3, r5, r2
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b306:	920a      	str	r2, [sp, #40]	@ 0x28
      oversize -= oversize_used;
 800b308:	b2a4      	uxth	r4, r4
      space -= oversize_used;
 800b30a:	b29d      	uxth	r5, r3
      oversize -= oversize_used;
 800b30c:	f8ad 403e 	strh.w	r4, [sp, #62]	@ 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b310:	b14c      	cbz	r4, 800b326 <tcp_write+0xfa>
 800b312:	4592      	cmp	sl, r2
 800b314:	f000 82e0 	beq.w	800b8d8 <tcp_write+0x6ac>
 800b318:	4b91      	ldr	r3, [pc, #580]	@ (800b560 <tcp_write+0x334>)
 800b31a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b31e:	4991      	ldr	r1, [pc, #580]	@ (800b564 <tcp_write+0x338>)
 800b320:	4891      	ldr	r0, [pc, #580]	@ (800b568 <tcp_write+0x33c>)
 800b322:	f003 f863 	bl	800e3ec <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b328:	459a      	cmp	sl, r3
 800b32a:	f240 82d5 	bls.w	800b8d8 <tcp_write+0x6ac>
 800b32e:	2d00      	cmp	r5, #0
 800b330:	f000 81de 	beq.w	800b6f0 <tcp_write+0x4c4>
 800b334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b336:	891b      	ldrh	r3, [r3, #8]
 800b338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b33a:	930d      	str	r3, [sp, #52]	@ 0x34
 800b33c:	f002 0201 	and.w	r2, r2, #1
 800b340:	9208      	str	r2, [sp, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 81bc 	beq.w	800b6c0 <tcp_write+0x494>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b34a:	ebaa 0703 	sub.w	r7, sl, r3
 800b34e:	42af      	cmp	r7, r5
 800b350:	bfa8      	it	ge
 800b352:	462f      	movge	r7, r5
 800b354:	b2bb      	uxth	r3, r7
 800b356:	930d      	str	r3, [sp, #52]	@ 0x34
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b358:	2a00      	cmp	r2, #0
 800b35a:	f040 8202 	bne.w	800b762 <tcp_write+0x536>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b35e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b360:	685d      	ldr	r5, [r3, #4]
 800b362:	462b      	mov	r3, r5
 800b364:	682d      	ldr	r5, [r5, #0]
 800b366:	2d00      	cmp	r5, #0
 800b368:	d1fb      	bne.n	800b362 <tcp_write+0x136>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b36a:	7b1a      	ldrb	r2, [r3, #12]
 800b36c:	2a3f      	cmp	r2, #63	@ 0x3f
 800b36e:	d806      	bhi.n	800b37e <tcp_write+0x152>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b370:	895a      	ldrh	r2, [r3, #10]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b376:	9a07      	ldr	r2, [sp, #28]
 800b378:	429a      	cmp	r2, r3
 800b37a:	f000 81e4 	beq.w	800b746 <tcp_write+0x51a>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b37e:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800b382:	2201      	movs	r2, #1
 800b384:	2000      	movs	r0, #0
 800b386:	4659      	mov	r1, fp
 800b388:	f7fc fbfa 	bl	8007b80 <pbuf_alloc>
 800b38c:	4681      	mov	r9, r0
 800b38e:	2800      	cmp	r0, #0
 800b390:	f000 8292 	beq.w	800b8b8 <tcp_write+0x68c>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b394:	9a07      	ldr	r2, [sp, #28]
 800b396:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800b398:	19d3      	adds	r3, r2, r7
 800b39a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b39c:	f7fc fcf4 	bl	8007d88 <pbuf_clen>
      pos += seglen;
 800b3a0:	465b      	mov	r3, fp
          queuelen += pbuf_clen(concat_p);
 800b3a2:	1982      	adds	r2, r0, r6
      pos += seglen;
 800b3a4:	443b      	add	r3, r7
          queuelen += pbuf_clen(concat_p);
 800b3a6:	b296      	uxth	r6, r2
      pos += seglen;
 800b3a8:	b29b      	uxth	r3, r3
  while (pos < len) {
 800b3aa:	459a      	cmp	sl, r3
 800b3ac:	f240 82b6 	bls.w	800b91c <tcp_write+0x6f0>
      pos += seglen;
 800b3b0:	461c      	mov	r4, r3
  u16_t extendlen = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	930d      	str	r3, [sp, #52]	@ 0x34
 800b3b6:	e038      	b.n	800b42a <tcp_write+0x1fe>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b3b8:	b333      	cbz	r3, 800b408 <tcp_write+0x1dc>
 800b3ba:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800b3be:	4b68      	ldr	r3, [pc, #416]	@ (800b560 <tcp_write+0x334>)
 800b3c0:	496a      	ldr	r1, [pc, #424]	@ (800b56c <tcp_write+0x340>)
 800b3c2:	4869      	ldr	r0, [pc, #420]	@ (800b568 <tcp_write+0x33c>)
 800b3c4:	f003 f812 	bl	800e3ec <iprintf>
  queuelen = pcb->snd_queuelen;
 800b3c8:	f8b8 6066 	ldrh.w	r6, [r8, #102]	@ 0x66
 800b3cc:	f8d8 206c 	ldr.w	r2, [r8, #108]	@ 0x6c
 800b3d0:	e76b      	b.n	800b2aa <tcp_write+0x7e>
  if (pcb->unsent != NULL) {
 800b3d2:	f8d8 906c 	ldr.w	r9, [r8, #108]	@ 0x6c
  queuelen = pcb->snd_queuelen;
 800b3d6:	f8b8 6066 	ldrh.w	r6, [r8, #102]	@ 0x66
  if (pcb->unsent != NULL) {
 800b3da:	f1b9 0f00 	cmp.w	r9, #0
 800b3de:	f47f af68 	bne.w	800b2b2 <tcp_write+0x86>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b3e2:	f8b8 3068 	ldrh.w	r3, [r8, #104]	@ 0x68
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f040 82a0 	bne.w	800b92c <tcp_write+0x700>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b3ec:	2500      	movs	r5, #0
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b3ee:	462f      	mov	r7, r5
    pcb->unsent = queue;
 800b3f0:	f8c8 506c 	str.w	r5, [r8, #108]	@ 0x6c
 800b3f4:	e104      	b.n	800b600 <tcp_write+0x3d4>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b3f6:	f1ba 0f00 	cmp.w	sl, #0
 800b3fa:	f000 8189 	beq.w	800b710 <tcp_write+0x4e4>
 800b3fe:	2d00      	cmp	r5, #0
 800b400:	f000 8183 	beq.w	800b70a <tcp_write+0x4de>
  u16_t pos = 0; /* position in 'arg' data */
 800b404:	940a      	str	r4, [sp, #40]	@ 0x28
 800b406:	e797      	b.n	800b338 <tcp_write+0x10c>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b408:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1d4      	bne.n	800b3ba <tcp_write+0x18e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b412:	f8b8 4068 	ldrh.w	r4, [r8, #104]	@ 0x68
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	f040 81ce 	bne.w	800b7be <tcp_write+0x592>
  struct pbuf *concat_p = NULL;
 800b422:	46a1      	mov	r9, r4
  u16_t extendlen = 0;
 800b424:	940d      	str	r4, [sp, #52]	@ 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b426:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 800b42a:	2500      	movs	r5, #0
 800b42c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b430:	46ab      	mov	fp, r5
 800b432:	e03f      	b.n	800b4b4 <tcp_write+0x288>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b434:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f040 80fc 	bne.w	800b636 <tcp_write+0x40a>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b43e:	2201      	movs	r2, #1
 800b440:	4649      	mov	r1, r9
 800b442:	2036      	movs	r0, #54	@ 0x36
 800b444:	f7fc fb9c 	bl	8007b80 <pbuf_alloc>
 800b448:	2800      	cmp	r0, #0
 800b44a:	f000 810c 	beq.w	800b666 <tcp_write+0x43a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b44e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b450:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b452:	9006      	str	r0, [sp, #24]
 800b454:	4422      	add	r2, r4
 800b456:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b458:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b45c:	2036      	movs	r0, #54	@ 0x36
 800b45e:	f7fc fb8f 	bl	8007b80 <pbuf_alloc>
 800b462:	9b06      	ldr	r3, [sp, #24]
 800b464:	4607      	mov	r7, r0
 800b466:	2800      	cmp	r0, #0
 800b468:	f000 813b 	beq.w	800b6e2 <tcp_write+0x4b6>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b46c:	4619      	mov	r1, r3
 800b46e:	f7fc fcb3 	bl	8007dd8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b472:	4638      	mov	r0, r7
 800b474:	f7fc fc88 	bl	8007d88 <pbuf_clen>
 800b478:	4430      	add	r0, r6
 800b47a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b47c:	2e10      	cmp	r6, #16
 800b47e:	d849      	bhi.n	800b514 <tcp_write+0x2e8>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b480:	2200      	movs	r2, #0
 800b482:	4639      	mov	r1, r7
 800b484:	4640      	mov	r0, r8
 800b486:	9200      	str	r2, [sp, #0]
 800b488:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
 800b48c:	4423      	add	r3, r4
 800b48e:	f7ff fdad 	bl	800afec <tcp_create_segment>
 800b492:	4607      	mov	r7, r0
 800b494:	2800      	cmp	r0, #0
 800b496:	f000 80e6 	beq.w	800b666 <tcp_write+0x43a>
    if (queue == NULL) {
 800b49a:	f1bb 0f00 	cmp.w	fp, #0
 800b49e:	d069      	beq.n	800b574 <tcp_write+0x348>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b4a0:	2d00      	cmp	r5, #0
 800b4a2:	f000 80d0 	beq.w	800b646 <tcp_write+0x41a>
    pos += seglen;
 800b4a6:	44a1      	add	r9, r4
      prev_seg->next = seg;
 800b4a8:	602f      	str	r7, [r5, #0]
    pos += seglen;
 800b4aa:	fa1f f489 	uxth.w	r4, r9
  while (pos < len) {
 800b4ae:	45a2      	cmp	sl, r4
 800b4b0:	d966      	bls.n	800b580 <tcp_write+0x354>
 800b4b2:	463d      	mov	r5, r7
    u16_t left = len - pos;
 800b4b4:	ebaa 0904 	sub.w	r9, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800b4b8:	9b05      	ldr	r3, [sp, #20]
 800b4ba:	fa1f f989 	uxth.w	r9, r9
 800b4be:	4599      	cmp	r9, r3
 800b4c0:	bf28      	it	cs
 800b4c2:	4699      	movcs	r9, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4c4:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b4c6:	fa1f f989 	uxth.w	r9, r9
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0b2      	beq.n	800b434 <tcp_write+0x208>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b4ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	9a05      	ldr	r2, [sp, #20]
 800b4d4:	2036      	movs	r0, #54	@ 0x36
 800b4d6:	e9cd 8300 	strd	r8, r3, [sp]
 800b4da:	fabb f38b 	clz	r3, fp
 800b4de:	095b      	lsrs	r3, r3, #5
 800b4e0:	9302      	str	r3, [sp, #8]
 800b4e2:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800b4e6:	f7ff fd2b 	bl	800af40 <tcp_pbuf_prealloc>
 800b4ea:	4607      	mov	r7, r0
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	f000 80ba 	beq.w	800b666 <tcp_write+0x43a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b4f2:	8943      	ldrh	r3, [r0, #10]
 800b4f4:	454b      	cmp	r3, r9
 800b4f6:	f0c0 80ae 	bcc.w	800b656 <tcp_write+0x42a>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b4fa:	9b07      	ldr	r3, [sp, #28]
 800b4fc:	464a      	mov	r2, r9
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	1919      	adds	r1, r3, r4
 800b502:	f003 f823 	bl	800e54c <memcpy>
    queuelen += pbuf_clen(p);
 800b506:	4638      	mov	r0, r7
 800b508:	f7fc fc3e 	bl	8007d88 <pbuf_clen>
 800b50c:	4430      	add	r0, r6
 800b50e:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b510:	2e10      	cmp	r6, #16
 800b512:	d9b5      	bls.n	800b480 <tcp_write+0x254>
      pbuf_free(p);
 800b514:	4638      	mov	r0, r7
 800b516:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800b51a:	f7fc fac1 	bl	8007aa0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b51e:	f8b8 301a 	ldrh.w	r3, [r8, #26]
      pbuf_free(p);
 800b522:	465d      	mov	r5, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b528:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800b52c:	f1b9 0f00 	cmp.w	r9, #0
 800b530:	f040 80a6 	bne.w	800b680 <tcp_write+0x454>
  if (queue != NULL) {
 800b534:	b115      	cbz	r5, 800b53c <tcp_write+0x310>
    tcp_segs_free(queue);
 800b536:	4628      	mov	r0, r5
 800b538:	f7fd f8b6 	bl	80086a8 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b53c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	@ 0x66
 800b540:	2b00      	cmp	r3, #0
 800b542:	f040 80a1 	bne.w	800b688 <tcp_write+0x45c>
  return ERR_MEM;
 800b546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800b54a:	b011      	add	sp, #68	@ 0x44
 800b54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b550:	4b03      	ldr	r3, [pc, #12]	@ (800b560 <tcp_write+0x334>)
 800b552:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800b556:	4906      	ldr	r1, [pc, #24]	@ (800b570 <tcp_write+0x344>)
 800b558:	4803      	ldr	r0, [pc, #12]	@ (800b568 <tcp_write+0x33c>)
 800b55a:	f002 ff47 	bl	800e3ec <iprintf>
 800b55e:	e6c7      	b.n	800b2f0 <tcp_write+0xc4>
 800b560:	0801070c 	.word	0x0801070c
 800b564:	08010948 	.word	0x08010948
 800b568:	0800f2f8 	.word	0x0800f2f8
 800b56c:	080108dc 	.word	0x080108dc
 800b570:	08010928 	.word	0x08010928
    pos += seglen;
 800b574:	44a1      	add	r9, r4
      queue = seg;
 800b576:	4683      	mov	fp, r0
    pos += seglen;
 800b578:	fa1f f489 	uxth.w	r4, r9
  while (pos < len) {
 800b57c:	45a2      	cmp	sl, r4
 800b57e:	d898      	bhi.n	800b4b2 <tcp_write+0x286>
  if (oversize_used > 0) {
 800b580:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b582:	465d      	mov	r5, fp
 800b584:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
  pcb->unsent_oversize = oversize;
 800b588:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800b58c:	2a00      	cmp	r2, #0
 800b58e:	f000 8176 	beq.w	800b87e <tcp_write+0x652>
    for (p = last_unsent->p; p; p = p->next) {
 800b592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b594:	685c      	ldr	r4, [r3, #4]
 800b596:	b1d4      	cbz	r4, 800b5ce <tcp_write+0x3a2>
      p->tot_len += oversize_used;
 800b598:	8923      	ldrh	r3, [r4, #8]
 800b59a:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 800b59e:	445b      	add	r3, fp
 800b5a0:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	b133      	cbz	r3, 800b5b4 <tcp_write+0x388>
  u16_t extendlen = 0;
 800b5a6:	461c      	mov	r4, r3
      p->tot_len += oversize_used;
 800b5a8:	8923      	ldrh	r3, [r4, #8]
 800b5aa:	445b      	add	r3, fp
 800b5ac:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1f8      	bne.n	800b5a6 <tcp_write+0x37a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b5b4:	8963      	ldrh	r3, [r4, #10]
 800b5b6:	465a      	mov	r2, fp
 800b5b8:	6860      	ldr	r0, [r4, #4]
 800b5ba:	9907      	ldr	r1, [sp, #28]
 800b5bc:	4418      	add	r0, r3
 800b5be:	f002 ffc5 	bl	800e54c <memcpy>
        p->len += oversize_used;
 800b5c2:	8963      	ldrh	r3, [r4, #10]
 800b5c4:	445b      	add	r3, fp
 800b5c6:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d1eb      	bne.n	800b5a6 <tcp_write+0x37a>
    last_unsent->len += oversize_used;
 800b5ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5d2:	8913      	ldrh	r3, [r2, #8]
 800b5d4:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800b5d6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	@ 0x3e
    last_unsent->len += oversize_used;
 800b5da:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800b5dc:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800b5e0:	f1b9 0f00 	cmp.w	r9, #0
 800b5e4:	f000 80f9 	beq.w	800b7da <tcp_write+0x5ae>
    pbuf_cat(last_unsent->p, concat_p);
 800b5e8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	6860      	ldr	r0, [r4, #4]
 800b5ee:	f7fc fbf3 	bl	8007dd8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b5f2:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800b5f6:	8923      	ldrh	r3, [r4, #8]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800b5fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5fe:	601d      	str	r5, [r3, #0]
  pcb->snd_lbb += len;
 800b600:	f8d8 305c 	ldr.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_queuelen = queuelen;
 800b604:	f8a8 6066 	strh.w	r6, [r8, #102]	@ 0x66
  pcb->snd_lbb += len;
 800b608:	4453      	add	r3, sl
 800b60a:	f8c8 305c 	str.w	r3, [r8, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800b60e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	@ 0x64
 800b612:	eba3 030a 	sub.w	r3, r3, sl
 800b616:	f8a8 3064 	strh.w	r3, [r8, #100]	@ 0x64
  if (pcb->snd_queuelen != 0) {
 800b61a:	b126      	cbz	r6, 800b626 <tcp_write+0x3fa>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b61c:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 8083 	beq.w	800b72c <tcp_write+0x500>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b626:	b127      	cbz	r7, 800b632 <tcp_write+0x406>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	b113      	cbz	r3, 800b632 <tcp_write+0x406>
 800b62c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b62e:	0792      	lsls	r2, r2, #30
 800b630:	d574      	bpl.n	800b71c <tcp_write+0x4f0>
  return ERR_OK;
 800b632:	2000      	movs	r0, #0
 800b634:	e789      	b.n	800b54a <tcp_write+0x31e>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b636:	4bab      	ldr	r3, [pc, #684]	@ (800b8e4 <tcp_write+0x6b8>)
 800b638:	f240 2271 	movw	r2, #625	@ 0x271
 800b63c:	49aa      	ldr	r1, [pc, #680]	@ (800b8e8 <tcp_write+0x6bc>)
 800b63e:	48ab      	ldr	r0, [pc, #684]	@ (800b8ec <tcp_write+0x6c0>)
 800b640:	f002 fed4 	bl	800e3ec <iprintf>
 800b644:	e6fb      	b.n	800b43e <tcp_write+0x212>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b646:	4ba7      	ldr	r3, [pc, #668]	@ (800b8e4 <tcp_write+0x6b8>)
 800b648:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800b64c:	49a8      	ldr	r1, [pc, #672]	@ (800b8f0 <tcp_write+0x6c4>)
 800b64e:	48a7      	ldr	r0, [pc, #668]	@ (800b8ec <tcp_write+0x6c0>)
 800b650:	f002 fecc 	bl	800e3ec <iprintf>
 800b654:	e727      	b.n	800b4a6 <tcp_write+0x27a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b656:	4ba3      	ldr	r3, [pc, #652]	@ (800b8e4 <tcp_write+0x6b8>)
 800b658:	f240 2266 	movw	r2, #614	@ 0x266
 800b65c:	49a5      	ldr	r1, [pc, #660]	@ (800b8f4 <tcp_write+0x6c8>)
 800b65e:	48a3      	ldr	r0, [pc, #652]	@ (800b8ec <tcp_write+0x6c0>)
 800b660:	f002 fec4 	bl	800e3ec <iprintf>
 800b664:	e749      	b.n	800b4fa <tcp_write+0x2ce>
 800b666:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800b66a:	465d      	mov	r5, fp
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b66c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b674:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800b678:	f1b9 0f00 	cmp.w	r9, #0
 800b67c:	f43f af5a 	beq.w	800b534 <tcp_write+0x308>
    pbuf_free(concat_p);
 800b680:	4648      	mov	r0, r9
 800b682:	f7fc fa0d 	bl	8007aa0 <pbuf_free>
 800b686:	e755      	b.n	800b534 <tcp_write+0x308>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b688:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f47f af5a 	bne.w	800b546 <tcp_write+0x31a>
 800b692:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800b696:	2b00      	cmp	r3, #0
 800b698:	f47f af55 	bne.w	800b546 <tcp_write+0x31a>
 800b69c:	4b91      	ldr	r3, [pc, #580]	@ (800b8e4 <tcp_write+0x6b8>)
 800b69e:	f240 3227 	movw	r2, #807	@ 0x327
 800b6a2:	4995      	ldr	r1, [pc, #596]	@ (800b8f8 <tcp_write+0x6cc>)
 800b6a4:	4891      	ldr	r0, [pc, #580]	@ (800b8ec <tcp_write+0x6c0>)
 800b6a6:	f002 fea1 	bl	800e3ec <iprintf>
 800b6aa:	e74c      	b.n	800b546 <tcp_write+0x31a>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b6ac:	4b8d      	ldr	r3, [pc, #564]	@ (800b8e4 <tcp_write+0x6b8>)
 800b6ae:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b6b2:	4992      	ldr	r1, [pc, #584]	@ (800b8fc <tcp_write+0x6d0>)
 800b6b4:	488d      	ldr	r0, [pc, #564]	@ (800b8ec <tcp_write+0x6c0>)
 800b6b6:	f002 fe99 	bl	800e3ec <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b6ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6bc:	891b      	ldrh	r3, [r3, #8]
 800b6be:	e609      	b.n	800b2d4 <tcp_write+0xa8>
 800b6c0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b6c2:	e6b2      	b.n	800b42a <tcp_write+0x1fe>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b6c4:	2a00      	cmp	r2, #0
 800b6c6:	f47f adf4 	bne.w	800b2b2 <tcp_write+0x86>
 800b6ca:	f240 1255 	movw	r2, #341	@ 0x155
 800b6ce:	4b85      	ldr	r3, [pc, #532]	@ (800b8e4 <tcp_write+0x6b8>)
 800b6d0:	498b      	ldr	r1, [pc, #556]	@ (800b900 <tcp_write+0x6d4>)
 800b6d2:	4886      	ldr	r0, [pc, #536]	@ (800b8ec <tcp_write+0x6c0>)
 800b6d4:	f002 fe8a 	bl	800e3ec <iprintf>
  queuelen = pcb->snd_queuelen;
 800b6d8:	f8b8 6066 	ldrh.w	r6, [r8, #102]	@ 0x66
 800b6dc:	f8d8 206c 	ldr.w	r2, [r8, #108]	@ 0x6c
 800b6e0:	e5e3      	b.n	800b2aa <tcp_write+0x7e>
        pbuf_free(p2);
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800b6e8:	465d      	mov	r5, fp
 800b6ea:	f7fc f9d9 	bl	8007aa0 <pbuf_free>
        goto memerr;
 800b6ee:	e7bd      	b.n	800b66c <tcp_write+0x440>
  while (pos < len) {
 800b6f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6f2:	459a      	cmp	sl, r3
 800b6f4:	f240 80f0 	bls.w	800b8d8 <tcp_write+0x6ac>
 800b6f8:	461c      	mov	r4, r3
 800b6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  struct pbuf *concat_p = NULL;
 800b6fc:	940a      	str	r4, [sp, #40]	@ 0x28
 800b6fe:	f003 0301 	and.w	r3, r3, #1
 800b702:	9308      	str	r3, [sp, #32]
  u16_t extendlen = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	930d      	str	r3, [sp, #52]	@ 0x34
 800b708:	e68f      	b.n	800b42a <tcp_write+0x1fe>
  while (pos < len) {
 800b70a:	f1ba 0f00 	cmp.w	sl, #0
 800b70e:	d1f4      	bne.n	800b6fa <tcp_write+0x4ce>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b710:	4654      	mov	r4, sl
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b712:	4657      	mov	r7, sl
  pcb->unsent_oversize = oversize;
 800b714:	2500      	movs	r5, #0
 800b716:	f8a8 4068 	strh.w	r4, [r8, #104]	@ 0x68
  if (last_unsent == NULL) {
 800b71a:	e76f      	b.n	800b5fc <tcp_write+0x3d0>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b71c:	899c      	ldrh	r4, [r3, #12]
 800b71e:	2008      	movs	r0, #8
 800b720:	f7fb face 	bl	8006cc0 <lwip_htons>
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	4304      	orrs	r4, r0
 800b728:	819c      	strh	r4, [r3, #12]
 800b72a:	e782      	b.n	800b632 <tcp_write+0x406>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b72c:	f8d8 306c 	ldr.w	r3, [r8, #108]	@ 0x6c
 800b730:	2b00      	cmp	r3, #0
 800b732:	f47f af78 	bne.w	800b626 <tcp_write+0x3fa>
 800b736:	4b6b      	ldr	r3, [pc, #428]	@ (800b8e4 <tcp_write+0x6b8>)
 800b738:	f240 3212 	movw	r2, #786	@ 0x312
 800b73c:	496e      	ldr	r1, [pc, #440]	@ (800b8f8 <tcp_write+0x6cc>)
 800b73e:	486b      	ldr	r0, [pc, #428]	@ (800b8ec <tcp_write+0x6c0>)
 800b740:	f002 fe54 	bl	800e3ec <iprintf>
 800b744:	e76f      	b.n	800b626 <tcp_write+0x3fa>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d17d      	bne.n	800b848 <tcp_write+0x61c>
  while (pos < len) {
 800b74c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b74e:	459a      	cmp	sl, r3
 800b750:	f240 80f6 	bls.w	800b940 <tcp_write+0x714>
      pos += seglen;
 800b754:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  struct pbuf *concat_p = NULL;
 800b756:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800b75a:	e666      	b.n	800b42a <tcp_write+0x1fe>
    return err;
 800b75c:	f06f 000a 	mvn.w	r0, #10
 800b760:	e6f3      	b.n	800b54a <tcp_write+0x31e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b764:	462a      	mov	r2, r5
 800b766:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800b768:	2000      	movs	r0, #0
 800b76a:	e9cd 8300 	strd	r8, r3, [sp]
 800b76e:	2301      	movs	r3, #1
 800b770:	4621      	mov	r1, r4
 800b772:	9302      	str	r3, [sp, #8]
 800b774:	f10d 033e 	add.w	r3, sp, #62	@ 0x3e
 800b778:	f7ff fbe2 	bl	800af40 <tcp_pbuf_prealloc>
 800b77c:	4681      	mov	r9, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	f000 809a 	beq.w	800b8b8 <tcp_write+0x68c>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b784:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b786:	4622      	mov	r2, r4
 800b788:	9b07      	ldr	r3, [sp, #28]
      pos += seglen;
 800b78a:	442c      	add	r4, r5
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b78c:	6840      	ldr	r0, [r0, #4]
 800b78e:	1959      	adds	r1, r3, r5
      pos += seglen;
 800b790:	b2a4      	uxth	r4, r4
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b792:	f002 fedb 	bl	800e54c <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b796:	4648      	mov	r0, r9
 800b798:	f7fc faf6 	bl	8007d88 <pbuf_clen>
  while (pos < len) {
 800b79c:	45a2      	cmp	sl, r4
        queuelen += pbuf_clen(concat_p);
 800b79e:	eb00 0306 	add.w	r3, r0, r6
 800b7a2:	b29e      	uxth	r6, r3
  while (pos < len) {
 800b7a4:	f63f ae05 	bhi.w	800b3b2 <tcp_write+0x186>
  if (oversize_used > 0) {
 800b7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  pcb->unsent_oversize = oversize;
 800b7aa:	f8bd 403e 	ldrh.w	r4, [sp, #62]	@ 0x3e
  if (oversize_used > 0) {
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f040 8089 	bne.w	800b8c6 <tcp_write+0x69a>
  pcb->unsent_oversize = oversize;
 800b7b4:	2500      	movs	r5, #0
 800b7b6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b7b8:	f8a8 4068 	strh.w	r4, [r8, #104]	@ 0x68
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b7bc:	e714      	b.n	800b5e8 <tcp_write+0x3bc>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b7be:	4b49      	ldr	r3, [pc, #292]	@ (800b8e4 <tcp_write+0x6b8>)
 800b7c0:	f240 224a 	movw	r2, #586	@ 0x24a
 800b7c4:	494f      	ldr	r1, [pc, #316]	@ (800b904 <tcp_write+0x6d8>)
 800b7c6:	4849      	ldr	r0, [pc, #292]	@ (800b8ec <tcp_write+0x6c0>)
 800b7c8:	f002 fe10 	bl	800e3ec <iprintf>
  u16_t extendlen = 0;
 800b7cc:	2300      	movs	r3, #0
  u16_t pos = 0; /* position in 'arg' data */
 800b7ce:	461c      	mov	r4, r3
  struct pbuf *concat_p = NULL;
 800b7d0:	4699      	mov	r9, r3
  u16_t extendlen = 0;
 800b7d2:	930d      	str	r3, [sp, #52]	@ 0x34
  u16_t oversize_used = 0;
 800b7d4:	930a      	str	r3, [sp, #40]	@ 0x28
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b7d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b7d8:	e627      	b.n	800b42a <tcp_write+0x1fe>
  } else if (extendlen > 0) {
 800b7da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f43f af0d 	beq.w	800b5fc <tcp_write+0x3d0>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b7e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7e4:	6859      	ldr	r1, [r3, #4]
 800b7e6:	b329      	cbz	r1, 800b834 <tcp_write+0x608>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b7e8:	680a      	ldr	r2, [r1, #0]
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d062      	beq.n	800b8b4 <tcp_write+0x688>
 800b7ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b7f0:	e000      	b.n	800b7f4 <tcp_write+0x5c8>
 800b7f2:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800b7f4:	890b      	ldrh	r3, [r1, #8]
 800b7f6:	4403      	add	r3, r0
 800b7f8:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	6813      	ldr	r3, [r2, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1f7      	bne.n	800b7f2 <tcp_write+0x5c6>
    p->tot_len += extendlen;
 800b802:	8913      	ldrh	r3, [r2, #8]
 800b804:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b806:	440b      	add	r3, r1
 800b808:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800b80a:	8953      	ldrh	r3, [r2, #10]
 800b80c:	440b      	add	r3, r1
 800b80e:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800b810:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b812:	8913      	ldrh	r3, [r2, #8]
 800b814:	440b      	add	r3, r1
 800b816:	8113      	strh	r3, [r2, #8]
  if (last_unsent == NULL) {
 800b818:	e6f0      	b.n	800b5fc <tcp_write+0x3d0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b81a:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b81e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b822:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (err != ERR_OK) {
 800b826:	e68e      	b.n	800b546 <tcp_write+0x31a>
  } else if (extendlen > 0) {
 800b828:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d04f      	beq.n	800b8ce <tcp_write+0x6a2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b830:	2b00      	cmp	r3, #0
 800b832:	d1d6      	bne.n	800b7e2 <tcp_write+0x5b6>
 800b834:	4b2b      	ldr	r3, [pc, #172]	@ (800b8e4 <tcp_write+0x6b8>)
 800b836:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800b83a:	4933      	ldr	r1, [pc, #204]	@ (800b908 <tcp_write+0x6dc>)
 800b83c:	482b      	ldr	r0, [pc, #172]	@ (800b8ec <tcp_write+0x6c0>)
 800b83e:	f002 fdd5 	bl	800e3ec <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b844:	6859      	ldr	r1, [r3, #4]
 800b846:	e7cf      	b.n	800b7e8 <tcp_write+0x5bc>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b848:	4b26      	ldr	r3, [pc, #152]	@ (800b8e4 <tcp_write+0x6b8>)
 800b84a:	f240 2231 	movw	r2, #561	@ 0x231
 800b84e:	492f      	ldr	r1, [pc, #188]	@ (800b90c <tcp_write+0x6e0>)
  struct pbuf *concat_p = NULL;
 800b850:	46a9      	mov	r9, r5
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b852:	4826      	ldr	r0, [pc, #152]	@ (800b8ec <tcp_write+0x6c0>)
 800b854:	f002 fdca 	bl	800e3ec <iprintf>
      pos += seglen;
 800b858:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b85a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b85c:	189c      	adds	r4, r3, r2
 800b85e:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800b860:	45a2      	cmp	sl, r4
 800b862:	f63f ade2 	bhi.w	800b42a <tcp_write+0x1fe>
      seg = last_unsent;
 800b866:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b868:	e693      	b.n	800b592 <tcp_write+0x366>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b86a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8e4 <tcp_write+0x6b8>)
 800b86c:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800b870:	4927      	ldr	r1, [pc, #156]	@ (800b910 <tcp_write+0x6e4>)
 800b872:	481e      	ldr	r0, [pc, #120]	@ (800b8ec <tcp_write+0x6c0>)
 800b874:	f002 fdba 	bl	800e3ec <iprintf>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b878:	f06f 000f 	mvn.w	r0, #15
 800b87c:	e665      	b.n	800b54a <tcp_write+0x31e>
  pcb->unsent_oversize = oversize;
 800b87e:	f8a8 3068 	strh.w	r3, [r8, #104]	@ 0x68
  if (concat_p != NULL) {
 800b882:	f1b9 0f00 	cmp.w	r9, #0
 800b886:	d0cf      	beq.n	800b828 <tcp_write+0x5fc>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f47f aeac 	bne.w	800b5e8 <tcp_write+0x3bc>
 800b890:	4b14      	ldr	r3, [pc, #80]	@ (800b8e4 <tcp_write+0x6b8>)
 800b892:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800b896:	491f      	ldr	r1, [pc, #124]	@ (800b914 <tcp_write+0x6e8>)
 800b898:	4814      	ldr	r0, [pc, #80]	@ (800b8ec <tcp_write+0x6c0>)
 800b89a:	f002 fda7 	bl	800e3ec <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	deff      	udf	#255	@ 0xff
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e4 <tcp_write+0x6b8>)
 800b8a6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800b8aa:	491b      	ldr	r1, [pc, #108]	@ (800b918 <tcp_write+0x6ec>)
 800b8ac:	480f      	ldr	r0, [pc, #60]	@ (800b8ec <tcp_write+0x6c0>)
 800b8ae:	f002 fd9d 	bl	800e3ec <iprintf>
 800b8b2:	e7e1      	b.n	800b878 <tcp_write+0x64c>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b8b4:	460a      	mov	r2, r1
 800b8b6:	e7a4      	b.n	800b802 <tcp_write+0x5d6>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b8b8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b8bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c0:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800b8c4:	e63a      	b.n	800b53c <tcp_write+0x310>
  if (oversize_used > 0) {
 800b8c6:	2500      	movs	r5, #0
 800b8c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  u16_t extendlen = 0;
 800b8ca:	950d      	str	r5, [sp, #52]	@ 0x34
 800b8cc:	e661      	b.n	800b592 <tcp_write+0x366>
  if (last_unsent == NULL) {
 800b8ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f47f ae93 	bne.w	800b5fc <tcp_write+0x3d0>
 800b8d6:	e58b      	b.n	800b3f0 <tcp_write+0x1c4>
  if (oversize_used > 0) {
 800b8d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1f3      	bne.n	800b8c6 <tcp_write+0x69a>
 800b8de:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b8e0:	e718      	b.n	800b714 <tcp_write+0x4e8>
 800b8e2:	bf00      	nop
 800b8e4:	0801070c 	.word	0x0801070c
 800b8e8:	080109d4 	.word	0x080109d4
 800b8ec:	0800f2f8 	.word	0x0800f2f8
 800b8f0:	080109e4 	.word	0x080109e4
 800b8f4:	08010994 	.word	0x08010994
 800b8f8:	08010a68 	.word	0x08010a68
 800b8fc:	08010910 	.word	0x08010910
 800b900:	080108a0 	.word	0x080108a0
 800b904:	08010a88 	.word	0x08010a88
 800b908:	08010a30 	.word	0x08010a30
 800b90c:	08010968 	.word	0x08010968
 800b910:	0801086c 	.word	0x0801086c
 800b914:	080109f8 	.word	0x080109f8
 800b918:	08010854 	.word	0x08010854
 800b91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f43f af48 	beq.w	800b7b4 <tcp_write+0x588>
  u16_t extendlen = 0;
 800b924:	2300      	movs	r3, #0
      seg = last_unsent;
 800b926:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  u16_t extendlen = 0;
 800b928:	930d      	str	r3, [sp, #52]	@ 0x34
 800b92a:	e632      	b.n	800b592 <tcp_write+0x366>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <tcp_write+0x71c>)
 800b92e:	f240 224a 	movw	r2, #586	@ 0x24a
 800b932:	4906      	ldr	r1, [pc, #24]	@ (800b94c <tcp_write+0x720>)
 800b934:	4806      	ldr	r0, [pc, #24]	@ (800b950 <tcp_write+0x724>)
 800b936:	f002 fd59 	bl	800e3ec <iprintf>
  pcb->unsent_oversize = oversize;
 800b93a:	f8a8 a068 	strh.w	sl, [r8, #104]	@ 0x68
  if (last_unsent == NULL) {
 800b93e:	e555      	b.n	800b3ec <tcp_write+0x1c0>
      seg = last_unsent;
 800b940:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
  pcb->unsent_oversize = oversize;
 800b942:	f8a8 4068 	strh.w	r4, [r8, #104]	@ 0x68
  } else if (extendlen > 0) {
 800b946:	e74c      	b.n	800b7e2 <tcp_write+0x5b6>
 800b948:	0801070c 	.word	0x0801070c
 800b94c:	08010a88 	.word	0x08010a88
 800b950:	0800f2f8 	.word	0x0800f2f8

0800b954 <tcp_split_unsent_seg>:
{
 800b954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b958:	4606      	mov	r6, r0
{
 800b95a:	b083      	sub	sp, #12
 800b95c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b95e:	2800      	cmp	r0, #0
 800b960:	f000 80ad 	beq.w	800babe <tcp_split_unsent_seg+0x16a>
  useg = pcb->unsent;
 800b964:	6ef5      	ldr	r5, [r6, #108]	@ 0x6c
  if (useg == NULL) {
 800b966:	2d00      	cmp	r5, #0
 800b968:	f000 80b4 	beq.w	800bad4 <tcp_split_unsent_seg+0x180>
  if (split == 0) {
 800b96c:	2c00      	cmp	r4, #0
 800b96e:	f000 80b4 	beq.w	800bada <tcp_split_unsent_seg+0x186>
  if (useg->len <= split) {
 800b972:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b976:	45a0      	cmp	r8, r4
 800b978:	d97e      	bls.n	800ba78 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b97a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 800b97c:	42a3      	cmp	r3, r4
 800b97e:	f0c0 8084 	bcc.w	800ba8a <tcp_split_unsent_seg+0x136>
  optflags = useg->flags;
 800b982:	f895 a00a 	ldrb.w	sl, [r5, #10]
  remainder = useg->len - split;
 800b986:	eba8 0904 	sub.w	r9, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b98a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b98e:	2036      	movs	r0, #54	@ 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b990:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800b994:	fa1f f989 	uxth.w	r9, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b998:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b99c:	eb0b 0109 	add.w	r1, fp, r9
 800b9a0:	b289      	uxth	r1, r1
 800b9a2:	f7fc f8ed 	bl	8007b80 <pbuf_alloc>
  if (p == NULL) {
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	f000 8093 	beq.w	800bad4 <tcp_split_unsent_seg+0x180>
  offset = useg->p->tot_len - useg->len + split;
 800b9ae:	6868      	ldr	r0, [r5, #4]
 800b9b0:	892a      	ldrh	r2, [r5, #8]
 800b9b2:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b9b4:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b9b6:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b9b8:	464a      	mov	r2, r9
 800b9ba:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800b9bc:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	f7fc fb20 	bl	8008004 <pbuf_copy_partial>
 800b9c4:	4548      	cmp	r0, r9
 800b9c6:	f040 8082 	bne.w	800bace <tcp_split_unsent_seg+0x17a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b9ca:	68eb      	ldr	r3, [r5, #12]
 800b9cc:	8998      	ldrh	r0, [r3, #12]
 800b9ce:	f7fb f977 	bl	8006cc0 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b9d2:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b9d6:	fa5f f980 	uxtb.w	r9, r0
  if (split_flags & TCP_PSH) {
 800b9da:	d151      	bne.n	800ba80 <tcp_split_unsent_seg+0x12c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b9dc:	f009 093f 	and.w	r9, r9, #63	@ 0x3f
  if (split_flags & TCP_FIN) {
 800b9e0:	f019 0f01 	tst.w	r9, #1
 800b9e4:	d003      	beq.n	800b9ee <tcp_split_unsent_seg+0x9a>
    split_flags &= ~TCP_FIN;
 800b9e6:	f009 09fe 	and.w	r9, r9, #254	@ 0xfe
    remainder_flags |= TCP_FIN;
 800b9ea:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b9ee:	68eb      	ldr	r3, [r5, #12]
 800b9f0:	6858      	ldr	r0, [r3, #4]
 800b9f2:	f7fb f969 	bl	8006cc8 <lwip_htonl>
 800b9f6:	f8cd a000 	str.w	sl, [sp]
 800b9fa:	1823      	adds	r3, r4, r0
 800b9fc:	465a      	mov	r2, fp
 800b9fe:	4639      	mov	r1, r7
 800ba00:	4630      	mov	r0, r6
 800ba02:	f7ff faf3 	bl	800afec <tcp_create_segment>
  if (seg == NULL) {
 800ba06:	4682      	mov	sl, r0
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d060      	beq.n	800bace <tcp_split_unsent_seg+0x17a>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ba0c:	6868      	ldr	r0, [r5, #4]
 800ba0e:	eba4 0408 	sub.w	r4, r4, r8
 800ba12:	f7fc f9b9 	bl	8007d88 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ba16:	686a      	ldr	r2, [r5, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ba18:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ba1c:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ba1e:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ba20:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ba22:	4610      	mov	r0, r2
 800ba24:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800ba26:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800ba2a:	b289      	uxth	r1, r1
 800ba2c:	f7fc f950 	bl	8007cd0 <pbuf_realloc>
  useg->len -= remainder;
 800ba30:	892b      	ldrh	r3, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ba32:	4648      	mov	r0, r9
  useg->len -= remainder;
 800ba34:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ba36:	68eb      	ldr	r3, [r5, #12]
  useg->len -= remainder;
 800ba38:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ba3a:	899c      	ldrh	r4, [r3, #12]
 800ba3c:	f7fb f940 	bl	8006cc0 <lwip_htons>
 800ba40:	68eb      	ldr	r3, [r5, #12]
 800ba42:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ba44:	6868      	ldr	r0, [r5, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800ba46:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ba48:	f7fc f99e 	bl	8007d88 <pbuf_clen>
 800ba4c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ba50:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ba52:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ba56:	f8a6 3066 	strh.w	r3, [r6, #102]	@ 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ba5a:	f7fc f995 	bl	8007d88 <pbuf_clen>
 800ba5e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	@ 0x66
 800ba62:	4418      	add	r0, r3
  seg->next = useg->next;
 800ba64:	682b      	ldr	r3, [r5, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ba66:	f8a6 0066 	strh.w	r0, [r6, #102]	@ 0x66
  seg->next = useg->next;
 800ba6a:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800ba6e:	f8c5 a000 	str.w	sl, [r5]
  if (seg->next == NULL) {
 800ba72:	f8da 3000 	ldr.w	r3, [sl]
 800ba76:	b1fb      	cbz	r3, 800bab8 <tcp_split_unsent_seg+0x164>
    return ERR_OK;
 800ba78:	2000      	movs	r0, #0
}
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    split_flags &= ~TCP_PSH;
 800ba80:	f009 0937 	and.w	r9, r9, #55	@ 0x37
    remainder_flags |= TCP_PSH;
 800ba84:	f04f 0b08 	mov.w	fp, #8
 800ba88:	e7aa      	b.n	800b9e0 <tcp_split_unsent_seg+0x8c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba8a:	4b19      	ldr	r3, [pc, #100]	@ (800baf0 <tcp_split_unsent_seg+0x19c>)
 800ba8c:	f240 325b 	movw	r2, #859	@ 0x35b
 800ba90:	4918      	ldr	r1, [pc, #96]	@ (800baf4 <tcp_split_unsent_seg+0x1a0>)
 800ba92:	4819      	ldr	r0, [pc, #100]	@ (800baf8 <tcp_split_unsent_seg+0x1a4>)
 800ba94:	f002 fcaa 	bl	800e3ec <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ba98:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800ba9c:	f1b8 0f00 	cmp.w	r8, #0
 800baa0:	f47f af6f 	bne.w	800b982 <tcp_split_unsent_seg+0x2e>
 800baa4:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <tcp_split_unsent_seg+0x19c>)
 800baa6:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800baaa:	4914      	ldr	r1, [pc, #80]	@ (800bafc <tcp_split_unsent_seg+0x1a8>)
 800baac:	4812      	ldr	r0, [pc, #72]	@ (800baf8 <tcp_split_unsent_seg+0x1a4>)
 800baae:	f002 fc9d 	bl	800e3ec <iprintf>
  remainder = useg->len - split;
 800bab2:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800bab6:	e764      	b.n	800b982 <tcp_split_unsent_seg+0x2e>
    pcb->unsent_oversize = 0;
 800bab8:	f8a6 3068 	strh.w	r3, [r6, #104]	@ 0x68
 800babc:	e7dc      	b.n	800ba78 <tcp_split_unsent_seg+0x124>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800babe:	4b0c      	ldr	r3, [pc, #48]	@ (800baf0 <tcp_split_unsent_seg+0x19c>)
 800bac0:	f240 324b 	movw	r2, #843	@ 0x34b
 800bac4:	490e      	ldr	r1, [pc, #56]	@ (800bb00 <tcp_split_unsent_seg+0x1ac>)
 800bac6:	480c      	ldr	r0, [pc, #48]	@ (800baf8 <tcp_split_unsent_seg+0x1a4>)
 800bac8:	f002 fc90 	bl	800e3ec <iprintf>
 800bacc:	e74a      	b.n	800b964 <tcp_split_unsent_seg+0x10>
    pbuf_free(p);
 800bace:	4638      	mov	r0, r7
 800bad0:	f7fb ffe6 	bl	8007aa0 <pbuf_free>
    return ERR_MEM;
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bad8:	e7cf      	b.n	800ba7a <tcp_split_unsent_seg+0x126>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bada:	4b05      	ldr	r3, [pc, #20]	@ (800baf0 <tcp_split_unsent_seg+0x19c>)
 800badc:	f240 3253 	movw	r2, #851	@ 0x353
 800bae0:	4908      	ldr	r1, [pc, #32]	@ (800bb04 <tcp_split_unsent_seg+0x1b0>)
 800bae2:	4805      	ldr	r0, [pc, #20]	@ (800baf8 <tcp_split_unsent_seg+0x1a4>)
 800bae4:	f002 fc82 	bl	800e3ec <iprintf>
    return ERR_VAL;
 800bae8:	f06f 0005 	mvn.w	r0, #5
 800baec:	e7c5      	b.n	800ba7a <tcp_split_unsent_seg+0x126>
 800baee:	bf00      	nop
 800baf0:	0801070c 	.word	0x0801070c
 800baf4:	08010b00 	.word	0x08010b00
 800baf8:	0800f2f8 	.word	0x0800f2f8
 800bafc:	08010b10 	.word	0x08010b10
 800bb00:	08010ab8 	.word	0x08010ab8
 800bb04:	08010adc 	.word	0x08010adc

0800bb08 <tcp_enqueue_flags>:
{
 800bb08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bb0c:	f011 0703 	ands.w	r7, r1, #3
{
 800bb10:	b083      	sub	sp, #12
 800bb12:	460e      	mov	r6, r1
 800bb14:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bb16:	d050      	beq.n	800bbba <tcp_enqueue_flags+0xb2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bb18:	2800      	cmp	r0, #0
 800bb1a:	d077      	beq.n	800bc0c <tcp_enqueue_flags+0x104>
  if (flags & TCP_SYN) {
 800bb1c:	f3c6 0840 	ubfx	r8, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bb20:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bb24:	2036      	movs	r0, #54	@ 0x36
 800bb26:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f7fc f828 	bl	8007b80 <pbuf_alloc>
 800bb30:	4605      	mov	r5, r0
 800bb32:	2800      	cmp	r0, #0
 800bb34:	d07d      	beq.n	800bc32 <tcp_enqueue_flags+0x12a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bb36:	8943      	ldrh	r3, [r0, #10]
 800bb38:	454b      	cmp	r3, r9
 800bb3a:	d336      	bcc.n	800bbaa <tcp_enqueue_flags+0xa2>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f8cd 8000 	str.w	r8, [sp]
 800bb42:	4632      	mov	r2, r6
 800bb44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800bb46:	4620      	mov	r0, r4
 800bb48:	f7ff fa50 	bl	800afec <tcp_create_segment>
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d06f      	beq.n	800bc32 <tcp_enqueue_flags+0x12a>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bb52:	68c3      	ldr	r3, [r0, #12]
 800bb54:	079a      	lsls	r2, r3, #30
 800bb56:	d143      	bne.n	800bbe0 <tcp_enqueue_flags+0xd8>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bb58:	892b      	ldrh	r3, [r5, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d14a      	bne.n	800bbf4 <tcp_enqueue_flags+0xec>
  if (pcb->unsent == NULL) {
 800bb5e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d051      	beq.n	800bc08 <tcp_enqueue_flags+0x100>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bb64:	461a      	mov	r2, r3
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d1fb      	bne.n	800bb64 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800bb6c:	6015      	str	r5, [r2, #0]
  pcb->unsent_oversize = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800bb74:	b147      	cbz	r7, 800bb88 <tcp_enqueue_flags+0x80>
    pcb->snd_lbb++;
 800bb76:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800bb78:	3301      	adds	r3, #1
 800bb7a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  if (flags & TCP_FIN) {
 800bb7c:	07f3      	lsls	r3, r6, #31
 800bb7e:	d503      	bpl.n	800bb88 <tcp_enqueue_flags+0x80>
    tcp_set_flags(pcb, TF_FIN);
 800bb80:	8b63      	ldrh	r3, [r4, #26]
 800bb82:	f043 0320 	orr.w	r3, r3, #32
 800bb86:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bb88:	6868      	ldr	r0, [r5, #4]
 800bb8a:	f7fc f8fd 	bl	8007d88 <pbuf_clen>
 800bb8e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800bb92:	4418      	add	r0, r3
 800bb94:	b280      	uxth	r0, r0
 800bb96:	f8a4 0066 	strh.w	r0, [r4, #102]	@ 0x66
  if (pcb->snd_queuelen != 0) {
 800bb9a:	b110      	cbz	r0, 800bba2 <tcp_enqueue_flags+0x9a>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bb9c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d03c      	beq.n	800bc1c <tcp_enqueue_flags+0x114>
  return ERR_OK;
 800bba2:	2000      	movs	r0, #0
}
 800bba4:	b003      	add	sp, #12
 800bba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bbaa:	4b25      	ldr	r3, [pc, #148]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bbac:	f240 4239 	movw	r2, #1081	@ 0x439
 800bbb0:	4924      	ldr	r1, [pc, #144]	@ (800bc44 <tcp_enqueue_flags+0x13c>)
 800bbb2:	4825      	ldr	r0, [pc, #148]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bbb4:	f002 fc1a 	bl	800e3ec <iprintf>
 800bbb8:	e7c0      	b.n	800bb3c <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bbba:	4b21      	ldr	r3, [pc, #132]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bbbc:	f240 4211 	movw	r2, #1041	@ 0x411
 800bbc0:	4922      	ldr	r1, [pc, #136]	@ (800bc4c <tcp_enqueue_flags+0x144>)
 800bbc2:	4821      	ldr	r0, [pc, #132]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bbc4:	f002 fc12 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bbc8:	b304      	cbz	r4, 800bc0c <tcp_enqueue_flags+0x104>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bbca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bbce:	4639      	mov	r1, r7
 800bbd0:	2036      	movs	r0, #54	@ 0x36
 800bbd2:	f7fb ffd5 	bl	8007b80 <pbuf_alloc>
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	2800      	cmp	r0, #0
 800bbda:	d02a      	beq.n	800bc32 <tcp_enqueue_flags+0x12a>
  u8_t optflags = 0;
 800bbdc:	46b8      	mov	r8, r7
 800bbde:	e7ad      	b.n	800bb3c <tcp_enqueue_flags+0x34>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bbe0:	4b17      	ldr	r3, [pc, #92]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bbe2:	f240 4242 	movw	r2, #1090	@ 0x442
 800bbe6:	491a      	ldr	r1, [pc, #104]	@ (800bc50 <tcp_enqueue_flags+0x148>)
 800bbe8:	4817      	ldr	r0, [pc, #92]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bbea:	f002 fbff 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bbee:	892b      	ldrh	r3, [r5, #8]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d0b4      	beq.n	800bb5e <tcp_enqueue_flags+0x56>
 800bbf4:	4b12      	ldr	r3, [pc, #72]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bbf6:	f240 4243 	movw	r2, #1091	@ 0x443
 800bbfa:	4916      	ldr	r1, [pc, #88]	@ (800bc54 <tcp_enqueue_flags+0x14c>)
 800bbfc:	4812      	ldr	r0, [pc, #72]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bbfe:	f002 fbf5 	bl	800e3ec <iprintf>
  if (pcb->unsent == NULL) {
 800bc02:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1ad      	bne.n	800bb64 <tcp_enqueue_flags+0x5c>
    pcb->unsent = seg;
 800bc08:	66e5      	str	r5, [r4, #108]	@ 0x6c
 800bc0a:	e7b0      	b.n	800bb6e <tcp_enqueue_flags+0x66>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bc0e:	f240 4213 	movw	r2, #1043	@ 0x413
 800bc12:	4911      	ldr	r1, [pc, #68]	@ (800bc58 <tcp_enqueue_flags+0x150>)
 800bc14:	480c      	ldr	r0, [pc, #48]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bc16:	f002 fbe9 	bl	800e3ec <iprintf>
 800bc1a:	e77f      	b.n	800bb1c <tcp_enqueue_flags+0x14>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800bc1c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1bf      	bne.n	800bba2 <tcp_enqueue_flags+0x9a>
 800bc22:	4b07      	ldr	r3, [pc, #28]	@ (800bc40 <tcp_enqueue_flags+0x138>)
 800bc24:	f240 4265 	movw	r2, #1125	@ 0x465
 800bc28:	490c      	ldr	r1, [pc, #48]	@ (800bc5c <tcp_enqueue_flags+0x154>)
 800bc2a:	4807      	ldr	r0, [pc, #28]	@ (800bc48 <tcp_enqueue_flags+0x140>)
 800bc2c:	f002 fbde 	bl	800e3ec <iprintf>
 800bc30:	e7b7      	b.n	800bba2 <tcp_enqueue_flags+0x9a>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc32:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800bc34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bc38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc3c:	8363      	strh	r3, [r4, #26]
 800bc3e:	e7b1      	b.n	800bba4 <tcp_enqueue_flags+0x9c>
 800bc40:	0801070c 	.word	0x0801070c
 800bc44:	08010b98 	.word	0x08010b98
 800bc48:	0800f2f8 	.word	0x0800f2f8
 800bc4c:	08010b20 	.word	0x08010b20
 800bc50:	08010bd4 	.word	0x08010bd4
 800bc54:	08010bec 	.word	0x08010bec
 800bc58:	08010b78 	.word	0x08010b78
 800bc5c:	08010c18 	.word	0x08010c18

0800bc60 <tcp_send_fin>:
{
 800bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bc62:	4606      	mov	r6, r0
 800bc64:	b188      	cbz	r0, 800bc8a <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800bc66:	6ef4      	ldr	r4, [r6, #108]	@ 0x6c
 800bc68:	b14c      	cbz	r4, 800bc7e <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc6a:	4625      	mov	r5, r4
 800bc6c:	6824      	ldr	r4, [r4, #0]
 800bc6e:	2c00      	cmp	r4, #0
 800bc70:	d1fb      	bne.n	800bc6a <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bc72:	68eb      	ldr	r3, [r5, #12]
 800bc74:	8998      	ldrh	r0, [r3, #12]
 800bc76:	f7fb f823 	bl	8006cc0 <lwip_htons>
 800bc7a:	0743      	lsls	r3, r0, #29
 800bc7c:	d00d      	beq.n	800bc9a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bc7e:	4630      	mov	r0, r6
 800bc80:	2101      	movs	r1, #1
}
 800bc82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bc86:	f7ff bf3f 	b.w	800bb08 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bc8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb8 <tcp_send_fin+0x58>)
 800bc8c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800bc90:	490a      	ldr	r1, [pc, #40]	@ (800bcbc <tcp_send_fin+0x5c>)
 800bc92:	480b      	ldr	r0, [pc, #44]	@ (800bcc0 <tcp_send_fin+0x60>)
 800bc94:	f002 fbaa 	bl	800e3ec <iprintf>
 800bc98:	e7e5      	b.n	800bc66 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bc9a:	68eb      	ldr	r3, [r5, #12]
 800bc9c:	2001      	movs	r0, #1
 800bc9e:	899f      	ldrh	r7, [r3, #12]
 800bca0:	f7fb f80e 	bl	8006cc0 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800bca4:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bca6:	68ea      	ldr	r2, [r5, #12]
 800bca8:	4307      	orrs	r7, r0
      tcp_set_flags(pcb, TF_FIN);
 800bcaa:	f043 0320 	orr.w	r3, r3, #32
}
 800bcae:	4620      	mov	r0, r4
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bcb0:	8197      	strh	r7, [r2, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bcb2:	8373      	strh	r3, [r6, #26]
}
 800bcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0801070c 	.word	0x0801070c
 800bcbc:	08010c40 	.word	0x08010c40
 800bcc0:	0800f2f8 	.word	0x0800f2f8

0800bcc4 <tcp_rexmit_rto_prepare>:
{
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bcc6:	4605      	mov	r5, r0
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d031      	beq.n	800bd30 <tcp_rexmit_rto_prepare+0x6c>
  if (pcb->unacked == NULL) {
 800bccc:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800bcce:	b132      	cbz	r2, 800bcde <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bcd0:	6813      	ldr	r3, [r2, #0]
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	b153      	cbz	r3, 800bcec <tcp_rexmit_rto_prepare+0x28>
  if (seg->p->ref != 1) {
 800bcd6:	6863      	ldr	r3, [r4, #4]
 800bcd8:	7b9b      	ldrb	r3, [r3, #14]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d002      	beq.n	800bce4 <tcp_rexmit_rto_prepare+0x20>
    return ERR_VAL;
 800bcde:	f06f 0005 	mvn.w	r0, #5
}
 800bce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bce4:	6824      	ldr	r4, [r4, #0]
 800bce6:	6823      	ldr	r3, [r4, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1f4      	bne.n	800bcd6 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800bcec:	6863      	ldr	r3, [r4, #4]
 800bcee:	7b9b      	ldrb	r3, [r3, #14]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d1f4      	bne.n	800bcde <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800bcf4:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800bcf6:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800bcf8:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800bcfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
  seg->next = pcb->unsent;
 800bcfe:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800bd00:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd02:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800bd04:	e9c5 271b 	strd	r2, r7, [r5, #108]	@ 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd08:	6858      	ldr	r0, [r3, #4]
 800bd0a:	f7fa ffdd 	bl	8006cc8 <lwip_htonl>
 800bd0e:	68e3      	ldr	r3, [r4, #12]
 800bd10:	4606      	mov	r6, r0
 800bd12:	8924      	ldrh	r4, [r4, #8]
 800bd14:	8998      	ldrh	r0, [r3, #12]
 800bd16:	f7fa ffd3 	bl	8006cc0 <lwip_htons>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4426      	add	r6, r4
  return ERR_OK;
 800bd1e:	4638      	mov	r0, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd20:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 800bd24:	636f      	str	r7, [r5, #52]	@ 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd26:	bf18      	it	ne
 800bd28:	2301      	movne	r3, #1
 800bd2a:	4433      	add	r3, r6
 800bd2c:	64eb      	str	r3, [r5, #76]	@ 0x4c
}
 800bd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bd30:	4b03      	ldr	r3, [pc, #12]	@ (800bd40 <tcp_rexmit_rto_prepare+0x7c>)
 800bd32:	f240 6263 	movw	r2, #1635	@ 0x663
 800bd36:	4903      	ldr	r1, [pc, #12]	@ (800bd44 <tcp_rexmit_rto_prepare+0x80>)
 800bd38:	4803      	ldr	r0, [pc, #12]	@ (800bd48 <tcp_rexmit_rto_prepare+0x84>)
 800bd3a:	f002 fb57 	bl	800e3ec <iprintf>
 800bd3e:	e7c5      	b.n	800bccc <tcp_rexmit_rto_prepare+0x8>
 800bd40:	0801070c 	.word	0x0801070c
 800bd44:	08010c5c 	.word	0x08010c5c
 800bd48:	0800f2f8 	.word	0x0800f2f8

0800bd4c <tcp_rexmit>:
{
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bd4e:	4607      	mov	r7, r0
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d031      	beq.n	800bdb8 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800bd54:	6f3e      	ldr	r6, [r7, #112]	@ 0x70
 800bd56:	b34e      	cbz	r6, 800bdac <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800bd58:	6873      	ldr	r3, [r6, #4]
 800bd5a:	7b9b      	ldrb	r3, [r3, #14]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d125      	bne.n	800bdac <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800bd60:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800bd62:	f107 056c 	add.w	r5, r7, #108	@ 0x6c
  while (*cur_seg &&
 800bd66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
  pcb->unacked = seg->next;
 800bd68:	673a      	str	r2, [r7, #112]	@ 0x70
  while (*cur_seg &&
 800bd6a:	b91b      	cbnz	r3, 800bd74 <tcp_rexmit+0x28>
 800bd6c:	e00f      	b.n	800bd8e <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800bd6e:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800bd70:	682b      	ldr	r3, [r5, #0]
 800bd72:	b163      	cbz	r3, 800bd8e <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	6858      	ldr	r0, [r3, #4]
 800bd78:	f7fa ffa6 	bl	8006cc8 <lwip_htonl>
 800bd7c:	68f3      	ldr	r3, [r6, #12]
 800bd7e:	4604      	mov	r4, r0
 800bd80:	6858      	ldr	r0, [r3, #4]
 800bd82:	f7fa ffa1 	bl	8006cc8 <lwip_htonl>
 800bd86:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	dbf0      	blt.n	800bd6e <tcp_rexmit+0x22>
    cur_seg = &((*cur_seg)->next );
 800bd8c:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 800bd8e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800bd90:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800bd92:	6833      	ldr	r3, [r6, #0]
 800bd94:	b16b      	cbz	r3, 800bdb2 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800bd96:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800bd9a:	2bff      	cmp	r3, #255	@ 0xff
 800bd9c:	d002      	beq.n	800bda4 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800bd9e:	3301      	adds	r3, #1
 800bda0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  pcb->rttest = 0;
 800bda4:	2300      	movs	r3, #0
  return ERR_OK;
 800bda6:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800bda8:	637b      	str	r3, [r7, #52]	@ 0x34
}
 800bdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800bdac:	f06f 0005 	mvn.w	r0, #5
}
 800bdb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800bdb2:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800bdb6:	e7ee      	b.n	800bd96 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bdb8:	4b03      	ldr	r3, [pc, #12]	@ (800bdc8 <tcp_rexmit+0x7c>)
 800bdba:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800bdbe:	4903      	ldr	r1, [pc, #12]	@ (800bdcc <tcp_rexmit+0x80>)
 800bdc0:	4803      	ldr	r0, [pc, #12]	@ (800bdd0 <tcp_rexmit+0x84>)
 800bdc2:	f002 fb13 	bl	800e3ec <iprintf>
 800bdc6:	e7c5      	b.n	800bd54 <tcp_rexmit+0x8>
 800bdc8:	0801070c 	.word	0x0801070c
 800bdcc:	08010c80 	.word	0x08010c80
 800bdd0:	0800f2f8 	.word	0x0800f2f8

0800bdd4 <tcp_rexmit_fast>:
{
 800bdd4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	b340      	cbz	r0, 800be2c <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bdda:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800bddc:	b113      	cbz	r3, 800bde4 <tcp_rexmit_fast+0x10>
 800bdde:	8b63      	ldrh	r3, [r4, #26]
 800bde0:	075b      	lsls	r3, r3, #29
 800bde2:	d500      	bpl.n	800bde6 <tcp_rexmit_fast+0x12>
}
 800bde4:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bde6:	4620      	mov	r0, r4
 800bde8:	f7ff ffb0 	bl	800bd4c <tcp_rexmit>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d1f9      	bne.n	800bde4 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bdf0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800bdf4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	@ 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bdf8:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bdfa:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bdfc:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800be00:	bf28      	it	cs
 800be02:	4619      	movcs	r1, r3
 800be04:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800be06:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800be0a:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800be0e:	d902      	bls.n	800be16 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800be10:	b283      	uxth	r3, r0
 800be12:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800be16:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800be18:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800be1a:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800be1e:	4413      	add	r3, r2
      pcb->rtime = 0;
 800be20:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800be22:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800be26:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800be28:	8622      	strh	r2, [r4, #48]	@ 0x30
}
 800be2a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800be2c:	4b03      	ldr	r3, [pc, #12]	@ (800be3c <tcp_rexmit_fast+0x68>)
 800be2e:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800be32:	4903      	ldr	r1, [pc, #12]	@ (800be40 <tcp_rexmit_fast+0x6c>)
 800be34:	4803      	ldr	r0, [pc, #12]	@ (800be44 <tcp_rexmit_fast+0x70>)
 800be36:	f002 fad9 	bl	800e3ec <iprintf>
 800be3a:	e7ce      	b.n	800bdda <tcp_rexmit_fast+0x6>
 800be3c:	0801070c 	.word	0x0801070c
 800be40:	08010c98 	.word	0x08010c98
 800be44:	0800f2f8 	.word	0x0800f2f8

0800be48 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800be48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	4607      	mov	r7, r0
 800be50:	460e      	mov	r6, r1
 800be52:	4615      	mov	r5, r2
 800be54:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800be58:	461c      	mov	r4, r3
{
 800be5a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 800be5e:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800be62:	b1fb      	cbz	r3, 800bea4 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800be64:	f1b8 0f00 	cmp.w	r8, #0
 800be68:	d026      	beq.n	800beb8 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800be6a:	4630      	mov	r0, r6
 800be6c:	f7fa ff2c 	bl	8006cc8 <lwip_htonl>
 800be70:	2114      	movs	r1, #20
 800be72:	4602      	mov	r2, r0
 800be74:	4628      	mov	r0, r5
 800be76:	f24d 0516 	movw	r5, #53270	@ 0xd016
 800be7a:	464b      	mov	r3, r9
 800be7c:	f8cd a000 	str.w	sl, [sp]
 800be80:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800be84:	2100      	movs	r1, #0
 800be86:	f7ff f927 	bl	800b0d8 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800be8a:	4601      	mov	r1, r0
 800be8c:	b138      	cbz	r0, 800be9e <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800be8e:	4643      	mov	r3, r8
 800be90:	4622      	mov	r2, r4
 800be92:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800be94:	b004      	add	sp, #16
 800be96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800be9a:	f7ff b98b 	b.w	800b1b4 <tcp_output_control_segment>
}
 800be9e:	b004      	add	sp, #16
 800bea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bea4:	4b08      	ldr	r3, [pc, #32]	@ (800bec8 <tcp_rst+0x80>)
 800bea6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800beaa:	4908      	ldr	r1, [pc, #32]	@ (800becc <tcp_rst+0x84>)
 800beac:	4808      	ldr	r0, [pc, #32]	@ (800bed0 <tcp_rst+0x88>)
 800beae:	f002 fa9d 	bl	800e3ec <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800beb2:	f1b8 0f00 	cmp.w	r8, #0
 800beb6:	d1d8      	bne.n	800be6a <tcp_rst+0x22>
 800beb8:	4b03      	ldr	r3, [pc, #12]	@ (800bec8 <tcp_rst+0x80>)
 800beba:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800bebe:	4905      	ldr	r1, [pc, #20]	@ (800bed4 <tcp_rst+0x8c>)
 800bec0:	4803      	ldr	r0, [pc, #12]	@ (800bed0 <tcp_rst+0x88>)
 800bec2:	f002 fa93 	bl	800e3ec <iprintf>
 800bec6:	e7d0      	b.n	800be6a <tcp_rst+0x22>
 800bec8:	0801070c 	.word	0x0801070c
 800becc:	08010cb8 	.word	0x08010cb8
 800bed0:	0800f2f8 	.word	0x0800f2f8
 800bed4:	08010cd4 	.word	0x08010cd4

0800bed8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bed8:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800beda:	4604      	mov	r4, r0
 800bedc:	b1c8      	cbz	r0, 800bf12 <tcp_send_empty_ack+0x3a>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bede:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800bee0:	f7fa fef2 	bl	8006cc8 <lwip_htonl>
 800bee4:	2100      	movs	r1, #0
 800bee6:	4602      	mov	r2, r0
 800bee8:	4620      	mov	r0, r4
 800beea:	f7ff f93b 	bl	800b164 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800beee:	4601      	mov	r1, r0
 800bef0:	b1b8      	cbz	r0, 800bf22 <tcp_send_empty_ack+0x4a>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bef2:	1d23      	adds	r3, r4, #4
 800bef4:	4622      	mov	r2, r4
 800bef6:	4620      	mov	r0, r4
 800bef8:	f7ff f95c 	bl	800b1b4 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800befc:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800befe:	b920      	cbnz	r0, 800bf0a <tcp_send_empty_ack+0x32>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf00:	f023 0303 	bic.w	r3, r3, #3
 800bf04:	b29b      	uxth	r3, r3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf06:	8363      	strh	r3, [r4, #26]
  }

  return err;
}
 800bf08:	bd10      	pop	{r4, pc}
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf0a:	f043 0303 	orr.w	r3, r3, #3
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf0e:	8363      	strh	r3, [r4, #26]
}
 800bf10:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bf12:	4b07      	ldr	r3, [pc, #28]	@ (800bf30 <tcp_send_empty_ack+0x58>)
 800bf14:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800bf18:	4906      	ldr	r1, [pc, #24]	@ (800bf34 <tcp_send_empty_ack+0x5c>)
 800bf1a:	4807      	ldr	r0, [pc, #28]	@ (800bf38 <tcp_send_empty_ack+0x60>)
 800bf1c:	f002 fa66 	bl	800e3ec <iprintf>
 800bf20:	e7dd      	b.n	800bede <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf22:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800bf24:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf28:	f043 0303 	orr.w	r3, r3, #3
    return ERR_BUF;
 800bf2c:	e7eb      	b.n	800bf06 <tcp_send_empty_ack+0x2e>
 800bf2e:	bf00      	nop
 800bf30:	0801070c 	.word	0x0801070c
 800bf34:	08010cf0 	.word	0x08010cf0
 800bf38:	0800f2f8 	.word	0x0800f2f8

0800bf3c <tcp_output>:
{
 800bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf40:	4604      	mov	r4, r0
 800bf42:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800bf44:	f7f8 f9d0 	bl	80042e8 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf48:	2c00      	cmp	r4, #0
 800bf4a:	f000 81a6 	beq.w	800c29a <tcp_output+0x35e>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf4e:	7d23      	ldrb	r3, [r4, #20]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	f000 8182 	beq.w	800c25a <tcp_output+0x31e>
  if (tcp_input_pcb == pcb) {
 800bf56:	4bae      	ldr	r3, [pc, #696]	@ (800c210 <tcp_output+0x2d4>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	d031      	beq.n	800bfc2 <tcp_output+0x86>
  seg = pcb->unsent;
 800bf5e:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf60:	f8b4 7048 	ldrh.w	r7, [r4, #72]	@ 0x48
 800bf64:	f8b4 6060 	ldrh.w	r6, [r4, #96]	@ 0x60
  if (seg == NULL) {
 800bf68:	b325      	cbz	r5, 800bfb4 <tcp_output+0x78>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf6a:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bf6c:	f104 0804 	add.w	r8, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bf70:	2800      	cmp	r0, #0
 800bf72:	f040 819a 	bne.w	800c2aa <tcp_output+0x36e>
    return ip_route(src, dst);
 800bf76:	4640      	mov	r0, r8
 800bf78:	f001 f9e6 	bl	800d348 <ip4_route>
 800bf7c:	4683      	mov	fp, r0
  if (netif == NULL) {
 800bf7e:	f1bb 0f00 	cmp.w	fp, #0
 800bf82:	f000 81a1 	beq.w	800c2c8 <tcp_output+0x38c>
  if (ip_addr_isany(&pcb->local_ip)) {
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	b913      	cbnz	r3, 800bf90 <tcp_output+0x54>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bf8a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bf8e:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bf90:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf92:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bf94:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf96:	bf28      	it	cs
 800bf98:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bf9a:	f7fa fe95 	bl	8006cc8 <lwip_htonl>
 800bf9e:	892b      	ldrh	r3, [r5, #8]
 800bfa0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800bfa2:	1a9b      	subs	r3, r3, r2
 800bfa4:	4403      	add	r3, r0
 800bfa6:	42bb      	cmp	r3, r7
 800bfa8:	d90f      	bls.n	800bfca <tcp_output+0x8e>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bfaa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	@ 0x60
 800bfae:	42bb      	cmp	r3, r7
 800bfb0:	f000 8161 	beq.w	800c276 <tcp_output+0x33a>
    if (pcb->flags & TF_ACK_NOW) {
 800bfb4:	8b61      	ldrh	r1, [r4, #26]
 800bfb6:	0788      	lsls	r0, r1, #30
 800bfb8:	f100 8157 	bmi.w	800c26a <tcp_output+0x32e>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bfbc:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bfc0:	8361      	strh	r1, [r4, #26]
    return ERR_OK;
 800bfc2:	2000      	movs	r0, #0
}
 800bfc4:	b005      	add	sp, #20
 800bfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
  useg = pcb->unacked;
 800bfd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
  if (useg != NULL) {
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	f000 815f 	beq.w	800c296 <tcp_output+0x35a>
    for (; useg->next != NULL; useg = useg->next);
 800bfd8:	4699      	mov	r9, r3
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1fb      	bne.n	800bfd8 <tcp_output+0x9c>
    LWIP_ASSERT("RST not expected here!",
 800bfe0:	465e      	mov	r6, fp
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bfe2:	68eb      	ldr	r3, [r5, #12]
 800bfe4:	6858      	ldr	r0, [r3, #4]
 800bfe6:	f7fa fe6f 	bl	8006cc8 <lwip_htonl>
 800bfea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800bfec:	1ac0      	subs	r0, r0, r3
 800bfee:	892b      	ldrh	r3, [r5, #8]
 800bff0:	4418      	add	r0, r3
  while (seg != NULL &&
 800bff2:	42b8      	cmp	r0, r7
 800bff4:	f200 815d 	bhi.w	800c2b2 <tcp_output+0x376>
    LWIP_ASSERT("RST not expected here!",
 800bff8:	68eb      	ldr	r3, [r5, #12]
 800bffa:	8998      	ldrh	r0, [r3, #12]
 800bffc:	f7fa fe60 	bl	8006cc0 <lwip_htons>
 800c000:	0741      	lsls	r1, r0, #29
 800c002:	f100 80c1 	bmi.w	800c188 <tcp_output+0x24c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c006:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c008:	b15b      	cbz	r3, 800c022 <tcp_output+0xe6>
 800c00a:	8b61      	ldrh	r1, [r4, #26]
 800c00c:	f011 0f44 	tst.w	r1, #68	@ 0x44
 800c010:	d107      	bne.n	800c022 <tcp_output+0xe6>
 800c012:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800c014:	2800      	cmp	r0, #0
 800c016:	f000 80e4 	beq.w	800c1e2 <tcp_output+0x2a6>
 800c01a:	6803      	ldr	r3, [r0, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	f000 80db 	beq.w	800c1d8 <tcp_output+0x29c>
    if (pcb->state != SYN_SENT) {
 800c022:	7d23      	ldrb	r3, [r4, #20]
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c024:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    if (pcb->state != SYN_SENT) {
 800c028:	2b02      	cmp	r3, #2
 800c02a:	d00a      	beq.n	800c042 <tcp_output+0x106>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c02c:	f8ba a00c 	ldrh.w	sl, [sl, #12]
 800c030:	2010      	movs	r0, #16
 800c032:	f7fa fe45 	bl	8006cc0 <lwip_htons>
 800c036:	ea4a 0000 	orr.w	r0, sl, r0
 800c03a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800c03e:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800c042:	686b      	ldr	r3, [r5, #4]
 800c044:	7b9b      	ldrb	r3, [r3, #14]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d153      	bne.n	800c0f2 <tcp_output+0x1b6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c04a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800c04c:	f7fa fe3c 	bl	8006cc8 <lwip_htonl>
 800c050:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c054:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 800c056:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800c05a:	f7fa fe31 	bl	8006cc0 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c05e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800c060:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c062:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c066:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c068:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c06c:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c06e:	7aab      	ldrb	r3, [r5, #10]
 800c070:	07da      	lsls	r2, r3, #31
 800c072:	f100 809c 	bmi.w	800c1ae <tcp_output+0x272>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c076:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800c07a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	@ 0x30
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da01      	bge.n	800c086 <tcp_output+0x14a>
    pcb->rtime = 0;
 800c082:	2300      	movs	r3, #0
 800c084:	8623      	strh	r3, [r4, #48]	@ 0x30
  if (pcb->rttest == 0) {
 800c086:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 8085 	beq.w	800c198 <tcp_output+0x25c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c08e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800c090:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c092:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800c094:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c096:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800c09a:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c09e:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c0a0:	1ac9      	subs	r1, r1, r3
 800c0a2:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800c0a4:	8901      	ldrh	r1, [r0, #8]
 800c0a6:	1acb      	subs	r3, r1, r3
 800c0a8:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800c0aa:	f88a 2010 	strb.w	r2, [sl, #16]
 800c0ae:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c0b2:	7aab      	ldrb	r3, [r5, #10]
 800c0b4:	f013 0f01 	tst.w	r3, #1
 800c0b8:	bf0c      	ite	eq
 800c0ba:	2314      	moveq	r3, #20
 800c0bc:	2318      	movne	r3, #24
 800c0be:	449a      	add	sl, r3
 800c0c0:	45d3      	cmp	fp, sl
 800c0c2:	d007      	beq.n	800c0d4 <tcp_output+0x198>
 800c0c4:	4b53      	ldr	r3, [pc, #332]	@ (800c214 <tcp_output+0x2d8>)
 800c0c6:	f240 621c 	movw	r2, #1564	@ 0x61c
 800c0ca:	4953      	ldr	r1, [pc, #332]	@ (800c218 <tcp_output+0x2dc>)
 800c0cc:	4853      	ldr	r0, [pc, #332]	@ (800c21c <tcp_output+0x2e0>)
 800c0ce:	f002 f98d 	bl	800e3ec <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c0d2:	6868      	ldr	r0, [r5, #4]
 800c0d4:	2306      	movs	r3, #6
 800c0d6:	9602      	str	r6, [sp, #8]
 800c0d8:	4642      	mov	r2, r8
 800c0da:	4621      	mov	r1, r4
 800c0dc:	9301      	str	r3, [sp, #4]
 800c0de:	7aa3      	ldrb	r3, [r4, #10]
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	7ae3      	ldrb	r3, [r4, #11]
 800c0e4:	f001 fac6 	bl	800d674 <ip4_output_if>
    if (err != ERR_OK) {
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	f040 80e8 	bne.w	800c2be <tcp_output+0x382>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c0ee:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	66e3      	str	r3, [r4, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c0f6:	7d23      	ldrb	r3, [r4, #20]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d003      	beq.n	800c104 <tcp_output+0x1c8>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c0fc:	8b63      	ldrh	r3, [r4, #26]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c104:	f8da 0004 	ldr.w	r0, [sl, #4]
 800c108:	f7fa fdde 	bl	8006cc8 <lwip_htonl>
 800c10c:	68eb      	ldr	r3, [r5, #12]
 800c10e:	4682      	mov	sl, r0
 800c110:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800c114:	8998      	ldrh	r0, [r3, #12]
 800c116:	f7fa fdd3 	bl	8006cc0 <lwip_htons>
 800c11a:	f010 0303 	ands.w	r3, r0, #3
 800c11e:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c120:	6d22      	ldr	r2, [r4, #80]	@ 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c122:	bf18      	it	ne
 800c124:	2301      	movne	r3, #1
 800c126:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 800c128:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c12c:	1ad2      	subs	r2, r2, r3
 800c12e:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 800c130:	bfb8      	it	lt
 800c132:	6523      	strlt	r3, [r4, #80]	@ 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c134:	68eb      	ldr	r3, [r5, #12]
 800c136:	8998      	ldrh	r0, [r3, #12]
 800c138:	f7fa fdc2 	bl	8006cc0 <lwip_htons>
 800c13c:	0783      	lsls	r3, r0, #30
 800c13e:	d102      	bne.n	800c146 <tcp_output+0x20a>
 800c140:	f1ba 0f00 	cmp.w	sl, #0
 800c144:	d044      	beq.n	800c1d0 <tcp_output+0x294>
      seg->next = NULL;
 800c146:	2300      	movs	r3, #0
 800c148:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800c14a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c14c:	b1d3      	cbz	r3, 800c184 <tcp_output+0x248>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c14e:	68eb      	ldr	r3, [r5, #12]
 800c150:	6858      	ldr	r0, [r3, #4]
 800c152:	f7fa fdb9 	bl	8006cc8 <lwip_htonl>
 800c156:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c15a:	4682      	mov	sl, r0
 800c15c:	6858      	ldr	r0, [r3, #4]
 800c15e:	f7fa fdb3 	bl	8006cc8 <lwip_htonl>
 800c162:	ebaa 0a00 	sub.w	sl, sl, r0
 800c166:	f1ba 0f00 	cmp.w	sl, #0
 800c16a:	db4c      	blt.n	800c206 <tcp_output+0x2ca>
          useg->next = seg;
 800c16c:	f8c9 5000 	str.w	r5, [r9]
        useg = seg;
 800c170:	46a9      	mov	r9, r5
    seg = pcb->unsent;
 800c172:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  while (seg != NULL &&
 800c174:	2d00      	cmp	r5, #0
 800c176:	f47f af34 	bne.w	800bfe2 <tcp_output+0xa6>
 800c17a:	8b61      	ldrh	r1, [r4, #26]
    pcb->unsent_oversize = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
 800c182:	e71b      	b.n	800bfbc <tcp_output+0x80>
        pcb->unacked = seg;
 800c184:	6725      	str	r5, [r4, #112]	@ 0x70
        useg = seg;
 800c186:	e7f3      	b.n	800c170 <tcp_output+0x234>
    LWIP_ASSERT("RST not expected here!",
 800c188:	4b22      	ldr	r3, [pc, #136]	@ (800c214 <tcp_output+0x2d8>)
 800c18a:	f240 5236 	movw	r2, #1334	@ 0x536
 800c18e:	4924      	ldr	r1, [pc, #144]	@ (800c220 <tcp_output+0x2e4>)
 800c190:	4822      	ldr	r0, [pc, #136]	@ (800c21c <tcp_output+0x2e0>)
 800c192:	f002 f92b 	bl	800e3ec <iprintf>
 800c196:	e736      	b.n	800c006 <tcp_output+0xca>
    pcb->rttest = tcp_ticks;
 800c198:	4b22      	ldr	r3, [pc, #136]	@ (800c224 <tcp_output+0x2e8>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	6363      	str	r3, [r4, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c19e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800c1a2:	f7fa fd91 	bl	8006cc8 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c1a6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c1aa:	63a0      	str	r0, [r4, #56]	@ 0x38
 800c1ac:	e76f      	b.n	800c08e <tcp_output+0x152>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c1ae:	4642      	mov	r2, r8
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	f240 50b4 	movw	r0, #1460	@ 0x5b4
    opts += 1;
 800c1b6:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c1ba:	f7fd fa69 	bl	8009690 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c1be:	f040 7001 	orr.w	r0, r0, #33816576	@ 0x2040000
 800c1c2:	f7fa fd81 	bl	8006cc8 <lwip_htonl>
 800c1c6:	f8ca 0014 	str.w	r0, [sl, #20]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c1ca:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800c1ce:	e754      	b.n	800c07a <tcp_output+0x13e>
      tcp_seg_free(seg);
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	f7fc fa7b 	bl	80086cc <tcp_seg_free>
 800c1d6:	e7cc      	b.n	800c172 <tcp_output+0x236>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c1d8:	8902      	ldrh	r2, [r0, #8]
 800c1da:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f4bf af20 	bcs.w	800c022 <tcp_output+0xe6>
 800c1e2:	f8b4 3064 	ldrh.w	r3, [r4, #100]	@ 0x64
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f43f af1b 	beq.w	800c022 <tcp_output+0xe6>
 800c1ec:	f8b4 3066 	ldrh.w	r3, [r4, #102]	@ 0x66
 800c1f0:	2b0f      	cmp	r3, #15
 800c1f2:	f63f af16 	bhi.w	800c022 <tcp_output+0xe6>
 800c1f6:	f011 0fa0 	tst.w	r1, #160	@ 0xa0
 800c1fa:	f47f af12 	bne.w	800c022 <tcp_output+0xe6>
  if (pcb->unsent == NULL) {
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f47f aedc 	bne.w	800bfbc <tcp_output+0x80>
 800c204:	e7ba      	b.n	800c17c <tcp_output+0x240>
          while (*cur_seg &&
 800c206:	6f23      	ldr	r3, [r4, #112]	@ 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c208:	f104 0b70 	add.w	fp, r4, #112	@ 0x70
          while (*cur_seg &&
 800c20c:	b98b      	cbnz	r3, 800c232 <tcp_output+0x2f6>
 800c20e:	e020      	b.n	800c252 <tcp_output+0x316>
 800c210:	24010564 	.word	0x24010564
 800c214:	0801070c 	.word	0x0801070c
 800c218:	08010d68 	.word	0x08010d68
 800c21c:	0800f2f8 	.word	0x0800f2f8
 800c220:	08010d50 	.word	0x08010d50
 800c224:	24010560 	.word	0x24010560
            cur_seg = &((*cur_seg)->next );
 800c228:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800c22c:	f8db 3000 	ldr.w	r3, [fp]
 800c230:	b17b      	cbz	r3, 800c252 <tcp_output+0x316>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	6858      	ldr	r0, [r3, #4]
 800c236:	f7fa fd47 	bl	8006cc8 <lwip_htonl>
 800c23a:	68eb      	ldr	r3, [r5, #12]
 800c23c:	4682      	mov	sl, r0
 800c23e:	6858      	ldr	r0, [r3, #4]
 800c240:	f7fa fd42 	bl	8006cc8 <lwip_htonl>
 800c244:	ebaa 0a00 	sub.w	sl, sl, r0
          while (*cur_seg &&
 800c248:	f1ba 0f00 	cmp.w	sl, #0
 800c24c:	dbec      	blt.n	800c228 <tcp_output+0x2ec>
            cur_seg = &((*cur_seg)->next );
 800c24e:	f8db 3000 	ldr.w	r3, [fp]
          seg->next = (*cur_seg);
 800c252:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800c254:	f8cb 5000 	str.w	r5, [fp]
 800c258:	e78b      	b.n	800c172 <tcp_output+0x236>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c25a:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d0 <tcp_output+0x394>)
 800c25c:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c260:	491c      	ldr	r1, [pc, #112]	@ (800c2d4 <tcp_output+0x398>)
 800c262:	481d      	ldr	r0, [pc, #116]	@ (800c2d8 <tcp_output+0x39c>)
 800c264:	f002 f8c2 	bl	800e3ec <iprintf>
 800c268:	e675      	b.n	800bf56 <tcp_output+0x1a>
      return tcp_send_empty_ack(pcb);
 800c26a:	4620      	mov	r0, r4
}
 800c26c:	b005      	add	sp, #20
 800c26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800c272:	f7ff be31 	b.w	800bed8 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c276:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800c278:	2b00      	cmp	r3, #0
 800c27a:	f47f ae9b 	bne.w	800bfb4 <tcp_output+0x78>
 800c27e:	f894 3099 	ldrb.w	r3, [r4, #153]	@ 0x99
 800c282:	2b00      	cmp	r3, #0
 800c284:	f47f ae96 	bne.w	800bfb4 <tcp_output+0x78>
      pcb->persist_cnt = 0;
 800c288:	f44f 7280 	mov.w	r2, #256	@ 0x100
      pcb->persist_probe = 0;
 800c28c:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
      pcb->persist_cnt = 0;
 800c290:	f8a4 2098 	strh.w	r2, [r4, #152]	@ 0x98
      pcb->persist_probe = 0;
 800c294:	e68e      	b.n	800bfb4 <tcp_output+0x78>
  useg = pcb->unacked;
 800c296:	4699      	mov	r9, r3
 800c298:	e6a2      	b.n	800bfe0 <tcp_output+0xa4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c29a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <tcp_output+0x394>)
 800c29c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c2a0:	490e      	ldr	r1, [pc, #56]	@ (800c2dc <tcp_output+0x3a0>)
 800c2a2:	480d      	ldr	r0, [pc, #52]	@ (800c2d8 <tcp_output+0x39c>)
 800c2a4:	f002 f8a2 	bl	800e3ec <iprintf>
 800c2a8:	e651      	b.n	800bf4e <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800c2aa:	f7fb faef 	bl	800788c <netif_get_by_index>
 800c2ae:	4683      	mov	fp, r0
 800c2b0:	e665      	b.n	800bf7e <tcp_output+0x42>
  if (pcb->unsent == NULL) {
 800c2b2:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800c2b4:	8b61      	ldrh	r1, [r4, #26]
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f47f ae80 	bne.w	800bfbc <tcp_output+0x80>
 800c2bc:	e75e      	b.n	800c17c <tcp_output+0x240>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2be:	8b63      	ldrh	r3, [r4, #26]
 800c2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2c4:	8363      	strh	r3, [r4, #26]
      return err;
 800c2c6:	e67d      	b.n	800bfc4 <tcp_output+0x88>
    return ERR_RTE;
 800c2c8:	f06f 0003 	mvn.w	r0, #3
 800c2cc:	e67a      	b.n	800bfc4 <tcp_output+0x88>
 800c2ce:	bf00      	nop
 800c2d0:	0801070c 	.word	0x0801070c
 800c2d4:	08010d28 	.word	0x08010d28
 800c2d8:	0800f2f8 	.word	0x0800f2f8
 800c2dc:	08010d10 	.word	0x08010d10

0800c2e0 <tcp_rexmit_rto_commit>:
{
 800c2e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	b158      	cbz	r0, 800c2fe <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800c2e6:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800c2ea:	2bff      	cmp	r3, #255	@ 0xff
 800c2ec:	d002      	beq.n	800c2f4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800c2f4:	4620      	mov	r0, r4
}
 800c2f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800c2fa:	f7ff be1f 	b.w	800bf3c <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c2fe:	4b04      	ldr	r3, [pc, #16]	@ (800c310 <tcp_rexmit_rto_commit+0x30>)
 800c300:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c304:	4903      	ldr	r1, [pc, #12]	@ (800c314 <tcp_rexmit_rto_commit+0x34>)
 800c306:	4804      	ldr	r0, [pc, #16]	@ (800c318 <tcp_rexmit_rto_commit+0x38>)
 800c308:	f002 f870 	bl	800e3ec <iprintf>
 800c30c:	e7eb      	b.n	800c2e6 <tcp_rexmit_rto_commit+0x6>
 800c30e:	bf00      	nop
 800c310:	0801070c 	.word	0x0801070c
 800c314:	08010d7c 	.word	0x08010d7c
 800c318:	0800f2f8 	.word	0x0800f2f8

0800c31c <tcp_rexmit_rto>:
{
 800c31c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c31e:	4604      	mov	r4, r0
 800c320:	b118      	cbz	r0, 800c32a <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c322:	f7ff fccf 	bl	800bcc4 <tcp_rexmit_rto_prepare>
 800c326:	b198      	cbz	r0, 800c350 <tcp_rexmit_rto+0x34>
}
 800c328:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c32a:	4b0f      	ldr	r3, [pc, #60]	@ (800c368 <tcp_rexmit_rto+0x4c>)
 800c32c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800c330:	490e      	ldr	r1, [pc, #56]	@ (800c36c <tcp_rexmit_rto+0x50>)
 800c332:	480f      	ldr	r0, [pc, #60]	@ (800c370 <tcp_rexmit_rto+0x54>)
 800c334:	f002 f85a 	bl	800e3ec <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c338:	4620      	mov	r0, r4
 800c33a:	f7ff fcc3 	bl	800bcc4 <tcp_rexmit_rto_prepare>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d1f2      	bne.n	800c328 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c342:	4b09      	ldr	r3, [pc, #36]	@ (800c368 <tcp_rexmit_rto+0x4c>)
 800c344:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800c348:	490a      	ldr	r1, [pc, #40]	@ (800c374 <tcp_rexmit_rto+0x58>)
 800c34a:	4809      	ldr	r0, [pc, #36]	@ (800c370 <tcp_rexmit_rto+0x54>)
 800c34c:	f002 f84e 	bl	800e3ec <iprintf>
  if (pcb->nrtx < 0xFF) {
 800c350:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800c354:	2bff      	cmp	r3, #255	@ 0xff
 800c356:	d002      	beq.n	800c35e <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800c358:	3301      	adds	r3, #1
 800c35a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  tcp_output(pcb);
 800c35e:	4620      	mov	r0, r4
}
 800c360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800c364:	f7ff bdea 	b.w	800bf3c <tcp_output>
 800c368:	0801070c 	.word	0x0801070c
 800c36c:	08010da0 	.word	0x08010da0
 800c370:	0800f2f8 	.word	0x0800f2f8
 800c374:	08010d7c 	.word	0x08010d7c

0800c378 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c378:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c37a:	4604      	mov	r4, r0
 800c37c:	b188      	cbz	r0, 800c3a2 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c37e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800c380:	3801      	subs	r0, #1
 800c382:	f7fa fca1 	bl	8006cc8 <lwip_htonl>
 800c386:	2100      	movs	r1, #0
 800c388:	4602      	mov	r2, r0
 800c38a:	4620      	mov	r0, r4
 800c38c:	f7fe feea 	bl	800b164 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c390:	4601      	mov	r1, r0
 800c392:	b170      	cbz	r0, 800c3b2 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c394:	1d23      	adds	r3, r4, #4
 800c396:	4622      	mov	r2, r4
 800c398:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c39a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c39e:	f7fe bf09 	b.w	800b1b4 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c3a2:	4b05      	ldr	r3, [pc, #20]	@ (800c3b8 <tcp_keepalive+0x40>)
 800c3a4:	f640 0224 	movw	r2, #2084	@ 0x824
 800c3a8:	4904      	ldr	r1, [pc, #16]	@ (800c3bc <tcp_keepalive+0x44>)
 800c3aa:	4805      	ldr	r0, [pc, #20]	@ (800c3c0 <tcp_keepalive+0x48>)
 800c3ac:	f002 f81e 	bl	800e3ec <iprintf>
 800c3b0:	e7e5      	b.n	800c37e <tcp_keepalive+0x6>
}
 800c3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3b6:	bd10      	pop	{r4, pc}
 800c3b8:	0801070c 	.word	0x0801070c
 800c3bc:	08010dbc 	.word	0x08010dbc
 800c3c0:	0800f2f8 	.word	0x0800f2f8

0800c3c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d055      	beq.n	800c47a <tcp_zero_window_probe+0xb6>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c3ce:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
  if (seg == NULL) {
 800c3d0:	2d00      	cmp	r5, #0
 800c3d2:	d04f      	beq.n	800c474 <tcp_zero_window_probe+0xb0>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c3d4:	f894 309a 	ldrb.w	r3, [r4, #154]	@ 0x9a
 800c3d8:	2bff      	cmp	r3, #255	@ 0xff
 800c3da:	d002      	beq.n	800c3e2 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f884 309a 	strb.w	r3, [r4, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c3e2:	68eb      	ldr	r3, [r5, #12]
 800c3e4:	8998      	ldrh	r0, [r3, #12]
 800c3e6:	f7fa fc6b 	bl	8006cc0 <lwip_htons>
 800c3ea:	07c3      	lsls	r3, r0, #31
 800c3ec:	d427      	bmi.n	800c43e <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c3ee:	68eb      	ldr	r3, [r5, #12]
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	f7fe feb5 	bl	800b164 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d044      	beq.n	800c48a <tcp_zero_window_probe+0xc6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c400:	f8d6 8004 	ldr.w	r8, [r6, #4]
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c404:	6868      	ldr	r0, [r5, #4]
 800c406:	f108 0114 	add.w	r1, r8, #20
 800c40a:	892f      	ldrh	r7, [r5, #8]
 800c40c:	2201      	movs	r2, #1
 800c40e:	8903      	ldrh	r3, [r0, #8]
 800c410:	1bdb      	subs	r3, r3, r7
 800c412:	b29b      	uxth	r3, r3
 800c414:	f7fb fdf6 	bl	8008004 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c418:	68eb      	ldr	r3, [r5, #12]
 800c41a:	6858      	ldr	r0, [r3, #4]
 800c41c:	f7fa fc54 	bl	8006cc8 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c420:	6d23      	ldr	r3, [r4, #80]	@ 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c422:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c424:	4622      	mov	r2, r4
 800c426:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c428:	1a1b      	subs	r3, r3, r0
 800c42a:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c42c:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800c430:	bfb8      	it	lt
 800c432:	6520      	strlt	r0, [r4, #80]	@ 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c434:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c43a:	f7fe bebb 	b.w	800b1b4 <tcp_output_control_segment>
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c43e:	892f      	ldrh	r7, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c440:	4620      	mov	r0, r4
 800c442:	68eb      	ldr	r3, [r5, #12]
 800c444:	1e39      	subs	r1, r7, #0
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	bf18      	it	ne
 800c44a:	2101      	movne	r1, #1
 800c44c:	f7fe fe8a 	bl	800b164 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c450:	4606      	mov	r6, r0
 800c452:	b1d0      	cbz	r0, 800c48a <tcp_zero_window_probe+0xc6>
  tcphdr = (struct tcp_hdr *)p->payload;
 800c454:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (is_fin) {
 800c458:	2f00      	cmp	r7, #0
 800c45a:	d1d3      	bne.n	800c404 <tcp_zero_window_probe+0x40>
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c45c:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 800c460:	2011      	movs	r0, #17
 800c462:	f7fa fc2d 	bl	8006cc0 <lwip_htons>
 800c466:	f427 577c 	bic.w	r7, r7, #16128	@ 0x3f00
 800c46a:	b2bf      	uxth	r7, r7
 800c46c:	4338      	orrs	r0, r7
 800c46e:	f8a8 000c 	strh.w	r0, [r8, #12]
 800c472:	e7d1      	b.n	800c418 <tcp_zero_window_probe+0x54>
    return ERR_OK;
 800c474:	4628      	mov	r0, r5
}
 800c476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c47a:	4b05      	ldr	r3, [pc, #20]	@ (800c490 <tcp_zero_window_probe+0xcc>)
 800c47c:	f640 024f 	movw	r2, #2127	@ 0x84f
 800c480:	4904      	ldr	r1, [pc, #16]	@ (800c494 <tcp_zero_window_probe+0xd0>)
 800c482:	4805      	ldr	r0, [pc, #20]	@ (800c498 <tcp_zero_window_probe+0xd4>)
 800c484:	f001 ffb2 	bl	800e3ec <iprintf>
 800c488:	e7a1      	b.n	800c3ce <tcp_zero_window_probe+0xa>
    return ERR_MEM;
 800c48a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c48e:	e7f2      	b.n	800c476 <tcp_zero_window_probe+0xb2>
 800c490:	0801070c 	.word	0x0801070c
 800c494:	08010dd8 	.word	0x08010dd8
 800c498:	0800f2f8 	.word	0x0800f2f8

0800c49c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c49c:	b570      	push	{r4, r5, r6, lr}
 800c49e:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c4a0:	200a      	movs	r0, #10
{
 800c4a2:	460e      	mov	r6, r1
 800c4a4:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c4a6:	f7fa ffab 	bl	8007400 <memp_malloc>
  if (timeout == NULL) {
 800c4aa:	b190      	cbz	r0, 800c4d2 <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800c4ac:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c4ae:	490d      	ldr	r1, [pc, #52]	@ (800c4e4 <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800c4b0:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800c4b2:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800c4b4:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800c4b8:	680b      	ldr	r3, [r1, #0]
 800c4ba:	b91b      	cbnz	r3, 800c4c4 <sys_timeout_abs+0x28>
 800c4bc:	e007      	b.n	800c4ce <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c4be:	4619      	mov	r1, r3
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	b11b      	cbz	r3, 800c4cc <sys_timeout_abs+0x30>
 800c4c4:	685a      	ldr	r2, [r3, #4]
 800c4c6:	1aa2      	subs	r2, r4, r2
 800c4c8:	2a00      	cmp	r2, #0
 800c4ca:	daf8      	bge.n	800c4be <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800c4cc:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800c4ce:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c4d2:	4b05      	ldr	r3, [pc, #20]	@ (800c4e8 <sys_timeout_abs+0x4c>)
 800c4d4:	22be      	movs	r2, #190	@ 0xbe
 800c4d6:	4905      	ldr	r1, [pc, #20]	@ (800c4ec <sys_timeout_abs+0x50>)
 800c4d8:	4805      	ldr	r0, [pc, #20]	@ (800c4f0 <sys_timeout_abs+0x54>)
}
 800c4da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c4de:	f001 bf85 	b.w	800e3ec <iprintf>
 800c4e2:	bf00      	nop
 800c4e4:	240105a4 	.word	0x240105a4
 800c4e8:	08010dfc 	.word	0x08010dfc
 800c4ec:	08010e30 	.word	0x08010e30
 800c4f0:	0800f2f8 	.word	0x0800f2f8

0800c4f4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c4f4:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c4f6:	6843      	ldr	r3, [r0, #4]
{
 800c4f8:	4604      	mov	r4, r0
  cyclic->handler();
 800c4fa:	4798      	blx	r3

  now = sys_now();
 800c4fc:	f7f7 fd7a 	bl	8003ff4 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c500:	4b0a      	ldr	r3, [pc, #40]	@ (800c52c <lwip_cyclic_timer+0x38>)
 800c502:	6825      	ldr	r5, [r4, #0]
  now = sys_now();
 800c504:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c506:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c508:	4622      	mov	r2, r4
 800c50a:	4909      	ldr	r1, [pc, #36]	@ (800c530 <lwip_cyclic_timer+0x3c>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c50c:	18e8      	adds	r0, r5, r3
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c50e:	eba0 030c 	sub.w	r3, r0, ip
 800c512:	2b00      	cmp	r3, #0
 800c514:	da05      	bge.n	800c522 <lwip_cyclic_timer+0x2e>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c516:	eb05 000c 	add.w	r0, r5, ip
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c51e:	f7ff bfbd 	b.w	800c49c <sys_timeout_abs>
}
 800c522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c526:	f7ff bfb9 	b.w	800c49c <sys_timeout_abs>
 800c52a:	bf00      	nop
 800c52c:	240105a0 	.word	0x240105a0
 800c530:	0800c4f5 	.word	0x0800c4f5

0800c534 <tcpip_tcp_timer>:
{
 800c534:	b508      	push	{r3, lr}
  tcp_tmr();
 800c536:	f7fd f87d 	bl	8009634 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c53a:	4b0a      	ldr	r3, [pc, #40]	@ (800c564 <tcpip_tcp_timer+0x30>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	b153      	cbz	r3, 800c556 <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800c540:	f7f7 fed2 	bl	80042e8 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c544:	f7f7 fd56 	bl	8003ff4 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c548:	2200      	movs	r2, #0
 800c54a:	4907      	ldr	r1, [pc, #28]	@ (800c568 <tcpip_tcp_timer+0x34>)
 800c54c:	30fa      	adds	r0, #250	@ 0xfa
}
 800c54e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c552:	f7ff bfa3 	b.w	800c49c <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c556:	4b05      	ldr	r3, [pc, #20]	@ (800c56c <tcpip_tcp_timer+0x38>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1f0      	bne.n	800c540 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c55e:	4a04      	ldr	r2, [pc, #16]	@ (800c570 <tcpip_tcp_timer+0x3c>)
 800c560:	6013      	str	r3, [r2, #0]
}
 800c562:	bd08      	pop	{r3, pc}
 800c564:	24010554 	.word	0x24010554
 800c568:	0800c535 	.word	0x0800c535
 800c56c:	24010550 	.word	0x24010550
 800c570:	2401059c 	.word	0x2401059c

0800c574 <tcp_timer_needed>:
{
 800c574:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800c576:	f7f7 feb7 	bl	80042e8 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c57a:	4b0c      	ldr	r3, [pc, #48]	@ (800c5ac <tcp_timer_needed+0x38>)
 800c57c:	681a      	ldr	r2, [r3, #0]
 800c57e:	b99a      	cbnz	r2, 800c5a8 <tcp_timer_needed+0x34>
 800c580:	4a0b      	ldr	r2, [pc, #44]	@ (800c5b0 <tcp_timer_needed+0x3c>)
 800c582:	6812      	ldr	r2, [r2, #0]
 800c584:	b162      	cbz	r2, 800c5a0 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800c586:	2201      	movs	r2, #1
 800c588:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800c58a:	f7f7 fead 	bl	80042e8 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c58e:	f7f7 fd31 	bl	8003ff4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c592:	2200      	movs	r2, #0
 800c594:	4907      	ldr	r1, [pc, #28]	@ (800c5b4 <tcp_timer_needed+0x40>)
 800c596:	30fa      	adds	r0, #250	@ 0xfa
}
 800c598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c59c:	f7ff bf7e 	b.w	800c49c <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c5a0:	4a05      	ldr	r2, [pc, #20]	@ (800c5b8 <tcp_timer_needed+0x44>)
 800c5a2:	6812      	ldr	r2, [r2, #0]
 800c5a4:	2a00      	cmp	r2, #0
 800c5a6:	d1ee      	bne.n	800c586 <tcp_timer_needed+0x12>
}
 800c5a8:	bd08      	pop	{r3, pc}
 800c5aa:	bf00      	nop
 800c5ac:	2401059c 	.word	0x2401059c
 800c5b0:	24010554 	.word	0x24010554
 800c5b4:	0800c535 	.word	0x0800c535
 800c5b8:	24010550 	.word	0x24010550

0800c5bc <sys_timeouts_init>:
{
 800c5bc:	b538      	push	{r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5be:	4d0c      	ldr	r5, [pc, #48]	@ (800c5f0 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800c5c0:	f7f7 fe92 	bl	80042e8 <sys_check_core_locking>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5c4:	4c0b      	ldr	r4, [pc, #44]	@ (800c5f4 <sys_timeouts_init+0x38>)
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c5c6:	f7f7 fd15 	bl	8003ff4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5ca:	462a      	mov	r2, r5
 800c5cc:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	f7ff ff63 	bl	800c49c <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800c5d6:	f7f7 fe87 	bl	80042e8 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c5da:	f7f7 fd0b 	bl	8003ff4 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5de:	f105 0208 	add.w	r2, r5, #8
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
}
 800c5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c5ec:	f7ff bf56 	b.w	800c49c <sys_timeout_abs>
 800c5f0:	08011ba0 	.word	0x08011ba0
 800c5f4:	0800c4f5 	.word	0x0800c4f5

0800c5f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800c5fc:	f7f7 fe74 	bl	80042e8 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c600:	4c0f      	ldr	r4, [pc, #60]	@ (800c640 <sys_check_timeouts+0x48>)
 800c602:	f7f7 fcf7 	bl	8003ff4 <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800c606:	f8df 803c 	ldr.w	r8, [pc, #60]	@ 800c644 <sys_check_timeouts+0x4c>
  now = sys_now();
 800c60a:	4607      	mov	r7, r0
 800c60c:	e00e      	b.n	800c62c <sys_check_timeouts+0x34>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	eba7 0c02 	sub.w	ip, r7, r2
 800c614:	f1bc 0f00 	cmp.w	ip, #0
 800c618:	db0d      	blt.n	800c636 <sys_check_timeouts+0x3e>
    next_timeout = tmptimeout->next;
 800c61a:	681e      	ldr	r6, [r3, #0]
    current_timeout_due_time = tmptimeout->time;
 800c61c:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800c620:	6026      	str	r6, [r4, #0]
    arg = tmptimeout->arg;
 800c622:	e9d3 5902 	ldrd	r5, r9, [r3, #8]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c626:	f7fa ff31 	bl	800748c <memp_free>
    if (handler != NULL) {
 800c62a:	b935      	cbnz	r5, 800c63a <sys_check_timeouts+0x42>
    tmptimeout = next_timeout;
 800c62c:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c62e:	200a      	movs	r0, #10
 800c630:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1eb      	bne.n	800c60e <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800c63a:	4648      	mov	r0, r9
 800c63c:	47a8      	blx	r5
 800c63e:	e7f5      	b.n	800c62c <sys_check_timeouts+0x34>
 800c640:	240105a4 	.word	0x240105a4
 800c644:	240105a0 	.word	0x240105a0

0800c648 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c648:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c64a:	4c08      	ldr	r4, [pc, #32]	@ (800c66c <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800c64c:	f7f7 fe4c 	bl	80042e8 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	b13b      	cbz	r3, 800c664 <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c654:	f7f7 fcce 	bl	8003ff4 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
    return 0;
 800c65c:	1a18      	subs	r0, r3, r0
 800c65e:	bf48      	it	mi
 800c660:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800c662:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	bf00      	nop
 800c66c:	240105a4 	.word	0x240105a4

0800c670 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c670:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c672:	f001 fdbb 	bl	800e1ec <rand>
 800c676:	4b02      	ldr	r3, [pc, #8]	@ (800c680 <udp_init+0x10>)
 800c678:	4a02      	ldr	r2, [pc, #8]	@ (800c684 <udp_init+0x14>)
 800c67a:	4303      	orrs	r3, r0
 800c67c:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800c67e:	bd08      	pop	{r3, pc}
 800c680:	ffffc000 	.word	0xffffc000
 800c684:	2400002e 	.word	0x2400002e

0800c688 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68c:	4607      	mov	r7, r0
 800c68e:	b085      	sub	sp, #20
 800c690:	460e      	mov	r6, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800c692:	f7f7 fe29 	bl	80042e8 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c696:	2f00      	cmp	r7, #0
 800c698:	f000 80ed 	beq.w	800c876 <udp_input+0x1ee>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c69c:	2e00      	cmp	r6, #0
 800c69e:	f000 80f3 	beq.w	800c888 <udp_input+0x200>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c6a2:	897b      	ldrh	r3, [r7, #10]
 800c6a4:	2b07      	cmp	r3, #7
 800c6a6:	f240 80b3 	bls.w	800c810 <udp_input+0x188>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c6aa:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 800c8c0 <udp_input+0x238>
  udphdr = (struct udp_hdr *)p->payload;
 800c6ae:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c6b0:	f8d8 1000 	ldr.w	r1, [r8]
 800c6b4:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800c6b8:	f000 ffee 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800c6bc:	4681      	mov	r9, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c6be:	8820      	ldrh	r0, [r4, #0]
 800c6c0:	f7fa fafe 	bl	8006cc0 <lwip_htons>
 800c6c4:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800c6c6:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800c6c8:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800c6ca:	f7fa faf9 	bl	8006cc0 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6ce:	4b74      	ldr	r3, [pc, #464]	@ (800c8a0 <udp_input+0x218>)
  dest = lwip_ntohs(udphdr->dest);
 800c6d0:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c6d2:	681c      	ldr	r4, [r3, #0]
 800c6d4:	2c00      	cmp	r4, #0
 800c6d6:	f000 80ae 	beq.w	800c836 <udp_input+0x1ae>
  uncon_pcb = NULL;
 800c6da:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c6de:	46da      	mov	sl, fp
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c6e0:	8a63      	ldrh	r3, [r4, #18]
 800c6e2:	42ab      	cmp	r3, r5
 800c6e4:	d001      	beq.n	800c6ea <udp_input+0x62>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
        if (uncon_pcb == NULL) {
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c6e6:	46a2      	mov	sl, r4
 800c6e8:	e021      	b.n	800c72e <udp_input+0xa6>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	f000 8096 	beq.w	800c81c <udp_input+0x194>
 800c6f0:	4650      	mov	r0, sl
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c6f2:	7a22      	ldrb	r2, [r4, #8]
 800c6f4:	b13a      	cbz	r2, 800c706 <udp_input+0x7e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c6f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c6fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c6fe:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c700:	b2db      	uxtb	r3, r3
 800c702:	4293      	cmp	r3, r2
 800c704:	d1ef      	bne.n	800c6e6 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c706:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800c708:	f1b9 0f00 	cmp.w	r9, #0
 800c70c:	d133      	bne.n	800c776 <udp_input+0xee>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c70e:	4682      	mov	sl, r0
 800c710:	b11b      	cbz	r3, 800c71a <udp_input+0x92>
 800c712:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c716:	4293      	cmp	r3, r2
 800c718:	d1e5      	bne.n	800c6e6 <udp_input+0x5e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c71a:	7c23      	ldrb	r3, [r4, #16]
 800c71c:	0759      	lsls	r1, r3, #29
 800c71e:	f140 8085 	bpl.w	800c82c <udp_input+0x1a4>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c722:	8aa3      	ldrh	r3, [r4, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c724:	4651      	mov	r1, sl
      if ((pcb->remote_port == src) &&
 800c726:	9a03      	ldr	r2, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c728:	46a2      	mov	sl, r4
      if ((pcb->remote_port == src) &&
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d054      	beq.n	800c7d8 <udp_input+0x150>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c72e:	68e4      	ldr	r4, [r4, #12]
 800c730:	2c00      	cmp	r4, #0
 800c732:	d1d5      	bne.n	800c6e0 <udp_input+0x58>
  if (pcb == NULL) {
    pcb = uncon_pcb;
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c734:	f1bb 0f00 	cmp.w	fp, #0
 800c738:	d07d      	beq.n	800c836 <udp_input+0x1ae>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c73a:	2108      	movs	r1, #8
 800c73c:	4638      	mov	r0, r7
 800c73e:	f7fb f94d 	bl	80079dc <pbuf_remove_header>
 800c742:	2800      	cmp	r0, #0
 800c744:	d15d      	bne.n	800c802 <udp_input+0x17a>
 800c746:	46da      	mov	sl, fp
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c748:	f8da 4018 	ldr.w	r4, [sl, #24]
 800c74c:	2c00      	cmp	r4, #0
 800c74e:	d05f      	beq.n	800c810 <udp_input+0x188>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c750:	9b03      	ldr	r3, [sp, #12]
 800c752:	463a      	mov	r2, r7
 800c754:	f8da 001c 	ldr.w	r0, [sl, #28]
 800c758:	4651      	mov	r1, sl
 800c75a:	9300      	str	r3, [sp, #0]
 800c75c:	4b51      	ldr	r3, [pc, #324]	@ (800c8a4 <udp_input+0x21c>)
 800c75e:	47a0      	blx	r4
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c760:	b005      	add	sp, #20
 800c762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c766:	7a02      	ldrb	r2, [r0, #8]
 800c768:	2a00      	cmp	r2, #0
 800c76a:	f040 8094 	bne.w	800c896 <udp_input+0x20e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c76e:	4602      	mov	r2, r0
 800c770:	6803      	ldr	r3, [r0, #0]
 800c772:	4620      	mov	r0, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c774:	4614      	mov	r4, r2
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c776:	b1b3      	cbz	r3, 800c7a6 <udp_input+0x11e>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c778:	f8d8 2014 	ldr.w	r2, [r8, #20]
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c77c:	ea82 0103 	eor.w	r1, r2, r3
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c780:	3201      	adds	r2, #1
 800c782:	d010      	beq.n	800c7a6 <udp_input+0x11e>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c784:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c786:	4211      	tst	r1, r2
 800c788:	d00d      	beq.n	800c7a6 <udp_input+0x11e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c78a:	68e0      	ldr	r0, [r4, #12]
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d0d1      	beq.n	800c734 <udp_input+0xac>
    if ((pcb->local_port == dest) &&
 800c790:	8a43      	ldrh	r3, [r0, #18]
 800c792:	42ab      	cmp	r3, r5
 800c794:	d0e7      	beq.n	800c766 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c796:	68c4      	ldr	r4, [r0, #12]
 800c798:	2c00      	cmp	r4, #0
 800c79a:	d0cb      	beq.n	800c734 <udp_input+0xac>
    if ((pcb->local_port == dest) &&
 800c79c:	8a63      	ldrh	r3, [r4, #18]
 800c79e:	42ab      	cmp	r3, r5
 800c7a0:	d0a7      	beq.n	800c6f2 <udp_input+0x6a>
          uncon_pcb = pcb;
 800c7a2:	46a2      	mov	sl, r4
 800c7a4:	e7c3      	b.n	800c72e <udp_input+0xa6>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c7a6:	7c22      	ldrb	r2, [r4, #16]
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	0752      	lsls	r2, r2, #29
 800c7ac:	d4b9      	bmi.n	800c722 <udp_input+0x9a>
        if (uncon_pcb == NULL) {
 800c7ae:	f1bb 0f00 	cmp.w	fp, #0
 800c7b2:	d00a      	beq.n	800c7ca <udp_input+0x142>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c7b4:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c7b8:	3201      	adds	r2, #1
 800c7ba:	d1b2      	bne.n	800c722 <udp_input+0x9a>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c7bc:	6872      	ldr	r2, [r6, #4]
 800c7be:	f8db 1000 	ldr.w	r1, [fp]
 800c7c2:	4291      	cmp	r1, r2
 800c7c4:	d0ad      	beq.n	800c722 <udp_input+0x9a>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d1ab      	bne.n	800c722 <udp_input+0x9a>
      if ((pcb->remote_port == src) &&
 800c7ca:	8aa3      	ldrh	r3, [r4, #20]
        if (uncon_pcb == NULL) {
 800c7cc:	4651      	mov	r1, sl
      if ((pcb->remote_port == src) &&
 800c7ce:	9a03      	ldr	r2, [sp, #12]
          uncon_pcb = pcb;
 800c7d0:	46a3      	mov	fp, r4
        if (uncon_pcb == NULL) {
 800c7d2:	46a2      	mov	sl, r4
      if ((pcb->remote_port == src) &&
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d1aa      	bne.n	800c72e <udp_input+0xa6>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7d8:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c7da:	b11b      	cbz	r3, 800c7e4 <udp_input+0x15c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c7dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d1a4      	bne.n	800c72e <udp_input+0xa6>
        if (prev != NULL) {
 800c7e4:	b139      	cbz	r1, 800c7f6 <udp_input+0x16e>
          prev->next = pcb->next;
 800c7e6:	68e3      	ldr	r3, [r4, #12]
          udp_pcbs = pcb;
 800c7e8:	46a3      	mov	fp, r4
          pcb->next = udp_pcbs;
 800c7ea:	4a2d      	ldr	r2, [pc, #180]	@ (800c8a0 <udp_input+0x218>)
          prev->next = pcb->next;
 800c7ec:	60cb      	str	r3, [r1, #12]
          pcb->next = udp_pcbs;
 800c7ee:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800c7f0:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800c7f2:	60e3      	str	r3, [r4, #12]
  if (pcb != NULL) {
 800c7f4:	e7a1      	b.n	800c73a <udp_input+0xb2>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c7f6:	2108      	movs	r1, #8
 800c7f8:	4638      	mov	r0, r7
 800c7fa:	f7fb f8ef 	bl	80079dc <pbuf_remove_header>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d0a2      	beq.n	800c748 <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c802:	4b29      	ldr	r3, [pc, #164]	@ (800c8a8 <udp_input+0x220>)
 800c804:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800c808:	4928      	ldr	r1, [pc, #160]	@ (800c8ac <udp_input+0x224>)
 800c80a:	4829      	ldr	r0, [pc, #164]	@ (800c8b0 <udp_input+0x228>)
 800c80c:	f001 fdee 	bl	800e3ec <iprintf>
      pbuf_free(p);
 800c810:	4638      	mov	r0, r7
}
 800c812:	b005      	add	sp, #20
 800c814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c818:	f7fb b942 	b.w	8007aa0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c81c:	4b22      	ldr	r3, [pc, #136]	@ (800c8a8 <udp_input+0x220>)
 800c81e:	2288      	movs	r2, #136	@ 0x88
 800c820:	4924      	ldr	r1, [pc, #144]	@ (800c8b4 <udp_input+0x22c>)
 800c822:	4823      	ldr	r0, [pc, #140]	@ (800c8b0 <udp_input+0x228>)
 800c824:	f001 fde2 	bl	800e3ec <iprintf>
 800c828:	4650      	mov	r0, sl
 800c82a:	e762      	b.n	800c6f2 <udp_input+0x6a>
        if (uncon_pcb == NULL) {
 800c82c:	f1bb 0f00 	cmp.w	fp, #0
 800c830:	f47f af77 	bne.w	800c722 <udp_input+0x9a>
 800c834:	e7c9      	b.n	800c7ca <udp_input+0x142>
  if (for_us) {
 800c836:	6872      	ldr	r2, [r6, #4]
 800c838:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d1e7      	bne.n	800c810 <udp_input+0x188>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c840:	2108      	movs	r1, #8
 800c842:	4638      	mov	r0, r7
 800c844:	f7fb f8ca 	bl	80079dc <pbuf_remove_header>
 800c848:	2800      	cmp	r0, #0
 800c84a:	d1da      	bne.n	800c802 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c84c:	f1b9 0f00 	cmp.w	r9, #0
 800c850:	d1de      	bne.n	800c810 <udp_input+0x188>
 800c852:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c85a:	2be0      	cmp	r3, #224	@ 0xe0
 800c85c:	d0d8      	beq.n	800c810 <udp_input+0x188>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c85e:	f8b8 100c 	ldrh.w	r1, [r8, #12]
 800c862:	4638      	mov	r0, r7
 800c864:	3108      	adds	r1, #8
 800c866:	b209      	sxth	r1, r1
 800c868:	f7fb f8e6 	bl	8007a38 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c86c:	2103      	movs	r1, #3
 800c86e:	4638      	mov	r0, r7
 800c870:	f000 fd62 	bl	800d338 <icmp_dest_unreach>
 800c874:	e7cc      	b.n	800c810 <udp_input+0x188>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c876:	4b0c      	ldr	r3, [pc, #48]	@ (800c8a8 <udp_input+0x220>)
 800c878:	22cf      	movs	r2, #207	@ 0xcf
 800c87a:	490f      	ldr	r1, [pc, #60]	@ (800c8b8 <udp_input+0x230>)
 800c87c:	480c      	ldr	r0, [pc, #48]	@ (800c8b0 <udp_input+0x228>)
 800c87e:	f001 fdb5 	bl	800e3ec <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c882:	2e00      	cmp	r6, #0
 800c884:	f47f af0d 	bne.w	800c6a2 <udp_input+0x1a>
 800c888:	4b07      	ldr	r3, [pc, #28]	@ (800c8a8 <udp_input+0x220>)
 800c88a:	22d0      	movs	r2, #208	@ 0xd0
 800c88c:	490b      	ldr	r1, [pc, #44]	@ (800c8bc <udp_input+0x234>)
 800c88e:	4808      	ldr	r0, [pc, #32]	@ (800c8b0 <udp_input+0x228>)
 800c890:	f001 fdac 	bl	800e3ec <iprintf>
 800c894:	e705      	b.n	800c6a2 <udp_input+0x1a>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c896:	4603      	mov	r3, r0
 800c898:	4620      	mov	r0, r4
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c89a:	461c      	mov	r4, r3
 800c89c:	e72b      	b.n	800c6f6 <udp_input+0x6e>
 800c89e:	bf00      	nop
 800c8a0:	240105a8 	.word	0x240105a8
 800c8a4:	24009aa0 	.word	0x24009aa0
 800c8a8:	08010e70 	.word	0x08010e70
 800c8ac:	08010efc 	.word	0x08010efc
 800c8b0:	0800f2f8 	.word	0x0800f2f8
 800c8b4:	08010ed4 	.word	0x08010ed4
 800c8b8:	08010ea0 	.word	0x08010ea0
 800c8bc:	08010eb8 	.word	0x08010eb8
 800c8c0:	24009a90 	.word	0x24009a90

0800c8c4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c8c4:	b110      	cbz	r0, 800c8cc <udp_netif_ip_addr_changed+0x8>
 800c8c6:	6802      	ldr	r2, [r0, #0]
 800c8c8:	b101      	cbz	r1, 800c8cc <udp_netif_ip_addr_changed+0x8>
 800c8ca:	b902      	cbnz	r2, 800c8ce <udp_netif_ip_addr_changed+0xa>
 800c8cc:	4770      	bx	lr
 800c8ce:	680b      	ldr	r3, [r1, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0fb      	beq.n	800c8cc <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8d4:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <udp_netif_ip_addr_changed+0x34>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0f7      	beq.n	800c8cc <udp_netif_ip_addr_changed+0x8>
{
 800c8dc:	b410      	push	{r4}
 800c8de:	e000      	b.n	800c8e2 <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c8e0:	6802      	ldr	r2, [r0, #0]
 800c8e2:	681c      	ldr	r4, [r3, #0]
 800c8e4:	4294      	cmp	r4, r2
 800c8e6:	d101      	bne.n	800c8ec <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c8e8:	680a      	ldr	r2, [r1, #0]
 800c8ea:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f6      	bne.n	800c8e0 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800c8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	240105a8 	.word	0x240105a8

0800c8fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c902:	f04f 0e0a 	mov.w	lr, #10
{
 800c906:	b085      	sub	sp, #20
 800c908:	4e50      	ldr	r6, [pc, #320]	@ (800ca4c <etharp_find_entry+0x150>)
 800c90a:	4605      	mov	r5, r0
 800c90c:	4608      	mov	r0, r1
 800c90e:	4617      	mov	r7, r2
 800c910:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c912:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800c914:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c916:	46f0      	mov	r8, lr
 800c918:	46f3      	mov	fp, lr
 800c91a:	9001      	str	r0, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c91c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c920:	e004      	b.n	800c92c <etharp_find_entry+0x30>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c922:	4664      	mov	r4, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c924:	3301      	adds	r3, #1
 800c926:	3118      	adds	r1, #24
 800c928:	2b0a      	cmp	r3, #10
 800c92a:	d019      	beq.n	800c960 <etharp_find_entry+0x64>
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c92c:	2c0a      	cmp	r4, #10
 800c92e:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800c932:	f891 a014 	ldrb.w	sl, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c936:	d139      	bne.n	800c9ac <etharp_find_entry+0xb0>
 800c938:	f1ba 0f00 	cmp.w	sl, #0
 800c93c:	d0f1      	beq.n	800c922 <etharp_find_entry+0x26>
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c93e:	b11d      	cbz	r5, 800c948 <etharp_find_entry+0x4c>
 800c940:	6828      	ldr	r0, [r5, #0]
 800c942:	684a      	ldr	r2, [r1, #4]
 800c944:	4290      	cmp	r0, r2
 800c946:	d03d      	beq.n	800c9c4 <etharp_find_entry+0xc8>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c948:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800c94c:	8a48      	ldrh	r0, [r1, #18]
      if (state == ETHARP_STATE_PENDING) {
 800c94e:	d031      	beq.n	800c9b4 <etharp_find_entry+0xb8>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c950:	4548      	cmp	r0, r9
 800c952:	d3e7      	bcc.n	800c924 <etharp_find_entry+0x28>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c954:	3301      	adds	r3, #1
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800c956:	4681      	mov	r9, r0
            old_stable = i;
 800c958:	46e0      	mov	r8, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c95a:	3118      	adds	r1, #24
 800c95c:	2b0a      	cmp	r3, #10
 800c95e:	d1e5      	bne.n	800c92c <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c960:	9801      	ldr	r0, [sp, #4]
 800c962:	2801      	cmp	r0, #1
 800c964:	d16e      	bne.n	800ca44 <etharp_find_entry+0x148>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c966:	2c09      	cmp	r4, #9
 800c968:	dc32      	bgt.n	800c9d0 <etharp_find_entry+0xd4>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c96a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c96e:	46a1      	mov	r9, r4
 800c970:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c974:	7d1b      	ldrb	r3, [r3, #20]
 800c976:	b133      	cbz	r3, 800c986 <etharp_find_entry+0x8a>
 800c978:	4b35      	ldr	r3, [pc, #212]	@ (800ca50 <etharp_find_entry+0x154>)
 800c97a:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800c97e:	4935      	ldr	r1, [pc, #212]	@ (800ca54 <etharp_find_entry+0x158>)
 800c980:	4835      	ldr	r0, [pc, #212]	@ (800ca58 <etharp_find_entry+0x15c>)
 800c982:	f001 fd33 	bl	800e3ec <iprintf>
      i = old_queue;
 800c986:	46a0      	mov	r8, r4
 800c988:	0064      	lsls	r4, r4, #1
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c98a:	b12d      	cbz	r5, 800c998 <etharp_find_entry+0x9c>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c98c:	eb04 0309 	add.w	r3, r4, r9
 800c990:	682a      	ldr	r2, [r5, #0]
 800c992:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c996:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c998:	444c      	add	r4, r9
 800c99a:	2300      	movs	r3, #0
 800c99c:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800c9a0:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c9a2:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	b005      	add	sp, #20
 800c9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800c9ac:	f1ba 0f00 	cmp.w	sl, #0
 800c9b0:	d0b8      	beq.n	800c924 <etharp_find_entry+0x28>
 800c9b2:	e7c4      	b.n	800c93e <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800c9b4:	680a      	ldr	r2, [r1, #0]
 800c9b6:	b392      	cbz	r2, 800ca1e <etharp_find_entry+0x122>
          if (arp_table[i].ctime >= age_queue) {
 800c9b8:	9a02      	ldr	r2, [sp, #8]
 800c9ba:	4290      	cmp	r0, r2
 800c9bc:	d3b2      	bcc.n	800c924 <etharp_find_entry+0x28>
            old_queue = i;
 800c9be:	46e6      	mov	lr, ip
            age_queue = arp_table[i].ctime;
 800c9c0:	9002      	str	r0, [sp, #8]
 800c9c2:	e7af      	b.n	800c924 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c9c4:	b117      	cbz	r7, 800c9cc <etharp_find_entry+0xd0>
 800c9c6:	6888      	ldr	r0, [r1, #8]
 800c9c8:	42b8      	cmp	r0, r7
 800c9ca:	d1bd      	bne.n	800c948 <etharp_find_entry+0x4c>
        return i;
 800c9cc:	46e0      	mov	r8, ip
 800c9ce:	e7e9      	b.n	800c9a4 <etharp_find_entry+0xa8>
    if (old_stable < ARP_TABLE_SIZE) {
 800c9d0:	f1b8 0f09 	cmp.w	r8, #9
 800c9d4:	dc2a      	bgt.n	800ca2c <etharp_find_entry+0x130>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c9d6:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800c9da:	46c1      	mov	r9, r8
 800c9dc:	ea4f 0448 	mov.w	r4, r8, lsl #1
 800c9e0:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800c9e4:	b1a3      	cbz	r3, 800ca10 <etharp_find_entry+0x114>
 800c9e6:	4b1a      	ldr	r3, [pc, #104]	@ (800ca50 <etharp_find_entry+0x154>)
 800c9e8:	f240 126d 	movw	r2, #365	@ 0x16d
 800c9ec:	491b      	ldr	r1, [pc, #108]	@ (800ca5c <etharp_find_entry+0x160>)
 800c9ee:	481a      	ldr	r0, [pc, #104]	@ (800ca58 <etharp_find_entry+0x15c>)
 800c9f0:	f001 fcfc 	bl	800e3ec <iprintf>
  if (arp_table[i].q != NULL) {
 800c9f4:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800c9f8:	ea4f 0449 	mov.w	r4, r9, lsl #1
 800c9fc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800ca00:	f856 000a 	ldr.w	r0, [r6, sl]
 800ca04:	b120      	cbz	r0, 800ca10 <etharp_find_entry+0x114>
    free_etharp_q(arp_table[i].q);
 800ca06:	f7fb f84b 	bl	8007aa0 <pbuf_free>
    arp_table[i].q = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ca10:	eb04 0309 	add.w	r3, r4, r9
 800ca14:	2200      	movs	r2, #0
 800ca16:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800ca1a:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ca1c:	e7b5      	b.n	800c98a <etharp_find_entry+0x8e>
          if (arp_table[i].ctime >= age_pending) {
 800ca1e:	9a03      	ldr	r2, [sp, #12]
 800ca20:	4290      	cmp	r0, r2
 800ca22:	f4ff af7f 	bcc.w	800c924 <etharp_find_entry+0x28>
            old_pending = i;
 800ca26:	46e3      	mov	fp, ip
            age_pending = arp_table[i].ctime;
 800ca28:	9003      	str	r0, [sp, #12]
 800ca2a:	e77b      	b.n	800c924 <etharp_find_entry+0x28>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ca2c:	f1bb 0f09 	cmp.w	fp, #9
 800ca30:	dd05      	ble.n	800ca3e <etharp_find_entry+0x142>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ca32:	f1be 0f09 	cmp.w	lr, #9
 800ca36:	dc05      	bgt.n	800ca44 <etharp_find_entry+0x148>
    etharp_free_entry(i);
 800ca38:	46f0      	mov	r8, lr
      i = old_queue;
 800ca3a:	46f1      	mov	r9, lr
 800ca3c:	e7da      	b.n	800c9f4 <etharp_find_entry+0xf8>
    etharp_free_entry(i);
 800ca3e:	46d8      	mov	r8, fp
      i = old_pending;
 800ca40:	46d9      	mov	r9, fp
 800ca42:	e7d7      	b.n	800c9f4 <etharp_find_entry+0xf8>
    return (s16_t)ERR_MEM;
 800ca44:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ca48:	e7ac      	b.n	800c9a4 <etharp_find_entry+0xa8>
 800ca4a:	bf00      	nop
 800ca4c:	240105b0 	.word	0x240105b0
 800ca50:	08010f18 	.word	0x08010f18
 800ca54:	08010f68 	.word	0x08010f68
 800ca58:	0800f2f8 	.word	0x0800f2f8
 800ca5c:	08010f50 	.word	0x08010f50

0800ca60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca64:	b082      	sub	sp, #8
 800ca66:	4688      	mov	r8, r1
 800ca68:	4691      	mov	r9, r2
 800ca6a:	461f      	mov	r7, r3
 800ca6c:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca70:	4606      	mov	r6, r0
{
 800ca72:	f8bd 4034 	ldrh.w	r4, [sp, #52]	@ 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ca76:	2800      	cmp	r0, #0
 800ca78:	d04a      	beq.n	800cb10 <etharp_raw+0xb0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800ca7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca7e:	211c      	movs	r1, #28
 800ca80:	200e      	movs	r0, #14
 800ca82:	f7fb f87d 	bl	8007b80 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800ca86:	4605      	mov	r5, r0
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d049      	beq.n	800cb20 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800ca8c:	8943      	ldrh	r3, [r0, #10]
 800ca8e:	2b1b      	cmp	r3, #27
 800ca90:	d936      	bls.n	800cb00 <etharp_raw+0xa0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ca92:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800ca94:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800ca96:	f7fa f913 	bl	8006cc0 <lwip_htons>
 800ca9a:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ca9c:	f896 302c 	ldrb.w	r3, [r6, #44]	@ 0x2c
 800caa0:	2b06      	cmp	r3, #6
 800caa2:	d006      	beq.n	800cab2 <etharp_raw+0x52>
 800caa4:	4b20      	ldr	r3, [pc, #128]	@ (800cb28 <etharp_raw+0xc8>)
 800caa6:	f240 4269 	movw	r2, #1129	@ 0x469
 800caaa:	4920      	ldr	r1, [pc, #128]	@ (800cb2c <etharp_raw+0xcc>)
 800caac:	4820      	ldr	r0, [pc, #128]	@ (800cb30 <etharp_raw+0xd0>)
 800caae:	f001 fc9d 	bl	800e3ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cab2:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cab4:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cab6:	4e1f      	ldr	r6, [pc, #124]	@ (800cb34 <etharp_raw+0xd4>)
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cab8:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800caba:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cabc:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cabe:	88b9      	ldrh	r1, [r7, #4]
 800cac0:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cac2:	f8da 1000 	ldr.w	r1, [sl]
 800cac6:	f8c4 1012 	str.w	r1, [r4, #18]
 800caca:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800cace:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cad0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cad2:	6809      	ldr	r1, [r1, #0]
 800cad4:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cad8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cada:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cadc:	6026      	str	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cade:	61a1      	str	r1, [r4, #24]
  hdr->hwlen = ETH_HWADDR_LEN;
 800cae0:	f240 4106 	movw	r1, #1030	@ 0x406
 800cae4:	80a1      	strh	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cae6:	f640 0106 	movw	r1, #2054	@ 0x806
 800caea:	9100      	str	r1, [sp, #0]
 800caec:	4629      	mov	r1, r5
 800caee:	f001 fab9 	bl	800e064 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800caf2:	4628      	mov	r0, r5
 800caf4:	f7fa ffd4 	bl	8007aa0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800caf8:	2000      	movs	r0, #0
}
 800cafa:	b002      	add	sp, #8
 800cafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cb00:	4b09      	ldr	r3, [pc, #36]	@ (800cb28 <etharp_raw+0xc8>)
 800cb02:	f240 4262 	movw	r2, #1122	@ 0x462
 800cb06:	490c      	ldr	r1, [pc, #48]	@ (800cb38 <etharp_raw+0xd8>)
 800cb08:	4809      	ldr	r0, [pc, #36]	@ (800cb30 <etharp_raw+0xd0>)
 800cb0a:	f001 fc6f 	bl	800e3ec <iprintf>
 800cb0e:	e7c0      	b.n	800ca92 <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cb10:	4b05      	ldr	r3, [pc, #20]	@ (800cb28 <etharp_raw+0xc8>)
 800cb12:	f240 4257 	movw	r2, #1111	@ 0x457
 800cb16:	4909      	ldr	r1, [pc, #36]	@ (800cb3c <etharp_raw+0xdc>)
 800cb18:	4805      	ldr	r0, [pc, #20]	@ (800cb30 <etharp_raw+0xd0>)
 800cb1a:	f001 fc67 	bl	800e3ec <iprintf>
 800cb1e:	e7ac      	b.n	800ca7a <etharp_raw+0x1a>
    return ERR_MEM;
 800cb20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb24:	e7e9      	b.n	800cafa <etharp_raw+0x9a>
 800cb26:	bf00      	nop
 800cb28:	08010f18 	.word	0x08010f18
 800cb2c:	08010fc8 	.word	0x08010fc8
 800cb30:	0800f2f8 	.word	0x0800f2f8
 800cb34:	00080100 	.word	0x00080100
 800cb38:	08010f94 	.word	0x08010f94
 800cb3c:	0800f474 	.word	0x0800f474

0800cb40 <etharp_output_to_arp_index>:
{
 800cb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb44:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800cc20 <etharp_output_to_arp_index+0xe0>
 800cb48:	eb02 0642 	add.w	r6, r2, r2, lsl #1
{
 800cb4c:	b085      	sub	sp, #20
 800cb4e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb50:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
{
 800cb54:	4605      	mov	r5, r0
 800cb56:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb58:	ea4f 0942 	mov.w	r9, r2, lsl #1
 800cb5c:	7d33      	ldrb	r3, [r6, #20]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d936      	bls.n	800cbd0 <etharp_output_to_arp_index+0x90>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb62:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb6c:	f100 060c 	add.w	r6, r0, #12
 800cb70:	4446      	add	r6, r8
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb72:	d00d      	beq.n	800cb90 <etharp_output_to_arp_index+0x50>
 800cb74:	f105 0826 	add.w	r8, r5, #38	@ 0x26
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb78:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800cb7c:	4633      	mov	r3, r6
 800cb7e:	4642      	mov	r2, r8
 800cb80:	4639      	mov	r1, r7
 800cb82:	4628      	mov	r0, r5
 800cb84:	9400      	str	r4, [sp, #0]
 800cb86:	f001 fa6d 	bl	800e064 <ethernet_output>
}
 800cb8a:	b005      	add	sp, #20
 800cb8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cb90:	444c      	add	r4, r9
 800cb92:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 800cb96:	8a63      	ldrh	r3, [r4, #18]
 800cb98:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800cb9c:	d821      	bhi.n	800cbe2 <etharp_output_to_arp_index+0xa2>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb9e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800cba2:	d3e7      	bcc.n	800cb74 <etharp_output_to_arp_index+0x34>
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cba4:	4b19      	ldr	r3, [pc, #100]	@ (800cc0c <etharp_output_to_arp_index+0xcc>)
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cba6:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cba8:	4632      	mov	r2, r6
 800cbaa:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cbac:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbae:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbb0:	f105 0826 	add.w	r8, r5, #38	@ 0x26
 800cbb4:	9300      	str	r3, [sp, #0]
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	9002      	str	r0, [sp, #8]
 800cbba:	4641      	mov	r1, r8
 800cbbc:	9303      	str	r3, [sp, #12]
 800cbbe:	4628      	mov	r0, r5
 800cbc0:	4643      	mov	r3, r8
 800cbc2:	f7ff ff4d 	bl	800ca60 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d1d6      	bne.n	800cb78 <etharp_output_to_arp_index+0x38>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cbca:	2303      	movs	r3, #3
 800cbcc:	7523      	strb	r3, [r4, #20]
 800cbce:	e7d3      	b.n	800cb78 <etharp_output_to_arp_index+0x38>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cbd0:	4b0f      	ldr	r3, [pc, #60]	@ (800cc10 <etharp_output_to_arp_index+0xd0>)
 800cbd2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800cbd6:	490f      	ldr	r1, [pc, #60]	@ (800cc14 <etharp_output_to_arp_index+0xd4>)
 800cbd8:	480f      	ldr	r0, [pc, #60]	@ (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cbda:	f001 fc07 	bl	800e3ec <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cbde:	7d33      	ldrb	r3, [r6, #20]
 800cbe0:	e7bf      	b.n	800cb62 <etharp_output_to_arp_index+0x22>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbe2:	4b0a      	ldr	r3, [pc, #40]	@ (800cc0c <etharp_output_to_arp_index+0xcc>)
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cbe4:	3004      	adds	r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbe6:	4a0d      	ldr	r2, [pc, #52]	@ (800cc1c <etharp_output_to_arp_index+0xdc>)
 800cbe8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cbea:	1d2b      	adds	r3, r5, #4
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cbec:	4440      	add	r0, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbee:	f105 0826 	add.w	r8, r5, #38	@ 0x26
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	9002      	str	r0, [sp, #8]
 800cbf8:	4641      	mov	r1, r8
 800cbfa:	9303      	str	r3, [sp, #12]
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	4643      	mov	r3, r8
 800cc00:	f7ff ff2e 	bl	800ca60 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1b7      	bne.n	800cb78 <etharp_output_to_arp_index+0x38>
 800cc08:	e7df      	b.n	800cbca <etharp_output_to_arp_index+0x8a>
 800cc0a:	bf00      	nop
 800cc0c:	08011bb4 	.word	0x08011bb4
 800cc10:	08010f18 	.word	0x08010f18
 800cc14:	0801100c 	.word	0x0801100c
 800cc18:	0800f2f8 	.word	0x0800f2f8
 800cc1c:	08011bbc 	.word	0x08011bbc
 800cc20:	240105b0 	.word	0x240105b0

0800cc24 <etharp_tmr>:
{
 800cc24:	b570      	push	{r4, r5, r6, lr}
 800cc26:	4c1d      	ldr	r4, [pc, #116]	@ (800cc9c <etharp_tmr+0x78>)
 800cc28:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
 800cc30:	e00a      	b.n	800cc48 <etharp_tmr+0x24>
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc32:	2a01      	cmp	r2, #1
 800cc34:	d01f      	beq.n	800cc76 <etharp_tmr+0x52>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc36:	2a03      	cmp	r2, #3
 800cc38:	d02d      	beq.n	800cc96 <etharp_tmr+0x72>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc3a:	2a04      	cmp	r2, #4
 800cc3c:	d101      	bne.n	800cc42 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cc3e:	2302      	movs	r3, #2
 800cc40:	7423      	strb	r3, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc42:	3418      	adds	r4, #24
 800cc44:	42ac      	cmp	r4, r5
 800cc46:	d014      	beq.n	800cc72 <etharp_tmr+0x4e>
    u8_t state = arp_table[i].state;
 800cc48:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	d0f9      	beq.n	800cc42 <etharp_tmr+0x1e>
      arp_table[i].ctime++;
 800cc4e:	89e3      	ldrh	r3, [r4, #14]
 800cc50:	3301      	adds	r3, #1
 800cc52:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc54:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
      arp_table[i].ctime++;
 800cc58:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc5a:	d3ea      	bcc.n	800cc32 <etharp_tmr+0xe>
  if (arp_table[i].q != NULL) {
 800cc5c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800cc60:	b118      	cbz	r0, 800cc6a <etharp_tmr+0x46>
    free_etharp_q(arp_table[i].q);
 800cc62:	f7fa ff1d 	bl	8007aa0 <pbuf_free>
    arp_table[i].q = NULL;
 800cc66:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cc6a:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc6c:	3418      	adds	r4, #24
 800cc6e:	42ac      	cmp	r4, r5
 800cc70:	d1ea      	bne.n	800cc48 <etharp_tmr+0x24>
}
 800cc72:	b004      	add	sp, #16
 800cc74:	bd70      	pop	{r4, r5, r6, pc}
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d8f0      	bhi.n	800cc5c <etharp_tmr+0x38>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc7a:	9203      	str	r2, [sp, #12]
 800cc7c:	4a08      	ldr	r2, [pc, #32]	@ (800cca0 <etharp_tmr+0x7c>)
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cc7e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc80:	9201      	str	r2, [sp, #4]
 800cc82:	f100 0326 	add.w	r3, r0, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc86:	1d02      	adds	r2, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc88:	9402      	str	r4, [sp, #8]
 800cc8a:	9200      	str	r2, [sp, #0]
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4a05      	ldr	r2, [pc, #20]	@ (800cca4 <etharp_tmr+0x80>)
 800cc90:	f7ff fee6 	bl	800ca60 <etharp_raw>
 800cc94:	e7d5      	b.n	800cc42 <etharp_tmr+0x1e>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cc96:	2304      	movs	r3, #4
 800cc98:	7423      	strb	r3, [r4, #16]
 800cc9a:	e7d2      	b.n	800cc42 <etharp_tmr+0x1e>
 800cc9c:	240105b4 	.word	0x240105b4
 800cca0:	08011bb4 	.word	0x08011bb4
 800cca4:	08011bbc 	.word	0x08011bbc

0800cca8 <etharp_cleanup_netif>:
{
 800cca8:	b570      	push	{r4, r5, r6, lr}
 800ccaa:	4c0b      	ldr	r4, [pc, #44]	@ (800ccd8 <etharp_cleanup_netif+0x30>)
 800ccac:	4606      	mov	r6, r0
 800ccae:	f104 05f0 	add.w	r5, r4, #240	@ 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ccb2:	7d23      	ldrb	r3, [r4, #20]
 800ccb4:	b113      	cbz	r3, 800ccbc <etharp_cleanup_netif+0x14>
 800ccb6:	68a3      	ldr	r3, [r4, #8]
 800ccb8:	42b3      	cmp	r3, r6
 800ccba:	d003      	beq.n	800ccc4 <etharp_cleanup_netif+0x1c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccbc:	3418      	adds	r4, #24
 800ccbe:	42ac      	cmp	r4, r5
 800ccc0:	d1f7      	bne.n	800ccb2 <etharp_cleanup_netif+0xa>
}
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
  if (arp_table[i].q != NULL) {
 800ccc4:	6820      	ldr	r0, [r4, #0]
 800ccc6:	b118      	cbz	r0, 800ccd0 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800ccc8:	f7fa feea 	bl	8007aa0 <pbuf_free>
    arp_table[i].q = NULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	6023      	str	r3, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	7523      	strb	r3, [r4, #20]
}
 800ccd4:	e7f2      	b.n	800ccbc <etharp_cleanup_netif+0x14>
 800ccd6:	bf00      	nop
 800ccd8:	240105b0 	.word	0x240105b0

0800ccdc <etharp_input>:
{
 800ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce0:	460d      	mov	r5, r1
 800cce2:	b087      	sub	sp, #28
 800cce4:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800cce6:	f7f7 faff 	bl	80042e8 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ccea:	2d00      	cmp	r5, #0
 800ccec:	d07b      	beq.n	800cde6 <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800ccee:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ccf0:	8833      	ldrh	r3, [r6, #0]
 800ccf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccf6:	d102      	bne.n	800ccfe <etharp_input+0x22>
 800ccf8:	7933      	ldrb	r3, [r6, #4]
 800ccfa:	2b06      	cmp	r3, #6
 800ccfc:	d005      	beq.n	800cd0a <etharp_input+0x2e>
  pbuf_free(p);
 800ccfe:	4620      	mov	r0, r4
}
 800cd00:	b007      	add	sp, #28
 800cd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800cd06:	f7fa becb 	b.w	8007aa0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cd0a:	7973      	ldrb	r3, [r6, #5]
 800cd0c:	2b04      	cmp	r3, #4
 800cd0e:	d1f6      	bne.n	800ccfe <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cd10:	8873      	ldrh	r3, [r6, #2]
 800cd12:	2b08      	cmp	r3, #8
 800cd14:	d1f3      	bne.n	800ccfe <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cd16:	f8d6 a00e 	ldr.w	sl, [r6, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cd1a:	f106 0808 	add.w	r8, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd1e:	686f      	ldr	r7, [r5, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cd20:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cd22:	f8cd a014 	str.w	sl, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd26:	2f00      	cmp	r7, #0
 800cd28:	d167      	bne.n	800cdfa <etharp_input+0x11e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cd2a:	f04f 0b02 	mov.w	fp, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cd2e:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800cd32:	2b06      	cmp	r3, #6
 800cd34:	d166      	bne.n	800ce04 <etharp_input+0x128>
  if (ip4_addr_isany(ipaddr) ||
 800cd36:	f1ba 0f00 	cmp.w	sl, #0
 800cd3a:	d03e      	beq.n	800cdba <etharp_input+0xde>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4650      	mov	r0, sl
 800cd40:	f000 fcaa 	bl	800d698 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800cd44:	4681      	mov	r9, r0
 800cd46:	bbc0      	cbnz	r0, 800cdba <etharp_input+0xde>
      ip4_addr_ismulticast(ipaddr)) {
 800cd48:	f00a 0af0 	and.w	sl, sl, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cd4c:	f1ba 0fe0 	cmp.w	sl, #224	@ 0xe0
 800cd50:	d033      	beq.n	800cdba <etharp_input+0xde>
  i = etharp_find_entry(ipaddr, flags, netif);
 800cd52:	4659      	mov	r1, fp
 800cd54:	462a      	mov	r2, r5
 800cd56:	a805      	add	r0, sp, #20
 800cd58:	f7ff fdd0 	bl	800c8fc <etharp_find_entry>
  if (i < 0) {
 800cd5c:	1e03      	subs	r3, r0, #0
 800cd5e:	db2c      	blt.n	800cdba <etharp_input+0xde>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cd60:	492d      	ldr	r1, [pc, #180]	@ (800ce18 <etharp_input+0x13c>)
 800cd62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cd66:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cd68:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cd6c:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800cd70:	00d2      	lsls	r2, r2, #3
 800cd72:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cd76:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800cd78:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cd7c:	fb13 030e 	smlabb	r3, r3, lr, r0
 800cd80:	f8d8 0000 	ldr.w	r0, [r8]
 800cd84:	50c8      	str	r0, [r1, r3]
 800cd86:	440b      	add	r3, r1
 800cd88:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800cd8c:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800cd8e:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800cd92:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800cd96:	f1ba 0f00 	cmp.w	sl, #0
 800cd9a:	d00e      	beq.n	800cdba <etharp_input+0xde>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cd9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    arp_table[i].q = NULL;
 800cda0:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cda4:	4628      	mov	r0, r5
 800cda6:	f105 0226 	add.w	r2, r5, #38	@ 0x26
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	4651      	mov	r1, sl
 800cdae:	4643      	mov	r3, r8
 800cdb0:	f001 f958 	bl	800e064 <ethernet_output>
    pbuf_free(p);
 800cdb4:	4650      	mov	r0, sl
 800cdb6:	f7fa fe73 	bl	8007aa0 <pbuf_free>
  switch (hdr->opcode) {
 800cdba:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800cdbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdc0:	d19d      	bne.n	800ccfe <etharp_input+0x22>
 800cdc2:	2f00      	cmp	r7, #0
 800cdc4:	d09b      	beq.n	800ccfe <etharp_input+0x22>
        etharp_raw(netif,
 800cdc6:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800cdc8:	f105 0326 	add.w	r3, r5, #38	@ 0x26
        etharp_raw(netif,
 800cdcc:	4642      	mov	r2, r8
 800cdce:	4628      	mov	r0, r5
 800cdd0:	9103      	str	r1, [sp, #12]
 800cdd2:	a905      	add	r1, sp, #20
 800cdd4:	f8cd 8004 	str.w	r8, [sp, #4]
 800cdd8:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800cdda:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800cddc:	9100      	str	r1, [sp, #0]
 800cdde:	4619      	mov	r1, r3
 800cde0:	f7ff fe3e 	bl	800ca60 <etharp_raw>
 800cde4:	e78b      	b.n	800ccfe <etharp_input+0x22>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cde6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce1c <etharp_input+0x140>)
 800cde8:	f240 228a 	movw	r2, #650	@ 0x28a
 800cdec:	490c      	ldr	r1, [pc, #48]	@ (800ce20 <etharp_input+0x144>)
 800cdee:	480d      	ldr	r0, [pc, #52]	@ (800ce24 <etharp_input+0x148>)
}
 800cdf0:	b007      	add	sp, #28
 800cdf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cdf6:	f001 baf9 	b.w	800e3ec <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cdfa:	429f      	cmp	r7, r3
 800cdfc:	d10a      	bne.n	800ce14 <etharp_input+0x138>
 800cdfe:	2701      	movs	r7, #1
 800ce00:	46bb      	mov	fp, r7
 800ce02:	e794      	b.n	800cd2e <etharp_input+0x52>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ce04:	4b05      	ldr	r3, [pc, #20]	@ (800ce1c <etharp_input+0x140>)
 800ce06:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800ce0a:	4907      	ldr	r1, [pc, #28]	@ (800ce28 <etharp_input+0x14c>)
 800ce0c:	4805      	ldr	r0, [pc, #20]	@ (800ce24 <etharp_input+0x148>)
 800ce0e:	f001 faed 	bl	800e3ec <iprintf>
 800ce12:	e790      	b.n	800cd36 <etharp_input+0x5a>
 800ce14:	2700      	movs	r7, #0
 800ce16:	e788      	b.n	800cd2a <etharp_input+0x4e>
 800ce18:	240105b0 	.word	0x240105b0
 800ce1c:	08010f18 	.word	0x08010f18
 800ce20:	0800f474 	.word	0x0800f474
 800ce24:	0800f2f8 	.word	0x0800f2f8
 800ce28:	0801105c 	.word	0x0801105c

0800ce2c <etharp_query>:
{
 800ce2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce30:	460e      	mov	r6, r1
 800ce32:	b085      	sub	sp, #20
 800ce34:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce36:	4601      	mov	r1, r0
 800ce38:	6830      	ldr	r0, [r6, #0]
{
 800ce3a:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce3c:	f000 fc2c 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800ce40:	2800      	cmp	r0, #0
 800ce42:	f040 809a 	bne.w	800cf7a <etharp_query+0x14e>
      ip4_addr_ismulticast(ipaddr) ||
 800ce46:	6833      	ldr	r3, [r6, #0]
 800ce48:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
      ip4_addr_isany(ipaddr)) {
 800ce4c:	2ae0      	cmp	r2, #224	@ 0xe0
 800ce4e:	f000 8094 	beq.w	800cf7a <etharp_query+0x14e>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 8091 	beq.w	800cf7a <etharp_query+0x14e>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce58:	462a      	mov	r2, r5
 800ce5a:	2101      	movs	r1, #1
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff fd4d 	bl	800c8fc <etharp_find_entry>
  if (i_err < 0) {
 800ce62:	f1b0 0800 	subs.w	r8, r0, #0
 800ce66:	db66      	blt.n	800cf36 <etharp_query+0x10a>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce68:	fa1f f388 	uxth.w	r3, r8
 800ce6c:	2b7e      	cmp	r3, #126	@ 0x7e
 800ce6e:	d848      	bhi.n	800cf02 <etharp_query+0xd6>
  i = (netif_addr_idx_t)i_err;
 800ce70:	fa5f f888 	uxtb.w	r8, r8
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce74:	4c49      	ldr	r4, [pc, #292]	@ (800cf9c <etharp_query+0x170>)
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ce76:	f105 0b26 	add.w	fp, r5, #38	@ 0x26
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce7a:	eb08 0948 	add.w	r9, r8, r8, lsl #1
 800ce7e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 800ce82:	eb04 09c9 	add.w	r9, r4, r9, lsl #3
 800ce86:	f899 3014 	ldrb.w	r3, [r9, #20]
 800ce8a:	b313      	cbz	r3, 800ced2 <etharp_query+0xa6>
  if (is_new_entry || (q == NULL)) {
 800ce8c:	2f00      	cmp	r7, #0
 800ce8e:	d077      	beq.n	800cf80 <etharp_query+0x154>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d13e      	bne.n	800cf12 <etharp_query+0xe6>
    p = q;
 800ce94:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ce96:	4e42      	ldr	r6, [pc, #264]	@ (800cfa0 <etharp_query+0x174>)
 800ce98:	f8df b11c 	ldr.w	fp, [pc, #284]	@ 800cfb8 <etharp_query+0x18c>
 800ce9c:	896a      	ldrh	r2, [r5, #10]
 800ce9e:	892b      	ldrh	r3, [r5, #8]
 800cea0:	f8df 910c 	ldr.w	r9, [pc, #268]	@ 800cfb0 <etharp_query+0x184>
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d009      	beq.n	800cebc <etharp_query+0x90>
      if (PBUF_NEEDS_COPY(p)) {
 800cea8:	7b2b      	ldrb	r3, [r5, #12]
 800ceaa:	065b      	lsls	r3, r3, #25
 800ceac:	d459      	bmi.n	800cf62 <etharp_query+0x136>
      p = p->next;
 800ceae:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800ceb0:	2d00      	cmp	r5, #0
 800ceb2:	d045      	beq.n	800cf40 <etharp_query+0x114>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ceb4:	896a      	ldrh	r2, [r5, #10]
 800ceb6:	892b      	ldrh	r3, [r5, #8]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d1f5      	bne.n	800cea8 <etharp_query+0x7c>
 800cebc:	682a      	ldr	r2, [r5, #0]
 800cebe:	4633      	mov	r3, r6
 800cec0:	2a00      	cmp	r2, #0
 800cec2:	d0f1      	beq.n	800cea8 <etharp_query+0x7c>
 800cec4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800cec8:	4659      	mov	r1, fp
 800ceca:	4648      	mov	r0, r9
 800cecc:	f001 fa8e 	bl	800e3ec <iprintf>
 800ced0:	e7ea      	b.n	800cea8 <etharp_query+0x7c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ced2:	2301      	movs	r3, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ced4:	9602      	str	r6, [sp, #8]
    arp_table[i].netif = netif;
 800ced6:	f8c9 5008 	str.w	r5, [r9, #8]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ceda:	4659      	mov	r1, fp
 800cedc:	9303      	str	r3, [sp, #12]
 800cede:	4628      	mov	r0, r5
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cee0:	f889 3014 	strb.w	r3, [r9, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cee4:	4b2f      	ldr	r3, [pc, #188]	@ (800cfa4 <etharp_query+0x178>)
 800cee6:	4a30      	ldr	r2, [pc, #192]	@ (800cfa8 <etharp_query+0x17c>)
 800cee8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ceea:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	465b      	mov	r3, fp
 800cef0:	f7ff fdb6 	bl	800ca60 <etharp_raw>
    if (q == NULL) {
 800cef4:	b1e7      	cbz	r7, 800cf30 <etharp_query+0x104>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cef6:	f899 3014 	ldrb.w	r3, [r9, #20]
 800cefa:	2b01      	cmp	r3, #1
 800cefc:	d809      	bhi.n	800cf12 <etharp_query+0xe6>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cefe:	d117      	bne.n	800cf30 <etharp_query+0x104>
 800cf00:	e7c8      	b.n	800ce94 <etharp_query+0x68>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cf02:	4b27      	ldr	r3, [pc, #156]	@ (800cfa0 <etharp_query+0x174>)
 800cf04:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800cf08:	4928      	ldr	r1, [pc, #160]	@ (800cfac <etharp_query+0x180>)
 800cf0a:	4829      	ldr	r0, [pc, #164]	@ (800cfb0 <etharp_query+0x184>)
 800cf0c:	f001 fa6e 	bl	800e3ec <iprintf>
 800cf10:	e7ae      	b.n	800ce70 <etharp_query+0x44>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf12:	2318      	movs	r3, #24
 800cf14:	465a      	mov	r2, fp
 800cf16:	4639      	mov	r1, r7
 800cf18:	4628      	mov	r0, r5
 800cf1a:	fb03 4308 	mla	r3, r3, r8, r4
 800cf1e:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 800cf22:	9400      	str	r4, [sp, #0]
 800cf24:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800cf26:	4c23      	ldr	r4, [pc, #140]	@ (800cfb4 <etharp_query+0x188>)
 800cf28:	f884 8000 	strb.w	r8, [r4]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf2c:	f001 f89a 	bl	800e064 <ethernet_output>
}
 800cf30:	b005      	add	sp, #20
 800cf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (err_t)i_err;
 800cf36:	fa4f f088 	sxtb.w	r0, r8
}
 800cf3a:	b005      	add	sp, #20
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800cf40:	4638      	mov	r0, r7
 800cf42:	f7fa ff2b 	bl	8007d9c <pbuf_ref>
      if (arp_table[i].q != NULL) {
 800cf46:	eb0a 0308 	add.w	r3, sl, r8
 800cf4a:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 800cf4e:	b108      	cbz	r0, 800cf54 <etharp_query+0x128>
        pbuf_free(arp_table[i].q);
 800cf50:	f7fa fda6 	bl	8007aa0 <pbuf_free>
      arp_table[i].q = p;
 800cf54:	44d0      	add	r8, sl
      result = ERR_OK;
 800cf56:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800cf58:	f844 7038 	str.w	r7, [r4, r8, lsl #3]
}
 800cf5c:	b005      	add	sp, #20
 800cf5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cf62:	463a      	mov	r2, r7
 800cf64:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800cf68:	200e      	movs	r0, #14
 800cf6a:	f7fb f89f 	bl	80080ac <pbuf_clone>
    if (p != NULL) {
 800cf6e:	4607      	mov	r7, r0
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d1e8      	bne.n	800cf46 <etharp_query+0x11a>
  err_t result = ERR_MEM;
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf78:	e7da      	b.n	800cf30 <etharp_query+0x104>
    return ERR_ARG;
 800cf7a:	f06f 000f 	mvn.w	r0, #15
 800cf7e:	e7d7      	b.n	800cf30 <etharp_query+0x104>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cf80:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cf82:	2301      	movs	r3, #1
 800cf84:	4c07      	ldr	r4, [pc, #28]	@ (800cfa4 <etharp_query+0x178>)
 800cf86:	4659      	mov	r1, fp
 800cf88:	4628      	mov	r0, r5
 800cf8a:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800cf8e:	e9cd 2400 	strd	r2, r4, [sp]
 800cf92:	465b      	mov	r3, fp
 800cf94:	4a04      	ldr	r2, [pc, #16]	@ (800cfa8 <etharp_query+0x17c>)
 800cf96:	f7ff fd63 	bl	800ca60 <etharp_raw>
    if (q == NULL) {
 800cf9a:	e7c9      	b.n	800cf30 <etharp_query+0x104>
 800cf9c:	240105b0 	.word	0x240105b0
 800cfa0:	08010f18 	.word	0x08010f18
 800cfa4:	08011bb4 	.word	0x08011bb4
 800cfa8:	08011bbc 	.word	0x08011bbc
 800cfac:	08011080 	.word	0x08011080
 800cfb0:	0800f2f8 	.word	0x0800f2f8
 800cfb4:	240105ac 	.word	0x240105ac
 800cfb8:	08011090 	.word	0x08011090

0800cfbc <etharp_output>:
{
 800cfbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	460e      	mov	r6, r1
 800cfc4:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 800cfc6:	f7f7 f98f 	bl	80042e8 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cfca:	2c00      	cmp	r4, #0
 800cfcc:	f000 8081 	beq.w	800d0d2 <etharp_output+0x116>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cfd0:	2e00      	cmp	r6, #0
 800cfd2:	d06d      	beq.n	800d0b0 <etharp_output+0xf4>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cfd4:	2d00      	cmp	r5, #0
 800cfd6:	d074      	beq.n	800d0c2 <etharp_output+0x106>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cfd8:	4621      	mov	r1, r4
 800cfda:	6828      	ldr	r0, [r5, #0]
 800cfdc:	f000 fb5c 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d163      	bne.n	800d0ac <etharp_output+0xf0>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800cfea:	2ae0      	cmp	r2, #224	@ 0xe0
 800cfec:	d039      	beq.n	800d062 <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cfee:	6862      	ldr	r2, [r4, #4]
 800cff0:	68a1      	ldr	r1, [r4, #8]
 800cff2:	405a      	eors	r2, r3
 800cff4:	420a      	tst	r2, r1
 800cff6:	d009      	beq.n	800d00c <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800cff8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cffa:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800cffe:	4293      	cmp	r3, r2
 800d000:	d004      	beq.n	800d00c <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d076      	beq.n	800d0f6 <etharp_output+0x13a>
            dst_addr = netif_ip4_gw(netif);
 800d008:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d00c:	4f3b      	ldr	r7, [pc, #236]	@ (800d0fc <etharp_output+0x140>)
 800d00e:	4b3c      	ldr	r3, [pc, #240]	@ (800d100 <etharp_output+0x144>)
 800d010:	783a      	ldrb	r2, [r7, #0]
 800d012:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d016:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d01a:	7d19      	ldrb	r1, [r3, #20]
 800d01c:	2901      	cmp	r1, #1
 800d01e:	d902      	bls.n	800d026 <etharp_output+0x6a>
 800d020:	6899      	ldr	r1, [r3, #8]
 800d022:	42a1      	cmp	r1, r4
 800d024:	d060      	beq.n	800d0e8 <etharp_output+0x12c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d026:	4b36      	ldr	r3, [pc, #216]	@ (800d100 <etharp_output+0x144>)
{
 800d028:	f04f 0c00 	mov.w	ip, #0
 800d02c:	e005      	b.n	800d03a <etharp_output+0x7e>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d02e:	f10c 0c01 	add.w	ip, ip, #1
 800d032:	3318      	adds	r3, #24
 800d034:	f1bc 0f0a 	cmp.w	ip, #10
 800d038:	d030      	beq.n	800d09c <etharp_output+0xe0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d03a:	7d18      	ldrb	r0, [r3, #20]
 800d03c:	2801      	cmp	r0, #1
 800d03e:	d9f6      	bls.n	800d02e <etharp_output+0x72>
 800d040:	689a      	ldr	r2, [r3, #8]
 800d042:	42a2      	cmp	r2, r4
 800d044:	d1f3      	bne.n	800d02e <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	6829      	ldr	r1, [r5, #0]
 800d04a:	4291      	cmp	r1, r2
 800d04c:	d1ef      	bne.n	800d02e <etharp_output+0x72>
 800d04e:	fa5f f28c 	uxtb.w	r2, ip
        return etharp_output_to_arp_index(netif, q, i);
 800d052:	4631      	mov	r1, r6
 800d054:	4620      	mov	r0, r4
        ETHARP_SET_ADDRHINT(netif, i);
 800d056:	703a      	strb	r2, [r7, #0]
}
 800d058:	b005      	add	sp, #20
 800d05a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800d05e:	f7ff bd6f 	b.w	800cb40 <etharp_output_to_arp_index>
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d062:	786b      	ldrb	r3, [r5, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d064:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d066:	215e      	movs	r1, #94	@ 0x5e
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d06c:	f8ad 2008 	strh.w	r2, [sp, #8]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d070:	78ea      	ldrb	r2, [r5, #3]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d072:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d076:	78ab      	ldrb	r3, [r5, #2]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d078:	f88d 100a 	strb.w	r1, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d07c:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800d080:	ab02      	add	r3, sp, #8
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d082:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d086:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800d08a:	f104 0226 	add.w	r2, r4, #38	@ 0x26
 800d08e:	4631      	mov	r1, r6
 800d090:	4620      	mov	r0, r4
 800d092:	9500      	str	r5, [sp, #0]
 800d094:	f000 ffe6 	bl	800e064 <ethernet_output>
}
 800d098:	b005      	add	sp, #20
 800d09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800d09c:	4632      	mov	r2, r6
 800d09e:	4629      	mov	r1, r5
 800d0a0:	4620      	mov	r0, r4
}
 800d0a2:	b005      	add	sp, #20
 800d0a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800d0a8:	f7ff bec0 	b.w	800ce2c <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800d0ac:	4b15      	ldr	r3, [pc, #84]	@ (800d104 <etharp_output+0x148>)
 800d0ae:	e7ea      	b.n	800d086 <etharp_output+0xca>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d0b0:	4b15      	ldr	r3, [pc, #84]	@ (800d108 <etharp_output+0x14c>)
 800d0b2:	f240 321f 	movw	r2, #799	@ 0x31f
 800d0b6:	4915      	ldr	r1, [pc, #84]	@ (800d10c <etharp_output+0x150>)
 800d0b8:	4815      	ldr	r0, [pc, #84]	@ (800d110 <etharp_output+0x154>)
 800d0ba:	f001 f997 	bl	800e3ec <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	d18a      	bne.n	800cfd8 <etharp_output+0x1c>
 800d0c2:	4b11      	ldr	r3, [pc, #68]	@ (800d108 <etharp_output+0x14c>)
 800d0c4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800d0c8:	4912      	ldr	r1, [pc, #72]	@ (800d114 <etharp_output+0x158>)
 800d0ca:	4811      	ldr	r0, [pc, #68]	@ (800d110 <etharp_output+0x154>)
 800d0cc:	f001 f98e 	bl	800e3ec <iprintf>
 800d0d0:	e782      	b.n	800cfd8 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d0d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d108 <etharp_output+0x14c>)
 800d0d4:	f240 321e 	movw	r2, #798	@ 0x31e
 800d0d8:	490f      	ldr	r1, [pc, #60]	@ (800d118 <etharp_output+0x15c>)
 800d0da:	480d      	ldr	r0, [pc, #52]	@ (800d110 <etharp_output+0x154>)
 800d0dc:	f001 f986 	bl	800e3ec <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d0e0:	2e00      	cmp	r6, #0
 800d0e2:	f47f af77 	bne.w	800cfd4 <etharp_output+0x18>
 800d0e6:	e7e3      	b.n	800d0b0 <etharp_output+0xf4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	6829      	ldr	r1, [r5, #0]
 800d0ec:	4299      	cmp	r1, r3
 800d0ee:	d19a      	bne.n	800d026 <etharp_output+0x6a>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	e7b0      	b.n	800d058 <etharp_output+0x9c>
            return ERR_RTE;
 800d0f6:	f06f 0003 	mvn.w	r0, #3
 800d0fa:	e7cd      	b.n	800d098 <etharp_output+0xdc>
 800d0fc:	240105ac 	.word	0x240105ac
 800d100:	240105b0 	.word	0x240105b0
 800d104:	08011bbc 	.word	0x08011bbc
 800d108:	08010f18 	.word	0x08010f18
 800d10c:	080110ac 	.word	0x080110ac
 800d110:	0800f2f8 	.word	0x0800f2f8
 800d114:	0801103c 	.word	0x0801103c
 800d118:	0800f474 	.word	0x0800f474

0800d11c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d11c:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d11e:	2301      	movs	r3, #1
{
 800d120:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d122:	4c07      	ldr	r4, [pc, #28]	@ (800d140 <etharp_request+0x24>)
 800d124:	4a07      	ldr	r2, [pc, #28]	@ (800d144 <etharp_request+0x28>)
 800d126:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d128:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d12a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800d12e:	f100 0326 	add.w	r3, r0, #38	@ 0x26
 800d132:	9400      	str	r4, [sp, #0]
 800d134:	4619      	mov	r1, r3
 800d136:	f7ff fc93 	bl	800ca60 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800d13a:	b004      	add	sp, #16
 800d13c:	bd10      	pop	{r4, pc}
 800d13e:	bf00      	nop
 800d140:	08011bb4 	.word	0x08011bb4
 800d144:	08011bbc 	.word	0x08011bbc

0800d148 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d14a:	460f      	mov	r7, r1
 800d14c:	b087      	sub	sp, #28
 800d14e:	4616      	mov	r6, r2
 800d150:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d152:	2124      	movs	r1, #36	@ 0x24
 800d154:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d158:	2022      	movs	r0, #34	@ 0x22
 800d15a:	f7fa fd11 	bl	8007b80 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800d15e:	b390      	cbz	r0, 800d1c6 <icmp_send_response+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d160:	8943      	ldrh	r3, [r0, #10]
 800d162:	4605      	mov	r5, r0
 800d164:	2b23      	cmp	r3, #35	@ 0x23
 800d166:	d930      	bls.n	800d1ca <icmp_send_response+0x82>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d168:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d16a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800d16c:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800d16e:	2700      	movs	r7, #0
  icmphdr->code = code;
 800d170:	7066      	strb	r6, [r4, #1]
  icmphdr->id = 0;
 800d172:	6067      	str	r7, [r4, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d174:	6818      	ldr	r0, [r3, #0]
 800d176:	6859      	ldr	r1, [r3, #4]
 800d178:	689a      	ldr	r2, [r3, #8]
 800d17a:	68de      	ldr	r6, [r3, #12]
 800d17c:	60a0      	str	r0, [r4, #8]
 800d17e:	6166      	str	r6, [r4, #20]
 800d180:	60e1      	str	r1, [r4, #12]
 800d182:	6122      	str	r2, [r4, #16]
 800d184:	6918      	ldr	r0, [r3, #16]
 800d186:	6959      	ldr	r1, [r3, #20]
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d18c:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d18e:	61e1      	str	r1, [r4, #28]
 800d190:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800d196:	f000 f8d7 	bl	800d348 <ip4_route>
#endif
  if (netif != NULL) {
 800d19a:	4606      	mov	r6, r0
 800d19c:	b180      	cbz	r0, 800d1c0 <icmp_send_response+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d19e:	8969      	ldrh	r1, [r5, #10]
 800d1a0:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800d1a2:	70a7      	strb	r7, [r4, #2]
 800d1a4:	70e7      	strb	r7, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d1a6:	f7f9 fdcb 	bl	8006d40 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d1aa:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d1ac:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d1ae:	aa05      	add	r2, sp, #20
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	4628      	mov	r0, r5
 800d1b4:	9700      	str	r7, [sp, #0]
 800d1b6:	e9cd 3601 	strd	r3, r6, [sp, #4]
 800d1ba:	23ff      	movs	r3, #255	@ 0xff
 800d1bc:	f000 fa5a 	bl	800d674 <ip4_output_if>
  }
  pbuf_free(q);
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	f7fa fc6d 	bl	8007aa0 <pbuf_free>
}
 800d1c6:	b007      	add	sp, #28
 800d1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d1ca:	4b04      	ldr	r3, [pc, #16]	@ (800d1dc <icmp_send_response+0x94>)
 800d1cc:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800d1d0:	4903      	ldr	r1, [pc, #12]	@ (800d1e0 <icmp_send_response+0x98>)
 800d1d2:	4804      	ldr	r0, [pc, #16]	@ (800d1e4 <icmp_send_response+0x9c>)
 800d1d4:	f001 f90a 	bl	800e3ec <iprintf>
 800d1d8:	e7c6      	b.n	800d168 <icmp_send_response+0x20>
 800d1da:	bf00      	nop
 800d1dc:	080110b8 	.word	0x080110b8
 800d1e0:	080110f0 	.word	0x080110f0
 800d1e4:	0800f2f8 	.word	0x0800f2f8

0800d1e8 <icmp_input>:
{
 800d1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800d1ec:	4f4c      	ldr	r7, [pc, #304]	@ (800d320 <icmp_input+0x138>)
{
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800d1f2:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800d1f6:	f898 4000 	ldrb.w	r4, [r8]
 800d1fa:	f004 040f 	and.w	r4, r4, #15
 800d1fe:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800d200:	2c13      	cmp	r4, #19
 800d202:	d913      	bls.n	800d22c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800d204:	8943      	ldrh	r3, [r0, #10]
 800d206:	2b03      	cmp	r3, #3
 800d208:	d910      	bls.n	800d22c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800d20a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b08      	cmp	r3, #8
 800d210:	d10c      	bne.n	800d22c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d212:	6978      	ldr	r0, [r7, #20]
 800d214:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800d218:	2be0      	cmp	r3, #224	@ 0xe0
 800d21a:	d007      	beq.n	800d22c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d21c:	460e      	mov	r6, r1
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	f000 fa3a 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d224:	b910      	cbnz	r0, 800d22c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d226:	892b      	ldrh	r3, [r5, #8]
 800d228:	2b07      	cmp	r3, #7
 800d22a:	d805      	bhi.n	800d238 <icmp_input+0x50>
  pbuf_free(p);
 800d22c:	4628      	mov	r0, r5
}
 800d22e:	b005      	add	sp, #20
 800d230:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800d234:	f7fa bc34 	b.w	8007aa0 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800d238:	4628      	mov	r0, r5
 800d23a:	f7f9 fd87 	bl	8006d4c <inet_chksum_pbuf>
 800d23e:	2800      	cmp	r0, #0
 800d240:	d1f4      	bne.n	800d22c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d242:	f104 090e 	add.w	r9, r4, #14
 800d246:	4628      	mov	r0, r5
 800d248:	4649      	mov	r1, r9
 800d24a:	f7fa fb97 	bl	800797c <pbuf_add_header>
 800d24e:	2800      	cmp	r0, #0
 800d250:	d04b      	beq.n	800d2ea <icmp_input+0x102>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d252:	892b      	ldrh	r3, [r5, #8]
 800d254:	18e1      	adds	r1, r4, r3
 800d256:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800d258:	428b      	cmp	r3, r1
 800d25a:	d8e7      	bhi.n	800d22c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d25c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d260:	200e      	movs	r0, #14
 800d262:	f7fa fc8d 	bl	8007b80 <pbuf_alloc>
        if (r == NULL) {
 800d266:	4681      	mov	r9, r0
 800d268:	2800      	cmp	r0, #0
 800d26a:	d0df      	beq.n	800d22c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d26c:	8942      	ldrh	r2, [r0, #10]
 800d26e:	f104 0308 	add.w	r3, r4, #8
 800d272:	429a      	cmp	r2, r3
 800d274:	d346      	bcc.n	800d304 <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800d276:	4641      	mov	r1, r8
 800d278:	4622      	mov	r2, r4
 800d27a:	6840      	ldr	r0, [r0, #4]
 800d27c:	f001 f966 	bl	800e54c <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800d280:	4621      	mov	r1, r4
 800d282:	4648      	mov	r0, r9
 800d284:	f7fa fbaa 	bl	80079dc <pbuf_remove_header>
 800d288:	2800      	cmp	r0, #0
 800d28a:	d13f      	bne.n	800d30c <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800d28c:	4629      	mov	r1, r5
 800d28e:	4648      	mov	r0, r9
 800d290:	f7fa fde6 	bl	8007e60 <pbuf_copy>
 800d294:	2800      	cmp	r0, #0
 800d296:	d135      	bne.n	800d304 <icmp_input+0x11c>
        pbuf_free(p);
 800d298:	4628      	mov	r0, r5
        p = r;
 800d29a:	464d      	mov	r5, r9
        pbuf_free(p);
 800d29c:	f7fa fc00 	bl	8007aa0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d2a4:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800d2a6:	f7fa fb69 	bl	800797c <pbuf_add_header>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d1be      	bne.n	800d22c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d2ae:	6869      	ldr	r1, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800d2b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d2b4:	610a      	str	r2, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d2b6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800d2ba:	60cb      	str	r3, [r1, #12]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d2bc:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d2be:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d2c0:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d2c2:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800d2c4:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d2c8:	bf8c      	ite	hi
 800d2ca:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d2cc:	3308      	addls	r3, #8
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d2d2:	23ff      	movs	r3, #255	@ 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800d2d4:	728a      	strb	r2, [r1, #10]
 800d2d6:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d2d8:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d2da:	2101      	movs	r1, #1
 800d2dc:	9200      	str	r2, [sp, #0]
 800d2de:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800d2e2:	4910      	ldr	r1, [pc, #64]	@ (800d324 <icmp_input+0x13c>)
 800d2e4:	f000 f9c6 	bl	800d674 <ip4_output_if>
  pbuf_free(p);
 800d2e8:	e7a0      	b.n	800d22c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d2ea:	4649      	mov	r1, r9
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	f7fa fb75 	bl	80079dc <pbuf_remove_header>
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d0d4      	beq.n	800d2a0 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800d328 <icmp_input+0x140>)
 800d2f8:	22c7      	movs	r2, #199	@ 0xc7
 800d2fa:	490c      	ldr	r1, [pc, #48]	@ (800d32c <icmp_input+0x144>)
 800d2fc:	480c      	ldr	r0, [pc, #48]	@ (800d330 <icmp_input+0x148>)
 800d2fe:	f001 f875 	bl	800e3ec <iprintf>
          goto icmperr;
 800d302:	e793      	b.n	800d22c <icmp_input+0x44>
          pbuf_free(r);
 800d304:	4648      	mov	r0, r9
 800d306:	f7fa fbcb 	bl	8007aa0 <pbuf_free>
          goto icmperr;
 800d30a:	e78f      	b.n	800d22c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d30c:	4b06      	ldr	r3, [pc, #24]	@ (800d328 <icmp_input+0x140>)
 800d30e:	22b6      	movs	r2, #182	@ 0xb6
 800d310:	4908      	ldr	r1, [pc, #32]	@ (800d334 <icmp_input+0x14c>)
 800d312:	4807      	ldr	r0, [pc, #28]	@ (800d330 <icmp_input+0x148>)
 800d314:	f001 f86a 	bl	800e3ec <iprintf>
          pbuf_free(r);
 800d318:	4648      	mov	r0, r9
 800d31a:	f7fa fbc1 	bl	8007aa0 <pbuf_free>
          goto icmperr;
 800d31e:	e785      	b.n	800d22c <icmp_input+0x44>
 800d320:	24009a90 	.word	0x24009a90
 800d324:	24009aa4 	.word	0x24009aa4
 800d328:	080110b8 	.word	0x080110b8
 800d32c:	08011154 	.word	0x08011154
 800d330:	0800f2f8 	.word	0x0800f2f8
 800d334:	0801111c 	.word	0x0801111c

0800d338 <icmp_dest_unreach>:
{
 800d338:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800d33a:	2103      	movs	r1, #3
 800d33c:	f7ff bf04 	b.w	800d148 <icmp_send_response>

0800d340 <icmp_time_exceeded>:
{
 800d340:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800d342:	210b      	movs	r1, #11
 800d344:	f7ff bf00 	b.w	800d148 <icmp_send_response>

0800d348 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d348:	b538      	push	{r3, r4, r5, lr}
 800d34a:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800d34c:	f7f6 ffcc 	bl	80042e8 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d350:	4b15      	ldr	r3, [pc, #84]	@ (800d3a8 <ip4_route+0x60>)
 800d352:	6818      	ldr	r0, [r3, #0]
 800d354:	b1a0      	cbz	r0, 800d380 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d356:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800d35a:	07d9      	lsls	r1, r3, #31
 800d35c:	d50d      	bpl.n	800d37a <ip4_route+0x32>
 800d35e:	075a      	lsls	r2, r3, #29
 800d360:	d50b      	bpl.n	800d37a <ip4_route+0x32>
 800d362:	6842      	ldr	r2, [r0, #4]
 800d364:	b14a      	cbz	r2, 800d37a <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d366:	6821      	ldr	r1, [r4, #0]
 800d368:	6885      	ldr	r5, [r0, #8]
 800d36a:	404a      	eors	r2, r1
 800d36c:	422a      	tst	r2, r5
 800d36e:	d016      	beq.n	800d39e <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d370:	079b      	lsls	r3, r3, #30
 800d372:	d402      	bmi.n	800d37a <ip4_route+0x32>
 800d374:	68c3      	ldr	r3, [r0, #12]
 800d376:	4299      	cmp	r1, r3
 800d378:	d011      	beq.n	800d39e <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800d37a:	6800      	ldr	r0, [r0, #0]
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d1ea      	bne.n	800d356 <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d380:	4b0a      	ldr	r3, [pc, #40]	@ (800d3ac <ip4_route+0x64>)
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	b158      	cbz	r0, 800d39e <ip4_route+0x56>
 800d386:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800d38a:	f003 0305 	and.w	r3, r3, #5
 800d38e:	2b05      	cmp	r3, #5
 800d390:	d106      	bne.n	800d3a0 <ip4_route+0x58>
 800d392:	6843      	ldr	r3, [r0, #4]
 800d394:	b133      	cbz	r3, 800d3a4 <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d396:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d398:	2b7f      	cmp	r3, #127	@ 0x7f
 800d39a:	bf08      	it	eq
 800d39c:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800d39e:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d3a0:	2000      	movs	r0, #0
}
 800d3a2:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d3a4:	4618      	mov	r0, r3
}
 800d3a6:	bd38      	pop	{r3, r4, r5, pc}
 800d3a8:	24010548 	.word	0x24010548
 800d3ac:	24010544 	.word	0x24010544

0800d3b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800d3b8:	f7f6 ff96 	bl	80042e8 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d3bc:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800d3be:	783b      	ldrb	r3, [r7, #0]
 800d3c0:	091a      	lsrs	r2, r3, #4
 800d3c2:	2a04      	cmp	r2, #4
 800d3c4:	d171      	bne.n	800d4aa <ip4_input+0xfa>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d3c6:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d3ca:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d3cc:	009d      	lsls	r5, r3, #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d3ce:	f7f9 fc77 	bl	8006cc0 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d3d2:	8923      	ldrh	r3, [r4, #8]
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d3d4:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800d3d6:	4283      	cmp	r3, r0
 800d3d8:	d86d      	bhi.n	800d4b6 <ip4_input+0x106>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d3da:	8963      	ldrh	r3, [r4, #10]
 800d3dc:	42ab      	cmp	r3, r5
 800d3de:	d364      	bcc.n	800d4aa <ip4_input+0xfa>
 800d3e0:	8923      	ldrh	r3, [r4, #8]
 800d3e2:	4543      	cmp	r3, r8
 800d3e4:	d361      	bcc.n	800d4aa <ip4_input+0xfa>
 800d3e6:	2d13      	cmp	r5, #19
 800d3e8:	d95f      	bls.n	800d4aa <ip4_input+0xfa>
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d3ea:	693a      	ldr	r2, [r7, #16]
 800d3ec:	68f8      	ldr	r0, [r7, #12]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d3ee:	f002 01f0 	and.w	r1, r2, #240	@ 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d3f2:	f8df 9174 	ldr.w	r9, [pc, #372]	@ 800d568 <ip4_input+0x1b8>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d3f6:	f896 802d 	ldrb.w	r8, [r6, #45]	@ 0x2d
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d3fa:	29e0      	cmp	r1, #224	@ 0xe0
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d3fc:	f008 0301 	and.w	r3, r8, #1
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d400:	e9c9 0204 	strd	r0, r2, [r9, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d404:	d15c      	bne.n	800d4c0 <ip4_input+0x110>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d406:	2b00      	cmp	r3, #0
 800d408:	d17f      	bne.n	800d50a <ip4_input+0x15a>
      netif = inp;
    } else {
      netif = NULL;
 800d40a:	f04f 0800 	mov.w	r8, #0
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d40e:	4631      	mov	r1, r6
 800d410:	f000 f942 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d414:	2800      	cmp	r0, #0
 800d416:	d148      	bne.n	800d4aa <ip4_input+0xfa>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d418:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d41c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d420:	2be0      	cmp	r3, #224	@ 0xe0
 800d422:	d042      	beq.n	800d4aa <ip4_input+0xfa>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d424:	f1b8 0f00 	cmp.w	r8, #0
 800d428:	d03f      	beq.n	800d4aa <ip4_input+0xfa>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d42a:	88fb      	ldrh	r3, [r7, #6]
 800d42c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d430:	b12b      	cbz	r3, 800d43e <ip4_input+0x8e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fa7e 	bl	800d934 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d438:	4604      	mov	r4, r0
 800d43a:	b3c8      	cbz	r0, 800d4b0 <ip4_input+0x100>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d43c:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800d43e:	f8c9 7008 	str.w	r7, [r9, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d442:	4629      	mov	r1, r5
 800d444:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800d446:	e9c9 8600 	strd	r8, r6, [r9]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d44a:	783b      	ldrb	r3, [r7, #0]
 800d44c:	f003 030f 	and.w	r3, r3, #15
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	f8a9 300c 	strh.w	r3, [r9, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d456:	f7fa fac1 	bl	80079dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d45a:	7a7b      	ldrb	r3, [r7, #9]
 800d45c:	2b06      	cmp	r3, #6
 800d45e:	d072      	beq.n	800d546 <ip4_input+0x196>
 800d460:	2b11      	cmp	r3, #17
 800d462:	d066      	beq.n	800d532 <ip4_input+0x182>
 800d464:	2b01      	cmp	r3, #1
 800d466:	d069      	beq.n	800d53c <ip4_input+0x18c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d468:	4641      	mov	r1, r8
 800d46a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800d46e:	f000 f913 	bl	800d698 <ip4_addr_isbroadcast_u32>
 800d472:	b968      	cbnz	r0, 800d490 <ip4_input+0xe0>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d474:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800d478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d47c:	2be0      	cmp	r3, #224	@ 0xe0
 800d47e:	d007      	beq.n	800d490 <ip4_input+0xe0>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d480:	4629      	mov	r1, r5
 800d482:	4620      	mov	r0, r4
 800d484:	f7fa fad8 	bl	8007a38 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d488:	2102      	movs	r1, #2
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7ff ff54 	bl	800d338 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d490:	4620      	mov	r0, r4
 800d492:	f7fa fb05 	bl	8007aa0 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d496:	2300      	movs	r3, #0
 800d498:	e9c9 3300 	strd	r3, r3, [r9]
  ip_data.current_input_netif = NULL;
  ip_data.current_ip4_header = NULL;
 800d49c:	f8c9 3008 	str.w	r3, [r9, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d4a0:	f8a9 300c 	strh.w	r3, [r9, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d4a4:	e9c9 3304 	strd	r3, r3, [r9, #16]
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
 800d4a8:	e002      	b.n	800d4b0 <ip4_input+0x100>
    pbuf_free(p);
 800d4aa:	4620      	mov	r0, r4
 800d4ac:	f7fa faf8 	bl	8007aa0 <pbuf_free>
}
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f7fa fc09 	bl	8007cd0 <pbuf_realloc>
 800d4be:	e78c      	b.n	800d3da <ip4_input+0x2a>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d4c0:	bb53      	cbnz	r3, 800d518 <ip4_input+0x168>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d4c2:	b2d2      	uxtb	r2, r2
 800d4c4:	2a7f      	cmp	r2, #127	@ 0x7f
 800d4c6:	d043      	beq.n	800d550 <ip4_input+0x1a0>
        NETIF_FOREACH(netif) {
 800d4c8:	4b26      	ldr	r3, [pc, #152]	@ (800d564 <ip4_input+0x1b4>)
 800d4ca:	f8d3 8000 	ldr.w	r8, [r3]
 800d4ce:	f1b8 0f00 	cmp.w	r8, #0
 800d4d2:	d108      	bne.n	800d4e6 <ip4_input+0x136>
 800d4d4:	e03c      	b.n	800d550 <ip4_input+0x1a0>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d4d6:	f000 f8df 	bl	800d698 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4da:	b998      	cbnz	r0, 800d504 <ip4_input+0x154>
        NETIF_FOREACH(netif) {
 800d4dc:	f8d8 8000 	ldr.w	r8, [r8]
 800d4e0:	f1b8 0f00 	cmp.w	r8, #0
 800d4e4:	d00e      	beq.n	800d504 <ip4_input+0x154>
          if (netif == inp) {
 800d4e6:	4546      	cmp	r6, r8
 800d4e8:	d0f8      	beq.n	800d4dc <ip4_input+0x12c>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d4ea:	f898 302d 	ldrb.w	r3, [r8, #45]	@ 0x2d
 800d4ee:	07db      	lsls	r3, r3, #31
 800d4f0:	d5f4      	bpl.n	800d4dc <ip4_input+0x12c>
 800d4f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d0f0      	beq.n	800d4dc <ip4_input+0x12c>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d4fa:	f8d9 0014 	ldr.w	r0, [r9, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d4fe:	4641      	mov	r1, r8
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d500:	4283      	cmp	r3, r0
 800d502:	d1e8      	bne.n	800d4d6 <ip4_input+0x126>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d504:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d508:	e781      	b.n	800d40e <ip4_input+0x5e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d50a:	6873      	ldr	r3, [r6, #4]
      netif = inp;
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bf14      	ite	ne
 800d510:	46b0      	movne	r8, r6
 800d512:	f04f 0800 	moveq.w	r8, #0
 800d516:	e77a      	b.n	800d40e <ip4_input+0x5e>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d518:	6873      	ldr	r3, [r6, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d0d1      	beq.n	800d4c2 <ip4_input+0x112>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d51e:	429a      	cmp	r2, r3
 800d520:	d019      	beq.n	800d556 <ip4_input+0x1a6>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d522:	4610      	mov	r0, r2
 800d524:	4631      	mov	r1, r6
 800d526:	f000 f8b7 	bl	800d698 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d52a:	b9b0      	cbnz	r0, 800d55a <ip4_input+0x1aa>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d52c:	f8d9 2014 	ldr.w	r2, [r9, #20]
 800d530:	e7c7      	b.n	800d4c2 <ip4_input+0x112>
        udp_input(p, inp);
 800d532:	4631      	mov	r1, r6
 800d534:	4620      	mov	r0, r4
 800d536:	f7ff f8a7 	bl	800c688 <udp_input>
        break;
 800d53a:	e7ac      	b.n	800d496 <ip4_input+0xe6>
        icmp_input(p, inp);
 800d53c:	4631      	mov	r1, r6
 800d53e:	4620      	mov	r0, r4
 800d540:	f7ff fe52 	bl	800d1e8 <icmp_input>
        break;
 800d544:	e7a7      	b.n	800d496 <ip4_input+0xe6>
        tcp_input(p, inp);
 800d546:	4631      	mov	r1, r6
 800d548:	4620      	mov	r0, r4
 800d54a:	f7fc ff1f 	bl	800a38c <tcp_input>
        break;
 800d54e:	e7a2      	b.n	800d496 <ip4_input+0xe6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d550:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d554:	e759      	b.n	800d40a <ip4_input+0x5a>
      netif = inp;
 800d556:	46b0      	mov	r8, r6
 800d558:	e759      	b.n	800d40e <ip4_input+0x5e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d55a:	f8d9 0010 	ldr.w	r0, [r9, #16]
      netif = inp;
 800d55e:	46b0      	mov	r8, r6
 800d560:	e755      	b.n	800d40e <ip4_input+0x5e>
 800d562:	bf00      	nop
 800d564:	24010548 	.word	0x24010548
 800d568:	24009a90 	.word	0x24009a90

0800d56c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d570:	4604      	mov	r4, r0
 800d572:	b083      	sub	sp, #12
 800d574:	4699      	mov	r9, r3
 800d576:	460f      	mov	r7, r1
 800d578:	4616      	mov	r6, r2
 800d57a:	f89d a030 	ldrb.w	sl, [sp, #48]	@ 0x30
 800d57e:	f89d b034 	ldrb.w	fp, [sp, #52]	@ 0x34
 800d582:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800d586:	f7f6 feaf 	bl	80042e8 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d58a:	7ba3      	ldrb	r3, [r4, #14]
 800d58c:	2b01      	cmp	r3, #1
 800d58e:	d13d      	bne.n	800d60c <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d590:	2e00      	cmp	r6, #0
 800d592:	d044      	beq.n	800d61e <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d594:	2114      	movs	r1, #20
 800d596:	4620      	mov	r0, r4
 800d598:	f7fa f9f0 	bl	800797c <pbuf_add_header>
 800d59c:	2800      	cmp	r0, #0
 800d59e:	d159      	bne.n	800d654 <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d5a0:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800d5a2:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d5a4:	2b13      	cmp	r3, #19
 800d5a6:	d942      	bls.n	800d62e <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d5a8:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d5ac:	2245      	movs	r2, #69	@ 0x45
    IPH_PROTO_SET(iphdr, proto);
 800d5ae:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800d5b2:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d5b4:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800d5b6:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800d5ba:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d5bc:	8920      	ldrh	r0, [r4, #8]
 800d5be:	f7f9 fb7f 	bl	8006cc0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5c2:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800d670 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800d5c6:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d5c8:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5ca:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800d5ce:	71ab      	strb	r3, [r5, #6]
 800d5d0:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5d2:	f7f9 fb75 	bl	8006cc0 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d5d6:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d5da:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800d5dc:	3301      	adds	r3, #1
 800d5de:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800d5e2:	b367      	cbz	r7, 800d63e <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	72ab      	strb	r3, [r5, #10]
 800d5ec:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d5ee:	f8b8 3024 	ldrh.w	r3, [r8, #36]	@ 0x24
 800d5f2:	b113      	cbz	r3, 800d5fa <ip4_output_if_src+0x8e>
 800d5f4:	8922      	ldrh	r2, [r4, #8]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d824      	bhi.n	800d644 <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d5fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d5fe:	4632      	mov	r2, r6
 800d600:	4621      	mov	r1, r4
 800d602:	4640      	mov	r0, r8
 800d604:	4798      	blx	r3
}
 800d606:	b003      	add	sp, #12
 800d608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d60c:	4b13      	ldr	r3, [pc, #76]	@ (800d65c <ip4_output_if_src+0xf0>)
 800d60e:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800d612:	4913      	ldr	r1, [pc, #76]	@ (800d660 <ip4_output_if_src+0xf4>)
 800d614:	4813      	ldr	r0, [pc, #76]	@ (800d664 <ip4_output_if_src+0xf8>)
 800d616:	f000 fee9 	bl	800e3ec <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800d61a:	2e00      	cmp	r6, #0
 800d61c:	d1ba      	bne.n	800d594 <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800d61e:	8963      	ldrh	r3, [r4, #10]
 800d620:	2b13      	cmp	r3, #19
 800d622:	d917      	bls.n	800d654 <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d624:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800d626:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800d62c:	e7df      	b.n	800d5ee <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d62e:	4b0b      	ldr	r3, [pc, #44]	@ (800d65c <ip4_output_if_src+0xf0>)
 800d630:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d634:	490c      	ldr	r1, [pc, #48]	@ (800d668 <ip4_output_if_src+0xfc>)
 800d636:	480b      	ldr	r0, [pc, #44]	@ (800d664 <ip4_output_if_src+0xf8>)
 800d638:	f000 fed8 	bl	800e3ec <iprintf>
 800d63c:	e7b4      	b.n	800d5a8 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d63e:	4b0b      	ldr	r3, [pc, #44]	@ (800d66c <ip4_output_if_src+0x100>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	e7d0      	b.n	800d5e6 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800d644:	4632      	mov	r2, r6
 800d646:	4641      	mov	r1, r8
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fbaf 	bl	800ddac <ip4_frag>
}
 800d64e:	b003      	add	sp, #12
 800d650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800d654:	f06f 0001 	mvn.w	r0, #1
 800d658:	e7d5      	b.n	800d606 <ip4_output_if_src+0x9a>
 800d65a:	bf00      	nop
 800d65c:	08011188 	.word	0x08011188
 800d660:	080111bc 	.word	0x080111bc
 800d664:	0800f2f8 	.word	0x0800f2f8
 800d668:	080111c8 	.word	0x080111c8
 800d66c:	08011bb0 	.word	0x08011bb0
 800d670:	240106a0 	.word	0x240106a0

0800d674 <ip4_output_if>:
{
 800d674:	b4f0      	push	{r4, r5, r6, r7}
 800d676:	9c06      	ldr	r4, [sp, #24]
 800d678:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800d67c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d680:	b11a      	cbz	r2, 800d68a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800d682:	b109      	cbz	r1, 800d688 <ip4_output_if+0x14>
 800d684:	680f      	ldr	r7, [r1, #0]
 800d686:	b907      	cbnz	r7, 800d68a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800d688:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d68a:	9504      	str	r5, [sp, #16]
 800d68c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800d690:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d692:	f7ff bf6b 	b.w	800d56c <ip4_output_if_src>
 800d696:	bf00      	nop

0800d698 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d698:	1e42      	subs	r2, r0, #1
{
 800d69a:	4603      	mov	r3, r0
  if ((~addr == IPADDR_ANY) ||
 800d69c:	3203      	adds	r2, #3
 800d69e:	d815      	bhi.n	800d6cc <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d6a0:	f891 002d 	ldrb.w	r0, [r1, #45]	@ 0x2d
 800d6a4:	f010 0002 	ands.w	r0, r0, #2
 800d6a8:	d00f      	beq.n	800d6ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d6aa:	684a      	ldr	r2, [r1, #4]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d00b      	beq.n	800d6c8 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d6b0:	6889      	ldr	r1, [r1, #8]
 800d6b2:	405a      	eors	r2, r3
 800d6b4:	420a      	tst	r2, r1
 800d6b6:	d107      	bne.n	800d6c8 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d6b8:	43c8      	mvns	r0, r1
 800d6ba:	ea23 0301 	bic.w	r3, r3, r1
 800d6be:	1a18      	subs	r0, r3, r0
 800d6c0:	fab0 f080 	clz	r0, r0
 800d6c4:	0940      	lsrs	r0, r0, #5
 800d6c6:	4770      	bx	lr
    return 0;
 800d6c8:	2000      	movs	r0, #0
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
  }
}
 800d6ca:	4770      	bx	lr
    return 1;
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	4770      	bx	lr

0800d6d0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d6d0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d6d2:	4604      	mov	r4, r0
 800d6d4:	b148      	cbz	r0, 800d6ea <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800d6d6:	6960      	ldr	r0, [r4, #20]
 800d6d8:	b108      	cbz	r0, 800d6de <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800d6da:	f7fa f9e1 	bl	8007aa0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800d6de:	4621      	mov	r1, r4
 800d6e0:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800d6e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800d6e6:	f7f9 bed1 	b.w	800748c <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d6ea:	4b04      	ldr	r3, [pc, #16]	@ (800d6fc <ipfrag_free_pbuf_custom+0x2c>)
 800d6ec:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d6f0:	4903      	ldr	r1, [pc, #12]	@ (800d700 <ipfrag_free_pbuf_custom+0x30>)
 800d6f2:	4804      	ldr	r0, [pc, #16]	@ (800d704 <ipfrag_free_pbuf_custom+0x34>)
 800d6f4:	f000 fe7a 	bl	800e3ec <iprintf>
 800d6f8:	e7ed      	b.n	800d6d6 <ipfrag_free_pbuf_custom+0x6>
 800d6fa:	bf00      	nop
 800d6fc:	080111f8 	.word	0x080111f8
 800d700:	08011234 	.word	0x08011234
 800d704:	0800f2f8 	.word	0x0800f2f8

0800d708 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d708:	4281      	cmp	r1, r0
{
 800d70a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70e:	4607      	mov	r7, r0
 800d710:	4688      	mov	r8, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d712:	d078      	beq.n	800d806 <ip_reass_free_complete_datagram+0xfe>
  if (prev != NULL) {
 800d714:	f1b8 0f00 	cmp.w	r8, #0
 800d718:	d009      	beq.n	800d72e <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d71a:	f8d8 3000 	ldr.w	r3, [r8]
 800d71e:	42bb      	cmp	r3, r7
 800d720:	d005      	beq.n	800d72e <ip_reass_free_complete_datagram+0x26>
 800d722:	4b40      	ldr	r3, [pc, #256]	@ (800d824 <ip_reass_free_complete_datagram+0x11c>)
 800d724:	22ad      	movs	r2, #173	@ 0xad
 800d726:	4940      	ldr	r1, [pc, #256]	@ (800d828 <ip_reass_free_complete_datagram+0x120>)
 800d728:	4840      	ldr	r0, [pc, #256]	@ (800d82c <ip_reass_free_complete_datagram+0x124>)
 800d72a:	f000 fe5f 	bl	800e3ec <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d72e:	687d      	ldr	r5, [r7, #4]
 800d730:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800d732:	889a      	ldrh	r2, [r3, #4]
 800d734:	2a00      	cmp	r2, #0
 800d736:	d045      	beq.n	800d7c4 <ip_reass_free_complete_datagram+0xbc>
  u16_t pbufs_freed = 0;
 800d738:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d73a:	f8df b0e8 	ldr.w	fp, [pc, #232]	@ 800d824 <ip_reass_free_complete_datagram+0x11c>
 800d73e:	f8df a104 	ldr.w	sl, [pc, #260]	@ 800d844 <ip_reass_free_complete_datagram+0x13c>
 800d742:	f8df 90e8 	ldr.w	r9, [pc, #232]	@ 800d82c <ip_reass_free_complete_datagram+0x124>
 800d746:	e004      	b.n	800d752 <ip_reass_free_complete_datagram+0x4a>
    pbuf_free(pcur);
 800d748:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d74a:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800d74c:	f7fa f9a8 	bl	8007aa0 <pbuf_free>
  while (p != NULL) {
 800d750:	b1ad      	cbz	r5, 800d77e <ip_reass_free_complete_datagram+0x76>
    iprh = (struct ip_reass_helper *)p->payload;
 800d752:	686b      	ldr	r3, [r5, #4]
    clen = pbuf_clen(pcur);
 800d754:	4628      	mov	r0, r5
 800d756:	462e      	mov	r6, r5
    p = iprh->next_pbuf;
 800d758:	681d      	ldr	r5, [r3, #0]
    clen = pbuf_clen(pcur);
 800d75a:	f7fa fb15 	bl	8007d88 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d75e:	4404      	add	r4, r0
 800d760:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800d764:	dbf0      	blt.n	800d748 <ip_reass_free_complete_datagram+0x40>
 800d766:	465b      	mov	r3, fp
 800d768:	22cc      	movs	r2, #204	@ 0xcc
 800d76a:	4651      	mov	r1, sl
 800d76c:	4648      	mov	r0, r9
 800d76e:	f000 fe3d 	bl	800e3ec <iprintf>
    pbuf_free(pcur);
 800d772:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d774:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 800d776:	f7fa f993 	bl	8007aa0 <pbuf_free>
  while (p != NULL) {
 800d77a:	2d00      	cmp	r5, #0
 800d77c:	d1e9      	bne.n	800d752 <ip_reass_free_complete_datagram+0x4a>
  if (reassdatagrams == ipr) {
 800d77e:	4b2c      	ldr	r3, [pc, #176]	@ (800d830 <ip_reass_free_complete_datagram+0x128>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	4297      	cmp	r7, r2
 800d784:	d03c      	beq.n	800d800 <ip_reass_free_complete_datagram+0xf8>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d786:	f1b8 0f00 	cmp.w	r8, #0
 800d78a:	d043      	beq.n	800d814 <ip_reass_free_complete_datagram+0x10c>
    prev->next = ipr->next;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	f8c8 3000 	str.w	r3, [r8]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d792:	4d28      	ldr	r5, [pc, #160]	@ (800d834 <ip_reass_free_complete_datagram+0x12c>)
  memp_free(MEMP_REASSDATA, ipr);
 800d794:	4639      	mov	r1, r7
 800d796:	2004      	movs	r0, #4
 800d798:	f7f9 fe78 	bl	800748c <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d79c:	882b      	ldrh	r3, [r5, #0]
 800d79e:	42a3      	cmp	r3, r4
 800d7a0:	d304      	bcc.n	800d7ac <ip_reass_free_complete_datagram+0xa4>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d7a2:	1b1b      	subs	r3, r3, r4
}
 800d7a4:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d7a6:	802b      	strh	r3, [r5, #0]
}
 800d7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d824 <ip_reass_free_complete_datagram+0x11c>)
 800d7ae:	22d2      	movs	r2, #210	@ 0xd2
 800d7b0:	4921      	ldr	r1, [pc, #132]	@ (800d838 <ip_reass_free_complete_datagram+0x130>)
 800d7b2:	481e      	ldr	r0, [pc, #120]	@ (800d82c <ip_reass_free_complete_datagram+0x124>)
 800d7b4:	f000 fe1a 	bl	800e3ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d7b8:	882b      	ldrh	r3, [r5, #0]
}
 800d7ba:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d7bc:	1b1b      	subs	r3, r3, r4
 800d7be:	802b      	strh	r3, [r5, #0]
}
 800d7c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800d7c4:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7c6:	68fc      	ldr	r4, [r7, #12]
 800d7c8:	6938      	ldr	r0, [r7, #16]
 800d7ca:	6979      	ldr	r1, [r7, #20]
    ipr->p = iprh->next_pbuf;
 800d7cc:	607a      	str	r2, [r7, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	605c      	str	r4, [r3, #4]
 800d7d2:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d7d4:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7d6:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d7d8:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7da:	601a      	str	r2, [r3, #0]
 800d7dc:	69ba      	ldr	r2, [r7, #24]
 800d7de:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d7e0:	f7ff fdae 	bl	800d340 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	f7fa facf 	bl	8007d88 <pbuf_clen>
 800d7ea:	4604      	mov	r4, r0
    pbuf_free(p);
 800d7ec:	4628      	mov	r0, r5
 800d7ee:	f7fa f957 	bl	8007aa0 <pbuf_free>
  p = ipr->p;
 800d7f2:	687d      	ldr	r5, [r7, #4]
  while (p != NULL) {
 800d7f4:	2d00      	cmp	r5, #0
 800d7f6:	d1a0      	bne.n	800d73a <ip_reass_free_complete_datagram+0x32>
  if (reassdatagrams == ipr) {
 800d7f8:	4b0d      	ldr	r3, [pc, #52]	@ (800d830 <ip_reass_free_complete_datagram+0x128>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4297      	cmp	r7, r2
 800d7fe:	d1c2      	bne.n	800d786 <ip_reass_free_complete_datagram+0x7e>
    reassdatagrams = ipr->next;
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	e7c5      	b.n	800d792 <ip_reass_free_complete_datagram+0x8a>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d806:	4b07      	ldr	r3, [pc, #28]	@ (800d824 <ip_reass_free_complete_datagram+0x11c>)
 800d808:	22ab      	movs	r2, #171	@ 0xab
 800d80a:	490c      	ldr	r1, [pc, #48]	@ (800d83c <ip_reass_free_complete_datagram+0x134>)
 800d80c:	4807      	ldr	r0, [pc, #28]	@ (800d82c <ip_reass_free_complete_datagram+0x124>)
 800d80e:	f000 fded 	bl	800e3ec <iprintf>
 800d812:	e77f      	b.n	800d714 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d814:	4b03      	ldr	r3, [pc, #12]	@ (800d824 <ip_reass_free_complete_datagram+0x11c>)
 800d816:	f240 1245 	movw	r2, #325	@ 0x145
 800d81a:	4909      	ldr	r1, [pc, #36]	@ (800d840 <ip_reass_free_complete_datagram+0x138>)
 800d81c:	4803      	ldr	r0, [pc, #12]	@ (800d82c <ip_reass_free_complete_datagram+0x124>)
 800d81e:	f000 fde5 	bl	800e3ec <iprintf>
 800d822:	e7b3      	b.n	800d78c <ip_reass_free_complete_datagram+0x84>
 800d824:	080111f8 	.word	0x080111f8
 800d828:	0801124c 	.word	0x0801124c
 800d82c:	0800f2f8 	.word	0x0800f2f8
 800d830:	240106a4 	.word	0x240106a4
 800d834:	240106a2 	.word	0x240106a2
 800d838:	0801129c 	.word	0x0801129c
 800d83c:	08011240 	.word	0x08011240
 800d840:	08011280 	.word	0x08011280
 800d844:	08011260 	.word	0x08011260

0800d848 <ip_reass_remove_oldest_datagram>:
{
 800d848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800d84c:	2600      	movs	r6, #0
 800d84e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800d900 <ip_reass_remove_oldest_datagram+0xb8>
{
 800d852:	4605      	mov	r5, r0
 800d854:	468b      	mov	fp, r1
    r = reassdatagrams;
 800d856:	f8d8 0000 	ldr.w	r0, [r8]
    while (r != NULL) {
 800d85a:	2800      	cmp	r0, #0
 800d85c:	d047      	beq.n	800d8ee <ip_reass_remove_oldest_datagram+0xa6>
    other_datagrams = 0;
 800d85e:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d860:	f8d5 c00c 	ldr.w	ip, [r5, #12]
    oldest_prev = NULL;
 800d864:	46a6      	mov	lr, r4
    prev = NULL;
 800d866:	4621      	mov	r1, r4
    oldest = NULL;
 800d868:	4622      	mov	r2, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d86a:	6943      	ldr	r3, [r0, #20]
 800d86c:	4563      	cmp	r3, ip
 800d86e:	d01f      	beq.n	800d8b0 <ip_reass_remove_oldest_datagram+0x68>
        other_datagrams++;
 800d870:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d872:	b38a      	cbz	r2, 800d8d8 <ip_reass_remove_oldest_datagram+0x90>
 800d874:	f892 901f 	ldrb.w	r9, [r2, #31]
        } else if (r->timer <= oldest->timer) {
 800d878:	f890 a01f 	ldrb.w	sl, [r0, #31]
      if (r->next != NULL) {
 800d87c:	6803      	ldr	r3, [r0, #0]
        } else if (r->timer <= oldest->timer) {
 800d87e:	45ca      	cmp	sl, r9
 800d880:	d90b      	bls.n	800d89a <ip_reass_remove_oldest_datagram+0x52>
      if (r->next != NULL) {
 800d882:	b37b      	cbz	r3, 800d8e4 <ip_reass_remove_oldest_datagram+0x9c>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d884:	6959      	ldr	r1, [r3, #20]
 800d886:	458c      	cmp	ip, r1
 800d888:	d010      	beq.n	800d8ac <ip_reass_remove_oldest_datagram+0x64>
          oldest = r;
 800d88a:	4601      	mov	r1, r0
 800d88c:	4618      	mov	r0, r3
        other_datagrams++;
 800d88e:	3401      	adds	r4, #1
        } else if (r->timer <= oldest->timer) {
 800d890:	f890 a01f 	ldrb.w	sl, [r0, #31]
      if (r->next != NULL) {
 800d894:	6803      	ldr	r3, [r0, #0]
        } else if (r->timer <= oldest->timer) {
 800d896:	45ca      	cmp	sl, r9
 800d898:	d8f3      	bhi.n	800d882 <ip_reass_remove_oldest_datagram+0x3a>
          oldest_prev = prev;
 800d89a:	468e      	mov	lr, r1
          oldest = r;
 800d89c:	4602      	mov	r2, r0
 800d89e:	46d1      	mov	r9, sl
      if (r->next != NULL) {
 800d8a0:	b353      	cbz	r3, 800d8f8 <ip_reass_remove_oldest_datagram+0xb0>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d8a2:	695f      	ldr	r7, [r3, #20]
 800d8a4:	45bc      	cmp	ip, r7
 800d8a6:	d1f0      	bne.n	800d88a <ip_reass_remove_oldest_datagram+0x42>
          oldest_prev = prev;
 800d8a8:	468e      	mov	lr, r1
          oldest = r;
 800d8aa:	4602      	mov	r2, r0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d8ac:	4601      	mov	r1, r0
      if (r->next != NULL) {
 800d8ae:	4618      	mov	r0, r3
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d8b0:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d8b4:	6983      	ldr	r3, [r0, #24]
 800d8b6:	454b      	cmp	r3, r9
 800d8b8:	d1da      	bne.n	800d870 <ip_reass_remove_oldest_datagram+0x28>
 800d8ba:	f8b0 900c 	ldrh.w	r9, [r0, #12]
 800d8be:	88ab      	ldrh	r3, [r5, #4]
 800d8c0:	4599      	cmp	r9, r3
 800d8c2:	d1d5      	bne.n	800d870 <ip_reass_remove_oldest_datagram+0x28>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	4671      	mov	r1, lr
 800d8c8:	4610      	mov	r0, r2
      if (r->next != NULL) {
 800d8ca:	681f      	ldr	r7, [r3, #0]
 800d8cc:	468e      	mov	lr, r1
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	b147      	cbz	r7, 800d8e4 <ip_reass_remove_oldest_datagram+0x9c>
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4638      	mov	r0, r7
 800d8d6:	e7c8      	b.n	800d86a <ip_reass_remove_oldest_datagram+0x22>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	468e      	mov	lr, r1
 800d8dc:	4602      	mov	r2, r0
 800d8de:	681f      	ldr	r7, [r3, #0]
 800d8e0:	2f00      	cmp	r7, #0
 800d8e2:	d1f6      	bne.n	800d8d2 <ip_reass_remove_oldest_datagram+0x8a>
    if (oldest != NULL) {
 800d8e4:	b932      	cbnz	r2, 800d8f4 <ip_reass_remove_oldest_datagram+0xac>
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d8e6:	455e      	cmp	r6, fp
 800d8e8:	da01      	bge.n	800d8ee <ip_reass_remove_oldest_datagram+0xa6>
 800d8ea:	2c01      	cmp	r4, #1
 800d8ec:	dcb3      	bgt.n	800d856 <ip_reass_remove_oldest_datagram+0xe>
}
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	4671      	mov	r1, lr
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d8f8:	f7ff ff06 	bl	800d708 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d8fc:	4406      	add	r6, r0
 800d8fe:	e7f2      	b.n	800d8e6 <ip_reass_remove_oldest_datagram+0x9e>
 800d900:	240106a4 	.word	0x240106a4

0800d904 <ip_reass_tmr>:
{
 800d904:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d906:	4b0a      	ldr	r3, [pc, #40]	@ (800d930 <ip_reass_tmr+0x2c>)
 800d908:	681c      	ldr	r4, [r3, #0]
  while (r != NULL) {
 800d90a:	b14c      	cbz	r4, 800d920 <ip_reass_tmr+0x1c>
  struct ip_reassdata *r, *prev = NULL;
 800d90c:	2500      	movs	r5, #0
    if (r->timer > 0) {
 800d90e:	7fe3      	ldrb	r3, [r4, #31]
 800d910:	4620      	mov	r0, r4
      r = r->next;
 800d912:	6824      	ldr	r4, [r4, #0]
      r->timer--;
 800d914:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800d916:	b123      	cbz	r3, 800d922 <ip_reass_tmr+0x1e>
      prev = r;
 800d918:	4605      	mov	r5, r0
      r->timer--;
 800d91a:	77c2      	strb	r2, [r0, #31]
  while (r != NULL) {
 800d91c:	2c00      	cmp	r4, #0
 800d91e:	d1f6      	bne.n	800d90e <ip_reass_tmr+0xa>
}
 800d920:	bd38      	pop	{r3, r4, r5, pc}
      ip_reass_free_complete_datagram(tmp, prev);
 800d922:	4629      	mov	r1, r5
 800d924:	f7ff fef0 	bl	800d708 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d928:	2c00      	cmp	r4, #0
 800d92a:	d1f0      	bne.n	800d90e <ip_reass_tmr+0xa>
 800d92c:	e7f8      	b.n	800d920 <ip_reass_tmr+0x1c>
 800d92e:	bf00      	nop
 800d930:	240106a4 	.word	0x240106a4

0800d934 <ip4_reass>:
{
 800d934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800d938:	6847      	ldr	r7, [r0, #4]
{
 800d93a:	b085      	sub	sp, #20
 800d93c:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d93e:	783b      	ldrb	r3, [r7, #0]
 800d940:	f003 030f 	and.w	r3, r3, #15
 800d944:	2b05      	cmp	r3, #5
 800d946:	f040 80b5 	bne.w	800dab4 <ip4_reass+0x180>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d94a:	88f8      	ldrh	r0, [r7, #6]
 800d94c:	f7f9 f9b8 	bl	8006cc0 <lwip_htons>
 800d950:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d952:	8878      	ldrh	r0, [r7, #2]
 800d954:	f7f9 f9b4 	bl	8006cc0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d958:	783b      	ldrb	r3, [r7, #0]
 800d95a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d95e:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d962:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800d966:	f0c0 80a5 	bcc.w	800dab4 <ip4_reass+0x180>
  len = (u16_t)(len - hlen);
 800d96a:	1a83      	subs	r3, r0, r2
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d96c:	f8df 9434 	ldr.w	r9, [pc, #1076]	@ 800dda4 <ip4_reass+0x470>
  clen = pbuf_clen(p);
 800d970:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800d972:	b29b      	uxth	r3, r3
 800d974:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800d976:	f7fa fa07 	bl	8007d88 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d97a:	f8b9 3000 	ldrh.w	r3, [r9]
  clen = pbuf_clen(p);
 800d97e:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d980:	4403      	add	r3, r0
 800d982:	2b0a      	cmp	r3, #10
 800d984:	f300 80b1 	bgt.w	800daea <ip4_reass+0x1b6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d988:	f8df a41c 	ldr.w	sl, [pc, #1052]	@ 800dda8 <ip4_reass+0x474>
 800d98c:	f8da 4000 	ldr.w	r4, [sl]
 800d990:	2c00      	cmp	r4, #0
 800d992:	f000 80b7 	beq.w	800db04 <ip4_reass+0x1d0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d996:	68fa      	ldr	r2, [r7, #12]
 800d998:	e003      	b.n	800d9a2 <ip4_reass+0x6e>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d99a:	6824      	ldr	r4, [r4, #0]
 800d99c:	2c00      	cmp	r4, #0
 800d99e:	f000 80b1 	beq.w	800db04 <ip4_reass+0x1d0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d9a2:	6963      	ldr	r3, [r4, #20]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d1f8      	bne.n	800d99a <ip4_reass+0x66>
 800d9a8:	693b      	ldr	r3, [r7, #16]
 800d9aa:	69a1      	ldr	r1, [r4, #24]
 800d9ac:	4299      	cmp	r1, r3
 800d9ae:	d1f4      	bne.n	800d99a <ip4_reass+0x66>
 800d9b0:	89a1      	ldrh	r1, [r4, #12]
 800d9b2:	88bb      	ldrh	r3, [r7, #4]
 800d9b4:	4299      	cmp	r1, r3
 800d9b6:	d1f0      	bne.n	800d99a <ip4_reass+0x66>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d9b8:	88f8      	ldrh	r0, [r7, #6]
 800d9ba:	f7f9 f981 	bl	8006cc0 <lwip_htons>
 800d9be:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	d07e      	beq.n	800dac4 <ip4_reass+0x190>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d9c6:	88fb      	ldrh	r3, [r7, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d9c8:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800d9cc:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d9d0:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800d9d4:	9302      	str	r3, [sp, #8]
 800d9d6:	d10a      	bne.n	800d9ee <ip4_reass+0xba>
    u16_t datagram_len = (u16_t)(offset + len);
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	18f3      	adds	r3, r6, r3
 800d9dc:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d9de:	429e      	cmp	r6, r3
 800d9e0:	f200 80a6 	bhi.w	800db30 <ip4_reass+0x1fc>
 800d9e4:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d9e8:	4293      	cmp	r3, r2
 800d9ea:	f200 80a1 	bhi.w	800db30 <ip4_reass+0x1fc>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d9ee:	686f      	ldr	r7, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d9f0:	8878      	ldrh	r0, [r7, #2]
 800d9f2:	f7f9 f965 	bl	8006cc0 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d9f6:	783b      	ldrb	r3, [r7, #0]
 800d9f8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d9fc:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800da00:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800da04:	f0c0 8094 	bcc.w	800db30 <ip4_reass+0x1fc>
  len = (u16_t)(len - hlen);
 800da08:	1a83      	subs	r3, r0, r2
  offset = IPH_OFFSET_BYTES(fraghdr);
 800da0a:	88f8      	ldrh	r0, [r7, #6]
  len = (u16_t)(len - hlen);
 800da0c:	b29f      	uxth	r7, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800da0e:	f7f9 f957 	bl	8006cc0 <lwip_htons>
 800da12:	f3c0 010c 	ubfx	r1, r0, #0, #13
 800da16:	00c9      	lsls	r1, r1, #3
  iprh->end = (u16_t)(offset + len);
 800da18:	187b      	adds	r3, r7, r1
  iprh = (struct ip_reass_helper *)new_p->payload;
 800da1a:	686f      	ldr	r7, [r5, #4]
  iprh->end = (u16_t)(offset + len);
 800da1c:	80fb      	strh	r3, [r7, #6]
 800da1e:	b29b      	uxth	r3, r3
  iprh->start = offset;
 800da20:	80b9      	strh	r1, [r7, #4]
  iprh->end = (u16_t)(offset + len);
 800da22:	461a      	mov	r2, r3
 800da24:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800da26:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800da28:	4291      	cmp	r1, r2
  iprh->next_pbuf = NULL;
 800da2a:	703b      	strb	r3, [r7, #0]
 800da2c:	707b      	strb	r3, [r7, #1]
 800da2e:	70bb      	strb	r3, [r7, #2]
 800da30:	70fb      	strb	r3, [r7, #3]
  if (iprh->end < offset) {
 800da32:	d87d      	bhi.n	800db30 <ip4_reass+0x1fc>
  for (q = ipr->p; q != NULL;) {
 800da34:	6862      	ldr	r2, [r4, #4]
 800da36:	2a00      	cmp	r2, #0
 800da38:	f000 80f9 	beq.w	800dc2e <ip4_reass+0x2fa>
  int valid = 1;
 800da3c:	f04f 0b01 	mov.w	fp, #1
 800da40:	468c      	mov	ip, r1
 800da42:	e00e      	b.n	800da62 <ip4_reass+0x12e>
    } else if (iprh->start == iprh_tmp->start) {
 800da44:	d036      	beq.n	800dab4 <ip4_reass+0x180>
    } else if (iprh->start < iprh_tmp->end) {
 800da46:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800da4a:	45f4      	cmp	ip, lr
 800da4c:	d332      	bcc.n	800dab4 <ip4_reass+0x180>
      if (iprh_prev != NULL) {
 800da4e:	b121      	cbz	r1, 800da5a <ip4_reass+0x126>
        if (iprh_prev->end != iprh_tmp->start) {
 800da50:	88ca      	ldrh	r2, [r1, #6]
          valid = 0;
 800da52:	4282      	cmp	r2, r0
 800da54:	bf18      	it	ne
 800da56:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 800da5a:	681a      	ldr	r2, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	f000 80c4 	beq.w	800dbea <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800da62:	4619      	mov	r1, r3
 800da64:	6853      	ldr	r3, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 800da66:	8898      	ldrh	r0, [r3, #4]
 800da68:	4584      	cmp	ip, r0
 800da6a:	d2eb      	bcs.n	800da44 <ip4_reass+0x110>
      iprh->next_pbuf = q;
 800da6c:	460b      	mov	r3, r1
 800da6e:	603a      	str	r2, [r7, #0]
 800da70:	4661      	mov	r1, ip
 800da72:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800da74:	2b00      	cmp	r3, #0
 800da76:	d077      	beq.n	800db68 <ip4_reass+0x234>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800da78:	9a03      	ldr	r2, [sp, #12]
 800da7a:	88db      	ldrh	r3, [r3, #6]
 800da7c:	4282      	cmp	r2, r0
 800da7e:	d819      	bhi.n	800dab4 <ip4_reass+0x180>
 800da80:	4299      	cmp	r1, r3
 800da82:	d317      	bcc.n	800dab4 <ip4_reass+0x180>
        iprh_prev->next_pbuf = new_p;
 800da84:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800da88:	d072      	beq.n	800db70 <ip4_reass+0x23c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800da8a:	f8b9 3000 	ldrh.w	r3, [r9]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da8e:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800da90:	4443      	add	r3, r8
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da92:	7fa2      	ldrb	r2, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800da94:	b29b      	uxth	r3, r3
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da96:	2900      	cmp	r1, #0
 800da98:	f000 80b3 	beq.w	800dc02 <ip4_reass+0x2ce>
 800da9c:	07d1      	lsls	r1, r2, #31
 800da9e:	d46c      	bmi.n	800db7a <ip4_reass+0x246>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800daa0:	f8a9 3000 	strh.w	r3, [r9]
  if (is_last) {
 800daa4:	e009      	b.n	800daba <ip4_reass+0x186>
    reassdatagrams = ipr->next;
 800daa6:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800daa8:	4621      	mov	r1, r4
 800daaa:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800daac:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800dab0:	f7f9 fcec 	bl	800748c <memp_free>
  pbuf_free(p);
 800dab4:	4628      	mov	r0, r5
 800dab6:	f7f9 fff3 	bl	8007aa0 <pbuf_free>
  return NULL;
 800daba:	2600      	movs	r6, #0
}
 800dabc:	4630      	mov	r0, r6
 800dabe:	b005      	add	sp, #20
 800dac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dac4:	89e0      	ldrh	r0, [r4, #14]
 800dac6:	f7f9 f8fb 	bl	8006cc0 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800daca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800dace:	2800      	cmp	r0, #0
 800dad0:	f43f af79 	beq.w	800d9c6 <ip4_reass+0x92>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	68b9      	ldr	r1, [r7, #8]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	60a3      	str	r3, [r4, #8]
 800dade:	60e0      	str	r0, [r4, #12]
 800dae0:	6121      	str	r1, [r4, #16]
 800dae2:	6162      	str	r2, [r4, #20]
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	61a3      	str	r3, [r4, #24]
 800dae8:	e76d      	b.n	800d9c6 <ip4_reass+0x92>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800daea:	4601      	mov	r1, r0
 800daec:	4638      	mov	r0, r7
 800daee:	f7ff feab 	bl	800d848 <ip_reass_remove_oldest_datagram>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0de      	beq.n	800dab4 <ip4_reass+0x180>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800daf6:	f8b9 3000 	ldrh.w	r3, [r9]
 800dafa:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dafc:	2b0a      	cmp	r3, #10
 800dafe:	f77f af43 	ble.w	800d988 <ip4_reass+0x54>
 800db02:	e7d7      	b.n	800dab4 <ip4_reass+0x180>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db04:	2004      	movs	r0, #4
 800db06:	f7f9 fc7b 	bl	8007400 <memp_malloc>
  if (ipr == NULL) {
 800db0a:	4604      	mov	r4, r0
 800db0c:	2800      	cmp	r0, #0
 800db0e:	d05e      	beq.n	800dbce <ip4_reass+0x29a>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800db10:	2300      	movs	r3, #0
 800db12:	61e3      	str	r3, [r4, #28]
 800db14:	60a3      	str	r3, [r4, #8]
 800db16:	60e3      	str	r3, [r4, #12]
 800db18:	6123      	str	r3, [r4, #16]
 800db1a:	6163      	str	r3, [r4, #20]
 800db1c:	61a3      	str	r3, [r4, #24]
 800db1e:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800db20:	f8da 3000 	ldr.w	r3, [sl]
  reassdatagrams = ipr;
 800db24:	f8ca 4000 	str.w	r4, [sl]
  ipr->next = reassdatagrams;
 800db28:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800db2a:	230f      	movs	r3, #15
 800db2c:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800db2e:	e7d1      	b.n	800dad4 <ip4_reass+0x1a0>
  if (ipr->p == NULL) {
 800db30:	6866      	ldr	r6, [r4, #4]
 800db32:	2e00      	cmp	r6, #0
 800db34:	d1be      	bne.n	800dab4 <ip4_reass+0x180>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800db36:	f8da 3000 	ldr.w	r3, [sl]
 800db3a:	42a3      	cmp	r3, r4
 800db3c:	d0b3      	beq.n	800daa6 <ip4_reass+0x172>
 800db3e:	4b92      	ldr	r3, [pc, #584]	@ (800dd88 <ip4_reass+0x454>)
 800db40:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800db44:	4991      	ldr	r1, [pc, #580]	@ (800dd8c <ip4_reass+0x458>)
 800db46:	4892      	ldr	r0, [pc, #584]	@ (800dd90 <ip4_reass+0x45c>)
 800db48:	f000 fc50 	bl	800e3ec <iprintf>
  if (reassdatagrams == ipr) {
 800db4c:	f8da 3000 	ldr.w	r3, [sl]
 800db50:	429c      	cmp	r4, r3
 800db52:	d0a8      	beq.n	800daa6 <ip4_reass+0x172>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800db54:	4b8c      	ldr	r3, [pc, #560]	@ (800dd88 <ip4_reass+0x454>)
 800db56:	f240 1245 	movw	r2, #325	@ 0x145
 800db5a:	498e      	ldr	r1, [pc, #568]	@ (800dd94 <ip4_reass+0x460>)
 800db5c:	488c      	ldr	r0, [pc, #560]	@ (800dd90 <ip4_reass+0x45c>)
 800db5e:	f000 fc45 	bl	800e3ec <iprintf>
    prev->next = ipr->next;
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	6033      	str	r3, [r6, #0]
 800db66:	deff      	udf	#255	@ 0xff
        if (iprh->end > iprh_tmp->start) {
 800db68:	9b03      	ldr	r3, [sp, #12]
 800db6a:	4283      	cmp	r3, r0
 800db6c:	d8a2      	bhi.n	800dab4 <ip4_reass+0x180>
        ipr->p = new_p;
 800db6e:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800db70:	9b02      	ldr	r3, [sp, #8]
 800db72:	b133      	cbz	r3, 800db82 <ip4_reass+0x24e>
 800db74:	7fa3      	ldrb	r3, [r4, #30]
 800db76:	07db      	lsls	r3, r3, #31
 800db78:	d44c      	bmi.n	800dc14 <ip4_reass+0x2e0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800db7a:	f8b9 3000 	ldrh.w	r3, [r9]
 800db7e:	4443      	add	r3, r8
 800db80:	e78e      	b.n	800daa0 <ip4_reass+0x16c>
    if (valid) {
 800db82:	f1bb 0f00 	cmp.w	fp, #0
 800db86:	d04c      	beq.n	800dc22 <ip4_reass+0x2ee>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800db88:	6862      	ldr	r2, [r4, #4]
 800db8a:	2a00      	cmp	r2, #0
 800db8c:	d057      	beq.n	800dc3e <ip4_reass+0x30a>
 800db8e:	6851      	ldr	r1, [r2, #4]
 800db90:	888b      	ldrh	r3, [r1, #4]
 800db92:	b95b      	cbnz	r3, 800dbac <ip4_reass+0x278>
        q = iprh->next_pbuf;
 800db94:	683b      	ldr	r3, [r7, #0]
        while (q != NULL) {
 800db96:	b91b      	cbnz	r3, 800dba0 <ip4_reass+0x26c>
 800db98:	e0e1      	b.n	800dd5e <ip4_reass+0x42a>
          q = iprh->next_pbuf;
 800db9a:	683b      	ldr	r3, [r7, #0]
        while (q != NULL) {
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d05b      	beq.n	800dc58 <ip4_reass+0x324>
          iprh = (struct ip_reass_helper *)q->payload;
 800dba0:	463a      	mov	r2, r7
 800dba2:	685f      	ldr	r7, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800dba4:	88d2      	ldrh	r2, [r2, #6]
 800dba6:	88bb      	ldrh	r3, [r7, #4]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d0f6      	beq.n	800db9a <ip4_reass+0x266>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dbac:	f8b9 3000 	ldrh.w	r3, [r9]
 800dbb0:	4443      	add	r3, r8
 800dbb2:	f8a9 3000 	strh.w	r3, [r9]
  if (is_last) {
 800dbb6:	9b02      	ldr	r3, [sp, #8]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f47f af7e 	bne.w	800daba <ip4_reass+0x186>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dbbe:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800dbc0:	9a01      	ldr	r2, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dbc2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800dbc6:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dbc8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800dbca:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dbcc:	e775      	b.n	800daba <ip4_reass+0x186>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dbce:	4641      	mov	r1, r8
 800dbd0:	4638      	mov	r0, r7
 800dbd2:	f7ff fe39 	bl	800d848 <ip_reass_remove_oldest_datagram>
 800dbd6:	4580      	cmp	r8, r0
 800dbd8:	f73f af6c 	bgt.w	800dab4 <ip4_reass+0x180>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dbdc:	2004      	movs	r0, #4
 800dbde:	f7f9 fc0f 	bl	8007400 <memp_malloc>
    if (ipr == NULL)
 800dbe2:	4604      	mov	r4, r0
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d193      	bne.n	800db10 <ip4_reass+0x1dc>
 800dbe8:	e764      	b.n	800dab4 <ip4_reass+0x180>
      if (iprh_prev->end != iprh->start) {
 800dbea:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800dbec:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dbee:	d0bf      	beq.n	800db70 <ip4_reass+0x23c>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dbf0:	f8b9 3000 	ldrh.w	r3, [r9]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbf4:	9902      	ldr	r1, [sp, #8]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dbf6:	4443      	add	r3, r8
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbf8:	7fa2      	ldrb	r2, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dbfa:	b29b      	uxth	r3, r3
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dbfc:	2900      	cmp	r1, #0
 800dbfe:	f47f af4f 	bne.w	800daa0 <ip4_reass+0x16c>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc02:	9901      	ldr	r1, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc04:	f042 0201 	orr.w	r2, r2, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc08:	f8a9 3000 	strh.w	r3, [r9]
    u16_t datagram_len = (u16_t)(offset + len);
 800dc0c:	440e      	add	r6, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc0e:	77a2      	strb	r2, [r4, #30]
    ipr->datagram_len = datagram_len;
 800dc10:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dc12:	e752      	b.n	800daba <ip4_reass+0x186>
    if (valid) {
 800dc14:	f1bb 0f00 	cmp.w	fp, #0
 800dc18:	d0af      	beq.n	800db7a <ip4_reass+0x246>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dc1a:	6862      	ldr	r2, [r4, #4]
 800dc1c:	2a00      	cmp	r2, #0
 800dc1e:	d1b6      	bne.n	800db8e <ip4_reass+0x25a>
 800dc20:	e7ab      	b.n	800db7a <ip4_reass+0x246>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc22:	f8b9 3000 	ldrh.w	r3, [r9]
 800dc26:	7fa2      	ldrb	r2, [r4, #30]
 800dc28:	4443      	add	r3, r8
 800dc2a:	b29b      	uxth	r3, r3
  if (is_last) {
 800dc2c:	e7e9      	b.n	800dc02 <ip4_reass+0x2ce>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dc2e:	9b02      	ldr	r3, [sp, #8]
      ipr->p = new_p;
 800dc30:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d0a8      	beq.n	800db88 <ip4_reass+0x254>
 800dc36:	7fa3      	ldrb	r3, [r4, #30]
 800dc38:	07da      	lsls	r2, r3, #31
 800dc3a:	d59e      	bpl.n	800db7a <ip4_reass+0x246>
 800dc3c:	e7ed      	b.n	800dc1a <ip4_reass+0x2e6>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc3e:	9b01      	ldr	r3, [sp, #4]
 800dc40:	441e      	add	r6, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc42:	7fa3      	ldrb	r3, [r4, #30]
 800dc44:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800dc48:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dc4a:	77a3      	strb	r3, [r4, #30]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc4c:	f8b9 3000 	ldrh.w	r3, [r9]
 800dc50:	4443      	add	r3, r8
 800dc52:	f8a9 3000 	strh.w	r3, [r9]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dc56:	e730      	b.n	800daba <ip4_reass+0x186>
          LWIP_ASSERT("sanity check",
 800dc58:	42b9      	cmp	r1, r7
 800dc5a:	f000 8082 	beq.w	800dd62 <ip4_reass+0x42e>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d05f      	beq.n	800dd24 <ip4_reass+0x3f0>
 800dc64:	4b48      	ldr	r3, [pc, #288]	@ (800dd88 <ip4_reass+0x454>)
 800dc66:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800dc6a:	494b      	ldr	r1, [pc, #300]	@ (800dd98 <ip4_reass+0x464>)
 800dc6c:	4848      	ldr	r0, [pc, #288]	@ (800dd90 <ip4_reass+0x45c>)
 800dc6e:	f000 fbbd 	bl	800e3ec <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dc72:	f8b9 3000 	ldrh.w	r3, [r9]
 800dc76:	4443      	add	r3, r8
 800dc78:	f8a9 3000 	strh.w	r3, [r9]
  if (is_last) {
 800dc7c:	9b02      	ldr	r3, [sp, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d061      	beq.n	800dd46 <ip4_reass+0x412>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dc82:	8ba0      	ldrh	r0, [r4, #28]
 800dc84:	6862      	ldr	r2, [r4, #4]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dc86:	6856      	ldr	r6, [r2, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dc88:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	68e5      	ldr	r5, [r4, #12]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dc8e:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dc90:	6921      	ldr	r1, [r4, #16]
 800dc92:	6962      	ldr	r2, [r4, #20]
 800dc94:	6075      	str	r5, [r6, #4]
 800dc96:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dc98:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dc9a:	60f2      	str	r2, [r6, #12]
 800dc9c:	6033      	str	r3, [r6, #0]
 800dc9e:	69a3      	ldr	r3, [r4, #24]
 800dca0:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dca2:	f7f9 f80d 	bl	8006cc0 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800dca6:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dca8:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dcaa:	71b3      	strb	r3, [r6, #6]
 800dcac:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dcae:	72b3      	strb	r3, [r6, #10]
 800dcb0:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800dcb2:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800dcb4:	b15d      	cbz	r5, 800dcce <ip4_reass+0x39a>
      pbuf_remove_header(r, IP_HLEN);
 800dcb6:	2114      	movs	r1, #20
 800dcb8:	4628      	mov	r0, r5
      iprh = (struct ip_reass_helper *)r->payload;
 800dcba:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800dcbc:	f7f9 fe8e 	bl	80079dc <pbuf_remove_header>
      pbuf_cat(p, r);
 800dcc0:	4629      	mov	r1, r5
 800dcc2:	4630      	mov	r0, r6
 800dcc4:	f7fa f888 	bl	8007dd8 <pbuf_cat>
      r = iprh->next_pbuf;
 800dcc8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800dcca:	2d00      	cmp	r5, #0
 800dccc:	d1f3      	bne.n	800dcb6 <ip4_reass+0x382>
    if (ipr == reassdatagrams) {
 800dcce:	f8da 5000 	ldr.w	r5, [sl]
 800dcd2:	42a5      	cmp	r5, r4
 800dcd4:	d006      	beq.n	800dce4 <ip4_reass+0x3b0>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	d04b      	beq.n	800dd72 <ip4_reass+0x43e>
        if (ipr_prev->next == ipr) {
 800dcda:	682b      	ldr	r3, [r5, #0]
 800dcdc:	42a3      	cmp	r3, r4
 800dcde:	d014      	beq.n	800dd0a <ip4_reass+0x3d6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dce0:	461d      	mov	r5, r3
 800dce2:	e7f8      	b.n	800dcd6 <ip4_reass+0x3a2>
    reassdatagrams = ipr->next;
 800dce4:	6823      	ldr	r3, [r4, #0]
 800dce6:	f8ca 3000 	str.w	r3, [sl]
  memp_free(MEMP_REASSDATA, ipr);
 800dcea:	4621      	mov	r1, r4
 800dcec:	2004      	movs	r0, #4
 800dcee:	f7f9 fbcd 	bl	800748c <memp_free>
    clen = pbuf_clen(p);
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7fa f848 	bl	8007d88 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dcf8:	f8b9 3000 	ldrh.w	r3, [r9]
    clen = pbuf_clen(p);
 800dcfc:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dcfe:	4283      	cmp	r3, r0
 800dd00:	d306      	bcc.n	800dd10 <ip4_reass+0x3dc>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd02:	1b1b      	subs	r3, r3, r4
 800dd04:	f8a9 3000 	strh.w	r3, [r9]
    return p;
 800dd08:	e6d8      	b.n	800dabc <ip4_reass+0x188>
    prev->next = ipr->next;
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	602b      	str	r3, [r5, #0]
 800dd0e:	e7ec      	b.n	800dcea <ip4_reass+0x3b6>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800dd10:	4b1d      	ldr	r3, [pc, #116]	@ (800dd88 <ip4_reass+0x454>)
 800dd12:	f240 229b 	movw	r2, #667	@ 0x29b
 800dd16:	4921      	ldr	r1, [pc, #132]	@ (800dd9c <ip4_reass+0x468>)
 800dd18:	481d      	ldr	r0, [pc, #116]	@ (800dd90 <ip4_reass+0x45c>)
 800dd1a:	f000 fb67 	bl	800e3ec <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dd1e:	f8b9 3000 	ldrh.w	r3, [r9]
 800dd22:	e7ee      	b.n	800dd02 <ip4_reass+0x3ce>
 800dd24:	6862      	ldr	r2, [r4, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dd26:	f8b9 3000 	ldrh.w	r3, [r9]
 800dd2a:	4443      	add	r3, r8
 800dd2c:	f8a9 3000 	strh.w	r3, [r9]
  if (is_last) {
 800dd30:	9b02      	ldr	r3, [sp, #8]
 800dd32:	b993      	cbnz	r3, 800dd5a <ip4_reass+0x426>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd34:	9801      	ldr	r0, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd36:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800dd38:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd3a:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800dd3e:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd40:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800dd42:	83a0      	strh	r0, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dd44:	e79f      	b.n	800dc86 <ip4_reass+0x352>
    u16_t datagram_len = (u16_t)(offset + len);
 800dd46:	9801      	ldr	r0, [sp, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd48:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800dd4a:	4430      	add	r0, r6
 800dd4c:	6862      	ldr	r2, [r4, #4]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd4e:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800dd52:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dd54:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800dd56:	83a0      	strh	r0, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dd58:	e795      	b.n	800dc86 <ip4_reass+0x352>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dd5a:	8ba0      	ldrh	r0, [r4, #28]
 800dd5c:	e793      	b.n	800dc86 <ip4_reass+0x352>
          LWIP_ASSERT("sanity check",
 800dd5e:	428f      	cmp	r7, r1
 800dd60:	d1e1      	bne.n	800dd26 <ip4_reass+0x3f2>
 800dd62:	4b09      	ldr	r3, [pc, #36]	@ (800dd88 <ip4_reass+0x454>)
 800dd64:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dd68:	490d      	ldr	r1, [pc, #52]	@ (800dda0 <ip4_reass+0x46c>)
 800dd6a:	4809      	ldr	r0, [pc, #36]	@ (800dd90 <ip4_reass+0x45c>)
 800dd6c:	f000 fb3e 	bl	800e3ec <iprintf>
 800dd70:	e775      	b.n	800dc5e <ip4_reass+0x32a>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd72:	4b05      	ldr	r3, [pc, #20]	@ (800dd88 <ip4_reass+0x454>)
 800dd74:	f240 1245 	movw	r2, #325	@ 0x145
 800dd78:	4906      	ldr	r1, [pc, #24]	@ (800dd94 <ip4_reass+0x460>)
 800dd7a:	4805      	ldr	r0, [pc, #20]	@ (800dd90 <ip4_reass+0x45c>)
 800dd7c:	f000 fb36 	bl	800e3ec <iprintf>
    prev->next = ipr->next;
 800dd80:	6823      	ldr	r3, [r4, #0]
 800dd82:	602b      	str	r3, [r5, #0]
 800dd84:	deff      	udf	#255	@ 0xff
 800dd86:	bf00      	nop
 800dd88:	080111f8 	.word	0x080111f8
 800dd8c:	08011310 	.word	0x08011310
 800dd90:	0800f2f8 	.word	0x0800f2f8
 800dd94:	08011280 	.word	0x08011280
 800dd98:	080112d0 	.word	0x080112d0
 800dd9c:	080112f4 	.word	0x080112f4
 800dda0:	080112c0 	.word	0x080112c0
 800dda4:	240106a2 	.word	0x240106a2
 800dda8:	240106a4 	.word	0x240106a4

0800ddac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ddac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ddb0:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
{
 800ddb2:	b08d      	sub	sp, #52	@ 0x34
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ddb4:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800ddb8:	4605      	mov	r5, r0
 800ddba:	9106      	str	r1, [sp, #24]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ddbc:	f1b3 0114 	subs.w	r1, r3, #20
{
 800ddc0:	920a      	str	r2, [sp, #40]	@ 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ddc2:	bf48      	it	mi
 800ddc4:	f1a3 010d 	submi.w	r1, r3, #13
 800ddc8:	f3c1 03cf 	ubfx	r3, r1, #3, #16
 800ddcc:	9308      	str	r3, [sp, #32]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ddce:	f89a 3000 	ldrb.w	r3, [sl]
 800ddd2:	f003 030f 	and.w	r3, r3, #15
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800dddc:	f040 80de 	bne.w	800df9c <ip4_frag+0x1f0>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dde0:	8943      	ldrh	r3, [r0, #10]
 800dde2:	2b13      	cmp	r3, #19
 800dde4:	f240 80d3 	bls.w	800df8e <ip4_frag+0x1e2>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dde8:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800ddec:	f7f8 ff68 	bl	8006cc0 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ddf0:	8929      	ldrh	r1, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800ddf2:	f3c0 030c 	ubfx	r3, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800ddf6:	3914      	subs	r1, #20
  ofo = tmp & IP_OFFMASK;
 800ddf8:	9305      	str	r3, [sp, #20]
  mf_set = tmp & IP_MF;
 800ddfa:	f400 5300 	and.w	r3, r0, #8192	@ 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800ddfe:	b289      	uxth	r1, r1
 800de00:	930b      	str	r3, [sp, #44]	@ 0x2c

  while (left) {
 800de02:	2900      	cmp	r1, #0
 800de04:	f000 80be 	beq.w	800df84 <ip4_frag+0x1d8>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800de08:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800de0a:	2400      	movs	r4, #0

    left_to_copy = fragsize;
    while (left_to_copy) {
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800de0c:	9104      	str	r1, [sp, #16]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	b29b      	uxth	r3, r3
 800de12:	9309      	str	r3, [sp, #36]	@ 0x24
 800de14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800de16:	f44f 7220 	mov.w	r2, #640	@ 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800de1a:	9e04      	ldr	r6, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800de1c:	2114      	movs	r1, #20
 800de1e:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800de20:	42b3      	cmp	r3, r6
 800de22:	bf28      	it	cs
 800de24:	4633      	movcs	r3, r6
 800de26:	4698      	mov	r8, r3
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800de28:	f7f9 feaa 	bl	8007b80 <pbuf_alloc>
    if (rambuf == NULL) {
 800de2c:	4681      	mov	r9, r0
 800de2e:	2800      	cmp	r0, #0
 800de30:	d05d      	beq.n	800deee <ip4_frag+0x142>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800de32:	8943      	ldrh	r3, [r0, #10]
 800de34:	2b13      	cmp	r3, #19
 800de36:	d95f      	bls.n	800def8 <ip4_frag+0x14c>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800de38:	f8da 2000 	ldr.w	r2, [sl]
 800de3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800de40:	f8da 6004 	ldr.w	r6, [sl, #4]
 800de44:	f8da 0008 	ldr.w	r0, [sl, #8]
 800de48:	f8da 100c 	ldr.w	r1, [sl, #12]
 800de4c:	601a      	str	r2, [r3, #0]
 800de4e:	605e      	str	r6, [r3, #4]
 800de50:	6098      	str	r0, [r3, #8]
 800de52:	60d9      	str	r1, [r3, #12]
 800de54:	f8da 2010 	ldr.w	r2, [sl, #16]
 800de58:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800de5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800de5e:	9307      	str	r3, [sp, #28]
    while (left_to_copy) {
 800de60:	f1b8 0f00 	cmp.w	r8, #0
 800de64:	f000 8090 	beq.w	800df88 <ip4_frag+0x1dc>
      u16_t plen = (u16_t)(p->len - poff);
 800de68:	896b      	ldrh	r3, [r5, #10]
 800de6a:	1bdc      	subs	r4, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800de6c:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800de6e:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800de70:	d206      	bcs.n	800de80 <ip4_frag+0xd4>
 800de72:	4b4c      	ldr	r3, [pc, #304]	@ (800dfa4 <ip4_frag+0x1f8>)
 800de74:	f240 322d 	movw	r2, #813	@ 0x32d
 800de78:	494b      	ldr	r1, [pc, #300]	@ (800dfa8 <ip4_frag+0x1fc>)
 800de7a:	484c      	ldr	r0, [pc, #304]	@ (800dfac <ip4_frag+0x200>)
 800de7c:	f000 fab6 	bl	800e3ec <iprintf>
  u16_t newpbuflen = 0;
 800de80:	e9cd 8802 	strd	r8, r8, [sp, #8]
 800de84:	e020      	b.n	800dec8 <ip4_frag+0x11c>
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de86:	9401      	str	r4, [sp, #4]
 800de88:	465b      	mov	r3, fp
 800de8a:	686e      	ldr	r6, [r5, #4]
 800de8c:	eb06 0c07 	add.w	ip, r6, r7
 800de90:	f8cd c000 	str.w	ip, [sp]
 800de94:	f7f9 fd52 	bl	800793c <pbuf_alloced_custom>
 800de98:	4680      	mov	r8, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800de9a:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 800de9c:	f1b8 0f00 	cmp.w	r8, #0
 800dea0:	d032      	beq.n	800df08 <ip4_frag+0x15c>
      pbuf_ref(p);
 800dea2:	f7f9 ff7b 	bl	8007d9c <pbuf_ref>
      pcr->original = p;
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dea6:	4b42      	ldr	r3, [pc, #264]	@ (800dfb0 <ip4_frag+0x204>)

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dea8:	4641      	mov	r1, r8
 800deaa:	4648      	mov	r0, r9
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800deac:	f8cb 3010 	str.w	r3, [fp, #16]
      pcr->original = p;
 800deb0:	f8cb 5014 	str.w	r5, [fp, #20]
      pbuf_cat(rambuf, newpbuf);
 800deb4:	f7f9 ff90 	bl	8007dd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800deb8:	9b02      	ldr	r3, [sp, #8]
 800deba:	1b1e      	subs	r6, r3, r4
 800debc:	b2b3      	uxth	r3, r6
 800debe:	9302      	str	r3, [sp, #8]
      if (left_to_copy) {
 800dec0:	b33b      	cbz	r3, 800df12 <ip4_frag+0x166>
        poff = 0;
        p = p->next;
 800dec2:	682d      	ldr	r5, [r5, #0]
      u16_t plen = (u16_t)(p->len - poff);
 800dec4:	2700      	movs	r7, #0
 800dec6:	896c      	ldrh	r4, [r5, #10]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dec8:	9b02      	ldr	r3, [sp, #8]
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800deca:	2005      	movs	r0, #5
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800decc:	429c      	cmp	r4, r3
 800dece:	bf28      	it	cs
 800ded0:	461c      	movcs	r4, r3
      if (!newpbuflen) {
 800ded2:	2c00      	cmp	r4, #0
 800ded4:	d0f5      	beq.n	800dec2 <ip4_frag+0x116>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ded6:	f7f9 fa93 	bl	8007400 <memp_malloc>
 800deda:	4683      	mov	fp, r0
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dedc:	2241      	movs	r2, #65	@ 0x41
 800dede:	4621      	mov	r1, r4
 800dee0:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800dee2:	f1bb 0f00 	cmp.w	fp, #0
 800dee6:	d1ce      	bne.n	800de86 <ip4_frag+0xda>
        pbuf_free(rambuf);
 800dee8:	4648      	mov	r0, r9
 800deea:	f7f9 fdd9 	bl	8007aa0 <pbuf_free>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800deee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 800def2:	b00d      	add	sp, #52	@ 0x34
 800def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800def8:	4b2a      	ldr	r3, [pc, #168]	@ (800dfa4 <ip4_frag+0x1f8>)
 800defa:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800defe:	492d      	ldr	r1, [pc, #180]	@ (800dfb4 <ip4_frag+0x208>)
 800df00:	482a      	ldr	r0, [pc, #168]	@ (800dfac <ip4_frag+0x200>)
 800df02:	f000 fa73 	bl	800e3ec <iprintf>
 800df06:	e797      	b.n	800de38 <ip4_frag+0x8c>
  memp_free(MEMP_FRAG_PBUF, p);
 800df08:	4659      	mov	r1, fp
 800df0a:	2005      	movs	r0, #5
 800df0c:	f7f9 fabe 	bl	800748c <memp_free>
 800df10:	e7ea      	b.n	800dee8 <ip4_frag+0x13c>
    poff = (u16_t)(poff + newpbuflen);
 800df12:	4427      	add	r7, r4
 800df14:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800df18:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800df1a:	9806      	ldr	r0, [sp, #24]
    if (!last || mf_set) {
 800df1c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    last = (left <= netif->mtu - IP_HLEN);
 800df1e:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
    if (!last || mf_set) {
 800df20:	1e10      	subs	r0, r2, #0
 800df22:	9a04      	ldr	r2, [sp, #16]
    last = (left <= netif->mtu - IP_HLEN);
 800df24:	f1a3 0313 	sub.w	r3, r3, #19
    if (!last || mf_set) {
 800df28:	bf18      	it	ne
 800df2a:	2001      	movne	r0, #1
 800df2c:	4293      	cmp	r3, r2
 800df2e:	bfd8      	it	le
 800df30:	f040 0001 	orrle.w	r0, r0, #1
    tmp = (IP_OFFMASK & (ofo));
 800df34:	9b05      	ldr	r3, [sp, #20]
 800df36:	f3c3 030c 	ubfx	r3, r3, #0, #13
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800df3a:	ea43 3040 	orr.w	r0, r3, r0, lsl #13
 800df3e:	f7f8 febf 	bl	8006cc0 <lwip_htons>
 800df42:	9e07      	ldr	r6, [sp, #28]
 800df44:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800df46:	f108 0014 	add.w	r0, r8, #20
 800df4a:	b280      	uxth	r0, r0
 800df4c:	f7f8 feb8 	bl	8006cc0 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800df50:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800df52:	8070      	strh	r0, [r6, #2]
    netif->output(netif, rambuf, dest);
 800df54:	4649      	mov	r1, r9
 800df56:	9806      	ldr	r0, [sp, #24]
 800df58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    IPH_CHKSUM_SET(iphdr, 0);
 800df5a:	72b3      	strb	r3, [r6, #10]
 800df5c:	72f3      	strb	r3, [r6, #11]
    netif->output(netif, rambuf, dest);
 800df5e:	6943      	ldr	r3, [r0, #20]
 800df60:	4798      	blx	r3
    pbuf_free(rambuf);
 800df62:	4648      	mov	r0, r9
 800df64:	f7f9 fd9c 	bl	8007aa0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800df68:	9a04      	ldr	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800df6a:	9b05      	ldr	r3, [sp, #20]
    left = (u16_t)(left - fragsize);
 800df6c:	eba2 0808 	sub.w	r8, r2, r8
    ofo = (u16_t)(ofo + nfb);
 800df70:	9a08      	ldr	r2, [sp, #32]
 800df72:	18d3      	adds	r3, r2, r3
    left = (u16_t)(left - fragsize);
 800df74:	fa1f f288 	uxth.w	r2, r8
    ofo = (u16_t)(ofo + nfb);
 800df78:	b29b      	uxth	r3, r3
    left = (u16_t)(left - fragsize);
 800df7a:	9204      	str	r2, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800df7c:	9305      	str	r3, [sp, #20]
  while (left) {
 800df7e:	2a00      	cmp	r2, #0
 800df80:	f47f af48 	bne.w	800de14 <ip4_frag+0x68>
  return ERR_OK;
 800df84:	2000      	movs	r0, #0
 800df86:	e7b4      	b.n	800def2 <ip4_frag+0x146>
    poff = (u16_t)(poff + newpbuflen);
 800df88:	4427      	add	r7, r4
 800df8a:	b2bf      	uxth	r7, r7
 800df8c:	e7c5      	b.n	800df1a <ip4_frag+0x16e>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df8e:	4b05      	ldr	r3, [pc, #20]	@ (800dfa4 <ip4_frag+0x1f8>)
 800df90:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800df94:	4908      	ldr	r1, [pc, #32]	@ (800dfb8 <ip4_frag+0x20c>)
 800df96:	4805      	ldr	r0, [pc, #20]	@ (800dfac <ip4_frag+0x200>)
 800df98:	f000 fa28 	bl	800e3ec <iprintf>
    return ERR_VAL;
 800df9c:	f06f 0005 	mvn.w	r0, #5
 800dfa0:	e7a7      	b.n	800def2 <ip4_frag+0x146>
 800dfa2:	bf00      	nop
 800dfa4:	080111f8 	.word	0x080111f8
 800dfa8:	0801136c 	.word	0x0801136c
 800dfac:	0800f2f8 	.word	0x0800f2f8
 800dfb0:	0800d6d1 	.word	0x0800d6d1
 800dfb4:	0801134c 	.word	0x0801134c
 800dfb8:	08011330 	.word	0x08011330

0800dfbc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	4604      	mov	r4, r0
 800dfc0:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800dfc2:	f7f6 f991 	bl	80042e8 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800dfc6:	8963      	ldrh	r3, [r4, #10]
 800dfc8:	2b0e      	cmp	r3, #14
 800dfca:	d91e      	bls.n	800e00a <ethernet_input+0x4e>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dfcc:	7be3      	ldrb	r3, [r4, #15]
 800dfce:	b91b      	cbnz	r3, 800dfd8 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800dfd0:	f895 3030 	ldrb.w	r3, [r5, #48]	@ 0x30
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dfd8:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dfda:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800dfdc:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800dfde:	07d9      	lsls	r1, r3, #31
 800dfe0:	d50a      	bpl.n	800dff8 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d030      	beq.n	800e048 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dfe6:	2206      	movs	r2, #6
 800dfe8:	491d      	ldr	r1, [pc, #116]	@ (800e060 <ethernet_input+0xa4>)
 800dfea:	f000 fa11 	bl	800e410 <memcmp>
 800dfee:	b918      	cbnz	r0, 800dff8 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dff0:	7b63      	ldrb	r3, [r4, #13]
 800dff2:	f043 0308 	orr.w	r3, r3, #8
 800dff6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800dff8:	2e08      	cmp	r6, #8
 800dffa:	d00b      	beq.n	800e014 <ethernet_input+0x58>
 800dffc:	f5b6 6fc1 	cmp.w	r6, #1544	@ 0x608
 800e000:	d103      	bne.n	800e00a <ethernet_input+0x4e>
        ip4_input(p, netif);
      }
      break;

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e002:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800e006:	071b      	lsls	r3, r3, #28
 800e008:	d413      	bmi.n	800e032 <ethernet_input+0x76>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e00a:	4620      	mov	r0, r4
 800e00c:	f7f9 fd48 	bl	8007aa0 <pbuf_free>
  return ERR_OK;
}
 800e010:	2000      	movs	r0, #0
 800e012:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e014:	f895 302d 	ldrb.w	r3, [r5, #45]	@ 0x2d
 800e018:	071a      	lsls	r2, r3, #28
 800e01a:	d5f6      	bpl.n	800e00a <ethernet_input+0x4e>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e01c:	210e      	movs	r1, #14
 800e01e:	4620      	mov	r0, r4
 800e020:	f7f9 fcdc 	bl	80079dc <pbuf_remove_header>
 800e024:	2800      	cmp	r0, #0
 800e026:	d1f0      	bne.n	800e00a <ethernet_input+0x4e>
        ip4_input(p, netif);
 800e028:	4629      	mov	r1, r5
 800e02a:	4620      	mov	r0, r4
 800e02c:	f7ff f9c0 	bl	800d3b0 <ip4_input>
      break;
 800e030:	e7ee      	b.n	800e010 <ethernet_input+0x54>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e032:	210e      	movs	r1, #14
 800e034:	4620      	mov	r0, r4
 800e036:	f7f9 fcd1 	bl	80079dc <pbuf_remove_header>
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d1e5      	bne.n	800e00a <ethernet_input+0x4e>
        etharp_input(p, netif);
 800e03e:	4629      	mov	r1, r5
 800e040:	4620      	mov	r0, r4
 800e042:	f7fe fe4b 	bl	800ccdc <etharp_input>
      break;
 800e046:	e7e3      	b.n	800e010 <ethernet_input+0x54>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e048:	7843      	ldrb	r3, [r0, #1]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d1d4      	bne.n	800dff8 <ethernet_input+0x3c>
 800e04e:	7883      	ldrb	r3, [r0, #2]
 800e050:	2b5e      	cmp	r3, #94	@ 0x5e
 800e052:	d1d1      	bne.n	800dff8 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800e054:	7b63      	ldrb	r3, [r4, #13]
 800e056:	f043 0310 	orr.w	r3, r3, #16
 800e05a:	7363      	strb	r3, [r4, #13]
 800e05c:	e7cc      	b.n	800dff8 <ethernet_input+0x3c>
 800e05e:	bf00      	nop
 800e060:	08011bbc 	.word	0x08011bbc

0800e064 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e068:	460c      	mov	r4, r1
 800e06a:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e06c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800e070:	4616      	mov	r6, r2
 800e072:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800e074:	f7f8 fe24 	bl	8006cc0 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e078:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800e07a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e07c:	4620      	mov	r0, r4
 800e07e:	f7f9 fc7d 	bl	800797c <pbuf_add_header>
 800e082:	b9f0      	cbnz	r0, 800e0c2 <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800e084:	f7f6 f930 	bl	80042e8 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800e088:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800e08a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	600b      	str	r3, [r1, #0]
 800e092:	88bb      	ldrh	r3, [r7, #4]
 800e094:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e096:	6833      	ldr	r3, [r6, #0]
 800e098:	f8c1 3006 	str.w	r3, [r1, #6]
 800e09c:	88b3      	ldrh	r3, [r6, #4]
 800e09e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e0a0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800e0a4:	2b06      	cmp	r3, #6
 800e0a6:	d006      	beq.n	800e0b6 <ethernet_output+0x52>
 800e0a8:	4b08      	ldr	r3, [pc, #32]	@ (800e0cc <ethernet_output+0x68>)
 800e0aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800e0ae:	4908      	ldr	r1, [pc, #32]	@ (800e0d0 <ethernet_output+0x6c>)
 800e0b0:	4808      	ldr	r0, [pc, #32]	@ (800e0d4 <ethernet_output+0x70>)
 800e0b2:	f000 f99b 	bl	800e3ec <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e0b6:	69ab      	ldr	r3, [r5, #24]
 800e0b8:	4621      	mov	r1, r4
 800e0ba:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800e0c0:	4718      	bx	r3
}
 800e0c2:	f06f 0001 	mvn.w	r0, #1
 800e0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0ca:	bf00      	nop
 800e0cc:	0801137c 	.word	0x0801137c
 800e0d0:	080113b4 	.word	0x080113b4
 800e0d4:	0800f2f8 	.word	0x0800f2f8

0800e0d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e0d8:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e0da:	2200      	movs	r2, #0
 800e0dc:	2104      	movs	r1, #4
{
 800e0de:	b510      	push	{r4, lr}
 800e0e0:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7f6 fb18 	bl	8004718 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e0e8:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e0ec:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800e0ee:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e0f0:	4258      	negs	r0, r3
 800e0f2:	bd10      	pop	{r4, pc}

0800e0f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e0f4:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e0f6:	2300      	movs	r3, #0
{
 800e0f8:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e0fa:	6800      	ldr	r0, [r0, #0]
{
 800e0fc:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e0fe:	461a      	mov	r2, r3
 800e100:	a901      	add	r1, sp, #4
 800e102:	f7f6 fb45 	bl	8004790 <osMessageQueuePut>
 800e106:	3800      	subs	r0, #0
 800e108:	bf18      	it	ne
 800e10a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e10c:	4240      	negs	r0, r0
 800e10e:	b003      	add	sp, #12
 800e110:	f85d fb04 	ldr.w	pc, [sp], #4

0800e114 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e116:	4615      	mov	r5, r2
 800e118:	4606      	mov	r6, r0
 800e11a:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800e11c:	f7f6 f958 	bl	80043d0 <osKernelGetTickCount>
 800e120:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800e122:	b14d      	cbz	r5, 800e138 <sys_arch_mbox_fetch+0x24>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800e124:	462b      	mov	r3, r5
 800e126:	2200      	movs	r2, #0
 800e128:	4639      	mov	r1, r7
 800e12a:	6830      	ldr	r0, [r6, #0]
 800e12c:	f7f6 fb6c 	bl	8004808 <osMessageQueueGet>
    if (status == osOK)
 800e130:	b148      	cbz	r0, 800e146 <sys_arch_mbox_fetch+0x32>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800e132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800e138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e13c:	462a      	mov	r2, r5
 800e13e:	4639      	mov	r1, r7
 800e140:	6830      	ldr	r0, [r6, #0]
 800e142:	f7f6 fb61 	bl	8004808 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800e146:	f7f6 f943 	bl	80043d0 <osKernelGetTickCount>
 800e14a:	1b00      	subs	r0, r0, r4
}
 800e14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e14e:	bf00      	nop

0800e150 <sys_mbox_valid>:
  {
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
 800e150:	6800      	ldr	r0, [r0, #0]
 800e152:	3800      	subs	r0, #0
 800e154:	bf18      	it	ne
 800e156:	2001      	movne	r0, #1
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop

0800e15c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e15c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800e15e:	2000      	movs	r0, #0
 800e160:	f7f6 f994 	bl	800448c <osMutexNew>
 800e164:	4b01      	ldr	r3, [pc, #4]	@ (800e16c <sys_init+0x10>)
 800e166:	6018      	str	r0, [r3, #0]
#endif
}
 800e168:	bd08      	pop	{r3, pc}
 800e16a:	bf00      	nop
 800e16c:	240106a8 	.word	0x240106a8

0800e170 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e170:	b510      	push	{r4, lr}
 800e172:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800e174:	2000      	movs	r0, #0
 800e176:	f7f6 f989 	bl	800448c <osMutexNew>
#endif

  if(*mutex == NULL)
 800e17a:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800e17e:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800e180:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800e182:	4258      	negs	r0, r3
 800e184:	bd10      	pop	{r4, pc}
 800e186:	bf00      	nop

0800e188 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800e188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e18c:	6800      	ldr	r0, [r0, #0]
 800e18e:	f7f6 b9cb 	b.w	8004528 <osMutexAcquire>
 800e192:	bf00      	nop

0800e194 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800e194:	6800      	ldr	r0, [r0, #0]
 800e196:	f7f6 b9eb 	b.w	8004570 <osMutexRelease>
 800e19a:	bf00      	nop

0800e19c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e19c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e19e:	b08b      	sub	sp, #44	@ 0x2c
 800e1a0:	4617      	mov	r7, r2
 800e1a2:	4605      	mov	r5, r0
 800e1a4:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800e1a6:	2220      	movs	r2, #32
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	a802      	add	r0, sp, #8
{
 800e1ac:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800e1ae:	f000 f93f 	bl	800e430 <memset>
 800e1b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	aa01      	add	r2, sp, #4
 800e1b8:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800e1ba:	9501      	str	r5, [sp, #4]
 800e1bc:	9406      	str	r4, [sp, #24]
 800e1be:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800e1c0:	f7f6 f90e 	bl	80043e0 <osThreadNew>
#endif
}
 800e1c4:	b00b      	add	sp, #44	@ 0x2c
 800e1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1c8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e1c8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800e1ca:	4b04      	ldr	r3, [pc, #16]	@ (800e1dc <sys_arch_protect+0x14>)
 800e1cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800e1d0:	6818      	ldr	r0, [r3, #0]
 800e1d2:	f7f6 f9a9 	bl	8004528 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	bd08      	pop	{r3, pc}
 800e1da:	bf00      	nop
 800e1dc:	240106a8 	.word	0x240106a8

0800e1e0 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e1e0:	4b01      	ldr	r3, [pc, #4]	@ (800e1e8 <sys_arch_unprotect+0x8>)
 800e1e2:	6818      	ldr	r0, [r3, #0]
 800e1e4:	f7f6 b9c4 	b.w	8004570 <osMutexRelease>
 800e1e8:	240106a8 	.word	0x240106a8

0800e1ec <rand>:
 800e1ec:	4b16      	ldr	r3, [pc, #88]	@ (800e248 <rand+0x5c>)
 800e1ee:	b510      	push	{r4, lr}
 800e1f0:	681c      	ldr	r4, [r3, #0]
 800e1f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e1f4:	b9b3      	cbnz	r3, 800e224 <rand+0x38>
 800e1f6:	2018      	movs	r0, #24
 800e1f8:	f000 fb60 	bl	800e8bc <malloc>
 800e1fc:	4602      	mov	r2, r0
 800e1fe:	6320      	str	r0, [r4, #48]	@ 0x30
 800e200:	b920      	cbnz	r0, 800e20c <rand+0x20>
 800e202:	4b12      	ldr	r3, [pc, #72]	@ (800e24c <rand+0x60>)
 800e204:	4812      	ldr	r0, [pc, #72]	@ (800e250 <rand+0x64>)
 800e206:	2152      	movs	r1, #82	@ 0x52
 800e208:	f000 f9ae 	bl	800e568 <__assert_func>
 800e20c:	4911      	ldr	r1, [pc, #68]	@ (800e254 <rand+0x68>)
 800e20e:	4b12      	ldr	r3, [pc, #72]	@ (800e258 <rand+0x6c>)
 800e210:	e9c0 1300 	strd	r1, r3, [r0]
 800e214:	4b11      	ldr	r3, [pc, #68]	@ (800e25c <rand+0x70>)
 800e216:	6083      	str	r3, [r0, #8]
 800e218:	230b      	movs	r3, #11
 800e21a:	8183      	strh	r3, [r0, #12]
 800e21c:	2100      	movs	r1, #0
 800e21e:	2001      	movs	r0, #1
 800e220:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e224:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e226:	480e      	ldr	r0, [pc, #56]	@ (800e260 <rand+0x74>)
 800e228:	690b      	ldr	r3, [r1, #16]
 800e22a:	694c      	ldr	r4, [r1, #20]
 800e22c:	4a0d      	ldr	r2, [pc, #52]	@ (800e264 <rand+0x78>)
 800e22e:	4358      	muls	r0, r3
 800e230:	fb02 0004 	mla	r0, r2, r4, r0
 800e234:	fba3 3202 	umull	r3, r2, r3, r2
 800e238:	3301      	adds	r3, #1
 800e23a:	eb40 0002 	adc.w	r0, r0, r2
 800e23e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e242:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e246:	bd10      	pop	{r4, pc}
 800e248:	2400003c 	.word	0x2400003c
 800e24c:	08011bc2 	.word	0x08011bc2
 800e250:	08011bd9 	.word	0x08011bd9
 800e254:	abcd330e 	.word	0xabcd330e
 800e258:	e66d1234 	.word	0xe66d1234
 800e25c:	0005deec 	.word	0x0005deec
 800e260:	5851f42d 	.word	0x5851f42d
 800e264:	4c957f2d 	.word	0x4c957f2d

0800e268 <std>:
 800e268:	2300      	movs	r3, #0
 800e26a:	b510      	push	{r4, lr}
 800e26c:	4604      	mov	r4, r0
 800e26e:	e9c0 3300 	strd	r3, r3, [r0]
 800e272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	8181      	strh	r1, [r0, #12]
 800e27a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e27c:	81c2      	strh	r2, [r0, #14]
 800e27e:	6183      	str	r3, [r0, #24]
 800e280:	4619      	mov	r1, r3
 800e282:	2208      	movs	r2, #8
 800e284:	305c      	adds	r0, #92	@ 0x5c
 800e286:	f000 f8d3 	bl	800e430 <memset>
 800e28a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c0 <std+0x58>)
 800e28c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e28e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c4 <std+0x5c>)
 800e290:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e292:	4b0d      	ldr	r3, [pc, #52]	@ (800e2c8 <std+0x60>)
 800e294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e296:	4b0d      	ldr	r3, [pc, #52]	@ (800e2cc <std+0x64>)
 800e298:	6323      	str	r3, [r4, #48]	@ 0x30
 800e29a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d0 <std+0x68>)
 800e29c:	6224      	str	r4, [r4, #32]
 800e29e:	429c      	cmp	r4, r3
 800e2a0:	d006      	beq.n	800e2b0 <std+0x48>
 800e2a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2a6:	4294      	cmp	r4, r2
 800e2a8:	d002      	beq.n	800e2b0 <std+0x48>
 800e2aa:	33d0      	adds	r3, #208	@ 0xd0
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	d105      	bne.n	800e2bc <std+0x54>
 800e2b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2b8:	f000 b8e6 	b.w	800e488 <__retarget_lock_init_recursive>
 800e2bc:	bd10      	pop	{r4, pc}
 800e2be:	bf00      	nop
 800e2c0:	0800ee99 	.word	0x0800ee99
 800e2c4:	0800eebb 	.word	0x0800eebb
 800e2c8:	0800eef3 	.word	0x0800eef3
 800e2cc:	0800ef17 	.word	0x0800ef17
 800e2d0:	240106ac 	.word	0x240106ac

0800e2d4 <stdio_exit_handler>:
 800e2d4:	4a02      	ldr	r2, [pc, #8]	@ (800e2e0 <stdio_exit_handler+0xc>)
 800e2d6:	4903      	ldr	r1, [pc, #12]	@ (800e2e4 <stdio_exit_handler+0x10>)
 800e2d8:	4803      	ldr	r0, [pc, #12]	@ (800e2e8 <stdio_exit_handler+0x14>)
 800e2da:	f000 b869 	b.w	800e3b0 <_fwalk_sglue>
 800e2de:	bf00      	nop
 800e2e0:	24000030 	.word	0x24000030
 800e2e4:	0800ee31 	.word	0x0800ee31
 800e2e8:	24000040 	.word	0x24000040

0800e2ec <cleanup_stdio>:
 800e2ec:	6841      	ldr	r1, [r0, #4]
 800e2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800e320 <cleanup_stdio+0x34>)
 800e2f0:	4299      	cmp	r1, r3
 800e2f2:	b510      	push	{r4, lr}
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	d001      	beq.n	800e2fc <cleanup_stdio+0x10>
 800e2f8:	f000 fd9a 	bl	800ee30 <_fflush_r>
 800e2fc:	68a1      	ldr	r1, [r4, #8]
 800e2fe:	4b09      	ldr	r3, [pc, #36]	@ (800e324 <cleanup_stdio+0x38>)
 800e300:	4299      	cmp	r1, r3
 800e302:	d002      	beq.n	800e30a <cleanup_stdio+0x1e>
 800e304:	4620      	mov	r0, r4
 800e306:	f000 fd93 	bl	800ee30 <_fflush_r>
 800e30a:	68e1      	ldr	r1, [r4, #12]
 800e30c:	4b06      	ldr	r3, [pc, #24]	@ (800e328 <cleanup_stdio+0x3c>)
 800e30e:	4299      	cmp	r1, r3
 800e310:	d004      	beq.n	800e31c <cleanup_stdio+0x30>
 800e312:	4620      	mov	r0, r4
 800e314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e318:	f000 bd8a 	b.w	800ee30 <_fflush_r>
 800e31c:	bd10      	pop	{r4, pc}
 800e31e:	bf00      	nop
 800e320:	240106ac 	.word	0x240106ac
 800e324:	24010714 	.word	0x24010714
 800e328:	2401077c 	.word	0x2401077c

0800e32c <global_stdio_init.part.0>:
 800e32c:	b510      	push	{r4, lr}
 800e32e:	4b0b      	ldr	r3, [pc, #44]	@ (800e35c <global_stdio_init.part.0+0x30>)
 800e330:	4c0b      	ldr	r4, [pc, #44]	@ (800e360 <global_stdio_init.part.0+0x34>)
 800e332:	4a0c      	ldr	r2, [pc, #48]	@ (800e364 <global_stdio_init.part.0+0x38>)
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	4620      	mov	r0, r4
 800e338:	2200      	movs	r2, #0
 800e33a:	2104      	movs	r1, #4
 800e33c:	f7ff ff94 	bl	800e268 <std>
 800e340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e344:	2201      	movs	r2, #1
 800e346:	2109      	movs	r1, #9
 800e348:	f7ff ff8e 	bl	800e268 <std>
 800e34c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e350:	2202      	movs	r2, #2
 800e352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e356:	2112      	movs	r1, #18
 800e358:	f7ff bf86 	b.w	800e268 <std>
 800e35c:	240107e4 	.word	0x240107e4
 800e360:	240106ac 	.word	0x240106ac
 800e364:	0800e2d5 	.word	0x0800e2d5

0800e368 <__sfp_lock_acquire>:
 800e368:	4801      	ldr	r0, [pc, #4]	@ (800e370 <__sfp_lock_acquire+0x8>)
 800e36a:	f000 b88e 	b.w	800e48a <__retarget_lock_acquire_recursive>
 800e36e:	bf00      	nop
 800e370:	240107e9 	.word	0x240107e9

0800e374 <__sfp_lock_release>:
 800e374:	4801      	ldr	r0, [pc, #4]	@ (800e37c <__sfp_lock_release+0x8>)
 800e376:	f000 b889 	b.w	800e48c <__retarget_lock_release_recursive>
 800e37a:	bf00      	nop
 800e37c:	240107e9 	.word	0x240107e9

0800e380 <__sinit>:
 800e380:	b510      	push	{r4, lr}
 800e382:	4604      	mov	r4, r0
 800e384:	f7ff fff0 	bl	800e368 <__sfp_lock_acquire>
 800e388:	6a23      	ldr	r3, [r4, #32]
 800e38a:	b11b      	cbz	r3, 800e394 <__sinit+0x14>
 800e38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e390:	f7ff bff0 	b.w	800e374 <__sfp_lock_release>
 800e394:	4b04      	ldr	r3, [pc, #16]	@ (800e3a8 <__sinit+0x28>)
 800e396:	6223      	str	r3, [r4, #32]
 800e398:	4b04      	ldr	r3, [pc, #16]	@ (800e3ac <__sinit+0x2c>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1f5      	bne.n	800e38c <__sinit+0xc>
 800e3a0:	f7ff ffc4 	bl	800e32c <global_stdio_init.part.0>
 800e3a4:	e7f2      	b.n	800e38c <__sinit+0xc>
 800e3a6:	bf00      	nop
 800e3a8:	0800e2ed 	.word	0x0800e2ed
 800e3ac:	240107e4 	.word	0x240107e4

0800e3b0 <_fwalk_sglue>:
 800e3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	4688      	mov	r8, r1
 800e3b8:	4614      	mov	r4, r2
 800e3ba:	2600      	movs	r6, #0
 800e3bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3c0:	f1b9 0901 	subs.w	r9, r9, #1
 800e3c4:	d505      	bpl.n	800e3d2 <_fwalk_sglue+0x22>
 800e3c6:	6824      	ldr	r4, [r4, #0]
 800e3c8:	2c00      	cmp	r4, #0
 800e3ca:	d1f7      	bne.n	800e3bc <_fwalk_sglue+0xc>
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3d2:	89ab      	ldrh	r3, [r5, #12]
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	d907      	bls.n	800e3e8 <_fwalk_sglue+0x38>
 800e3d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	d003      	beq.n	800e3e8 <_fwalk_sglue+0x38>
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	47c0      	blx	r8
 800e3e6:	4306      	orrs	r6, r0
 800e3e8:	3568      	adds	r5, #104	@ 0x68
 800e3ea:	e7e9      	b.n	800e3c0 <_fwalk_sglue+0x10>

0800e3ec <iprintf>:
 800e3ec:	b40f      	push	{r0, r1, r2, r3}
 800e3ee:	b507      	push	{r0, r1, r2, lr}
 800e3f0:	4906      	ldr	r1, [pc, #24]	@ (800e40c <iprintf+0x20>)
 800e3f2:	ab04      	add	r3, sp, #16
 800e3f4:	6808      	ldr	r0, [r1, #0]
 800e3f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3fa:	6881      	ldr	r1, [r0, #8]
 800e3fc:	9301      	str	r3, [sp, #4]
 800e3fe:	f000 f945 	bl	800e68c <_vfiprintf_r>
 800e402:	b003      	add	sp, #12
 800e404:	f85d eb04 	ldr.w	lr, [sp], #4
 800e408:	b004      	add	sp, #16
 800e40a:	4770      	bx	lr
 800e40c:	2400003c 	.word	0x2400003c

0800e410 <memcmp>:
 800e410:	b510      	push	{r4, lr}
 800e412:	3901      	subs	r1, #1
 800e414:	4402      	add	r2, r0
 800e416:	4290      	cmp	r0, r2
 800e418:	d101      	bne.n	800e41e <memcmp+0xe>
 800e41a:	2000      	movs	r0, #0
 800e41c:	e005      	b.n	800e42a <memcmp+0x1a>
 800e41e:	7803      	ldrb	r3, [r0, #0]
 800e420:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e424:	42a3      	cmp	r3, r4
 800e426:	d001      	beq.n	800e42c <memcmp+0x1c>
 800e428:	1b18      	subs	r0, r3, r4
 800e42a:	bd10      	pop	{r4, pc}
 800e42c:	3001      	adds	r0, #1
 800e42e:	e7f2      	b.n	800e416 <memcmp+0x6>

0800e430 <memset>:
 800e430:	4402      	add	r2, r0
 800e432:	4603      	mov	r3, r0
 800e434:	4293      	cmp	r3, r2
 800e436:	d100      	bne.n	800e43a <memset+0xa>
 800e438:	4770      	bx	lr
 800e43a:	f803 1b01 	strb.w	r1, [r3], #1
 800e43e:	e7f9      	b.n	800e434 <memset+0x4>

0800e440 <__libc_init_array>:
 800e440:	b570      	push	{r4, r5, r6, lr}
 800e442:	4d0d      	ldr	r5, [pc, #52]	@ (800e478 <__libc_init_array+0x38>)
 800e444:	4c0d      	ldr	r4, [pc, #52]	@ (800e47c <__libc_init_array+0x3c>)
 800e446:	1b64      	subs	r4, r4, r5
 800e448:	10a4      	asrs	r4, r4, #2
 800e44a:	2600      	movs	r6, #0
 800e44c:	42a6      	cmp	r6, r4
 800e44e:	d109      	bne.n	800e464 <__libc_init_array+0x24>
 800e450:	4d0b      	ldr	r5, [pc, #44]	@ (800e480 <__libc_init_array+0x40>)
 800e452:	4c0c      	ldr	r4, [pc, #48]	@ (800e484 <__libc_init_array+0x44>)
 800e454:	f000 ff30 	bl	800f2b8 <_init>
 800e458:	1b64      	subs	r4, r4, r5
 800e45a:	10a4      	asrs	r4, r4, #2
 800e45c:	2600      	movs	r6, #0
 800e45e:	42a6      	cmp	r6, r4
 800e460:	d105      	bne.n	800e46e <__libc_init_array+0x2e>
 800e462:	bd70      	pop	{r4, r5, r6, pc}
 800e464:	f855 3b04 	ldr.w	r3, [r5], #4
 800e468:	4798      	blx	r3
 800e46a:	3601      	adds	r6, #1
 800e46c:	e7ee      	b.n	800e44c <__libc_init_array+0xc>
 800e46e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e472:	4798      	blx	r3
 800e474:	3601      	adds	r6, #1
 800e476:	e7f2      	b.n	800e45e <__libc_init_array+0x1e>
 800e478:	08011ca8 	.word	0x08011ca8
 800e47c:	08011ca8 	.word	0x08011ca8
 800e480:	08011ca8 	.word	0x08011ca8
 800e484:	08011cac 	.word	0x08011cac

0800e488 <__retarget_lock_init_recursive>:
 800e488:	4770      	bx	lr

0800e48a <__retarget_lock_acquire_recursive>:
 800e48a:	4770      	bx	lr

0800e48c <__retarget_lock_release_recursive>:
 800e48c:	4770      	bx	lr
	...

0800e490 <_reclaim_reent>:
 800e490:	4b2d      	ldr	r3, [pc, #180]	@ (800e548 <_reclaim_reent+0xb8>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4283      	cmp	r3, r0
 800e496:	b570      	push	{r4, r5, r6, lr}
 800e498:	4604      	mov	r4, r0
 800e49a:	d053      	beq.n	800e544 <_reclaim_reent+0xb4>
 800e49c:	69c3      	ldr	r3, [r0, #28]
 800e49e:	b31b      	cbz	r3, 800e4e8 <_reclaim_reent+0x58>
 800e4a0:	68db      	ldr	r3, [r3, #12]
 800e4a2:	b163      	cbz	r3, 800e4be <_reclaim_reent+0x2e>
 800e4a4:	2500      	movs	r5, #0
 800e4a6:	69e3      	ldr	r3, [r4, #28]
 800e4a8:	68db      	ldr	r3, [r3, #12]
 800e4aa:	5959      	ldr	r1, [r3, r5]
 800e4ac:	b9b1      	cbnz	r1, 800e4dc <_reclaim_reent+0x4c>
 800e4ae:	3504      	adds	r5, #4
 800e4b0:	2d80      	cmp	r5, #128	@ 0x80
 800e4b2:	d1f8      	bne.n	800e4a6 <_reclaim_reent+0x16>
 800e4b4:	69e3      	ldr	r3, [r4, #28]
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	68d9      	ldr	r1, [r3, #12]
 800e4ba:	f000 f873 	bl	800e5a4 <_free_r>
 800e4be:	69e3      	ldr	r3, [r4, #28]
 800e4c0:	6819      	ldr	r1, [r3, #0]
 800e4c2:	b111      	cbz	r1, 800e4ca <_reclaim_reent+0x3a>
 800e4c4:	4620      	mov	r0, r4
 800e4c6:	f000 f86d 	bl	800e5a4 <_free_r>
 800e4ca:	69e3      	ldr	r3, [r4, #28]
 800e4cc:	689d      	ldr	r5, [r3, #8]
 800e4ce:	b15d      	cbz	r5, 800e4e8 <_reclaim_reent+0x58>
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	682d      	ldr	r5, [r5, #0]
 800e4d6:	f000 f865 	bl	800e5a4 <_free_r>
 800e4da:	e7f8      	b.n	800e4ce <_reclaim_reent+0x3e>
 800e4dc:	680e      	ldr	r6, [r1, #0]
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f000 f860 	bl	800e5a4 <_free_r>
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	e7e1      	b.n	800e4ac <_reclaim_reent+0x1c>
 800e4e8:	6961      	ldr	r1, [r4, #20]
 800e4ea:	b111      	cbz	r1, 800e4f2 <_reclaim_reent+0x62>
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f000 f859 	bl	800e5a4 <_free_r>
 800e4f2:	69e1      	ldr	r1, [r4, #28]
 800e4f4:	b111      	cbz	r1, 800e4fc <_reclaim_reent+0x6c>
 800e4f6:	4620      	mov	r0, r4
 800e4f8:	f000 f854 	bl	800e5a4 <_free_r>
 800e4fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e4fe:	b111      	cbz	r1, 800e506 <_reclaim_reent+0x76>
 800e500:	4620      	mov	r0, r4
 800e502:	f000 f84f 	bl	800e5a4 <_free_r>
 800e506:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e508:	b111      	cbz	r1, 800e510 <_reclaim_reent+0x80>
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 f84a 	bl	800e5a4 <_free_r>
 800e510:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e512:	b111      	cbz	r1, 800e51a <_reclaim_reent+0x8a>
 800e514:	4620      	mov	r0, r4
 800e516:	f000 f845 	bl	800e5a4 <_free_r>
 800e51a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e51c:	b111      	cbz	r1, 800e524 <_reclaim_reent+0x94>
 800e51e:	4620      	mov	r0, r4
 800e520:	f000 f840 	bl	800e5a4 <_free_r>
 800e524:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e526:	b111      	cbz	r1, 800e52e <_reclaim_reent+0x9e>
 800e528:	4620      	mov	r0, r4
 800e52a:	f000 f83b 	bl	800e5a4 <_free_r>
 800e52e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e530:	b111      	cbz	r1, 800e538 <_reclaim_reent+0xa8>
 800e532:	4620      	mov	r0, r4
 800e534:	f000 f836 	bl	800e5a4 <_free_r>
 800e538:	6a23      	ldr	r3, [r4, #32]
 800e53a:	b11b      	cbz	r3, 800e544 <_reclaim_reent+0xb4>
 800e53c:	4620      	mov	r0, r4
 800e53e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e542:	4718      	bx	r3
 800e544:	bd70      	pop	{r4, r5, r6, pc}
 800e546:	bf00      	nop
 800e548:	2400003c 	.word	0x2400003c

0800e54c <memcpy>:
 800e54c:	440a      	add	r2, r1
 800e54e:	4291      	cmp	r1, r2
 800e550:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e554:	d100      	bne.n	800e558 <memcpy+0xc>
 800e556:	4770      	bx	lr
 800e558:	b510      	push	{r4, lr}
 800e55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e562:	4291      	cmp	r1, r2
 800e564:	d1f9      	bne.n	800e55a <memcpy+0xe>
 800e566:	bd10      	pop	{r4, pc}

0800e568 <__assert_func>:
 800e568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e56a:	4614      	mov	r4, r2
 800e56c:	461a      	mov	r2, r3
 800e56e:	4b09      	ldr	r3, [pc, #36]	@ (800e594 <__assert_func+0x2c>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4605      	mov	r5, r0
 800e574:	68d8      	ldr	r0, [r3, #12]
 800e576:	b14c      	cbz	r4, 800e58c <__assert_func+0x24>
 800e578:	4b07      	ldr	r3, [pc, #28]	@ (800e598 <__assert_func+0x30>)
 800e57a:	9100      	str	r1, [sp, #0]
 800e57c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e580:	4906      	ldr	r1, [pc, #24]	@ (800e59c <__assert_func+0x34>)
 800e582:	462b      	mov	r3, r5
 800e584:	f000 fccc 	bl	800ef20 <fiprintf>
 800e588:	f000 fe4a 	bl	800f220 <abort>
 800e58c:	4b04      	ldr	r3, [pc, #16]	@ (800e5a0 <__assert_func+0x38>)
 800e58e:	461c      	mov	r4, r3
 800e590:	e7f3      	b.n	800e57a <__assert_func+0x12>
 800e592:	bf00      	nop
 800e594:	2400003c 	.word	0x2400003c
 800e598:	08011c31 	.word	0x08011c31
 800e59c:	08011c3e 	.word	0x08011c3e
 800e5a0:	08011c6c 	.word	0x08011c6c

0800e5a4 <_free_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	2900      	cmp	r1, #0
 800e5aa:	d041      	beq.n	800e630 <_free_r+0x8c>
 800e5ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5b0:	1f0c      	subs	r4, r1, #4
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	bfb8      	it	lt
 800e5b6:	18e4      	addlt	r4, r4, r3
 800e5b8:	f000 fc62 	bl	800ee80 <__malloc_lock>
 800e5bc:	4a1d      	ldr	r2, [pc, #116]	@ (800e634 <_free_r+0x90>)
 800e5be:	6813      	ldr	r3, [r2, #0]
 800e5c0:	b933      	cbnz	r3, 800e5d0 <_free_r+0x2c>
 800e5c2:	6063      	str	r3, [r4, #4]
 800e5c4:	6014      	str	r4, [r2, #0]
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5cc:	f000 bc5e 	b.w	800ee8c <__malloc_unlock>
 800e5d0:	42a3      	cmp	r3, r4
 800e5d2:	d908      	bls.n	800e5e6 <_free_r+0x42>
 800e5d4:	6820      	ldr	r0, [r4, #0]
 800e5d6:	1821      	adds	r1, r4, r0
 800e5d8:	428b      	cmp	r3, r1
 800e5da:	bf01      	itttt	eq
 800e5dc:	6819      	ldreq	r1, [r3, #0]
 800e5de:	685b      	ldreq	r3, [r3, #4]
 800e5e0:	1809      	addeq	r1, r1, r0
 800e5e2:	6021      	streq	r1, [r4, #0]
 800e5e4:	e7ed      	b.n	800e5c2 <_free_r+0x1e>
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	b10b      	cbz	r3, 800e5f0 <_free_r+0x4c>
 800e5ec:	42a3      	cmp	r3, r4
 800e5ee:	d9fa      	bls.n	800e5e6 <_free_r+0x42>
 800e5f0:	6811      	ldr	r1, [r2, #0]
 800e5f2:	1850      	adds	r0, r2, r1
 800e5f4:	42a0      	cmp	r0, r4
 800e5f6:	d10b      	bne.n	800e610 <_free_r+0x6c>
 800e5f8:	6820      	ldr	r0, [r4, #0]
 800e5fa:	4401      	add	r1, r0
 800e5fc:	1850      	adds	r0, r2, r1
 800e5fe:	4283      	cmp	r3, r0
 800e600:	6011      	str	r1, [r2, #0]
 800e602:	d1e0      	bne.n	800e5c6 <_free_r+0x22>
 800e604:	6818      	ldr	r0, [r3, #0]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	6053      	str	r3, [r2, #4]
 800e60a:	4408      	add	r0, r1
 800e60c:	6010      	str	r0, [r2, #0]
 800e60e:	e7da      	b.n	800e5c6 <_free_r+0x22>
 800e610:	d902      	bls.n	800e618 <_free_r+0x74>
 800e612:	230c      	movs	r3, #12
 800e614:	602b      	str	r3, [r5, #0]
 800e616:	e7d6      	b.n	800e5c6 <_free_r+0x22>
 800e618:	6820      	ldr	r0, [r4, #0]
 800e61a:	1821      	adds	r1, r4, r0
 800e61c:	428b      	cmp	r3, r1
 800e61e:	bf04      	itt	eq
 800e620:	6819      	ldreq	r1, [r3, #0]
 800e622:	685b      	ldreq	r3, [r3, #4]
 800e624:	6063      	str	r3, [r4, #4]
 800e626:	bf04      	itt	eq
 800e628:	1809      	addeq	r1, r1, r0
 800e62a:	6021      	streq	r1, [r4, #0]
 800e62c:	6054      	str	r4, [r2, #4]
 800e62e:	e7ca      	b.n	800e5c6 <_free_r+0x22>
 800e630:	bd38      	pop	{r3, r4, r5, pc}
 800e632:	bf00      	nop
 800e634:	240107f4 	.word	0x240107f4

0800e638 <__sfputc_r>:
 800e638:	6893      	ldr	r3, [r2, #8]
 800e63a:	3b01      	subs	r3, #1
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	b410      	push	{r4}
 800e640:	6093      	str	r3, [r2, #8]
 800e642:	da08      	bge.n	800e656 <__sfputc_r+0x1e>
 800e644:	6994      	ldr	r4, [r2, #24]
 800e646:	42a3      	cmp	r3, r4
 800e648:	db01      	blt.n	800e64e <__sfputc_r+0x16>
 800e64a:	290a      	cmp	r1, #10
 800e64c:	d103      	bne.n	800e656 <__sfputc_r+0x1e>
 800e64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e652:	f000 bc77 	b.w	800ef44 <__swbuf_r>
 800e656:	6813      	ldr	r3, [r2, #0]
 800e658:	1c58      	adds	r0, r3, #1
 800e65a:	6010      	str	r0, [r2, #0]
 800e65c:	7019      	strb	r1, [r3, #0]
 800e65e:	4608      	mov	r0, r1
 800e660:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <__sfputs_r>:
 800e666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e668:	4606      	mov	r6, r0
 800e66a:	460f      	mov	r7, r1
 800e66c:	4614      	mov	r4, r2
 800e66e:	18d5      	adds	r5, r2, r3
 800e670:	42ac      	cmp	r4, r5
 800e672:	d101      	bne.n	800e678 <__sfputs_r+0x12>
 800e674:	2000      	movs	r0, #0
 800e676:	e007      	b.n	800e688 <__sfputs_r+0x22>
 800e678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e67c:	463a      	mov	r2, r7
 800e67e:	4630      	mov	r0, r6
 800e680:	f7ff ffda 	bl	800e638 <__sfputc_r>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d1f3      	bne.n	800e670 <__sfputs_r+0xa>
 800e688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e68c <_vfiprintf_r>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	460d      	mov	r5, r1
 800e692:	b09d      	sub	sp, #116	@ 0x74
 800e694:	4614      	mov	r4, r2
 800e696:	4698      	mov	r8, r3
 800e698:	4606      	mov	r6, r0
 800e69a:	b118      	cbz	r0, 800e6a4 <_vfiprintf_r+0x18>
 800e69c:	6a03      	ldr	r3, [r0, #32]
 800e69e:	b90b      	cbnz	r3, 800e6a4 <_vfiprintf_r+0x18>
 800e6a0:	f7ff fe6e 	bl	800e380 <__sinit>
 800e6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6a6:	07d9      	lsls	r1, r3, #31
 800e6a8:	d405      	bmi.n	800e6b6 <_vfiprintf_r+0x2a>
 800e6aa:	89ab      	ldrh	r3, [r5, #12]
 800e6ac:	059a      	lsls	r2, r3, #22
 800e6ae:	d402      	bmi.n	800e6b6 <_vfiprintf_r+0x2a>
 800e6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6b2:	f7ff feea 	bl	800e48a <__retarget_lock_acquire_recursive>
 800e6b6:	89ab      	ldrh	r3, [r5, #12]
 800e6b8:	071b      	lsls	r3, r3, #28
 800e6ba:	d501      	bpl.n	800e6c0 <_vfiprintf_r+0x34>
 800e6bc:	692b      	ldr	r3, [r5, #16]
 800e6be:	b99b      	cbnz	r3, 800e6e8 <_vfiprintf_r+0x5c>
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	f000 fc7c 	bl	800efc0 <__swsetup_r>
 800e6c8:	b170      	cbz	r0, 800e6e8 <_vfiprintf_r+0x5c>
 800e6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e6cc:	07dc      	lsls	r4, r3, #31
 800e6ce:	d504      	bpl.n	800e6da <_vfiprintf_r+0x4e>
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e6d4:	b01d      	add	sp, #116	@ 0x74
 800e6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6da:	89ab      	ldrh	r3, [r5, #12]
 800e6dc:	0598      	lsls	r0, r3, #22
 800e6de:	d4f7      	bmi.n	800e6d0 <_vfiprintf_r+0x44>
 800e6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e6e2:	f7ff fed3 	bl	800e48c <__retarget_lock_release_recursive>
 800e6e6:	e7f3      	b.n	800e6d0 <_vfiprintf_r+0x44>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6ec:	2320      	movs	r3, #32
 800e6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e6f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6f6:	2330      	movs	r3, #48	@ 0x30
 800e6f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e8a8 <_vfiprintf_r+0x21c>
 800e6fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e700:	f04f 0901 	mov.w	r9, #1
 800e704:	4623      	mov	r3, r4
 800e706:	469a      	mov	sl, r3
 800e708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e70c:	b10a      	cbz	r2, 800e712 <_vfiprintf_r+0x86>
 800e70e:	2a25      	cmp	r2, #37	@ 0x25
 800e710:	d1f9      	bne.n	800e706 <_vfiprintf_r+0x7a>
 800e712:	ebba 0b04 	subs.w	fp, sl, r4
 800e716:	d00b      	beq.n	800e730 <_vfiprintf_r+0xa4>
 800e718:	465b      	mov	r3, fp
 800e71a:	4622      	mov	r2, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	4630      	mov	r0, r6
 800e720:	f7ff ffa1 	bl	800e666 <__sfputs_r>
 800e724:	3001      	adds	r0, #1
 800e726:	f000 80a7 	beq.w	800e878 <_vfiprintf_r+0x1ec>
 800e72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e72c:	445a      	add	r2, fp
 800e72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e730:	f89a 3000 	ldrb.w	r3, [sl]
 800e734:	2b00      	cmp	r3, #0
 800e736:	f000 809f 	beq.w	800e878 <_vfiprintf_r+0x1ec>
 800e73a:	2300      	movs	r3, #0
 800e73c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e744:	f10a 0a01 	add.w	sl, sl, #1
 800e748:	9304      	str	r3, [sp, #16]
 800e74a:	9307      	str	r3, [sp, #28]
 800e74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e750:	931a      	str	r3, [sp, #104]	@ 0x68
 800e752:	4654      	mov	r4, sl
 800e754:	2205      	movs	r2, #5
 800e756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e75a:	4853      	ldr	r0, [pc, #332]	@ (800e8a8 <_vfiprintf_r+0x21c>)
 800e75c:	f7f1 fdd8 	bl	8000310 <memchr>
 800e760:	9a04      	ldr	r2, [sp, #16]
 800e762:	b9d8      	cbnz	r0, 800e79c <_vfiprintf_r+0x110>
 800e764:	06d1      	lsls	r1, r2, #27
 800e766:	bf44      	itt	mi
 800e768:	2320      	movmi	r3, #32
 800e76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e76e:	0713      	lsls	r3, r2, #28
 800e770:	bf44      	itt	mi
 800e772:	232b      	movmi	r3, #43	@ 0x2b
 800e774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e778:	f89a 3000 	ldrb.w	r3, [sl]
 800e77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e77e:	d015      	beq.n	800e7ac <_vfiprintf_r+0x120>
 800e780:	9a07      	ldr	r2, [sp, #28]
 800e782:	4654      	mov	r4, sl
 800e784:	2000      	movs	r0, #0
 800e786:	f04f 0c0a 	mov.w	ip, #10
 800e78a:	4621      	mov	r1, r4
 800e78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e790:	3b30      	subs	r3, #48	@ 0x30
 800e792:	2b09      	cmp	r3, #9
 800e794:	d94b      	bls.n	800e82e <_vfiprintf_r+0x1a2>
 800e796:	b1b0      	cbz	r0, 800e7c6 <_vfiprintf_r+0x13a>
 800e798:	9207      	str	r2, [sp, #28]
 800e79a:	e014      	b.n	800e7c6 <_vfiprintf_r+0x13a>
 800e79c:	eba0 0308 	sub.w	r3, r0, r8
 800e7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	9304      	str	r3, [sp, #16]
 800e7a8:	46a2      	mov	sl, r4
 800e7aa:	e7d2      	b.n	800e752 <_vfiprintf_r+0xc6>
 800e7ac:	9b03      	ldr	r3, [sp, #12]
 800e7ae:	1d19      	adds	r1, r3, #4
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	9103      	str	r1, [sp, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	bfbb      	ittet	lt
 800e7b8:	425b      	neglt	r3, r3
 800e7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800e7be:	9307      	strge	r3, [sp, #28]
 800e7c0:	9307      	strlt	r3, [sp, #28]
 800e7c2:	bfb8      	it	lt
 800e7c4:	9204      	strlt	r2, [sp, #16]
 800e7c6:	7823      	ldrb	r3, [r4, #0]
 800e7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7ca:	d10a      	bne.n	800e7e2 <_vfiprintf_r+0x156>
 800e7cc:	7863      	ldrb	r3, [r4, #1]
 800e7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7d0:	d132      	bne.n	800e838 <_vfiprintf_r+0x1ac>
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	1d1a      	adds	r2, r3, #4
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	9203      	str	r2, [sp, #12]
 800e7da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e7de:	3402      	adds	r4, #2
 800e7e0:	9305      	str	r3, [sp, #20]
 800e7e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e8b8 <_vfiprintf_r+0x22c>
 800e7e6:	7821      	ldrb	r1, [r4, #0]
 800e7e8:	2203      	movs	r2, #3
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	f7f1 fd90 	bl	8000310 <memchr>
 800e7f0:	b138      	cbz	r0, 800e802 <_vfiprintf_r+0x176>
 800e7f2:	9b04      	ldr	r3, [sp, #16]
 800e7f4:	eba0 000a 	sub.w	r0, r0, sl
 800e7f8:	2240      	movs	r2, #64	@ 0x40
 800e7fa:	4082      	lsls	r2, r0
 800e7fc:	4313      	orrs	r3, r2
 800e7fe:	3401      	adds	r4, #1
 800e800:	9304      	str	r3, [sp, #16]
 800e802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e806:	4829      	ldr	r0, [pc, #164]	@ (800e8ac <_vfiprintf_r+0x220>)
 800e808:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e80c:	2206      	movs	r2, #6
 800e80e:	f7f1 fd7f 	bl	8000310 <memchr>
 800e812:	2800      	cmp	r0, #0
 800e814:	d03f      	beq.n	800e896 <_vfiprintf_r+0x20a>
 800e816:	4b26      	ldr	r3, [pc, #152]	@ (800e8b0 <_vfiprintf_r+0x224>)
 800e818:	bb1b      	cbnz	r3, 800e862 <_vfiprintf_r+0x1d6>
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	3307      	adds	r3, #7
 800e81e:	f023 0307 	bic.w	r3, r3, #7
 800e822:	3308      	adds	r3, #8
 800e824:	9303      	str	r3, [sp, #12]
 800e826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e828:	443b      	add	r3, r7
 800e82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e82c:	e76a      	b.n	800e704 <_vfiprintf_r+0x78>
 800e82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e832:	460c      	mov	r4, r1
 800e834:	2001      	movs	r0, #1
 800e836:	e7a8      	b.n	800e78a <_vfiprintf_r+0xfe>
 800e838:	2300      	movs	r3, #0
 800e83a:	3401      	adds	r4, #1
 800e83c:	9305      	str	r3, [sp, #20]
 800e83e:	4619      	mov	r1, r3
 800e840:	f04f 0c0a 	mov.w	ip, #10
 800e844:	4620      	mov	r0, r4
 800e846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e84a:	3a30      	subs	r2, #48	@ 0x30
 800e84c:	2a09      	cmp	r2, #9
 800e84e:	d903      	bls.n	800e858 <_vfiprintf_r+0x1cc>
 800e850:	2b00      	cmp	r3, #0
 800e852:	d0c6      	beq.n	800e7e2 <_vfiprintf_r+0x156>
 800e854:	9105      	str	r1, [sp, #20]
 800e856:	e7c4      	b.n	800e7e2 <_vfiprintf_r+0x156>
 800e858:	fb0c 2101 	mla	r1, ip, r1, r2
 800e85c:	4604      	mov	r4, r0
 800e85e:	2301      	movs	r3, #1
 800e860:	e7f0      	b.n	800e844 <_vfiprintf_r+0x1b8>
 800e862:	ab03      	add	r3, sp, #12
 800e864:	9300      	str	r3, [sp, #0]
 800e866:	462a      	mov	r2, r5
 800e868:	4b12      	ldr	r3, [pc, #72]	@ (800e8b4 <_vfiprintf_r+0x228>)
 800e86a:	a904      	add	r1, sp, #16
 800e86c:	4630      	mov	r0, r6
 800e86e:	f3af 8000 	nop.w
 800e872:	4607      	mov	r7, r0
 800e874:	1c78      	adds	r0, r7, #1
 800e876:	d1d6      	bne.n	800e826 <_vfiprintf_r+0x19a>
 800e878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e87a:	07d9      	lsls	r1, r3, #31
 800e87c:	d405      	bmi.n	800e88a <_vfiprintf_r+0x1fe>
 800e87e:	89ab      	ldrh	r3, [r5, #12]
 800e880:	059a      	lsls	r2, r3, #22
 800e882:	d402      	bmi.n	800e88a <_vfiprintf_r+0x1fe>
 800e884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e886:	f7ff fe01 	bl	800e48c <__retarget_lock_release_recursive>
 800e88a:	89ab      	ldrh	r3, [r5, #12]
 800e88c:	065b      	lsls	r3, r3, #25
 800e88e:	f53f af1f 	bmi.w	800e6d0 <_vfiprintf_r+0x44>
 800e892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e894:	e71e      	b.n	800e6d4 <_vfiprintf_r+0x48>
 800e896:	ab03      	add	r3, sp, #12
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	462a      	mov	r2, r5
 800e89c:	4b05      	ldr	r3, [pc, #20]	@ (800e8b4 <_vfiprintf_r+0x228>)
 800e89e:	a904      	add	r1, sp, #16
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f000 f923 	bl	800eaec <_printf_i>
 800e8a6:	e7e4      	b.n	800e872 <_vfiprintf_r+0x1e6>
 800e8a8:	08011c6d 	.word	0x08011c6d
 800e8ac:	08011c77 	.word	0x08011c77
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	0800e667 	.word	0x0800e667
 800e8b8:	08011c73 	.word	0x08011c73

0800e8bc <malloc>:
 800e8bc:	4b02      	ldr	r3, [pc, #8]	@ (800e8c8 <malloc+0xc>)
 800e8be:	4601      	mov	r1, r0
 800e8c0:	6818      	ldr	r0, [r3, #0]
 800e8c2:	f000 b825 	b.w	800e910 <_malloc_r>
 800e8c6:	bf00      	nop
 800e8c8:	2400003c 	.word	0x2400003c

0800e8cc <sbrk_aligned>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	4e0f      	ldr	r6, [pc, #60]	@ (800e90c <sbrk_aligned+0x40>)
 800e8d0:	460c      	mov	r4, r1
 800e8d2:	6831      	ldr	r1, [r6, #0]
 800e8d4:	4605      	mov	r5, r0
 800e8d6:	b911      	cbnz	r1, 800e8de <sbrk_aligned+0x12>
 800e8d8:	f000 fc5e 	bl	800f198 <_sbrk_r>
 800e8dc:	6030      	str	r0, [r6, #0]
 800e8de:	4621      	mov	r1, r4
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	f000 fc59 	bl	800f198 <_sbrk_r>
 800e8e6:	1c43      	adds	r3, r0, #1
 800e8e8:	d103      	bne.n	800e8f2 <sbrk_aligned+0x26>
 800e8ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	bd70      	pop	{r4, r5, r6, pc}
 800e8f2:	1cc4      	adds	r4, r0, #3
 800e8f4:	f024 0403 	bic.w	r4, r4, #3
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d0f8      	beq.n	800e8ee <sbrk_aligned+0x22>
 800e8fc:	1a21      	subs	r1, r4, r0
 800e8fe:	4628      	mov	r0, r5
 800e900:	f000 fc4a 	bl	800f198 <_sbrk_r>
 800e904:	3001      	adds	r0, #1
 800e906:	d1f2      	bne.n	800e8ee <sbrk_aligned+0x22>
 800e908:	e7ef      	b.n	800e8ea <sbrk_aligned+0x1e>
 800e90a:	bf00      	nop
 800e90c:	240107f0 	.word	0x240107f0

0800e910 <_malloc_r>:
 800e910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e914:	1ccd      	adds	r5, r1, #3
 800e916:	f025 0503 	bic.w	r5, r5, #3
 800e91a:	3508      	adds	r5, #8
 800e91c:	2d0c      	cmp	r5, #12
 800e91e:	bf38      	it	cc
 800e920:	250c      	movcc	r5, #12
 800e922:	2d00      	cmp	r5, #0
 800e924:	4606      	mov	r6, r0
 800e926:	db01      	blt.n	800e92c <_malloc_r+0x1c>
 800e928:	42a9      	cmp	r1, r5
 800e92a:	d904      	bls.n	800e936 <_malloc_r+0x26>
 800e92c:	230c      	movs	r3, #12
 800e92e:	6033      	str	r3, [r6, #0]
 800e930:	2000      	movs	r0, #0
 800e932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e936:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ea0c <_malloc_r+0xfc>
 800e93a:	f000 faa1 	bl	800ee80 <__malloc_lock>
 800e93e:	f8d8 3000 	ldr.w	r3, [r8]
 800e942:	461c      	mov	r4, r3
 800e944:	bb44      	cbnz	r4, 800e998 <_malloc_r+0x88>
 800e946:	4629      	mov	r1, r5
 800e948:	4630      	mov	r0, r6
 800e94a:	f7ff ffbf 	bl	800e8cc <sbrk_aligned>
 800e94e:	1c43      	adds	r3, r0, #1
 800e950:	4604      	mov	r4, r0
 800e952:	d158      	bne.n	800ea06 <_malloc_r+0xf6>
 800e954:	f8d8 4000 	ldr.w	r4, [r8]
 800e958:	4627      	mov	r7, r4
 800e95a:	2f00      	cmp	r7, #0
 800e95c:	d143      	bne.n	800e9e6 <_malloc_r+0xd6>
 800e95e:	2c00      	cmp	r4, #0
 800e960:	d04b      	beq.n	800e9fa <_malloc_r+0xea>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	4639      	mov	r1, r7
 800e966:	4630      	mov	r0, r6
 800e968:	eb04 0903 	add.w	r9, r4, r3
 800e96c:	f000 fc14 	bl	800f198 <_sbrk_r>
 800e970:	4581      	cmp	r9, r0
 800e972:	d142      	bne.n	800e9fa <_malloc_r+0xea>
 800e974:	6821      	ldr	r1, [r4, #0]
 800e976:	1a6d      	subs	r5, r5, r1
 800e978:	4629      	mov	r1, r5
 800e97a:	4630      	mov	r0, r6
 800e97c:	f7ff ffa6 	bl	800e8cc <sbrk_aligned>
 800e980:	3001      	adds	r0, #1
 800e982:	d03a      	beq.n	800e9fa <_malloc_r+0xea>
 800e984:	6823      	ldr	r3, [r4, #0]
 800e986:	442b      	add	r3, r5
 800e988:	6023      	str	r3, [r4, #0]
 800e98a:	f8d8 3000 	ldr.w	r3, [r8]
 800e98e:	685a      	ldr	r2, [r3, #4]
 800e990:	bb62      	cbnz	r2, 800e9ec <_malloc_r+0xdc>
 800e992:	f8c8 7000 	str.w	r7, [r8]
 800e996:	e00f      	b.n	800e9b8 <_malloc_r+0xa8>
 800e998:	6822      	ldr	r2, [r4, #0]
 800e99a:	1b52      	subs	r2, r2, r5
 800e99c:	d420      	bmi.n	800e9e0 <_malloc_r+0xd0>
 800e99e:	2a0b      	cmp	r2, #11
 800e9a0:	d917      	bls.n	800e9d2 <_malloc_r+0xc2>
 800e9a2:	1961      	adds	r1, r4, r5
 800e9a4:	42a3      	cmp	r3, r4
 800e9a6:	6025      	str	r5, [r4, #0]
 800e9a8:	bf18      	it	ne
 800e9aa:	6059      	strne	r1, [r3, #4]
 800e9ac:	6863      	ldr	r3, [r4, #4]
 800e9ae:	bf08      	it	eq
 800e9b0:	f8c8 1000 	streq.w	r1, [r8]
 800e9b4:	5162      	str	r2, [r4, r5]
 800e9b6:	604b      	str	r3, [r1, #4]
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f000 fa67 	bl	800ee8c <__malloc_unlock>
 800e9be:	f104 000b 	add.w	r0, r4, #11
 800e9c2:	1d23      	adds	r3, r4, #4
 800e9c4:	f020 0007 	bic.w	r0, r0, #7
 800e9c8:	1ac2      	subs	r2, r0, r3
 800e9ca:	bf1c      	itt	ne
 800e9cc:	1a1b      	subne	r3, r3, r0
 800e9ce:	50a3      	strne	r3, [r4, r2]
 800e9d0:	e7af      	b.n	800e932 <_malloc_r+0x22>
 800e9d2:	6862      	ldr	r2, [r4, #4]
 800e9d4:	42a3      	cmp	r3, r4
 800e9d6:	bf0c      	ite	eq
 800e9d8:	f8c8 2000 	streq.w	r2, [r8]
 800e9dc:	605a      	strne	r2, [r3, #4]
 800e9de:	e7eb      	b.n	800e9b8 <_malloc_r+0xa8>
 800e9e0:	4623      	mov	r3, r4
 800e9e2:	6864      	ldr	r4, [r4, #4]
 800e9e4:	e7ae      	b.n	800e944 <_malloc_r+0x34>
 800e9e6:	463c      	mov	r4, r7
 800e9e8:	687f      	ldr	r7, [r7, #4]
 800e9ea:	e7b6      	b.n	800e95a <_malloc_r+0x4a>
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	42a3      	cmp	r3, r4
 800e9f2:	d1fb      	bne.n	800e9ec <_malloc_r+0xdc>
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	6053      	str	r3, [r2, #4]
 800e9f8:	e7de      	b.n	800e9b8 <_malloc_r+0xa8>
 800e9fa:	230c      	movs	r3, #12
 800e9fc:	6033      	str	r3, [r6, #0]
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f000 fa44 	bl	800ee8c <__malloc_unlock>
 800ea04:	e794      	b.n	800e930 <_malloc_r+0x20>
 800ea06:	6005      	str	r5, [r0, #0]
 800ea08:	e7d6      	b.n	800e9b8 <_malloc_r+0xa8>
 800ea0a:	bf00      	nop
 800ea0c:	240107f4 	.word	0x240107f4

0800ea10 <_printf_common>:
 800ea10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea14:	4616      	mov	r6, r2
 800ea16:	4698      	mov	r8, r3
 800ea18:	688a      	ldr	r2, [r1, #8]
 800ea1a:	690b      	ldr	r3, [r1, #16]
 800ea1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea20:	4293      	cmp	r3, r2
 800ea22:	bfb8      	it	lt
 800ea24:	4613      	movlt	r3, r2
 800ea26:	6033      	str	r3, [r6, #0]
 800ea28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea2c:	4607      	mov	r7, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	b10a      	cbz	r2, 800ea36 <_printf_common+0x26>
 800ea32:	3301      	adds	r3, #1
 800ea34:	6033      	str	r3, [r6, #0]
 800ea36:	6823      	ldr	r3, [r4, #0]
 800ea38:	0699      	lsls	r1, r3, #26
 800ea3a:	bf42      	ittt	mi
 800ea3c:	6833      	ldrmi	r3, [r6, #0]
 800ea3e:	3302      	addmi	r3, #2
 800ea40:	6033      	strmi	r3, [r6, #0]
 800ea42:	6825      	ldr	r5, [r4, #0]
 800ea44:	f015 0506 	ands.w	r5, r5, #6
 800ea48:	d106      	bne.n	800ea58 <_printf_common+0x48>
 800ea4a:	f104 0a19 	add.w	sl, r4, #25
 800ea4e:	68e3      	ldr	r3, [r4, #12]
 800ea50:	6832      	ldr	r2, [r6, #0]
 800ea52:	1a9b      	subs	r3, r3, r2
 800ea54:	42ab      	cmp	r3, r5
 800ea56:	dc26      	bgt.n	800eaa6 <_printf_common+0x96>
 800ea58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea5c:	6822      	ldr	r2, [r4, #0]
 800ea5e:	3b00      	subs	r3, #0
 800ea60:	bf18      	it	ne
 800ea62:	2301      	movne	r3, #1
 800ea64:	0692      	lsls	r2, r2, #26
 800ea66:	d42b      	bmi.n	800eac0 <_printf_common+0xb0>
 800ea68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea6c:	4641      	mov	r1, r8
 800ea6e:	4638      	mov	r0, r7
 800ea70:	47c8      	blx	r9
 800ea72:	3001      	adds	r0, #1
 800ea74:	d01e      	beq.n	800eab4 <_printf_common+0xa4>
 800ea76:	6823      	ldr	r3, [r4, #0]
 800ea78:	6922      	ldr	r2, [r4, #16]
 800ea7a:	f003 0306 	and.w	r3, r3, #6
 800ea7e:	2b04      	cmp	r3, #4
 800ea80:	bf02      	ittt	eq
 800ea82:	68e5      	ldreq	r5, [r4, #12]
 800ea84:	6833      	ldreq	r3, [r6, #0]
 800ea86:	1aed      	subeq	r5, r5, r3
 800ea88:	68a3      	ldr	r3, [r4, #8]
 800ea8a:	bf0c      	ite	eq
 800ea8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea90:	2500      	movne	r5, #0
 800ea92:	4293      	cmp	r3, r2
 800ea94:	bfc4      	itt	gt
 800ea96:	1a9b      	subgt	r3, r3, r2
 800ea98:	18ed      	addgt	r5, r5, r3
 800ea9a:	2600      	movs	r6, #0
 800ea9c:	341a      	adds	r4, #26
 800ea9e:	42b5      	cmp	r5, r6
 800eaa0:	d11a      	bne.n	800ead8 <_printf_common+0xc8>
 800eaa2:	2000      	movs	r0, #0
 800eaa4:	e008      	b.n	800eab8 <_printf_common+0xa8>
 800eaa6:	2301      	movs	r3, #1
 800eaa8:	4652      	mov	r2, sl
 800eaaa:	4641      	mov	r1, r8
 800eaac:	4638      	mov	r0, r7
 800eaae:	47c8      	blx	r9
 800eab0:	3001      	adds	r0, #1
 800eab2:	d103      	bne.n	800eabc <_printf_common+0xac>
 800eab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eabc:	3501      	adds	r5, #1
 800eabe:	e7c6      	b.n	800ea4e <_printf_common+0x3e>
 800eac0:	18e1      	adds	r1, r4, r3
 800eac2:	1c5a      	adds	r2, r3, #1
 800eac4:	2030      	movs	r0, #48	@ 0x30
 800eac6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eaca:	4422      	add	r2, r4
 800eacc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ead0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ead4:	3302      	adds	r3, #2
 800ead6:	e7c7      	b.n	800ea68 <_printf_common+0x58>
 800ead8:	2301      	movs	r3, #1
 800eada:	4622      	mov	r2, r4
 800eadc:	4641      	mov	r1, r8
 800eade:	4638      	mov	r0, r7
 800eae0:	47c8      	blx	r9
 800eae2:	3001      	adds	r0, #1
 800eae4:	d0e6      	beq.n	800eab4 <_printf_common+0xa4>
 800eae6:	3601      	adds	r6, #1
 800eae8:	e7d9      	b.n	800ea9e <_printf_common+0x8e>
	...

0800eaec <_printf_i>:
 800eaec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaf0:	7e0f      	ldrb	r7, [r1, #24]
 800eaf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eaf4:	2f78      	cmp	r7, #120	@ 0x78
 800eaf6:	4691      	mov	r9, r2
 800eaf8:	4680      	mov	r8, r0
 800eafa:	460c      	mov	r4, r1
 800eafc:	469a      	mov	sl, r3
 800eafe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb02:	d807      	bhi.n	800eb14 <_printf_i+0x28>
 800eb04:	2f62      	cmp	r7, #98	@ 0x62
 800eb06:	d80a      	bhi.n	800eb1e <_printf_i+0x32>
 800eb08:	2f00      	cmp	r7, #0
 800eb0a:	f000 80d1 	beq.w	800ecb0 <_printf_i+0x1c4>
 800eb0e:	2f58      	cmp	r7, #88	@ 0x58
 800eb10:	f000 80b8 	beq.w	800ec84 <_printf_i+0x198>
 800eb14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb1c:	e03a      	b.n	800eb94 <_printf_i+0xa8>
 800eb1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb22:	2b15      	cmp	r3, #21
 800eb24:	d8f6      	bhi.n	800eb14 <_printf_i+0x28>
 800eb26:	a101      	add	r1, pc, #4	@ (adr r1, 800eb2c <_printf_i+0x40>)
 800eb28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb2c:	0800eb85 	.word	0x0800eb85
 800eb30:	0800eb99 	.word	0x0800eb99
 800eb34:	0800eb15 	.word	0x0800eb15
 800eb38:	0800eb15 	.word	0x0800eb15
 800eb3c:	0800eb15 	.word	0x0800eb15
 800eb40:	0800eb15 	.word	0x0800eb15
 800eb44:	0800eb99 	.word	0x0800eb99
 800eb48:	0800eb15 	.word	0x0800eb15
 800eb4c:	0800eb15 	.word	0x0800eb15
 800eb50:	0800eb15 	.word	0x0800eb15
 800eb54:	0800eb15 	.word	0x0800eb15
 800eb58:	0800ec97 	.word	0x0800ec97
 800eb5c:	0800ebc3 	.word	0x0800ebc3
 800eb60:	0800ec51 	.word	0x0800ec51
 800eb64:	0800eb15 	.word	0x0800eb15
 800eb68:	0800eb15 	.word	0x0800eb15
 800eb6c:	0800ecb9 	.word	0x0800ecb9
 800eb70:	0800eb15 	.word	0x0800eb15
 800eb74:	0800ebc3 	.word	0x0800ebc3
 800eb78:	0800eb15 	.word	0x0800eb15
 800eb7c:	0800eb15 	.word	0x0800eb15
 800eb80:	0800ec59 	.word	0x0800ec59
 800eb84:	6833      	ldr	r3, [r6, #0]
 800eb86:	1d1a      	adds	r2, r3, #4
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	6032      	str	r2, [r6, #0]
 800eb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb94:	2301      	movs	r3, #1
 800eb96:	e09c      	b.n	800ecd2 <_printf_i+0x1e6>
 800eb98:	6833      	ldr	r3, [r6, #0]
 800eb9a:	6820      	ldr	r0, [r4, #0]
 800eb9c:	1d19      	adds	r1, r3, #4
 800eb9e:	6031      	str	r1, [r6, #0]
 800eba0:	0606      	lsls	r6, r0, #24
 800eba2:	d501      	bpl.n	800eba8 <_printf_i+0xbc>
 800eba4:	681d      	ldr	r5, [r3, #0]
 800eba6:	e003      	b.n	800ebb0 <_printf_i+0xc4>
 800eba8:	0645      	lsls	r5, r0, #25
 800ebaa:	d5fb      	bpl.n	800eba4 <_printf_i+0xb8>
 800ebac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebb0:	2d00      	cmp	r5, #0
 800ebb2:	da03      	bge.n	800ebbc <_printf_i+0xd0>
 800ebb4:	232d      	movs	r3, #45	@ 0x2d
 800ebb6:	426d      	negs	r5, r5
 800ebb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebbc:	4858      	ldr	r0, [pc, #352]	@ (800ed20 <_printf_i+0x234>)
 800ebbe:	230a      	movs	r3, #10
 800ebc0:	e011      	b.n	800ebe6 <_printf_i+0xfa>
 800ebc2:	6821      	ldr	r1, [r4, #0]
 800ebc4:	6833      	ldr	r3, [r6, #0]
 800ebc6:	0608      	lsls	r0, r1, #24
 800ebc8:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebcc:	d402      	bmi.n	800ebd4 <_printf_i+0xe8>
 800ebce:	0649      	lsls	r1, r1, #25
 800ebd0:	bf48      	it	mi
 800ebd2:	b2ad      	uxthmi	r5, r5
 800ebd4:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebd6:	4852      	ldr	r0, [pc, #328]	@ (800ed20 <_printf_i+0x234>)
 800ebd8:	6033      	str	r3, [r6, #0]
 800ebda:	bf14      	ite	ne
 800ebdc:	230a      	movne	r3, #10
 800ebde:	2308      	moveq	r3, #8
 800ebe0:	2100      	movs	r1, #0
 800ebe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebe6:	6866      	ldr	r6, [r4, #4]
 800ebe8:	60a6      	str	r6, [r4, #8]
 800ebea:	2e00      	cmp	r6, #0
 800ebec:	db05      	blt.n	800ebfa <_printf_i+0x10e>
 800ebee:	6821      	ldr	r1, [r4, #0]
 800ebf0:	432e      	orrs	r6, r5
 800ebf2:	f021 0104 	bic.w	r1, r1, #4
 800ebf6:	6021      	str	r1, [r4, #0]
 800ebf8:	d04b      	beq.n	800ec92 <_printf_i+0x1a6>
 800ebfa:	4616      	mov	r6, r2
 800ebfc:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec00:	fb03 5711 	mls	r7, r3, r1, r5
 800ec04:	5dc7      	ldrb	r7, [r0, r7]
 800ec06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec0a:	462f      	mov	r7, r5
 800ec0c:	42bb      	cmp	r3, r7
 800ec0e:	460d      	mov	r5, r1
 800ec10:	d9f4      	bls.n	800ebfc <_printf_i+0x110>
 800ec12:	2b08      	cmp	r3, #8
 800ec14:	d10b      	bne.n	800ec2e <_printf_i+0x142>
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	07df      	lsls	r7, r3, #31
 800ec1a:	d508      	bpl.n	800ec2e <_printf_i+0x142>
 800ec1c:	6923      	ldr	r3, [r4, #16]
 800ec1e:	6861      	ldr	r1, [r4, #4]
 800ec20:	4299      	cmp	r1, r3
 800ec22:	bfde      	ittt	le
 800ec24:	2330      	movle	r3, #48	@ 0x30
 800ec26:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec2a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ec2e:	1b92      	subs	r2, r2, r6
 800ec30:	6122      	str	r2, [r4, #16]
 800ec32:	f8cd a000 	str.w	sl, [sp]
 800ec36:	464b      	mov	r3, r9
 800ec38:	aa03      	add	r2, sp, #12
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4640      	mov	r0, r8
 800ec3e:	f7ff fee7 	bl	800ea10 <_printf_common>
 800ec42:	3001      	adds	r0, #1
 800ec44:	d14a      	bne.n	800ecdc <_printf_i+0x1f0>
 800ec46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec4a:	b004      	add	sp, #16
 800ec4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	f043 0320 	orr.w	r3, r3, #32
 800ec56:	6023      	str	r3, [r4, #0]
 800ec58:	4832      	ldr	r0, [pc, #200]	@ (800ed24 <_printf_i+0x238>)
 800ec5a:	2778      	movs	r7, #120	@ 0x78
 800ec5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec60:	6823      	ldr	r3, [r4, #0]
 800ec62:	6831      	ldr	r1, [r6, #0]
 800ec64:	061f      	lsls	r7, r3, #24
 800ec66:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec6a:	d402      	bmi.n	800ec72 <_printf_i+0x186>
 800ec6c:	065f      	lsls	r7, r3, #25
 800ec6e:	bf48      	it	mi
 800ec70:	b2ad      	uxthmi	r5, r5
 800ec72:	6031      	str	r1, [r6, #0]
 800ec74:	07d9      	lsls	r1, r3, #31
 800ec76:	bf44      	itt	mi
 800ec78:	f043 0320 	orrmi.w	r3, r3, #32
 800ec7c:	6023      	strmi	r3, [r4, #0]
 800ec7e:	b11d      	cbz	r5, 800ec88 <_printf_i+0x19c>
 800ec80:	2310      	movs	r3, #16
 800ec82:	e7ad      	b.n	800ebe0 <_printf_i+0xf4>
 800ec84:	4826      	ldr	r0, [pc, #152]	@ (800ed20 <_printf_i+0x234>)
 800ec86:	e7e9      	b.n	800ec5c <_printf_i+0x170>
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	f023 0320 	bic.w	r3, r3, #32
 800ec8e:	6023      	str	r3, [r4, #0]
 800ec90:	e7f6      	b.n	800ec80 <_printf_i+0x194>
 800ec92:	4616      	mov	r6, r2
 800ec94:	e7bd      	b.n	800ec12 <_printf_i+0x126>
 800ec96:	6833      	ldr	r3, [r6, #0]
 800ec98:	6825      	ldr	r5, [r4, #0]
 800ec9a:	6961      	ldr	r1, [r4, #20]
 800ec9c:	1d18      	adds	r0, r3, #4
 800ec9e:	6030      	str	r0, [r6, #0]
 800eca0:	062e      	lsls	r6, r5, #24
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	d501      	bpl.n	800ecaa <_printf_i+0x1be>
 800eca6:	6019      	str	r1, [r3, #0]
 800eca8:	e002      	b.n	800ecb0 <_printf_i+0x1c4>
 800ecaa:	0668      	lsls	r0, r5, #25
 800ecac:	d5fb      	bpl.n	800eca6 <_printf_i+0x1ba>
 800ecae:	8019      	strh	r1, [r3, #0]
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	4616      	mov	r6, r2
 800ecb6:	e7bc      	b.n	800ec32 <_printf_i+0x146>
 800ecb8:	6833      	ldr	r3, [r6, #0]
 800ecba:	1d1a      	adds	r2, r3, #4
 800ecbc:	6032      	str	r2, [r6, #0]
 800ecbe:	681e      	ldr	r6, [r3, #0]
 800ecc0:	6862      	ldr	r2, [r4, #4]
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f7f1 fb23 	bl	8000310 <memchr>
 800ecca:	b108      	cbz	r0, 800ecd0 <_printf_i+0x1e4>
 800eccc:	1b80      	subs	r0, r0, r6
 800ecce:	6060      	str	r0, [r4, #4]
 800ecd0:	6863      	ldr	r3, [r4, #4]
 800ecd2:	6123      	str	r3, [r4, #16]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ecda:	e7aa      	b.n	800ec32 <_printf_i+0x146>
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	4632      	mov	r2, r6
 800ece0:	4649      	mov	r1, r9
 800ece2:	4640      	mov	r0, r8
 800ece4:	47d0      	blx	sl
 800ece6:	3001      	adds	r0, #1
 800ece8:	d0ad      	beq.n	800ec46 <_printf_i+0x15a>
 800ecea:	6823      	ldr	r3, [r4, #0]
 800ecec:	079b      	lsls	r3, r3, #30
 800ecee:	d413      	bmi.n	800ed18 <_printf_i+0x22c>
 800ecf0:	68e0      	ldr	r0, [r4, #12]
 800ecf2:	9b03      	ldr	r3, [sp, #12]
 800ecf4:	4298      	cmp	r0, r3
 800ecf6:	bfb8      	it	lt
 800ecf8:	4618      	movlt	r0, r3
 800ecfa:	e7a6      	b.n	800ec4a <_printf_i+0x15e>
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	4632      	mov	r2, r6
 800ed00:	4649      	mov	r1, r9
 800ed02:	4640      	mov	r0, r8
 800ed04:	47d0      	blx	sl
 800ed06:	3001      	adds	r0, #1
 800ed08:	d09d      	beq.n	800ec46 <_printf_i+0x15a>
 800ed0a:	3501      	adds	r5, #1
 800ed0c:	68e3      	ldr	r3, [r4, #12]
 800ed0e:	9903      	ldr	r1, [sp, #12]
 800ed10:	1a5b      	subs	r3, r3, r1
 800ed12:	42ab      	cmp	r3, r5
 800ed14:	dcf2      	bgt.n	800ecfc <_printf_i+0x210>
 800ed16:	e7eb      	b.n	800ecf0 <_printf_i+0x204>
 800ed18:	2500      	movs	r5, #0
 800ed1a:	f104 0619 	add.w	r6, r4, #25
 800ed1e:	e7f5      	b.n	800ed0c <_printf_i+0x220>
 800ed20:	08011c7e 	.word	0x08011c7e
 800ed24:	08011c8f 	.word	0x08011c8f

0800ed28 <__sflush_r>:
 800ed28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed30:	0716      	lsls	r6, r2, #28
 800ed32:	4605      	mov	r5, r0
 800ed34:	460c      	mov	r4, r1
 800ed36:	d454      	bmi.n	800ede2 <__sflush_r+0xba>
 800ed38:	684b      	ldr	r3, [r1, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	dc02      	bgt.n	800ed44 <__sflush_r+0x1c>
 800ed3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	dd48      	ble.n	800edd6 <__sflush_r+0xae>
 800ed44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed46:	2e00      	cmp	r6, #0
 800ed48:	d045      	beq.n	800edd6 <__sflush_r+0xae>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed50:	682f      	ldr	r7, [r5, #0]
 800ed52:	6a21      	ldr	r1, [r4, #32]
 800ed54:	602b      	str	r3, [r5, #0]
 800ed56:	d030      	beq.n	800edba <__sflush_r+0x92>
 800ed58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed5a:	89a3      	ldrh	r3, [r4, #12]
 800ed5c:	0759      	lsls	r1, r3, #29
 800ed5e:	d505      	bpl.n	800ed6c <__sflush_r+0x44>
 800ed60:	6863      	ldr	r3, [r4, #4]
 800ed62:	1ad2      	subs	r2, r2, r3
 800ed64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed66:	b10b      	cbz	r3, 800ed6c <__sflush_r+0x44>
 800ed68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed6a:	1ad2      	subs	r2, r2, r3
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed70:	6a21      	ldr	r1, [r4, #32]
 800ed72:	4628      	mov	r0, r5
 800ed74:	47b0      	blx	r6
 800ed76:	1c43      	adds	r3, r0, #1
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	d106      	bne.n	800ed8a <__sflush_r+0x62>
 800ed7c:	6829      	ldr	r1, [r5, #0]
 800ed7e:	291d      	cmp	r1, #29
 800ed80:	d82b      	bhi.n	800edda <__sflush_r+0xb2>
 800ed82:	4a2a      	ldr	r2, [pc, #168]	@ (800ee2c <__sflush_r+0x104>)
 800ed84:	40ca      	lsrs	r2, r1
 800ed86:	07d6      	lsls	r6, r2, #31
 800ed88:	d527      	bpl.n	800edda <__sflush_r+0xb2>
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	6062      	str	r2, [r4, #4]
 800ed8e:	04d9      	lsls	r1, r3, #19
 800ed90:	6922      	ldr	r2, [r4, #16]
 800ed92:	6022      	str	r2, [r4, #0]
 800ed94:	d504      	bpl.n	800eda0 <__sflush_r+0x78>
 800ed96:	1c42      	adds	r2, r0, #1
 800ed98:	d101      	bne.n	800ed9e <__sflush_r+0x76>
 800ed9a:	682b      	ldr	r3, [r5, #0]
 800ed9c:	b903      	cbnz	r3, 800eda0 <__sflush_r+0x78>
 800ed9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eda2:	602f      	str	r7, [r5, #0]
 800eda4:	b1b9      	cbz	r1, 800edd6 <__sflush_r+0xae>
 800eda6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edaa:	4299      	cmp	r1, r3
 800edac:	d002      	beq.n	800edb4 <__sflush_r+0x8c>
 800edae:	4628      	mov	r0, r5
 800edb0:	f7ff fbf8 	bl	800e5a4 <_free_r>
 800edb4:	2300      	movs	r3, #0
 800edb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800edb8:	e00d      	b.n	800edd6 <__sflush_r+0xae>
 800edba:	2301      	movs	r3, #1
 800edbc:	4628      	mov	r0, r5
 800edbe:	47b0      	blx	r6
 800edc0:	4602      	mov	r2, r0
 800edc2:	1c50      	adds	r0, r2, #1
 800edc4:	d1c9      	bne.n	800ed5a <__sflush_r+0x32>
 800edc6:	682b      	ldr	r3, [r5, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d0c6      	beq.n	800ed5a <__sflush_r+0x32>
 800edcc:	2b1d      	cmp	r3, #29
 800edce:	d001      	beq.n	800edd4 <__sflush_r+0xac>
 800edd0:	2b16      	cmp	r3, #22
 800edd2:	d11e      	bne.n	800ee12 <__sflush_r+0xea>
 800edd4:	602f      	str	r7, [r5, #0]
 800edd6:	2000      	movs	r0, #0
 800edd8:	e022      	b.n	800ee20 <__sflush_r+0xf8>
 800edda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edde:	b21b      	sxth	r3, r3
 800ede0:	e01b      	b.n	800ee1a <__sflush_r+0xf2>
 800ede2:	690f      	ldr	r7, [r1, #16]
 800ede4:	2f00      	cmp	r7, #0
 800ede6:	d0f6      	beq.n	800edd6 <__sflush_r+0xae>
 800ede8:	0793      	lsls	r3, r2, #30
 800edea:	680e      	ldr	r6, [r1, #0]
 800edec:	bf08      	it	eq
 800edee:	694b      	ldreq	r3, [r1, #20]
 800edf0:	600f      	str	r7, [r1, #0]
 800edf2:	bf18      	it	ne
 800edf4:	2300      	movne	r3, #0
 800edf6:	eba6 0807 	sub.w	r8, r6, r7
 800edfa:	608b      	str	r3, [r1, #8]
 800edfc:	f1b8 0f00 	cmp.w	r8, #0
 800ee00:	dde9      	ble.n	800edd6 <__sflush_r+0xae>
 800ee02:	6a21      	ldr	r1, [r4, #32]
 800ee04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee06:	4643      	mov	r3, r8
 800ee08:	463a      	mov	r2, r7
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	47b0      	blx	r6
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	dc08      	bgt.n	800ee24 <__sflush_r+0xfc>
 800ee12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ee20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee24:	4407      	add	r7, r0
 800ee26:	eba8 0800 	sub.w	r8, r8, r0
 800ee2a:	e7e7      	b.n	800edfc <__sflush_r+0xd4>
 800ee2c:	20400001 	.word	0x20400001

0800ee30 <_fflush_r>:
 800ee30:	b538      	push	{r3, r4, r5, lr}
 800ee32:	690b      	ldr	r3, [r1, #16]
 800ee34:	4605      	mov	r5, r0
 800ee36:	460c      	mov	r4, r1
 800ee38:	b913      	cbnz	r3, 800ee40 <_fflush_r+0x10>
 800ee3a:	2500      	movs	r5, #0
 800ee3c:	4628      	mov	r0, r5
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}
 800ee40:	b118      	cbz	r0, 800ee4a <_fflush_r+0x1a>
 800ee42:	6a03      	ldr	r3, [r0, #32]
 800ee44:	b90b      	cbnz	r3, 800ee4a <_fflush_r+0x1a>
 800ee46:	f7ff fa9b 	bl	800e380 <__sinit>
 800ee4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d0f3      	beq.n	800ee3a <_fflush_r+0xa>
 800ee52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee54:	07d0      	lsls	r0, r2, #31
 800ee56:	d404      	bmi.n	800ee62 <_fflush_r+0x32>
 800ee58:	0599      	lsls	r1, r3, #22
 800ee5a:	d402      	bmi.n	800ee62 <_fflush_r+0x32>
 800ee5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee5e:	f7ff fb14 	bl	800e48a <__retarget_lock_acquire_recursive>
 800ee62:	4628      	mov	r0, r5
 800ee64:	4621      	mov	r1, r4
 800ee66:	f7ff ff5f 	bl	800ed28 <__sflush_r>
 800ee6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee6c:	07da      	lsls	r2, r3, #31
 800ee6e:	4605      	mov	r5, r0
 800ee70:	d4e4      	bmi.n	800ee3c <_fflush_r+0xc>
 800ee72:	89a3      	ldrh	r3, [r4, #12]
 800ee74:	059b      	lsls	r3, r3, #22
 800ee76:	d4e1      	bmi.n	800ee3c <_fflush_r+0xc>
 800ee78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee7a:	f7ff fb07 	bl	800e48c <__retarget_lock_release_recursive>
 800ee7e:	e7dd      	b.n	800ee3c <_fflush_r+0xc>

0800ee80 <__malloc_lock>:
 800ee80:	4801      	ldr	r0, [pc, #4]	@ (800ee88 <__malloc_lock+0x8>)
 800ee82:	f7ff bb02 	b.w	800e48a <__retarget_lock_acquire_recursive>
 800ee86:	bf00      	nop
 800ee88:	240107e8 	.word	0x240107e8

0800ee8c <__malloc_unlock>:
 800ee8c:	4801      	ldr	r0, [pc, #4]	@ (800ee94 <__malloc_unlock+0x8>)
 800ee8e:	f7ff bafd 	b.w	800e48c <__retarget_lock_release_recursive>
 800ee92:	bf00      	nop
 800ee94:	240107e8 	.word	0x240107e8

0800ee98 <__sread>:
 800ee98:	b510      	push	{r4, lr}
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eea0:	f000 f968 	bl	800f174 <_read_r>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	bfab      	itete	ge
 800eea8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eeaa:	89a3      	ldrhlt	r3, [r4, #12]
 800eeac:	181b      	addge	r3, r3, r0
 800eeae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eeb2:	bfac      	ite	ge
 800eeb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eeb6:	81a3      	strhlt	r3, [r4, #12]
 800eeb8:	bd10      	pop	{r4, pc}

0800eeba <__swrite>:
 800eeba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eebe:	461f      	mov	r7, r3
 800eec0:	898b      	ldrh	r3, [r1, #12]
 800eec2:	05db      	lsls	r3, r3, #23
 800eec4:	4605      	mov	r5, r0
 800eec6:	460c      	mov	r4, r1
 800eec8:	4616      	mov	r6, r2
 800eeca:	d505      	bpl.n	800eed8 <__swrite+0x1e>
 800eecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed0:	2302      	movs	r3, #2
 800eed2:	2200      	movs	r2, #0
 800eed4:	f000 f93c 	bl	800f150 <_lseek_r>
 800eed8:	89a3      	ldrh	r3, [r4, #12]
 800eeda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eee2:	81a3      	strh	r3, [r4, #12]
 800eee4:	4632      	mov	r2, r6
 800eee6:	463b      	mov	r3, r7
 800eee8:	4628      	mov	r0, r5
 800eeea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeee:	f000 b963 	b.w	800f1b8 <_write_r>

0800eef2 <__sseek>:
 800eef2:	b510      	push	{r4, lr}
 800eef4:	460c      	mov	r4, r1
 800eef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eefa:	f000 f929 	bl	800f150 <_lseek_r>
 800eefe:	1c43      	adds	r3, r0, #1
 800ef00:	89a3      	ldrh	r3, [r4, #12]
 800ef02:	bf15      	itete	ne
 800ef04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ef06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ef0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ef0e:	81a3      	strheq	r3, [r4, #12]
 800ef10:	bf18      	it	ne
 800ef12:	81a3      	strhne	r3, [r4, #12]
 800ef14:	bd10      	pop	{r4, pc}

0800ef16 <__sclose>:
 800ef16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef1a:	f000 b95f 	b.w	800f1dc <_close_r>
	...

0800ef20 <fiprintf>:
 800ef20:	b40e      	push	{r1, r2, r3}
 800ef22:	b503      	push	{r0, r1, lr}
 800ef24:	4601      	mov	r1, r0
 800ef26:	ab03      	add	r3, sp, #12
 800ef28:	4805      	ldr	r0, [pc, #20]	@ (800ef40 <fiprintf+0x20>)
 800ef2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef2e:	6800      	ldr	r0, [r0, #0]
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	f7ff fbab 	bl	800e68c <_vfiprintf_r>
 800ef36:	b002      	add	sp, #8
 800ef38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef3c:	b003      	add	sp, #12
 800ef3e:	4770      	bx	lr
 800ef40:	2400003c 	.word	0x2400003c

0800ef44 <__swbuf_r>:
 800ef44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef46:	460e      	mov	r6, r1
 800ef48:	4614      	mov	r4, r2
 800ef4a:	4605      	mov	r5, r0
 800ef4c:	b118      	cbz	r0, 800ef56 <__swbuf_r+0x12>
 800ef4e:	6a03      	ldr	r3, [r0, #32]
 800ef50:	b90b      	cbnz	r3, 800ef56 <__swbuf_r+0x12>
 800ef52:	f7ff fa15 	bl	800e380 <__sinit>
 800ef56:	69a3      	ldr	r3, [r4, #24]
 800ef58:	60a3      	str	r3, [r4, #8]
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	071a      	lsls	r2, r3, #28
 800ef5e:	d501      	bpl.n	800ef64 <__swbuf_r+0x20>
 800ef60:	6923      	ldr	r3, [r4, #16]
 800ef62:	b943      	cbnz	r3, 800ef76 <__swbuf_r+0x32>
 800ef64:	4621      	mov	r1, r4
 800ef66:	4628      	mov	r0, r5
 800ef68:	f000 f82a 	bl	800efc0 <__swsetup_r>
 800ef6c:	b118      	cbz	r0, 800ef76 <__swbuf_r+0x32>
 800ef6e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ef72:	4638      	mov	r0, r7
 800ef74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	6922      	ldr	r2, [r4, #16]
 800ef7a:	1a98      	subs	r0, r3, r2
 800ef7c:	6963      	ldr	r3, [r4, #20]
 800ef7e:	b2f6      	uxtb	r6, r6
 800ef80:	4283      	cmp	r3, r0
 800ef82:	4637      	mov	r7, r6
 800ef84:	dc05      	bgt.n	800ef92 <__swbuf_r+0x4e>
 800ef86:	4621      	mov	r1, r4
 800ef88:	4628      	mov	r0, r5
 800ef8a:	f7ff ff51 	bl	800ee30 <_fflush_r>
 800ef8e:	2800      	cmp	r0, #0
 800ef90:	d1ed      	bne.n	800ef6e <__swbuf_r+0x2a>
 800ef92:	68a3      	ldr	r3, [r4, #8]
 800ef94:	3b01      	subs	r3, #1
 800ef96:	60a3      	str	r3, [r4, #8]
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	1c5a      	adds	r2, r3, #1
 800ef9c:	6022      	str	r2, [r4, #0]
 800ef9e:	701e      	strb	r6, [r3, #0]
 800efa0:	6962      	ldr	r2, [r4, #20]
 800efa2:	1c43      	adds	r3, r0, #1
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d004      	beq.n	800efb2 <__swbuf_r+0x6e>
 800efa8:	89a3      	ldrh	r3, [r4, #12]
 800efaa:	07db      	lsls	r3, r3, #31
 800efac:	d5e1      	bpl.n	800ef72 <__swbuf_r+0x2e>
 800efae:	2e0a      	cmp	r6, #10
 800efb0:	d1df      	bne.n	800ef72 <__swbuf_r+0x2e>
 800efb2:	4621      	mov	r1, r4
 800efb4:	4628      	mov	r0, r5
 800efb6:	f7ff ff3b 	bl	800ee30 <_fflush_r>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d0d9      	beq.n	800ef72 <__swbuf_r+0x2e>
 800efbe:	e7d6      	b.n	800ef6e <__swbuf_r+0x2a>

0800efc0 <__swsetup_r>:
 800efc0:	b538      	push	{r3, r4, r5, lr}
 800efc2:	4b29      	ldr	r3, [pc, #164]	@ (800f068 <__swsetup_r+0xa8>)
 800efc4:	4605      	mov	r5, r0
 800efc6:	6818      	ldr	r0, [r3, #0]
 800efc8:	460c      	mov	r4, r1
 800efca:	b118      	cbz	r0, 800efd4 <__swsetup_r+0x14>
 800efcc:	6a03      	ldr	r3, [r0, #32]
 800efce:	b90b      	cbnz	r3, 800efd4 <__swsetup_r+0x14>
 800efd0:	f7ff f9d6 	bl	800e380 <__sinit>
 800efd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd8:	0719      	lsls	r1, r3, #28
 800efda:	d422      	bmi.n	800f022 <__swsetup_r+0x62>
 800efdc:	06da      	lsls	r2, r3, #27
 800efde:	d407      	bmi.n	800eff0 <__swsetup_r+0x30>
 800efe0:	2209      	movs	r2, #9
 800efe2:	602a      	str	r2, [r5, #0]
 800efe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe8:	81a3      	strh	r3, [r4, #12]
 800efea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efee:	e033      	b.n	800f058 <__swsetup_r+0x98>
 800eff0:	0758      	lsls	r0, r3, #29
 800eff2:	d512      	bpl.n	800f01a <__swsetup_r+0x5a>
 800eff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eff6:	b141      	cbz	r1, 800f00a <__swsetup_r+0x4a>
 800eff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800effc:	4299      	cmp	r1, r3
 800effe:	d002      	beq.n	800f006 <__swsetup_r+0x46>
 800f000:	4628      	mov	r0, r5
 800f002:	f7ff facf 	bl	800e5a4 <_free_r>
 800f006:	2300      	movs	r3, #0
 800f008:	6363      	str	r3, [r4, #52]	@ 0x34
 800f00a:	89a3      	ldrh	r3, [r4, #12]
 800f00c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f010:	81a3      	strh	r3, [r4, #12]
 800f012:	2300      	movs	r3, #0
 800f014:	6063      	str	r3, [r4, #4]
 800f016:	6923      	ldr	r3, [r4, #16]
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	f043 0308 	orr.w	r3, r3, #8
 800f020:	81a3      	strh	r3, [r4, #12]
 800f022:	6923      	ldr	r3, [r4, #16]
 800f024:	b94b      	cbnz	r3, 800f03a <__swsetup_r+0x7a>
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f02c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f030:	d003      	beq.n	800f03a <__swsetup_r+0x7a>
 800f032:	4621      	mov	r1, r4
 800f034:	4628      	mov	r0, r5
 800f036:	f000 f83f 	bl	800f0b8 <__smakebuf_r>
 800f03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f03e:	f013 0201 	ands.w	r2, r3, #1
 800f042:	d00a      	beq.n	800f05a <__swsetup_r+0x9a>
 800f044:	2200      	movs	r2, #0
 800f046:	60a2      	str	r2, [r4, #8]
 800f048:	6962      	ldr	r2, [r4, #20]
 800f04a:	4252      	negs	r2, r2
 800f04c:	61a2      	str	r2, [r4, #24]
 800f04e:	6922      	ldr	r2, [r4, #16]
 800f050:	b942      	cbnz	r2, 800f064 <__swsetup_r+0xa4>
 800f052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f056:	d1c5      	bne.n	800efe4 <__swsetup_r+0x24>
 800f058:	bd38      	pop	{r3, r4, r5, pc}
 800f05a:	0799      	lsls	r1, r3, #30
 800f05c:	bf58      	it	pl
 800f05e:	6962      	ldrpl	r2, [r4, #20]
 800f060:	60a2      	str	r2, [r4, #8]
 800f062:	e7f4      	b.n	800f04e <__swsetup_r+0x8e>
 800f064:	2000      	movs	r0, #0
 800f066:	e7f7      	b.n	800f058 <__swsetup_r+0x98>
 800f068:	2400003c 	.word	0x2400003c

0800f06c <__swhatbuf_r>:
 800f06c:	b570      	push	{r4, r5, r6, lr}
 800f06e:	460c      	mov	r4, r1
 800f070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f074:	2900      	cmp	r1, #0
 800f076:	b096      	sub	sp, #88	@ 0x58
 800f078:	4615      	mov	r5, r2
 800f07a:	461e      	mov	r6, r3
 800f07c:	da0d      	bge.n	800f09a <__swhatbuf_r+0x2e>
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f084:	f04f 0100 	mov.w	r1, #0
 800f088:	bf14      	ite	ne
 800f08a:	2340      	movne	r3, #64	@ 0x40
 800f08c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f090:	2000      	movs	r0, #0
 800f092:	6031      	str	r1, [r6, #0]
 800f094:	602b      	str	r3, [r5, #0]
 800f096:	b016      	add	sp, #88	@ 0x58
 800f098:	bd70      	pop	{r4, r5, r6, pc}
 800f09a:	466a      	mov	r2, sp
 800f09c:	f000 f8ae 	bl	800f1fc <_fstat_r>
 800f0a0:	2800      	cmp	r0, #0
 800f0a2:	dbec      	blt.n	800f07e <__swhatbuf_r+0x12>
 800f0a4:	9901      	ldr	r1, [sp, #4]
 800f0a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0ae:	4259      	negs	r1, r3
 800f0b0:	4159      	adcs	r1, r3
 800f0b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0b6:	e7eb      	b.n	800f090 <__swhatbuf_r+0x24>

0800f0b8 <__smakebuf_r>:
 800f0b8:	898b      	ldrh	r3, [r1, #12]
 800f0ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0bc:	079d      	lsls	r5, r3, #30
 800f0be:	4606      	mov	r6, r0
 800f0c0:	460c      	mov	r4, r1
 800f0c2:	d507      	bpl.n	800f0d4 <__smakebuf_r+0x1c>
 800f0c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0c8:	6023      	str	r3, [r4, #0]
 800f0ca:	6123      	str	r3, [r4, #16]
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	6163      	str	r3, [r4, #20]
 800f0d0:	b003      	add	sp, #12
 800f0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d4:	ab01      	add	r3, sp, #4
 800f0d6:	466a      	mov	r2, sp
 800f0d8:	f7ff ffc8 	bl	800f06c <__swhatbuf_r>
 800f0dc:	9f00      	ldr	r7, [sp, #0]
 800f0de:	4605      	mov	r5, r0
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7ff fc14 	bl	800e910 <_malloc_r>
 800f0e8:	b948      	cbnz	r0, 800f0fe <__smakebuf_r+0x46>
 800f0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0ee:	059a      	lsls	r2, r3, #22
 800f0f0:	d4ee      	bmi.n	800f0d0 <__smakebuf_r+0x18>
 800f0f2:	f023 0303 	bic.w	r3, r3, #3
 800f0f6:	f043 0302 	orr.w	r3, r3, #2
 800f0fa:	81a3      	strh	r3, [r4, #12]
 800f0fc:	e7e2      	b.n	800f0c4 <__smakebuf_r+0xc>
 800f0fe:	89a3      	ldrh	r3, [r4, #12]
 800f100:	6020      	str	r0, [r4, #0]
 800f102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f106:	81a3      	strh	r3, [r4, #12]
 800f108:	9b01      	ldr	r3, [sp, #4]
 800f10a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f10e:	b15b      	cbz	r3, 800f128 <__smakebuf_r+0x70>
 800f110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f114:	4630      	mov	r0, r6
 800f116:	f000 f80b 	bl	800f130 <_isatty_r>
 800f11a:	b128      	cbz	r0, 800f128 <__smakebuf_r+0x70>
 800f11c:	89a3      	ldrh	r3, [r4, #12]
 800f11e:	f023 0303 	bic.w	r3, r3, #3
 800f122:	f043 0301 	orr.w	r3, r3, #1
 800f126:	81a3      	strh	r3, [r4, #12]
 800f128:	89a3      	ldrh	r3, [r4, #12]
 800f12a:	431d      	orrs	r5, r3
 800f12c:	81a5      	strh	r5, [r4, #12]
 800f12e:	e7cf      	b.n	800f0d0 <__smakebuf_r+0x18>

0800f130 <_isatty_r>:
 800f130:	b538      	push	{r3, r4, r5, lr}
 800f132:	4d06      	ldr	r5, [pc, #24]	@ (800f14c <_isatty_r+0x1c>)
 800f134:	2300      	movs	r3, #0
 800f136:	4604      	mov	r4, r0
 800f138:	4608      	mov	r0, r1
 800f13a:	602b      	str	r3, [r5, #0]
 800f13c:	f7f2 faca 	bl	80016d4 <_isatty>
 800f140:	1c43      	adds	r3, r0, #1
 800f142:	d102      	bne.n	800f14a <_isatty_r+0x1a>
 800f144:	682b      	ldr	r3, [r5, #0]
 800f146:	b103      	cbz	r3, 800f14a <_isatty_r+0x1a>
 800f148:	6023      	str	r3, [r4, #0]
 800f14a:	bd38      	pop	{r3, r4, r5, pc}
 800f14c:	240107ec 	.word	0x240107ec

0800f150 <_lseek_r>:
 800f150:	b538      	push	{r3, r4, r5, lr}
 800f152:	4d07      	ldr	r5, [pc, #28]	@ (800f170 <_lseek_r+0x20>)
 800f154:	4604      	mov	r4, r0
 800f156:	4608      	mov	r0, r1
 800f158:	4611      	mov	r1, r2
 800f15a:	2200      	movs	r2, #0
 800f15c:	602a      	str	r2, [r5, #0]
 800f15e:	461a      	mov	r2, r3
 800f160:	f7f2 faba 	bl	80016d8 <_lseek>
 800f164:	1c43      	adds	r3, r0, #1
 800f166:	d102      	bne.n	800f16e <_lseek_r+0x1e>
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	b103      	cbz	r3, 800f16e <_lseek_r+0x1e>
 800f16c:	6023      	str	r3, [r4, #0]
 800f16e:	bd38      	pop	{r3, r4, r5, pc}
 800f170:	240107ec 	.word	0x240107ec

0800f174 <_read_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	@ (800f194 <_read_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f2 fa80 	bl	8001688 <_read>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_read_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_read_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	240107ec 	.word	0x240107ec

0800f198 <_sbrk_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d06      	ldr	r5, [pc, #24]	@ (800f1b4 <_sbrk_r+0x1c>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f2 fa9a 	bl	80016dc <_sbrk>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_sbrk_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_sbrk_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	240107ec 	.word	0x240107ec

0800f1b8 <_write_r>:
 800f1b8:	b538      	push	{r3, r4, r5, lr}
 800f1ba:	4d07      	ldr	r5, [pc, #28]	@ (800f1d8 <_write_r+0x20>)
 800f1bc:	4604      	mov	r4, r0
 800f1be:	4608      	mov	r0, r1
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	602a      	str	r2, [r5, #0]
 800f1c6:	461a      	mov	r2, r3
 800f1c8:	f7f2 fa6c 	bl	80016a4 <_write>
 800f1cc:	1c43      	adds	r3, r0, #1
 800f1ce:	d102      	bne.n	800f1d6 <_write_r+0x1e>
 800f1d0:	682b      	ldr	r3, [r5, #0]
 800f1d2:	b103      	cbz	r3, 800f1d6 <_write_r+0x1e>
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	bd38      	pop	{r3, r4, r5, pc}
 800f1d8:	240107ec 	.word	0x240107ec

0800f1dc <_close_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d06      	ldr	r5, [pc, #24]	@ (800f1f8 <_close_r+0x1c>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	f7f2 fa6a 	bl	80016c0 <_close>
 800f1ec:	1c43      	adds	r3, r0, #1
 800f1ee:	d102      	bne.n	800f1f6 <_close_r+0x1a>
 800f1f0:	682b      	ldr	r3, [r5, #0]
 800f1f2:	b103      	cbz	r3, 800f1f6 <_close_r+0x1a>
 800f1f4:	6023      	str	r3, [r4, #0]
 800f1f6:	bd38      	pop	{r3, r4, r5, pc}
 800f1f8:	240107ec 	.word	0x240107ec

0800f1fc <_fstat_r>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	4d07      	ldr	r5, [pc, #28]	@ (800f21c <_fstat_r+0x20>)
 800f200:	2300      	movs	r3, #0
 800f202:	4604      	mov	r4, r0
 800f204:	4608      	mov	r0, r1
 800f206:	4611      	mov	r1, r2
 800f208:	602b      	str	r3, [r5, #0]
 800f20a:	f7f2 fa5d 	bl	80016c8 <_fstat>
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	d102      	bne.n	800f218 <_fstat_r+0x1c>
 800f212:	682b      	ldr	r3, [r5, #0]
 800f214:	b103      	cbz	r3, 800f218 <_fstat_r+0x1c>
 800f216:	6023      	str	r3, [r4, #0]
 800f218:	bd38      	pop	{r3, r4, r5, pc}
 800f21a:	bf00      	nop
 800f21c:	240107ec 	.word	0x240107ec

0800f220 <abort>:
 800f220:	b508      	push	{r3, lr}
 800f222:	2006      	movs	r0, #6
 800f224:	f000 f82c 	bl	800f280 <raise>
 800f228:	2001      	movs	r0, #1
 800f22a:	f7f2 fa27 	bl	800167c <_exit>

0800f22e <_raise_r>:
 800f22e:	291f      	cmp	r1, #31
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4605      	mov	r5, r0
 800f234:	460c      	mov	r4, r1
 800f236:	d904      	bls.n	800f242 <_raise_r+0x14>
 800f238:	2316      	movs	r3, #22
 800f23a:	6003      	str	r3, [r0, #0]
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f240:	bd38      	pop	{r3, r4, r5, pc}
 800f242:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f244:	b112      	cbz	r2, 800f24c <_raise_r+0x1e>
 800f246:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f24a:	b94b      	cbnz	r3, 800f260 <_raise_r+0x32>
 800f24c:	4628      	mov	r0, r5
 800f24e:	f000 f831 	bl	800f2b4 <_getpid_r>
 800f252:	4622      	mov	r2, r4
 800f254:	4601      	mov	r1, r0
 800f256:	4628      	mov	r0, r5
 800f258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f25c:	f000 b818 	b.w	800f290 <_kill_r>
 800f260:	2b01      	cmp	r3, #1
 800f262:	d00a      	beq.n	800f27a <_raise_r+0x4c>
 800f264:	1c59      	adds	r1, r3, #1
 800f266:	d103      	bne.n	800f270 <_raise_r+0x42>
 800f268:	2316      	movs	r3, #22
 800f26a:	6003      	str	r3, [r0, #0]
 800f26c:	2001      	movs	r0, #1
 800f26e:	e7e7      	b.n	800f240 <_raise_r+0x12>
 800f270:	2100      	movs	r1, #0
 800f272:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f276:	4620      	mov	r0, r4
 800f278:	4798      	blx	r3
 800f27a:	2000      	movs	r0, #0
 800f27c:	e7e0      	b.n	800f240 <_raise_r+0x12>
	...

0800f280 <raise>:
 800f280:	4b02      	ldr	r3, [pc, #8]	@ (800f28c <raise+0xc>)
 800f282:	4601      	mov	r1, r0
 800f284:	6818      	ldr	r0, [r3, #0]
 800f286:	f7ff bfd2 	b.w	800f22e <_raise_r>
 800f28a:	bf00      	nop
 800f28c:	2400003c 	.word	0x2400003c

0800f290 <_kill_r>:
 800f290:	b538      	push	{r3, r4, r5, lr}
 800f292:	4d07      	ldr	r5, [pc, #28]	@ (800f2b0 <_kill_r+0x20>)
 800f294:	2300      	movs	r3, #0
 800f296:	4604      	mov	r4, r0
 800f298:	4608      	mov	r0, r1
 800f29a:	4611      	mov	r1, r2
 800f29c:	602b      	str	r3, [r5, #0]
 800f29e:	f7f2 f9e5 	bl	800166c <_kill>
 800f2a2:	1c43      	adds	r3, r0, #1
 800f2a4:	d102      	bne.n	800f2ac <_kill_r+0x1c>
 800f2a6:	682b      	ldr	r3, [r5, #0]
 800f2a8:	b103      	cbz	r3, 800f2ac <_kill_r+0x1c>
 800f2aa:	6023      	str	r3, [r4, #0]
 800f2ac:	bd38      	pop	{r3, r4, r5, pc}
 800f2ae:	bf00      	nop
 800f2b0:	240107ec 	.word	0x240107ec

0800f2b4 <_getpid_r>:
 800f2b4:	f7f2 b9d8 	b.w	8001668 <_getpid>

0800f2b8 <_init>:
 800f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2ba:	bf00      	nop
 800f2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2be:	bc08      	pop	{r3}
 800f2c0:	469e      	mov	lr, r3
 800f2c2:	4770      	bx	lr

0800f2c4 <_fini>:
 800f2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c6:	bf00      	nop
 800f2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ca:	bc08      	pop	{r3}
 800f2cc:	469e      	mov	lr, r3
 800f2ce:	4770      	bx	lr
